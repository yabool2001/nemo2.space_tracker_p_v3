
nemo2.space_tracker_p_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055e8  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a8c  080056a4  080056a4  000156a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007130  08007130  00020064  2**0
                  CONTENTS
  4 .ARM          00000008  08007130  08007130  00017130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007138  08007138  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007138  08007138  00017138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800713c  0800713c  0001713c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08007140  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000454  20000064  080071a4  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004b8  080071a4  000204b8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cfc5  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021bf  00000000  00000000  0002d094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000af0  00000000  00000000  0002f258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000890  00000000  00000000  0002fd48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c89f  00000000  00000000  000305d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f06b  00000000  00000000  0004ce77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b3428  00000000  00000000  0005bee2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002b80  00000000  00000000  0010f30c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00111e8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000064 	.word	0x20000064
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800568c 	.word	0x0800568c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000068 	.word	0x20000068
 8000100:	0800568c 	.word	0x0800568c

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	; 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_uldivmod>:
 8000414:	2b00      	cmp	r3, #0
 8000416:	d111      	bne.n	800043c <__aeabi_uldivmod+0x28>
 8000418:	2a00      	cmp	r2, #0
 800041a:	d10f      	bne.n	800043c <__aeabi_uldivmod+0x28>
 800041c:	2900      	cmp	r1, #0
 800041e:	d100      	bne.n	8000422 <__aeabi_uldivmod+0xe>
 8000420:	2800      	cmp	r0, #0
 8000422:	d002      	beq.n	800042a <__aeabi_uldivmod+0x16>
 8000424:	2100      	movs	r1, #0
 8000426:	43c9      	mvns	r1, r1
 8000428:	0008      	movs	r0, r1
 800042a:	b407      	push	{r0, r1, r2}
 800042c:	4802      	ldr	r0, [pc, #8]	; (8000438 <__aeabi_uldivmod+0x24>)
 800042e:	a102      	add	r1, pc, #8	; (adr r1, 8000438 <__aeabi_uldivmod+0x24>)
 8000430:	1840      	adds	r0, r0, r1
 8000432:	9002      	str	r0, [sp, #8]
 8000434:	bd03      	pop	{r0, r1, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	ffffffd9 	.word	0xffffffd9
 800043c:	b403      	push	{r0, r1}
 800043e:	4668      	mov	r0, sp
 8000440:	b501      	push	{r0, lr}
 8000442:	9802      	ldr	r0, [sp, #8]
 8000444:	f000 f806 	bl	8000454 <__udivmoddi4>
 8000448:	9b01      	ldr	r3, [sp, #4]
 800044a:	469e      	mov	lr, r3
 800044c:	b002      	add	sp, #8
 800044e:	bc0c      	pop	{r2, r3}
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__udivmoddi4>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	4657      	mov	r7, sl
 8000458:	464e      	mov	r6, r9
 800045a:	4645      	mov	r5, r8
 800045c:	46de      	mov	lr, fp
 800045e:	b5e0      	push	{r5, r6, r7, lr}
 8000460:	0004      	movs	r4, r0
 8000462:	000d      	movs	r5, r1
 8000464:	4692      	mov	sl, r2
 8000466:	4699      	mov	r9, r3
 8000468:	b083      	sub	sp, #12
 800046a:	428b      	cmp	r3, r1
 800046c:	d830      	bhi.n	80004d0 <__udivmoddi4+0x7c>
 800046e:	d02d      	beq.n	80004cc <__udivmoddi4+0x78>
 8000470:	4649      	mov	r1, r9
 8000472:	4650      	mov	r0, sl
 8000474:	f000 f8ba 	bl	80005ec <__clzdi2>
 8000478:	0029      	movs	r1, r5
 800047a:	0006      	movs	r6, r0
 800047c:	0020      	movs	r0, r4
 800047e:	f000 f8b5 	bl	80005ec <__clzdi2>
 8000482:	1a33      	subs	r3, r6, r0
 8000484:	4698      	mov	r8, r3
 8000486:	3b20      	subs	r3, #32
 8000488:	d434      	bmi.n	80004f4 <__udivmoddi4+0xa0>
 800048a:	469b      	mov	fp, r3
 800048c:	4653      	mov	r3, sl
 800048e:	465a      	mov	r2, fp
 8000490:	4093      	lsls	r3, r2
 8000492:	4642      	mov	r2, r8
 8000494:	001f      	movs	r7, r3
 8000496:	4653      	mov	r3, sl
 8000498:	4093      	lsls	r3, r2
 800049a:	001e      	movs	r6, r3
 800049c:	42af      	cmp	r7, r5
 800049e:	d83b      	bhi.n	8000518 <__udivmoddi4+0xc4>
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d100      	bne.n	80004a6 <__udivmoddi4+0x52>
 80004a4:	e079      	b.n	800059a <__udivmoddi4+0x146>
 80004a6:	465b      	mov	r3, fp
 80004a8:	1ba4      	subs	r4, r4, r6
 80004aa:	41bd      	sbcs	r5, r7
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	da00      	bge.n	80004b2 <__udivmoddi4+0x5e>
 80004b0:	e076      	b.n	80005a0 <__udivmoddi4+0x14c>
 80004b2:	2200      	movs	r2, #0
 80004b4:	2300      	movs	r3, #0
 80004b6:	9200      	str	r2, [sp, #0]
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	2301      	movs	r3, #1
 80004bc:	465a      	mov	r2, fp
 80004be:	4093      	lsls	r3, r2
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	2301      	movs	r3, #1
 80004c4:	4642      	mov	r2, r8
 80004c6:	4093      	lsls	r3, r2
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	e029      	b.n	8000520 <__udivmoddi4+0xcc>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d9cf      	bls.n	8000470 <__udivmoddi4+0x1c>
 80004d0:	2200      	movs	r2, #0
 80004d2:	2300      	movs	r3, #0
 80004d4:	9200      	str	r2, [sp, #0]
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <__udivmoddi4+0x8e>
 80004de:	601c      	str	r4, [r3, #0]
 80004e0:	605d      	str	r5, [r3, #4]
 80004e2:	9800      	ldr	r0, [sp, #0]
 80004e4:	9901      	ldr	r1, [sp, #4]
 80004e6:	b003      	add	sp, #12
 80004e8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ea:	46bb      	mov	fp, r7
 80004ec:	46b2      	mov	sl, r6
 80004ee:	46a9      	mov	r9, r5
 80004f0:	46a0      	mov	r8, r4
 80004f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f4:	4642      	mov	r2, r8
 80004f6:	469b      	mov	fp, r3
 80004f8:	2320      	movs	r3, #32
 80004fa:	1a9b      	subs	r3, r3, r2
 80004fc:	4652      	mov	r2, sl
 80004fe:	40da      	lsrs	r2, r3
 8000500:	4641      	mov	r1, r8
 8000502:	0013      	movs	r3, r2
 8000504:	464a      	mov	r2, r9
 8000506:	408a      	lsls	r2, r1
 8000508:	0017      	movs	r7, r2
 800050a:	4642      	mov	r2, r8
 800050c:	431f      	orrs	r7, r3
 800050e:	4653      	mov	r3, sl
 8000510:	4093      	lsls	r3, r2
 8000512:	001e      	movs	r6, r3
 8000514:	42af      	cmp	r7, r5
 8000516:	d9c3      	bls.n	80004a0 <__udivmoddi4+0x4c>
 8000518:	2200      	movs	r2, #0
 800051a:	2300      	movs	r3, #0
 800051c:	9200      	str	r2, [sp, #0]
 800051e:	9301      	str	r3, [sp, #4]
 8000520:	4643      	mov	r3, r8
 8000522:	2b00      	cmp	r3, #0
 8000524:	d0d8      	beq.n	80004d8 <__udivmoddi4+0x84>
 8000526:	07fb      	lsls	r3, r7, #31
 8000528:	0872      	lsrs	r2, r6, #1
 800052a:	431a      	orrs	r2, r3
 800052c:	4646      	mov	r6, r8
 800052e:	087b      	lsrs	r3, r7, #1
 8000530:	e00e      	b.n	8000550 <__udivmoddi4+0xfc>
 8000532:	42ab      	cmp	r3, r5
 8000534:	d101      	bne.n	800053a <__udivmoddi4+0xe6>
 8000536:	42a2      	cmp	r2, r4
 8000538:	d80c      	bhi.n	8000554 <__udivmoddi4+0x100>
 800053a:	1aa4      	subs	r4, r4, r2
 800053c:	419d      	sbcs	r5, r3
 800053e:	2001      	movs	r0, #1
 8000540:	1924      	adds	r4, r4, r4
 8000542:	416d      	adcs	r5, r5
 8000544:	2100      	movs	r1, #0
 8000546:	3e01      	subs	r6, #1
 8000548:	1824      	adds	r4, r4, r0
 800054a:	414d      	adcs	r5, r1
 800054c:	2e00      	cmp	r6, #0
 800054e:	d006      	beq.n	800055e <__udivmoddi4+0x10a>
 8000550:	42ab      	cmp	r3, r5
 8000552:	d9ee      	bls.n	8000532 <__udivmoddi4+0xde>
 8000554:	3e01      	subs	r6, #1
 8000556:	1924      	adds	r4, r4, r4
 8000558:	416d      	adcs	r5, r5
 800055a:	2e00      	cmp	r6, #0
 800055c:	d1f8      	bne.n	8000550 <__udivmoddi4+0xfc>
 800055e:	9800      	ldr	r0, [sp, #0]
 8000560:	9901      	ldr	r1, [sp, #4]
 8000562:	465b      	mov	r3, fp
 8000564:	1900      	adds	r0, r0, r4
 8000566:	4169      	adcs	r1, r5
 8000568:	2b00      	cmp	r3, #0
 800056a:	db24      	blt.n	80005b6 <__udivmoddi4+0x162>
 800056c:	002b      	movs	r3, r5
 800056e:	465a      	mov	r2, fp
 8000570:	4644      	mov	r4, r8
 8000572:	40d3      	lsrs	r3, r2
 8000574:	002a      	movs	r2, r5
 8000576:	40e2      	lsrs	r2, r4
 8000578:	001c      	movs	r4, r3
 800057a:	465b      	mov	r3, fp
 800057c:	0015      	movs	r5, r2
 800057e:	2b00      	cmp	r3, #0
 8000580:	db2a      	blt.n	80005d8 <__udivmoddi4+0x184>
 8000582:	0026      	movs	r6, r4
 8000584:	409e      	lsls	r6, r3
 8000586:	0033      	movs	r3, r6
 8000588:	0026      	movs	r6, r4
 800058a:	4647      	mov	r7, r8
 800058c:	40be      	lsls	r6, r7
 800058e:	0032      	movs	r2, r6
 8000590:	1a80      	subs	r0, r0, r2
 8000592:	4199      	sbcs	r1, r3
 8000594:	9000      	str	r0, [sp, #0]
 8000596:	9101      	str	r1, [sp, #4]
 8000598:	e79e      	b.n	80004d8 <__udivmoddi4+0x84>
 800059a:	42a3      	cmp	r3, r4
 800059c:	d8bc      	bhi.n	8000518 <__udivmoddi4+0xc4>
 800059e:	e782      	b.n	80004a6 <__udivmoddi4+0x52>
 80005a0:	4642      	mov	r2, r8
 80005a2:	2320      	movs	r3, #32
 80005a4:	2100      	movs	r1, #0
 80005a6:	1a9b      	subs	r3, r3, r2
 80005a8:	2200      	movs	r2, #0
 80005aa:	9100      	str	r1, [sp, #0]
 80005ac:	9201      	str	r2, [sp, #4]
 80005ae:	2201      	movs	r2, #1
 80005b0:	40da      	lsrs	r2, r3
 80005b2:	9201      	str	r2, [sp, #4]
 80005b4:	e785      	b.n	80004c2 <__udivmoddi4+0x6e>
 80005b6:	4642      	mov	r2, r8
 80005b8:	2320      	movs	r3, #32
 80005ba:	1a9b      	subs	r3, r3, r2
 80005bc:	002a      	movs	r2, r5
 80005be:	4646      	mov	r6, r8
 80005c0:	409a      	lsls	r2, r3
 80005c2:	0023      	movs	r3, r4
 80005c4:	40f3      	lsrs	r3, r6
 80005c6:	4644      	mov	r4, r8
 80005c8:	4313      	orrs	r3, r2
 80005ca:	002a      	movs	r2, r5
 80005cc:	40e2      	lsrs	r2, r4
 80005ce:	001c      	movs	r4, r3
 80005d0:	465b      	mov	r3, fp
 80005d2:	0015      	movs	r5, r2
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	dad4      	bge.n	8000582 <__udivmoddi4+0x12e>
 80005d8:	4642      	mov	r2, r8
 80005da:	002f      	movs	r7, r5
 80005dc:	2320      	movs	r3, #32
 80005de:	0026      	movs	r6, r4
 80005e0:	4097      	lsls	r7, r2
 80005e2:	1a9b      	subs	r3, r3, r2
 80005e4:	40de      	lsrs	r6, r3
 80005e6:	003b      	movs	r3, r7
 80005e8:	4333      	orrs	r3, r6
 80005ea:	e7cd      	b.n	8000588 <__udivmoddi4+0x134>

080005ec <__clzdi2>:
 80005ec:	b510      	push	{r4, lr}
 80005ee:	2900      	cmp	r1, #0
 80005f0:	d103      	bne.n	80005fa <__clzdi2+0xe>
 80005f2:	f000 f807 	bl	8000604 <__clzsi2>
 80005f6:	3020      	adds	r0, #32
 80005f8:	e002      	b.n	8000600 <__clzdi2+0x14>
 80005fa:	0008      	movs	r0, r1
 80005fc:	f000 f802 	bl	8000604 <__clzsi2>
 8000600:	bd10      	pop	{r4, pc}
 8000602:	46c0      	nop			; (mov r8, r8)

08000604 <__clzsi2>:
 8000604:	211c      	movs	r1, #28
 8000606:	2301      	movs	r3, #1
 8000608:	041b      	lsls	r3, r3, #16
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0xe>
 800060e:	0c00      	lsrs	r0, r0, #16
 8000610:	3910      	subs	r1, #16
 8000612:	0a1b      	lsrs	r3, r3, #8
 8000614:	4298      	cmp	r0, r3
 8000616:	d301      	bcc.n	800061c <__clzsi2+0x18>
 8000618:	0a00      	lsrs	r0, r0, #8
 800061a:	3908      	subs	r1, #8
 800061c:	091b      	lsrs	r3, r3, #4
 800061e:	4298      	cmp	r0, r3
 8000620:	d301      	bcc.n	8000626 <__clzsi2+0x22>
 8000622:	0900      	lsrs	r0, r0, #4
 8000624:	3904      	subs	r1, #4
 8000626:	a202      	add	r2, pc, #8	; (adr r2, 8000630 <__clzsi2+0x2c>)
 8000628:	5c10      	ldrb	r0, [r2, r0]
 800062a:	1840      	adds	r0, r0, r1
 800062c:	4770      	bx	lr
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	02020304 	.word	0x02020304
 8000634:	01010101 	.word	0x01010101
	...

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000644:	f000 fc36 	bl	8000eb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000648:	f000 f836 	bl	80006b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064c:	f000 f94c 	bl	80008e8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000650:	f000 f8c8 	bl	80007e4 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8000654:	f000 f878 	bl	8000748 <MX_USART2_UART_Init>
  MX_USART5_UART_Init();
 8000658:	f000 f912 	bl	8000880 <MX_USART5_UART_Init>
  /* USER CODE BEGIN 2 */
  send_debug_logs ( hello ) ;
 800065c:	4b12      	ldr	r3, [pc, #72]	; (80006a8 <main+0x68>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	0018      	movs	r0, r3
 8000662:	f000 f9e7 	bl	8000a34 <send_debug_logs>
  sprintf ( dbg_payload , "Firmware version: %s" , fv ) ;
 8000666:	4b11      	ldr	r3, [pc, #68]	; (80006ac <main+0x6c>)
 8000668:	681a      	ldr	r2, [r3, #0]
 800066a:	4911      	ldr	r1, [pc, #68]	; (80006b0 <main+0x70>)
 800066c:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <main+0x74>)
 800066e:	0018      	movs	r0, r3
 8000670:	f004 fb66 	bl	8004d40 <siprintf>
  send_debug_logs ( dbg_payload ) ;
 8000674:	4b0f      	ldr	r3, [pc, #60]	; (80006b4 <main+0x74>)
 8000676:	0018      	movs	r0, r3
 8000678:	f000 f9dc 	bl	8000a34 <send_debug_logs>
  /*sprintf ( dbg_payload , "Firmware mode: %u" , (uint16_t) sys_mode ) ;
  send_debug_logs ( dbg_payload ) ;
  sprintf ( dbg_payload , "Mission mode: %u" , (uint16_t) sys_mode ) ;
  send_debug_logs ( dbg_payload ) ;*/

  ant_sw_pos ( 2 ) ;
 800067c:	2002      	movs	r0, #2
 800067e:	f000 fa59 	bl	8000b34 <ant_sw_pos>

  if ( !my_astro_init () )
 8000682:	f004 faaf 	bl	8004be4 <my_astro_init>
 8000686:	0003      	movs	r3, r0
 8000688:	001a      	movs	r2, r3
 800068a:	2301      	movs	r3, #1
 800068c:	4053      	eors	r3, r2
 800068e:	b2db      	uxtb	r3, r3
 8000690:	2b00      	cmp	r3, #0
 8000692:	d004      	beq.n	800069e <main+0x5e>
	  sys_restart () ;
 8000694:	f000 f99a 	bl	80009cc <sys_restart>
 8000698:	e005      	b.n	80006a6 <main+0x66>
  else
	  while ( is_astro_evt () )
		  my_astro_handle_evt () ;
 800069a:	f004 fadb 	bl	8004c54 <my_astro_handle_evt>
	  while ( is_astro_evt () )
 800069e:	f000 f9b7 	bl	8000a10 <is_astro_evt>
 80006a2:	1e03      	subs	r3, r0, #0
 80006a4:	d1f9      	bne.n	800069a <main+0x5a>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006a6:	e7fe      	b.n	80006a6 <main+0x66>
 80006a8:	20000000 	.word	0x20000000
 80006ac:	20000004 	.word	0x20000004
 80006b0:	080056d4 	.word	0x080056d4
 80006b4:	2000023c 	.word	0x2000023c

080006b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b8:	b590      	push	{r4, r7, lr}
 80006ba:	b095      	sub	sp, #84	; 0x54
 80006bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006be:	2414      	movs	r4, #20
 80006c0:	193b      	adds	r3, r7, r4
 80006c2:	0018      	movs	r0, r3
 80006c4:	233c      	movs	r3, #60	; 0x3c
 80006c6:	001a      	movs	r2, r3
 80006c8:	2100      	movs	r1, #0
 80006ca:	f004 fb59 	bl	8004d80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ce:	1d3b      	adds	r3, r7, #4
 80006d0:	0018      	movs	r0, r3
 80006d2:	2310      	movs	r3, #16
 80006d4:	001a      	movs	r2, r3
 80006d6:	2100      	movs	r1, #0
 80006d8:	f004 fb52 	bl	8004d80 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006dc:	2380      	movs	r3, #128	; 0x80
 80006de:	009b      	lsls	r3, r3, #2
 80006e0:	0018      	movs	r0, r3
 80006e2:	f000 ff17 	bl	8001514 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006e6:	193b      	adds	r3, r7, r4
 80006e8:	2202      	movs	r2, #2
 80006ea:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ec:	193b      	adds	r3, r7, r4
 80006ee:	2280      	movs	r2, #128	; 0x80
 80006f0:	0052      	lsls	r2, r2, #1
 80006f2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006f4:	193b      	adds	r3, r7, r4
 80006f6:	2200      	movs	r2, #0
 80006f8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006fa:	193b      	adds	r3, r7, r4
 80006fc:	2240      	movs	r2, #64	; 0x40
 80006fe:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000700:	193b      	adds	r3, r7, r4
 8000702:	2200      	movs	r2, #0
 8000704:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000706:	193b      	adds	r3, r7, r4
 8000708:	0018      	movs	r0, r3
 800070a:	f000 ff4f 	bl	80015ac <HAL_RCC_OscConfig>
 800070e:	1e03      	subs	r3, r0, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000712:	f000 fa41 	bl	8000b98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000716:	1d3b      	adds	r3, r7, #4
 8000718:	2207      	movs	r2, #7
 800071a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800071c:	1d3b      	adds	r3, r7, #4
 800071e:	2200      	movs	r2, #0
 8000720:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000722:	1d3b      	adds	r3, r7, #4
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000728:	1d3b      	adds	r3, r7, #4
 800072a:	2200      	movs	r2, #0
 800072c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	2100      	movs	r1, #0
 8000732:	0018      	movs	r0, r3
 8000734:	f001 fa9a 	bl	8001c6c <HAL_RCC_ClockConfig>
 8000738:	1e03      	subs	r3, r0, #0
 800073a:	d001      	beq.n	8000740 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800073c:	f000 fa2c 	bl	8000b98 <Error_Handler>
  }
}
 8000740:	46c0      	nop			; (mov r8, r8)
 8000742:	46bd      	mov	sp, r7
 8000744:	b015      	add	sp, #84	; 0x54
 8000746:	bd90      	pop	{r4, r7, pc}

08000748 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800074c:	4b23      	ldr	r3, [pc, #140]	; (80007dc <MX_USART2_UART_Init+0x94>)
 800074e:	4a24      	ldr	r2, [pc, #144]	; (80007e0 <MX_USART2_UART_Init+0x98>)
 8000750:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000752:	4b22      	ldr	r3, [pc, #136]	; (80007dc <MX_USART2_UART_Init+0x94>)
 8000754:	22e1      	movs	r2, #225	; 0xe1
 8000756:	0252      	lsls	r2, r2, #9
 8000758:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800075a:	4b20      	ldr	r3, [pc, #128]	; (80007dc <MX_USART2_UART_Init+0x94>)
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000760:	4b1e      	ldr	r3, [pc, #120]	; (80007dc <MX_USART2_UART_Init+0x94>)
 8000762:	2200      	movs	r2, #0
 8000764:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000766:	4b1d      	ldr	r3, [pc, #116]	; (80007dc <MX_USART2_UART_Init+0x94>)
 8000768:	2200      	movs	r2, #0
 800076a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800076c:	4b1b      	ldr	r3, [pc, #108]	; (80007dc <MX_USART2_UART_Init+0x94>)
 800076e:	220c      	movs	r2, #12
 8000770:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000772:	4b1a      	ldr	r3, [pc, #104]	; (80007dc <MX_USART2_UART_Init+0x94>)
 8000774:	2200      	movs	r2, #0
 8000776:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000778:	4b18      	ldr	r3, [pc, #96]	; (80007dc <MX_USART2_UART_Init+0x94>)
 800077a:	2200      	movs	r2, #0
 800077c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800077e:	4b17      	ldr	r3, [pc, #92]	; (80007dc <MX_USART2_UART_Init+0x94>)
 8000780:	2200      	movs	r2, #0
 8000782:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000784:	4b15      	ldr	r3, [pc, #84]	; (80007dc <MX_USART2_UART_Init+0x94>)
 8000786:	2200      	movs	r2, #0
 8000788:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800078a:	4b14      	ldr	r3, [pc, #80]	; (80007dc <MX_USART2_UART_Init+0x94>)
 800078c:	2200      	movs	r2, #0
 800078e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000790:	4b12      	ldr	r3, [pc, #72]	; (80007dc <MX_USART2_UART_Init+0x94>)
 8000792:	0018      	movs	r0, r3
 8000794:	f001 fe50 	bl	8002438 <HAL_UART_Init>
 8000798:	1e03      	subs	r3, r0, #0
 800079a:	d001      	beq.n	80007a0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800079c:	f000 f9fc 	bl	8000b98 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007a0:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <MX_USART2_UART_Init+0x94>)
 80007a2:	2100      	movs	r1, #0
 80007a4:	0018      	movs	r0, r3
 80007a6:	f002 fdeb 	bl	8003380 <HAL_UARTEx_SetTxFifoThreshold>
 80007aa:	1e03      	subs	r3, r0, #0
 80007ac:	d001      	beq.n	80007b2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80007ae:	f000 f9f3 	bl	8000b98 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007b2:	4b0a      	ldr	r3, [pc, #40]	; (80007dc <MX_USART2_UART_Init+0x94>)
 80007b4:	2100      	movs	r1, #0
 80007b6:	0018      	movs	r0, r3
 80007b8:	f002 fe22 	bl	8003400 <HAL_UARTEx_SetRxFifoThreshold>
 80007bc:	1e03      	subs	r3, r0, #0
 80007be:	d001      	beq.n	80007c4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80007c0:	f000 f9ea 	bl	8000b98 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80007c4:	4b05      	ldr	r3, [pc, #20]	; (80007dc <MX_USART2_UART_Init+0x94>)
 80007c6:	0018      	movs	r0, r3
 80007c8:	f002 fda0 	bl	800330c <HAL_UARTEx_DisableFifoMode>
 80007cc:	1e03      	subs	r3, r0, #0
 80007ce:	d001      	beq.n	80007d4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80007d0:	f000 f9e2 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007d4:	46c0      	nop			; (mov r8, r8)
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	46c0      	nop			; (mov r8, r8)
 80007dc:	20000080 	.word	0x20000080
 80007e0:	40004400 	.word	0x40004400

080007e4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007e8:	4b23      	ldr	r3, [pc, #140]	; (8000878 <MX_USART3_UART_Init+0x94>)
 80007ea:	4a24      	ldr	r2, [pc, #144]	; (800087c <MX_USART3_UART_Init+0x98>)
 80007ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80007ee:	4b22      	ldr	r3, [pc, #136]	; (8000878 <MX_USART3_UART_Init+0x94>)
 80007f0:	2296      	movs	r2, #150	; 0x96
 80007f2:	0192      	lsls	r2, r2, #6
 80007f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007f6:	4b20      	ldr	r3, [pc, #128]	; (8000878 <MX_USART3_UART_Init+0x94>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007fc:	4b1e      	ldr	r3, [pc, #120]	; (8000878 <MX_USART3_UART_Init+0x94>)
 80007fe:	2200      	movs	r2, #0
 8000800:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000802:	4b1d      	ldr	r3, [pc, #116]	; (8000878 <MX_USART3_UART_Init+0x94>)
 8000804:	2200      	movs	r2, #0
 8000806:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000808:	4b1b      	ldr	r3, [pc, #108]	; (8000878 <MX_USART3_UART_Init+0x94>)
 800080a:	220c      	movs	r2, #12
 800080c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800080e:	4b1a      	ldr	r3, [pc, #104]	; (8000878 <MX_USART3_UART_Init+0x94>)
 8000810:	2200      	movs	r2, #0
 8000812:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000814:	4b18      	ldr	r3, [pc, #96]	; (8000878 <MX_USART3_UART_Init+0x94>)
 8000816:	2200      	movs	r2, #0
 8000818:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800081a:	4b17      	ldr	r3, [pc, #92]	; (8000878 <MX_USART3_UART_Init+0x94>)
 800081c:	2200      	movs	r2, #0
 800081e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000820:	4b15      	ldr	r3, [pc, #84]	; (8000878 <MX_USART3_UART_Init+0x94>)
 8000822:	2200      	movs	r2, #0
 8000824:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000826:	4b14      	ldr	r3, [pc, #80]	; (8000878 <MX_USART3_UART_Init+0x94>)
 8000828:	2200      	movs	r2, #0
 800082a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800082c:	4b12      	ldr	r3, [pc, #72]	; (8000878 <MX_USART3_UART_Init+0x94>)
 800082e:	0018      	movs	r0, r3
 8000830:	f001 fe02 	bl	8002438 <HAL_UART_Init>
 8000834:	1e03      	subs	r3, r0, #0
 8000836:	d001      	beq.n	800083c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000838:	f000 f9ae 	bl	8000b98 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800083c:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <MX_USART3_UART_Init+0x94>)
 800083e:	2100      	movs	r1, #0
 8000840:	0018      	movs	r0, r3
 8000842:	f002 fd9d 	bl	8003380 <HAL_UARTEx_SetTxFifoThreshold>
 8000846:	1e03      	subs	r3, r0, #0
 8000848:	d001      	beq.n	800084e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800084a:	f000 f9a5 	bl	8000b98 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800084e:	4b0a      	ldr	r3, [pc, #40]	; (8000878 <MX_USART3_UART_Init+0x94>)
 8000850:	2100      	movs	r1, #0
 8000852:	0018      	movs	r0, r3
 8000854:	f002 fdd4 	bl	8003400 <HAL_UARTEx_SetRxFifoThreshold>
 8000858:	1e03      	subs	r3, r0, #0
 800085a:	d001      	beq.n	8000860 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800085c:	f000 f99c 	bl	8000b98 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000860:	4b05      	ldr	r3, [pc, #20]	; (8000878 <MX_USART3_UART_Init+0x94>)
 8000862:	0018      	movs	r0, r3
 8000864:	f002 fd52 	bl	800330c <HAL_UARTEx_DisableFifoMode>
 8000868:	1e03      	subs	r3, r0, #0
 800086a:	d001      	beq.n	8000870 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800086c:	f000 f994 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000870:	46c0      	nop			; (mov r8, r8)
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	46c0      	nop			; (mov r8, r8)
 8000878:	20000114 	.word	0x20000114
 800087c:	40004800 	.word	0x40004800

08000880 <MX_USART5_UART_Init>:
  * @brief USART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART5_UART_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE END USART5_Init 0 */

  /* USER CODE BEGIN USART5_Init 1 */

  /* USER CODE END USART5_Init 1 */
  huart5.Instance = USART5;
 8000884:	4b16      	ldr	r3, [pc, #88]	; (80008e0 <MX_USART5_UART_Init+0x60>)
 8000886:	4a17      	ldr	r2, [pc, #92]	; (80008e4 <MX_USART5_UART_Init+0x64>)
 8000888:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 800088a:	4b15      	ldr	r3, [pc, #84]	; (80008e0 <MX_USART5_UART_Init+0x60>)
 800088c:	2296      	movs	r2, #150	; 0x96
 800088e:	0192      	lsls	r2, r2, #6
 8000890:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000892:	4b13      	ldr	r3, [pc, #76]	; (80008e0 <MX_USART5_UART_Init+0x60>)
 8000894:	2200      	movs	r2, #0
 8000896:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000898:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <MX_USART5_UART_Init+0x60>)
 800089a:	2200      	movs	r2, #0
 800089c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800089e:	4b10      	ldr	r3, [pc, #64]	; (80008e0 <MX_USART5_UART_Init+0x60>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80008a4:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <MX_USART5_UART_Init+0x60>)
 80008a6:	220c      	movs	r2, #12
 80008a8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008aa:	4b0d      	ldr	r3, [pc, #52]	; (80008e0 <MX_USART5_UART_Init+0x60>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b0:	4b0b      	ldr	r3, [pc, #44]	; (80008e0 <MX_USART5_UART_Init+0x60>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008b6:	4b0a      	ldr	r3, [pc, #40]	; (80008e0 <MX_USART5_UART_Init+0x60>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008bc:	4b08      	ldr	r3, [pc, #32]	; (80008e0 <MX_USART5_UART_Init+0x60>)
 80008be:	2200      	movs	r2, #0
 80008c0:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008c2:	4b07      	ldr	r3, [pc, #28]	; (80008e0 <MX_USART5_UART_Init+0x60>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80008c8:	4b05      	ldr	r3, [pc, #20]	; (80008e0 <MX_USART5_UART_Init+0x60>)
 80008ca:	0018      	movs	r0, r3
 80008cc:	f001 fdb4 	bl	8002438 <HAL_UART_Init>
 80008d0:	1e03      	subs	r3, r0, #0
 80008d2:	d001      	beq.n	80008d8 <MX_USART5_UART_Init+0x58>
  {
    Error_Handler();
 80008d4:	f000 f960 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN USART5_Init 2 */

  /* USER CODE END USART5_Init 2 */

}
 80008d8:	46c0      	nop			; (mov r8, r8)
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	46c0      	nop			; (mov r8, r8)
 80008e0:	200001a8 	.word	0x200001a8
 80008e4:	40005000 	.word	0x40005000

080008e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e8:	b590      	push	{r4, r7, lr}
 80008ea:	b089      	sub	sp, #36	; 0x24
 80008ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ee:	240c      	movs	r4, #12
 80008f0:	193b      	adds	r3, r7, r4
 80008f2:	0018      	movs	r0, r3
 80008f4:	2314      	movs	r3, #20
 80008f6:	001a      	movs	r2, r3
 80008f8:	2100      	movs	r1, #0
 80008fa:	f004 fa41 	bl	8004d80 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fe:	4b2f      	ldr	r3, [pc, #188]	; (80009bc <MX_GPIO_Init+0xd4>)
 8000900:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000902:	4b2e      	ldr	r3, [pc, #184]	; (80009bc <MX_GPIO_Init+0xd4>)
 8000904:	2101      	movs	r1, #1
 8000906:	430a      	orrs	r2, r1
 8000908:	635a      	str	r2, [r3, #52]	; 0x34
 800090a:	4b2c      	ldr	r3, [pc, #176]	; (80009bc <MX_GPIO_Init+0xd4>)
 800090c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800090e:	2201      	movs	r2, #1
 8000910:	4013      	ands	r3, r2
 8000912:	60bb      	str	r3, [r7, #8]
 8000914:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000916:	4b29      	ldr	r3, [pc, #164]	; (80009bc <MX_GPIO_Init+0xd4>)
 8000918:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800091a:	4b28      	ldr	r3, [pc, #160]	; (80009bc <MX_GPIO_Init+0xd4>)
 800091c:	2102      	movs	r1, #2
 800091e:	430a      	orrs	r2, r1
 8000920:	635a      	str	r2, [r3, #52]	; 0x34
 8000922:	4b26      	ldr	r3, [pc, #152]	; (80009bc <MX_GPIO_Init+0xd4>)
 8000924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000926:	2202      	movs	r2, #2
 8000928:	4013      	ands	r3, r2
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ASTRO_WKUP_Pin|ASTRO_RST_Pin|RF_SW_CTL2_Pin|GNSS_RST_Pin
 800092e:	4924      	ldr	r1, [pc, #144]	; (80009c0 <MX_GPIO_Init+0xd8>)
 8000930:	4b24      	ldr	r3, [pc, #144]	; (80009c4 <MX_GPIO_Init+0xdc>)
 8000932:	2200      	movs	r2, #0
 8000934:	0018      	movs	r0, r3
 8000936:	f000 fdd0 	bl	80014da <HAL_GPIO_WritePin>
                          |GNSS_PWR_SW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF_SW_CTL1_GPIO_Port, RF_SW_CTL1_Pin, GPIO_PIN_SET);
 800093a:	2380      	movs	r3, #128	; 0x80
 800093c:	00db      	lsls	r3, r3, #3
 800093e:	4821      	ldr	r0, [pc, #132]	; (80009c4 <MX_GPIO_Init+0xdc>)
 8000940:	2201      	movs	r2, #1
 8000942:	0019      	movs	r1, r3
 8000944:	f000 fdc9 	bl	80014da <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ASTRO_WKUP_Pin ASTRO_RST_Pin RF_SW_CTL1_Pin RF_SW_CTL2_Pin
                           GNSS_PWR_SW_Pin */
  GPIO_InitStruct.Pin = ASTRO_WKUP_Pin|ASTRO_RST_Pin|RF_SW_CTL1_Pin|RF_SW_CTL2_Pin
 8000948:	193b      	adds	r3, r7, r4
 800094a:	4a1f      	ldr	r2, [pc, #124]	; (80009c8 <MX_GPIO_Init+0xe0>)
 800094c:	601a      	str	r2, [r3, #0]
                          |GNSS_PWR_SW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094e:	193b      	adds	r3, r7, r4
 8000950:	2201      	movs	r2, #1
 8000952:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	193b      	adds	r3, r7, r4
 8000956:	2200      	movs	r2, #0
 8000958:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095a:	193b      	adds	r3, r7, r4
 800095c:	2200      	movs	r2, #0
 800095e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000960:	193b      	adds	r3, r7, r4
 8000962:	4a18      	ldr	r2, [pc, #96]	; (80009c4 <MX_GPIO_Init+0xdc>)
 8000964:	0019      	movs	r1, r3
 8000966:	0010      	movs	r0, r2
 8000968:	f000 fc2e 	bl	80011c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ASTRO_EVT_Pin */
  GPIO_InitStruct.Pin = ASTRO_EVT_Pin;
 800096c:	193b      	adds	r3, r7, r4
 800096e:	2204      	movs	r2, #4
 8000970:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000972:	193b      	adds	r3, r7, r4
 8000974:	2200      	movs	r2, #0
 8000976:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	193b      	adds	r3, r7, r4
 800097a:	2200      	movs	r2, #0
 800097c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ASTRO_EVT_GPIO_Port, &GPIO_InitStruct);
 800097e:	193b      	adds	r3, r7, r4
 8000980:	4a10      	ldr	r2, [pc, #64]	; (80009c4 <MX_GPIO_Init+0xdc>)
 8000982:	0019      	movs	r1, r3
 8000984:	0010      	movs	r0, r2
 8000986:	f000 fc1f 	bl	80011c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : GNSS_RST_Pin */
  GPIO_InitStruct.Pin = GNSS_RST_Pin;
 800098a:	0021      	movs	r1, r4
 800098c:	187b      	adds	r3, r7, r1
 800098e:	2280      	movs	r2, #128	; 0x80
 8000990:	0192      	lsls	r2, r2, #6
 8000992:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000994:	187b      	adds	r3, r7, r1
 8000996:	2211      	movs	r2, #17
 8000998:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	187b      	adds	r3, r7, r1
 800099c:	2200      	movs	r2, #0
 800099e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a0:	187b      	adds	r3, r7, r1
 80009a2:	2200      	movs	r2, #0
 80009a4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GNSS_RST_GPIO_Port, &GPIO_InitStruct);
 80009a6:	187b      	adds	r3, r7, r1
 80009a8:	4a06      	ldr	r2, [pc, #24]	; (80009c4 <MX_GPIO_Init+0xdc>)
 80009aa:	0019      	movs	r1, r3
 80009ac:	0010      	movs	r0, r2
 80009ae:	f000 fc0b 	bl	80011c8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009b2:	46c0      	nop			; (mov r8, r8)
 80009b4:	46bd      	mov	sp, r7
 80009b6:	b009      	add	sp, #36	; 0x24
 80009b8:	bd90      	pop	{r4, r7, pc}
 80009ba:	46c0      	nop			; (mov r8, r8)
 80009bc:	40021000 	.word	0x40021000
 80009c0:	0000a803 	.word	0x0000a803
 80009c4:	50000400 	.word	0x50000400
 80009c8:	00008c03 	.word	0x00008c03

080009cc <sys_restart>:

/* USER CODE BEGIN 4 */

// SYSTEM Operations
void sys_restart ( void )
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
	//my_rtc_get_dt_s ( rtc_dt_s ) ;
	//sprintf ( dbg_payload , "%s,%d,%s,HAL_NVIC_SystemReset" , __FILE__ , __LINE__ , rtc_dt_s ) ;
	//send_debug_logs ( dbg_payload ) ;
	HAL_NVIC_SystemReset () ;
 80009d0:	f000 fbe9 	bl	80011a6 <HAL_NVIC_SystemReset>
}
 80009d4:	46c0      	nop			; (mov r8, r8)
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
	...

080009dc <astro_reset>:

// ASTRO Operations
void astro_reset ( void )
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin ( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_SET ) ;
 80009e0:	4b0a      	ldr	r3, [pc, #40]	; (8000a0c <astro_reset+0x30>)
 80009e2:	2201      	movs	r2, #1
 80009e4:	2102      	movs	r1, #2
 80009e6:	0018      	movs	r0, r3
 80009e8:	f000 fd77 	bl	80014da <HAL_GPIO_WritePin>
    HAL_Delay ( 1 ) ;
 80009ec:	2001      	movs	r0, #1
 80009ee:	f000 fae7 	bl	8000fc0 <HAL_Delay>
    HAL_GPIO_WritePin ( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_RESET ) ;
 80009f2:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <astro_reset+0x30>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	2102      	movs	r1, #2
 80009f8:	0018      	movs	r0, r3
 80009fa:	f000 fd6e 	bl	80014da <HAL_GPIO_WritePin>
    HAL_Delay ( 250 ) ;
 80009fe:	20fa      	movs	r0, #250	; 0xfa
 8000a00:	f000 fade 	bl	8000fc0 <HAL_Delay>
}
 8000a04:	46c0      	nop			; (mov r8, r8)
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	46c0      	nop			; (mov r8, r8)
 8000a0c:	50000400 	.word	0x50000400

08000a10 <is_astro_evt>:

bool is_astro_evt ( void )
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
	return ( HAL_GPIO_ReadPin ( ASTRO_EVT_GPIO_Port , ASTRO_EVT_Pin ) == GPIO_PIN_SET ? true : false);
 8000a14:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <is_astro_evt+0x20>)
 8000a16:	2104      	movs	r1, #4
 8000a18:	0018      	movs	r0, r3
 8000a1a:	f000 fd41 	bl	80014a0 <HAL_GPIO_ReadPin>
 8000a1e:	0003      	movs	r3, r0
 8000a20:	3b01      	subs	r3, #1
 8000a22:	425a      	negs	r2, r3
 8000a24:	4153      	adcs	r3, r2
 8000a26:	b2db      	uxtb	r3, r3
}
 8000a28:	0018      	movs	r0, r3
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	46c0      	nop			; (mov r8, r8)
 8000a30:	50000400 	.word	0x50000400

08000a34 <send_debug_logs>:

void send_debug_logs ( const char* p_tx_buffer )
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
    uint32_t length = strlen ( p_tx_buffer ) ;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	0018      	movs	r0, r3
 8000a40:	f7ff fb60 	bl	8000104 <strlen>
 8000a44:	0003      	movs	r3, r0
 8000a46:	60fb      	str	r3, [r7, #12]
    if ( length > UART_TX_MAX_BUFF_SIZE )
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	2bfa      	cmp	r3, #250	; 0xfa
 8000a4c:	d908      	bls.n	8000a60 <send_debug_logs+0x2c>
    {
        HAL_UART_Transmit ( &HUART_DBG , ( uint8_t* ) "[ERROR] UART buffer reached max length.\n" , 42 , 1000 ) ;
 8000a4e:	23fa      	movs	r3, #250	; 0xfa
 8000a50:	009b      	lsls	r3, r3, #2
 8000a52:	490d      	ldr	r1, [pc, #52]	; (8000a88 <send_debug_logs+0x54>)
 8000a54:	480d      	ldr	r0, [pc, #52]	; (8000a8c <send_debug_logs+0x58>)
 8000a56:	222a      	movs	r2, #42	; 0x2a
 8000a58:	f001 fd44 	bl	80024e4 <HAL_UART_Transmit>
        length = UART_TX_MAX_BUFF_SIZE;
 8000a5c:	23fa      	movs	r3, #250	; 0xfa
 8000a5e:	60fb      	str	r3, [r7, #12]
    }
    HAL_UART_Transmit ( &HUART_DBG , ( uint8_t* ) p_tx_buffer , length , 1000 ) ;
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	b29a      	uxth	r2, r3
 8000a64:	23fa      	movs	r3, #250	; 0xfa
 8000a66:	009b      	lsls	r3, r3, #2
 8000a68:	6879      	ldr	r1, [r7, #4]
 8000a6a:	4808      	ldr	r0, [pc, #32]	; (8000a8c <send_debug_logs+0x58>)
 8000a6c:	f001 fd3a 	bl	80024e4 <HAL_UART_Transmit>
    HAL_UART_Transmit ( &HUART_DBG , ( uint8_t* ) "\n" , 1 , 1000 ) ;
 8000a70:	23fa      	movs	r3, #250	; 0xfa
 8000a72:	009b      	lsls	r3, r3, #2
 8000a74:	4906      	ldr	r1, [pc, #24]	; (8000a90 <send_debug_logs+0x5c>)
 8000a76:	4805      	ldr	r0, [pc, #20]	; (8000a8c <send_debug_logs+0x58>)
 8000a78:	2201      	movs	r2, #1
 8000a7a:	f001 fd33 	bl	80024e4 <HAL_UART_Transmit>
}
 8000a7e:	46c0      	nop			; (mov r8, r8)
 8000a80:	46bd      	mov	sp, r7
 8000a82:	b004      	add	sp, #16
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	46c0      	nop			; (mov r8, r8)
 8000a88:	080056ec 	.word	0x080056ec
 8000a8c:	20000080 	.word	0x20000080
 8000a90:	08005718 	.word	0x08005718

08000a94 <send_astronode_request>:

void send_astronode_request ( uint8_t* p_tx_buffer , uint32_t length )
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
 8000a9c:	6039      	str	r1, [r7, #0]
    send_debug_logs ( "Message sent to the Astronode --> " ) ;
 8000a9e:	4b0a      	ldr	r3, [pc, #40]	; (8000ac8 <send_astronode_request+0x34>)
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	f7ff ffc7 	bl	8000a34 <send_debug_logs>
    send_debug_logs ( ( char* ) p_tx_buffer ) ;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	f7ff ffc3 	bl	8000a34 <send_debug_logs>
    HAL_UART_Transmit ( &HUART_ASTRO , p_tx_buffer , length , 1000 ) ;
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	b29a      	uxth	r2, r3
 8000ab2:	23fa      	movs	r3, #250	; 0xfa
 8000ab4:	009b      	lsls	r3, r3, #2
 8000ab6:	6879      	ldr	r1, [r7, #4]
 8000ab8:	4804      	ldr	r0, [pc, #16]	; (8000acc <send_astronode_request+0x38>)
 8000aba:	f001 fd13 	bl	80024e4 <HAL_UART_Transmit>
}
 8000abe:	46c0      	nop			; (mov r8, r8)
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	b002      	add	sp, #8
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	46c0      	nop			; (mov r8, r8)
 8000ac8:	0800571c 	.word	0x0800571c
 8000acc:	20000114 	.word	0x20000114

08000ad0 <get_systick>:

uint32_t get_systick ( void )
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
    return HAL_GetTick() ;
 8000ad4:	f000 fa6a 	bl	8000fac <HAL_GetTick>
 8000ad8:	0003      	movs	r3, r0
}
 8000ada:	0018      	movs	r0, r3
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <is_systick_timeout_over>:

bool is_systick_timeout_over ( uint32_t starting_value , uint16_t duration )
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
 8000ae8:	000a      	movs	r2, r1
 8000aea:	1cbb      	adds	r3, r7, #2
 8000aec:	801a      	strh	r2, [r3, #0]
    return ( get_systick () - starting_value > duration ) ? true : false ;
 8000aee:	f7ff ffef 	bl	8000ad0 <get_systick>
 8000af2:	0002      	movs	r2, r0
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	1ad3      	subs	r3, r2, r3
 8000af8:	1cba      	adds	r2, r7, #2
 8000afa:	8812      	ldrh	r2, [r2, #0]
 8000afc:	429a      	cmp	r2, r3
 8000afe:	419b      	sbcs	r3, r3
 8000b00:	425b      	negs	r3, r3
 8000b02:	b2db      	uxtb	r3, r3
}
 8000b04:	0018      	movs	r0, r3
 8000b06:	46bd      	mov	sp, r7
 8000b08:	b002      	add	sp, #8
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <is_astronode_character_received>:

bool is_astronode_character_received ( uint8_t* p_rx_char )
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
    return ( HAL_UART_Receive ( &HUART_ASTRO , p_rx_char , 1 , 100 ) == HAL_OK ? true : false ) ;
 8000b14:	6879      	ldr	r1, [r7, #4]
 8000b16:	4806      	ldr	r0, [pc, #24]	; (8000b30 <is_astronode_character_received+0x24>)
 8000b18:	2364      	movs	r3, #100	; 0x64
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	f001 fd86 	bl	800262c <HAL_UART_Receive>
 8000b20:	0003      	movs	r3, r0
 8000b22:	425a      	negs	r2, r3
 8000b24:	4153      	adcs	r3, r2
 8000b26:	b2db      	uxtb	r3, r3
}
 8000b28:	0018      	movs	r0, r3
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	b002      	add	sp, #8
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	20000114 	.word	0x20000114

08000b34 <ant_sw_pos>:

// ** ANT SW Operations
void ant_sw_pos ( uint8_t pos )
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	0002      	movs	r2, r0
 8000b3c:	1dfb      	adds	r3, r7, #7
 8000b3e:	701a      	strb	r2, [r3, #0]
	if ( pos == 1 ) // Włączenie GNSS czyli ustawienie RF_SW_CTL1 = LOW i RF_SW_CTL2 = HIGH
 8000b40:	1dfb      	adds	r3, r7, #7
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	2b01      	cmp	r3, #1
 8000b46:	d10e      	bne.n	8000b66 <ant_sw_pos+0x32>
	{
		HAL_GPIO_WritePin ( RF_SW_CTL1_GPIO_Port , RF_SW_CTL1_Pin , GPIO_PIN_RESET ) ;
 8000b48:	2380      	movs	r3, #128	; 0x80
 8000b4a:	00db      	lsls	r3, r3, #3
 8000b4c:	4811      	ldr	r0, [pc, #68]	; (8000b94 <ant_sw_pos+0x60>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	0019      	movs	r1, r3
 8000b52:	f000 fcc2 	bl	80014da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( RF_SW_CTL2_GPIO_Port , RF_SW_CTL2_Pin , GPIO_PIN_SET ) ;
 8000b56:	2380      	movs	r3, #128	; 0x80
 8000b58:	011b      	lsls	r3, r3, #4
 8000b5a:	480e      	ldr	r0, [pc, #56]	; (8000b94 <ant_sw_pos+0x60>)
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	0019      	movs	r1, r3
 8000b60:	f000 fcbb 	bl	80014da <HAL_GPIO_WritePin>
	else if ( pos == 2 )
	{
		HAL_GPIO_WritePin ( RF_SW_CTL1_GPIO_Port , RF_SW_CTL1_Pin , GPIO_PIN_SET ) ;
		HAL_GPIO_WritePin ( RF_SW_CTL2_GPIO_Port , RF_SW_CTL2_Pin , GPIO_PIN_RESET ) ;
	}
}
 8000b64:	e011      	b.n	8000b8a <ant_sw_pos+0x56>
	else if ( pos == 2 )
 8000b66:	1dfb      	adds	r3, r7, #7
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	2b02      	cmp	r3, #2
 8000b6c:	d10d      	bne.n	8000b8a <ant_sw_pos+0x56>
		HAL_GPIO_WritePin ( RF_SW_CTL1_GPIO_Port , RF_SW_CTL1_Pin , GPIO_PIN_SET ) ;
 8000b6e:	2380      	movs	r3, #128	; 0x80
 8000b70:	00db      	lsls	r3, r3, #3
 8000b72:	4808      	ldr	r0, [pc, #32]	; (8000b94 <ant_sw_pos+0x60>)
 8000b74:	2201      	movs	r2, #1
 8000b76:	0019      	movs	r1, r3
 8000b78:	f000 fcaf 	bl	80014da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( RF_SW_CTL2_GPIO_Port , RF_SW_CTL2_Pin , GPIO_PIN_RESET ) ;
 8000b7c:	2380      	movs	r3, #128	; 0x80
 8000b7e:	011b      	lsls	r3, r3, #4
 8000b80:	4804      	ldr	r0, [pc, #16]	; (8000b94 <ant_sw_pos+0x60>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	0019      	movs	r1, r3
 8000b86:	f000 fca8 	bl	80014da <HAL_GPIO_WritePin>
}
 8000b8a:	46c0      	nop			; (mov r8, r8)
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	b002      	add	sp, #8
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	46c0      	nop			; (mov r8, r8)
 8000b94:	50000400 	.word	0x50000400

08000b98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b9c:	b672      	cpsid	i
}
 8000b9e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ba0:	e7fe      	b.n	8000ba0 <Error_Handler+0x8>
	...

08000ba4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000baa:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <HAL_MspInit+0x4c>)
 8000bac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bae:	4b10      	ldr	r3, [pc, #64]	; (8000bf0 <HAL_MspInit+0x4c>)
 8000bb0:	2101      	movs	r1, #1
 8000bb2:	430a      	orrs	r2, r1
 8000bb4:	641a      	str	r2, [r3, #64]	; 0x40
 8000bb6:	4b0e      	ldr	r3, [pc, #56]	; (8000bf0 <HAL_MspInit+0x4c>)
 8000bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bba:	2201      	movs	r2, #1
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	607b      	str	r3, [r7, #4]
 8000bc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bc2:	4b0b      	ldr	r3, [pc, #44]	; (8000bf0 <HAL_MspInit+0x4c>)
 8000bc4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000bc6:	4b0a      	ldr	r3, [pc, #40]	; (8000bf0 <HAL_MspInit+0x4c>)
 8000bc8:	2180      	movs	r1, #128	; 0x80
 8000bca:	0549      	lsls	r1, r1, #21
 8000bcc:	430a      	orrs	r2, r1
 8000bce:	63da      	str	r2, [r3, #60]	; 0x3c
 8000bd0:	4b07      	ldr	r3, [pc, #28]	; (8000bf0 <HAL_MspInit+0x4c>)
 8000bd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000bd4:	2380      	movs	r3, #128	; 0x80
 8000bd6:	055b      	lsls	r3, r3, #21
 8000bd8:	4013      	ands	r3, r2
 8000bda:	603b      	str	r3, [r7, #0]
 8000bdc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000bde:	23c0      	movs	r3, #192	; 0xc0
 8000be0:	00db      	lsls	r3, r3, #3
 8000be2:	0018      	movs	r0, r3
 8000be4:	f000 fa10 	bl	8001008 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be8:	46c0      	nop			; (mov r8, r8)
 8000bea:	46bd      	mov	sp, r7
 8000bec:	b002      	add	sp, #8
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40021000 	.word	0x40021000

08000bf4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bf4:	b590      	push	{r4, r7, lr}
 8000bf6:	b0a1      	sub	sp, #132	; 0x84
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfc:	236c      	movs	r3, #108	; 0x6c
 8000bfe:	18fb      	adds	r3, r7, r3
 8000c00:	0018      	movs	r0, r3
 8000c02:	2314      	movs	r3, #20
 8000c04:	001a      	movs	r2, r3
 8000c06:	2100      	movs	r1, #0
 8000c08:	f004 f8ba 	bl	8004d80 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c0c:	2420      	movs	r4, #32
 8000c0e:	193b      	adds	r3, r7, r4
 8000c10:	0018      	movs	r0, r3
 8000c12:	234c      	movs	r3, #76	; 0x4c
 8000c14:	001a      	movs	r2, r3
 8000c16:	2100      	movs	r1, #0
 8000c18:	f004 f8b2 	bl	8004d80 <memset>
  if(huart->Instance==USART2)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a60      	ldr	r2, [pc, #384]	; (8000da4 <HAL_UART_MspInit+0x1b0>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d13f      	bne.n	8000ca6 <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c26:	193b      	adds	r3, r7, r4
 8000c28:	2202      	movs	r2, #2
 8000c2a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c2c:	193b      	adds	r3, r7, r4
 8000c2e:	2200      	movs	r2, #0
 8000c30:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c32:	193b      	adds	r3, r7, r4
 8000c34:	0018      	movs	r0, r3
 8000c36:	f001 f9c3 	bl	8001fc0 <HAL_RCCEx_PeriphCLKConfig>
 8000c3a:	1e03      	subs	r3, r0, #0
 8000c3c:	d001      	beq.n	8000c42 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c3e:	f7ff ffab 	bl	8000b98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c42:	4b59      	ldr	r3, [pc, #356]	; (8000da8 <HAL_UART_MspInit+0x1b4>)
 8000c44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c46:	4b58      	ldr	r3, [pc, #352]	; (8000da8 <HAL_UART_MspInit+0x1b4>)
 8000c48:	2180      	movs	r1, #128	; 0x80
 8000c4a:	0289      	lsls	r1, r1, #10
 8000c4c:	430a      	orrs	r2, r1
 8000c4e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c50:	4b55      	ldr	r3, [pc, #340]	; (8000da8 <HAL_UART_MspInit+0x1b4>)
 8000c52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c54:	2380      	movs	r3, #128	; 0x80
 8000c56:	029b      	lsls	r3, r3, #10
 8000c58:	4013      	ands	r3, r2
 8000c5a:	61fb      	str	r3, [r7, #28]
 8000c5c:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5e:	4b52      	ldr	r3, [pc, #328]	; (8000da8 <HAL_UART_MspInit+0x1b4>)
 8000c60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c62:	4b51      	ldr	r3, [pc, #324]	; (8000da8 <HAL_UART_MspInit+0x1b4>)
 8000c64:	2101      	movs	r1, #1
 8000c66:	430a      	orrs	r2, r1
 8000c68:	635a      	str	r2, [r3, #52]	; 0x34
 8000c6a:	4b4f      	ldr	r3, [pc, #316]	; (8000da8 <HAL_UART_MspInit+0x1b4>)
 8000c6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c6e:	2201      	movs	r2, #1
 8000c70:	4013      	ands	r3, r2
 8000c72:	61bb      	str	r3, [r7, #24]
 8000c74:	69bb      	ldr	r3, [r7, #24]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = DBG_TX_Pin|DBG_RX_Pin;
 8000c76:	216c      	movs	r1, #108	; 0x6c
 8000c78:	187b      	adds	r3, r7, r1
 8000c7a:	220c      	movs	r2, #12
 8000c7c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7e:	187b      	adds	r3, r7, r1
 8000c80:	2202      	movs	r2, #2
 8000c82:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	187b      	adds	r3, r7, r1
 8000c86:	2200      	movs	r2, #0
 8000c88:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8a:	187b      	adds	r3, r7, r1
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000c90:	187b      	adds	r3, r7, r1
 8000c92:	2201      	movs	r2, #1
 8000c94:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c96:	187a      	adds	r2, r7, r1
 8000c98:	23a0      	movs	r3, #160	; 0xa0
 8000c9a:	05db      	lsls	r3, r3, #23
 8000c9c:	0011      	movs	r1, r2
 8000c9e:	0018      	movs	r0, r3
 8000ca0:	f000 fa92 	bl	80011c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART5_MspInit 1 */

  /* USER CODE END USART5_MspInit 1 */
  }

}
 8000ca4:	e07a      	b.n	8000d9c <HAL_UART_MspInit+0x1a8>
  else if(huart->Instance==USART3)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4a40      	ldr	r2, [pc, #256]	; (8000dac <HAL_UART_MspInit+0x1b8>)
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d140      	bne.n	8000d32 <HAL_UART_MspInit+0x13e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000cb0:	2120      	movs	r1, #32
 8000cb2:	187b      	adds	r3, r7, r1
 8000cb4:	2204      	movs	r2, #4
 8000cb6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000cb8:	187b      	adds	r3, r7, r1
 8000cba:	2200      	movs	r2, #0
 8000cbc:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cbe:	187b      	adds	r3, r7, r1
 8000cc0:	0018      	movs	r0, r3
 8000cc2:	f001 f97d 	bl	8001fc0 <HAL_RCCEx_PeriphCLKConfig>
 8000cc6:	1e03      	subs	r3, r0, #0
 8000cc8:	d001      	beq.n	8000cce <HAL_UART_MspInit+0xda>
      Error_Handler();
 8000cca:	f7ff ff65 	bl	8000b98 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cce:	4b36      	ldr	r3, [pc, #216]	; (8000da8 <HAL_UART_MspInit+0x1b4>)
 8000cd0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000cd2:	4b35      	ldr	r3, [pc, #212]	; (8000da8 <HAL_UART_MspInit+0x1b4>)
 8000cd4:	2180      	movs	r1, #128	; 0x80
 8000cd6:	02c9      	lsls	r1, r1, #11
 8000cd8:	430a      	orrs	r2, r1
 8000cda:	63da      	str	r2, [r3, #60]	; 0x3c
 8000cdc:	4b32      	ldr	r3, [pc, #200]	; (8000da8 <HAL_UART_MspInit+0x1b4>)
 8000cde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ce0:	2380      	movs	r3, #128	; 0x80
 8000ce2:	02db      	lsls	r3, r3, #11
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	617b      	str	r3, [r7, #20]
 8000ce8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cea:	4b2f      	ldr	r3, [pc, #188]	; (8000da8 <HAL_UART_MspInit+0x1b4>)
 8000cec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cee:	4b2e      	ldr	r3, [pc, #184]	; (8000da8 <HAL_UART_MspInit+0x1b4>)
 8000cf0:	2102      	movs	r1, #2
 8000cf2:	430a      	orrs	r2, r1
 8000cf4:	635a      	str	r2, [r3, #52]	; 0x34
 8000cf6:	4b2c      	ldr	r3, [pc, #176]	; (8000da8 <HAL_UART_MspInit+0x1b4>)
 8000cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cfa:	2202      	movs	r2, #2
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	613b      	str	r3, [r7, #16]
 8000d00:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ASTRO_TX_Pin|ASTRO_RX_Pin;
 8000d02:	216c      	movs	r1, #108	; 0x6c
 8000d04:	187b      	adds	r3, r7, r1
 8000d06:	22c0      	movs	r2, #192	; 0xc0
 8000d08:	0092      	lsls	r2, r2, #2
 8000d0a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0c:	187b      	adds	r3, r7, r1
 8000d0e:	2202      	movs	r2, #2
 8000d10:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d12:	187b      	adds	r3, r7, r1
 8000d14:	2200      	movs	r2, #0
 8000d16:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d18:	187b      	adds	r3, r7, r1
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8000d1e:	187b      	adds	r3, r7, r1
 8000d20:	2204      	movs	r2, #4
 8000d22:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d24:	187b      	adds	r3, r7, r1
 8000d26:	4a22      	ldr	r2, [pc, #136]	; (8000db0 <HAL_UART_MspInit+0x1bc>)
 8000d28:	0019      	movs	r1, r3
 8000d2a:	0010      	movs	r0, r2
 8000d2c:	f000 fa4c 	bl	80011c8 <HAL_GPIO_Init>
}
 8000d30:	e034      	b.n	8000d9c <HAL_UART_MspInit+0x1a8>
  else if(huart->Instance==USART5)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a1f      	ldr	r2, [pc, #124]	; (8000db4 <HAL_UART_MspInit+0x1c0>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d12f      	bne.n	8000d9c <HAL_UART_MspInit+0x1a8>
    __HAL_RCC_USART5_CLK_ENABLE();
 8000d3c:	4b1a      	ldr	r3, [pc, #104]	; (8000da8 <HAL_UART_MspInit+0x1b4>)
 8000d3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d40:	4b19      	ldr	r3, [pc, #100]	; (8000da8 <HAL_UART_MspInit+0x1b4>)
 8000d42:	2180      	movs	r1, #128	; 0x80
 8000d44:	0049      	lsls	r1, r1, #1
 8000d46:	430a      	orrs	r2, r1
 8000d48:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d4a:	4b17      	ldr	r3, [pc, #92]	; (8000da8 <HAL_UART_MspInit+0x1b4>)
 8000d4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d4e:	2380      	movs	r3, #128	; 0x80
 8000d50:	005b      	lsls	r3, r3, #1
 8000d52:	4013      	ands	r3, r2
 8000d54:	60fb      	str	r3, [r7, #12]
 8000d56:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d58:	4b13      	ldr	r3, [pc, #76]	; (8000da8 <HAL_UART_MspInit+0x1b4>)
 8000d5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d5c:	4b12      	ldr	r3, [pc, #72]	; (8000da8 <HAL_UART_MspInit+0x1b4>)
 8000d5e:	2102      	movs	r1, #2
 8000d60:	430a      	orrs	r2, r1
 8000d62:	635a      	str	r2, [r3, #52]	; 0x34
 8000d64:	4b10      	ldr	r3, [pc, #64]	; (8000da8 <HAL_UART_MspInit+0x1b4>)
 8000d66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d68:	2202      	movs	r2, #2
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	60bb      	str	r3, [r7, #8]
 8000d6e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GNSS_TX_Pin|GNSS_RX_Pin;
 8000d70:	216c      	movs	r1, #108	; 0x6c
 8000d72:	187b      	adds	r3, r7, r1
 8000d74:	2218      	movs	r2, #24
 8000d76:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d78:	187b      	adds	r3, r7, r1
 8000d7a:	2202      	movs	r2, #2
 8000d7c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	187b      	adds	r3, r7, r1
 8000d80:	2200      	movs	r2, #0
 8000d82:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d84:	187b      	adds	r3, r7, r1
 8000d86:	2200      	movs	r2, #0
 8000d88:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART5;
 8000d8a:	187b      	adds	r3, r7, r1
 8000d8c:	2203      	movs	r2, #3
 8000d8e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d90:	187b      	adds	r3, r7, r1
 8000d92:	4a07      	ldr	r2, [pc, #28]	; (8000db0 <HAL_UART_MspInit+0x1bc>)
 8000d94:	0019      	movs	r1, r3
 8000d96:	0010      	movs	r0, r2
 8000d98:	f000 fa16 	bl	80011c8 <HAL_GPIO_Init>
}
 8000d9c:	46c0      	nop			; (mov r8, r8)
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	b021      	add	sp, #132	; 0x84
 8000da2:	bd90      	pop	{r4, r7, pc}
 8000da4:	40004400 	.word	0x40004400
 8000da8:	40021000 	.word	0x40021000
 8000dac:	40004800 	.word	0x40004800
 8000db0:	50000400 	.word	0x50000400
 8000db4:	40005000 	.word	0x40005000

08000db8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dbc:	e7fe      	b.n	8000dbc <NMI_Handler+0x4>

08000dbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dc2:	e7fe      	b.n	8000dc2 <HardFault_Handler+0x4>

08000dc4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000dc8:	46c0      	nop			; (mov r8, r8)
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dd2:	46c0      	nop			; (mov r8, r8)
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ddc:	f000 f8d4 	bl	8000f88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000de0:	46c0      	nop			; (mov r8, r8)
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
	...

08000de8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000df0:	4a14      	ldr	r2, [pc, #80]	; (8000e44 <_sbrk+0x5c>)
 8000df2:	4b15      	ldr	r3, [pc, #84]	; (8000e48 <_sbrk+0x60>)
 8000df4:	1ad3      	subs	r3, r2, r3
 8000df6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dfc:	4b13      	ldr	r3, [pc, #76]	; (8000e4c <_sbrk+0x64>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d102      	bne.n	8000e0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e04:	4b11      	ldr	r3, [pc, #68]	; (8000e4c <_sbrk+0x64>)
 8000e06:	4a12      	ldr	r2, [pc, #72]	; (8000e50 <_sbrk+0x68>)
 8000e08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e0a:	4b10      	ldr	r3, [pc, #64]	; (8000e4c <_sbrk+0x64>)
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	18d3      	adds	r3, r2, r3
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	d207      	bcs.n	8000e28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e18:	f003 ffba 	bl	8004d90 <__errno>
 8000e1c:	0003      	movs	r3, r0
 8000e1e:	220c      	movs	r2, #12
 8000e20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e22:	2301      	movs	r3, #1
 8000e24:	425b      	negs	r3, r3
 8000e26:	e009      	b.n	8000e3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e28:	4b08      	ldr	r3, [pc, #32]	; (8000e4c <_sbrk+0x64>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e2e:	4b07      	ldr	r3, [pc, #28]	; (8000e4c <_sbrk+0x64>)
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	18d2      	adds	r2, r2, r3
 8000e36:	4b05      	ldr	r3, [pc, #20]	; (8000e4c <_sbrk+0x64>)
 8000e38:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000e3a:	68fb      	ldr	r3, [r7, #12]
}
 8000e3c:	0018      	movs	r0, r3
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	b006      	add	sp, #24
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	20024000 	.word	0x20024000
 8000e48:	00000400 	.word	0x00000400
 8000e4c:	20000338 	.word	0x20000338
 8000e50:	200004b8 	.word	0x200004b8

08000e54 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e58:	46c0      	nop			; (mov r8, r8)
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
	...

08000e60 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e60:	480d      	ldr	r0, [pc, #52]	; (8000e98 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e62:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e64:	f7ff fff6 	bl	8000e54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e68:	480c      	ldr	r0, [pc, #48]	; (8000e9c <LoopForever+0x6>)
  ldr r1, =_edata
 8000e6a:	490d      	ldr	r1, [pc, #52]	; (8000ea0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e6c:	4a0d      	ldr	r2, [pc, #52]	; (8000ea4 <LoopForever+0xe>)
  movs r3, #0
 8000e6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e70:	e002      	b.n	8000e78 <LoopCopyDataInit>

08000e72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e76:	3304      	adds	r3, #4

08000e78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e7c:	d3f9      	bcc.n	8000e72 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ea8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e80:	4c0a      	ldr	r4, [pc, #40]	; (8000eac <LoopForever+0x16>)
  movs r3, #0
 8000e82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e84:	e001      	b.n	8000e8a <LoopFillZerobss>

08000e86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e88:	3204      	adds	r2, #4

08000e8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e8c:	d3fb      	bcc.n	8000e86 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e8e:	f003 ff85 	bl	8004d9c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000e92:	f7ff fbd5 	bl	8000640 <main>

08000e96 <LoopForever>:

LoopForever:
  b LoopForever
 8000e96:	e7fe      	b.n	8000e96 <LoopForever>
  ldr   r0, =_estack
 8000e98:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000e9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ea0:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000ea4:	08007140 	.word	0x08007140
  ldr r2, =_sbss
 8000ea8:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000eac:	200004b8 	.word	0x200004b8

08000eb0 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000eb0:	e7fe      	b.n	8000eb0 <ADC1_COMP_IRQHandler>
	...

08000eb4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000eba:	1dfb      	adds	r3, r7, #7
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ec0:	4b0b      	ldr	r3, [pc, #44]	; (8000ef0 <HAL_Init+0x3c>)
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	4b0a      	ldr	r3, [pc, #40]	; (8000ef0 <HAL_Init+0x3c>)
 8000ec6:	2180      	movs	r1, #128	; 0x80
 8000ec8:	0049      	lsls	r1, r1, #1
 8000eca:	430a      	orrs	r2, r1
 8000ecc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ece:	2003      	movs	r0, #3
 8000ed0:	f000 f810 	bl	8000ef4 <HAL_InitTick>
 8000ed4:	1e03      	subs	r3, r0, #0
 8000ed6:	d003      	beq.n	8000ee0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000ed8:	1dfb      	adds	r3, r7, #7
 8000eda:	2201      	movs	r2, #1
 8000edc:	701a      	strb	r2, [r3, #0]
 8000ede:	e001      	b.n	8000ee4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000ee0:	f7ff fe60 	bl	8000ba4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ee4:	1dfb      	adds	r3, r7, #7
 8000ee6:	781b      	ldrb	r3, [r3, #0]
}
 8000ee8:	0018      	movs	r0, r3
 8000eea:	46bd      	mov	sp, r7
 8000eec:	b002      	add	sp, #8
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	40022000 	.word	0x40022000

08000ef4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ef4:	b590      	push	{r4, r7, lr}
 8000ef6:	b085      	sub	sp, #20
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000efc:	230f      	movs	r3, #15
 8000efe:	18fb      	adds	r3, r7, r3
 8000f00:	2200      	movs	r2, #0
 8000f02:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000f04:	4b1d      	ldr	r3, [pc, #116]	; (8000f7c <HAL_InitTick+0x88>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d02b      	beq.n	8000f64 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000f0c:	4b1c      	ldr	r3, [pc, #112]	; (8000f80 <HAL_InitTick+0x8c>)
 8000f0e:	681c      	ldr	r4, [r3, #0]
 8000f10:	4b1a      	ldr	r3, [pc, #104]	; (8000f7c <HAL_InitTick+0x88>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	0019      	movs	r1, r3
 8000f16:	23fa      	movs	r3, #250	; 0xfa
 8000f18:	0098      	lsls	r0, r3, #2
 8000f1a:	f7ff f905 	bl	8000128 <__udivsi3>
 8000f1e:	0003      	movs	r3, r0
 8000f20:	0019      	movs	r1, r3
 8000f22:	0020      	movs	r0, r4
 8000f24:	f7ff f900 	bl	8000128 <__udivsi3>
 8000f28:	0003      	movs	r3, r0
 8000f2a:	0018      	movs	r0, r3
 8000f2c:	f000 f93f 	bl	80011ae <HAL_SYSTICK_Config>
 8000f30:	1e03      	subs	r3, r0, #0
 8000f32:	d112      	bne.n	8000f5a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2b03      	cmp	r3, #3
 8000f38:	d80a      	bhi.n	8000f50 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f3a:	6879      	ldr	r1, [r7, #4]
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	425b      	negs	r3, r3
 8000f40:	2200      	movs	r2, #0
 8000f42:	0018      	movs	r0, r3
 8000f44:	f000 f91a 	bl	800117c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f48:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <HAL_InitTick+0x90>)
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	e00d      	b.n	8000f6c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000f50:	230f      	movs	r3, #15
 8000f52:	18fb      	adds	r3, r7, r3
 8000f54:	2201      	movs	r2, #1
 8000f56:	701a      	strb	r2, [r3, #0]
 8000f58:	e008      	b.n	8000f6c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f5a:	230f      	movs	r3, #15
 8000f5c:	18fb      	adds	r3, r7, r3
 8000f5e:	2201      	movs	r2, #1
 8000f60:	701a      	strb	r2, [r3, #0]
 8000f62:	e003      	b.n	8000f6c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f64:	230f      	movs	r3, #15
 8000f66:	18fb      	adds	r3, r7, r3
 8000f68:	2201      	movs	r2, #1
 8000f6a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000f6c:	230f      	movs	r3, #15
 8000f6e:	18fb      	adds	r3, r7, r3
 8000f70:	781b      	ldrb	r3, [r3, #0]
}
 8000f72:	0018      	movs	r0, r3
 8000f74:	46bd      	mov	sp, r7
 8000f76:	b005      	add	sp, #20
 8000f78:	bd90      	pop	{r4, r7, pc}
 8000f7a:	46c0      	nop			; (mov r8, r8)
 8000f7c:	20000010 	.word	0x20000010
 8000f80:	20000008 	.word	0x20000008
 8000f84:	2000000c 	.word	0x2000000c

08000f88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f8c:	4b05      	ldr	r3, [pc, #20]	; (8000fa4 <HAL_IncTick+0x1c>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	001a      	movs	r2, r3
 8000f92:	4b05      	ldr	r3, [pc, #20]	; (8000fa8 <HAL_IncTick+0x20>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	18d2      	adds	r2, r2, r3
 8000f98:	4b03      	ldr	r3, [pc, #12]	; (8000fa8 <HAL_IncTick+0x20>)
 8000f9a:	601a      	str	r2, [r3, #0]
}
 8000f9c:	46c0      	nop			; (mov r8, r8)
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	46c0      	nop			; (mov r8, r8)
 8000fa4:	20000010 	.word	0x20000010
 8000fa8:	2000033c 	.word	0x2000033c

08000fac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  return uwTick;
 8000fb0:	4b02      	ldr	r3, [pc, #8]	; (8000fbc <HAL_GetTick+0x10>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
}
 8000fb4:	0018      	movs	r0, r3
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	46c0      	nop			; (mov r8, r8)
 8000fbc:	2000033c 	.word	0x2000033c

08000fc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fc8:	f7ff fff0 	bl	8000fac <HAL_GetTick>
 8000fcc:	0003      	movs	r3, r0
 8000fce:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	d005      	beq.n	8000fe6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fda:	4b0a      	ldr	r3, [pc, #40]	; (8001004 <HAL_Delay+0x44>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	001a      	movs	r2, r3
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	189b      	adds	r3, r3, r2
 8000fe4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fe6:	46c0      	nop			; (mov r8, r8)
 8000fe8:	f7ff ffe0 	bl	8000fac <HAL_GetTick>
 8000fec:	0002      	movs	r2, r0
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	68fa      	ldr	r2, [r7, #12]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d8f7      	bhi.n	8000fe8 <HAL_Delay+0x28>
  {
  }
}
 8000ff8:	46c0      	nop			; (mov r8, r8)
 8000ffa:	46c0      	nop			; (mov r8, r8)
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	b004      	add	sp, #16
 8001000:	bd80      	pop	{r7, pc}
 8001002:	46c0      	nop			; (mov r8, r8)
 8001004:	20000010 	.word	0x20000010

08001008 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8001010:	4b06      	ldr	r3, [pc, #24]	; (800102c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a06      	ldr	r2, [pc, #24]	; (8001030 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8001016:	4013      	ands	r3, r2
 8001018:	0019      	movs	r1, r3
 800101a:	4b04      	ldr	r3, [pc, #16]	; (800102c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800101c:	687a      	ldr	r2, [r7, #4]
 800101e:	430a      	orrs	r2, r1
 8001020:	601a      	str	r2, [r3, #0]
}
 8001022:	46c0      	nop			; (mov r8, r8)
 8001024:	46bd      	mov	sp, r7
 8001026:	b002      	add	sp, #8
 8001028:	bd80      	pop	{r7, pc}
 800102a:	46c0      	nop			; (mov r8, r8)
 800102c:	40010000 	.word	0x40010000
 8001030:	fffff9ff 	.word	0xfffff9ff

08001034 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001034:	b590      	push	{r4, r7, lr}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	0002      	movs	r2, r0
 800103c:	6039      	str	r1, [r7, #0]
 800103e:	1dfb      	adds	r3, r7, #7
 8001040:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001042:	1dfb      	adds	r3, r7, #7
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	2b7f      	cmp	r3, #127	; 0x7f
 8001048:	d828      	bhi.n	800109c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800104a:	4a2f      	ldr	r2, [pc, #188]	; (8001108 <__NVIC_SetPriority+0xd4>)
 800104c:	1dfb      	adds	r3, r7, #7
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	b25b      	sxtb	r3, r3
 8001052:	089b      	lsrs	r3, r3, #2
 8001054:	33c0      	adds	r3, #192	; 0xc0
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	589b      	ldr	r3, [r3, r2]
 800105a:	1dfa      	adds	r2, r7, #7
 800105c:	7812      	ldrb	r2, [r2, #0]
 800105e:	0011      	movs	r1, r2
 8001060:	2203      	movs	r2, #3
 8001062:	400a      	ands	r2, r1
 8001064:	00d2      	lsls	r2, r2, #3
 8001066:	21ff      	movs	r1, #255	; 0xff
 8001068:	4091      	lsls	r1, r2
 800106a:	000a      	movs	r2, r1
 800106c:	43d2      	mvns	r2, r2
 800106e:	401a      	ands	r2, r3
 8001070:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	019b      	lsls	r3, r3, #6
 8001076:	22ff      	movs	r2, #255	; 0xff
 8001078:	401a      	ands	r2, r3
 800107a:	1dfb      	adds	r3, r7, #7
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	0018      	movs	r0, r3
 8001080:	2303      	movs	r3, #3
 8001082:	4003      	ands	r3, r0
 8001084:	00db      	lsls	r3, r3, #3
 8001086:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001088:	481f      	ldr	r0, [pc, #124]	; (8001108 <__NVIC_SetPriority+0xd4>)
 800108a:	1dfb      	adds	r3, r7, #7
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	b25b      	sxtb	r3, r3
 8001090:	089b      	lsrs	r3, r3, #2
 8001092:	430a      	orrs	r2, r1
 8001094:	33c0      	adds	r3, #192	; 0xc0
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800109a:	e031      	b.n	8001100 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800109c:	4a1b      	ldr	r2, [pc, #108]	; (800110c <__NVIC_SetPriority+0xd8>)
 800109e:	1dfb      	adds	r3, r7, #7
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	0019      	movs	r1, r3
 80010a4:	230f      	movs	r3, #15
 80010a6:	400b      	ands	r3, r1
 80010a8:	3b08      	subs	r3, #8
 80010aa:	089b      	lsrs	r3, r3, #2
 80010ac:	3306      	adds	r3, #6
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	18d3      	adds	r3, r2, r3
 80010b2:	3304      	adds	r3, #4
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	1dfa      	adds	r2, r7, #7
 80010b8:	7812      	ldrb	r2, [r2, #0]
 80010ba:	0011      	movs	r1, r2
 80010bc:	2203      	movs	r2, #3
 80010be:	400a      	ands	r2, r1
 80010c0:	00d2      	lsls	r2, r2, #3
 80010c2:	21ff      	movs	r1, #255	; 0xff
 80010c4:	4091      	lsls	r1, r2
 80010c6:	000a      	movs	r2, r1
 80010c8:	43d2      	mvns	r2, r2
 80010ca:	401a      	ands	r2, r3
 80010cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	22ff      	movs	r2, #255	; 0xff
 80010d4:	401a      	ands	r2, r3
 80010d6:	1dfb      	adds	r3, r7, #7
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	0018      	movs	r0, r3
 80010dc:	2303      	movs	r3, #3
 80010de:	4003      	ands	r3, r0
 80010e0:	00db      	lsls	r3, r3, #3
 80010e2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010e4:	4809      	ldr	r0, [pc, #36]	; (800110c <__NVIC_SetPriority+0xd8>)
 80010e6:	1dfb      	adds	r3, r7, #7
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	001c      	movs	r4, r3
 80010ec:	230f      	movs	r3, #15
 80010ee:	4023      	ands	r3, r4
 80010f0:	3b08      	subs	r3, #8
 80010f2:	089b      	lsrs	r3, r3, #2
 80010f4:	430a      	orrs	r2, r1
 80010f6:	3306      	adds	r3, #6
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	18c3      	adds	r3, r0, r3
 80010fc:	3304      	adds	r3, #4
 80010fe:	601a      	str	r2, [r3, #0]
}
 8001100:	46c0      	nop			; (mov r8, r8)
 8001102:	46bd      	mov	sp, r7
 8001104:	b003      	add	sp, #12
 8001106:	bd90      	pop	{r4, r7, pc}
 8001108:	e000e100 	.word	0xe000e100
 800110c:	e000ed00 	.word	0xe000ed00

08001110 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001114:	f3bf 8f4f 	dsb	sy
}
 8001118:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800111a:	4b04      	ldr	r3, [pc, #16]	; (800112c <__NVIC_SystemReset+0x1c>)
 800111c:	4a04      	ldr	r2, [pc, #16]	; (8001130 <__NVIC_SystemReset+0x20>)
 800111e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001120:	f3bf 8f4f 	dsb	sy
}
 8001124:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001126:	46c0      	nop			; (mov r8, r8)
 8001128:	e7fd      	b.n	8001126 <__NVIC_SystemReset+0x16>
 800112a:	46c0      	nop			; (mov r8, r8)
 800112c:	e000ed00 	.word	0xe000ed00
 8001130:	05fa0004 	.word	0x05fa0004

08001134 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	1e5a      	subs	r2, r3, #1
 8001140:	2380      	movs	r3, #128	; 0x80
 8001142:	045b      	lsls	r3, r3, #17
 8001144:	429a      	cmp	r2, r3
 8001146:	d301      	bcc.n	800114c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001148:	2301      	movs	r3, #1
 800114a:	e010      	b.n	800116e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800114c:	4b0a      	ldr	r3, [pc, #40]	; (8001178 <SysTick_Config+0x44>)
 800114e:	687a      	ldr	r2, [r7, #4]
 8001150:	3a01      	subs	r2, #1
 8001152:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001154:	2301      	movs	r3, #1
 8001156:	425b      	negs	r3, r3
 8001158:	2103      	movs	r1, #3
 800115a:	0018      	movs	r0, r3
 800115c:	f7ff ff6a 	bl	8001034 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001160:	4b05      	ldr	r3, [pc, #20]	; (8001178 <SysTick_Config+0x44>)
 8001162:	2200      	movs	r2, #0
 8001164:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001166:	4b04      	ldr	r3, [pc, #16]	; (8001178 <SysTick_Config+0x44>)
 8001168:	2207      	movs	r2, #7
 800116a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800116c:	2300      	movs	r3, #0
}
 800116e:	0018      	movs	r0, r3
 8001170:	46bd      	mov	sp, r7
 8001172:	b002      	add	sp, #8
 8001174:	bd80      	pop	{r7, pc}
 8001176:	46c0      	nop			; (mov r8, r8)
 8001178:	e000e010 	.word	0xe000e010

0800117c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	60b9      	str	r1, [r7, #8]
 8001184:	607a      	str	r2, [r7, #4]
 8001186:	210f      	movs	r1, #15
 8001188:	187b      	adds	r3, r7, r1
 800118a:	1c02      	adds	r2, r0, #0
 800118c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800118e:	68ba      	ldr	r2, [r7, #8]
 8001190:	187b      	adds	r3, r7, r1
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	b25b      	sxtb	r3, r3
 8001196:	0011      	movs	r1, r2
 8001198:	0018      	movs	r0, r3
 800119a:	f7ff ff4b 	bl	8001034 <__NVIC_SetPriority>
}
 800119e:	46c0      	nop			; (mov r8, r8)
 80011a0:	46bd      	mov	sp, r7
 80011a2:	b004      	add	sp, #16
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80011aa:	f7ff ffb1 	bl	8001110 <__NVIC_SystemReset>

080011ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b082      	sub	sp, #8
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	0018      	movs	r0, r3
 80011ba:	f7ff ffbb 	bl	8001134 <SysTick_Config>
 80011be:	0003      	movs	r3, r0
}
 80011c0:	0018      	movs	r0, r3
 80011c2:	46bd      	mov	sp, r7
 80011c4:	b002      	add	sp, #8
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b086      	sub	sp, #24
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011d2:	2300      	movs	r3, #0
 80011d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011d6:	e14d      	b.n	8001474 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2101      	movs	r1, #1
 80011de:	697a      	ldr	r2, [r7, #20]
 80011e0:	4091      	lsls	r1, r2
 80011e2:	000a      	movs	r2, r1
 80011e4:	4013      	ands	r3, r2
 80011e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d100      	bne.n	80011f0 <HAL_GPIO_Init+0x28>
 80011ee:	e13e      	b.n	800146e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	2203      	movs	r2, #3
 80011f6:	4013      	ands	r3, r2
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d005      	beq.n	8001208 <HAL_GPIO_Init+0x40>
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	2203      	movs	r2, #3
 8001202:	4013      	ands	r3, r2
 8001204:	2b02      	cmp	r3, #2
 8001206:	d130      	bne.n	800126a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	2203      	movs	r2, #3
 8001214:	409a      	lsls	r2, r3
 8001216:	0013      	movs	r3, r2
 8001218:	43da      	mvns	r2, r3
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	4013      	ands	r3, r2
 800121e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	68da      	ldr	r2, [r3, #12]
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	409a      	lsls	r2, r3
 800122a:	0013      	movs	r3, r2
 800122c:	693a      	ldr	r2, [r7, #16]
 800122e:	4313      	orrs	r3, r2
 8001230:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800123e:	2201      	movs	r2, #1
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	409a      	lsls	r2, r3
 8001244:	0013      	movs	r3, r2
 8001246:	43da      	mvns	r2, r3
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	4013      	ands	r3, r2
 800124c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	091b      	lsrs	r3, r3, #4
 8001254:	2201      	movs	r2, #1
 8001256:	401a      	ands	r2, r3
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	409a      	lsls	r2, r3
 800125c:	0013      	movs	r3, r2
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	4313      	orrs	r3, r2
 8001262:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	2203      	movs	r2, #3
 8001270:	4013      	ands	r3, r2
 8001272:	2b03      	cmp	r3, #3
 8001274:	d017      	beq.n	80012a6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	68db      	ldr	r3, [r3, #12]
 800127a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	2203      	movs	r2, #3
 8001282:	409a      	lsls	r2, r3
 8001284:	0013      	movs	r3, r2
 8001286:	43da      	mvns	r2, r3
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	4013      	ands	r3, r2
 800128c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	689a      	ldr	r2, [r3, #8]
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	005b      	lsls	r3, r3, #1
 8001296:	409a      	lsls	r2, r3
 8001298:	0013      	movs	r3, r2
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	4313      	orrs	r3, r2
 800129e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	2203      	movs	r2, #3
 80012ac:	4013      	ands	r3, r2
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d123      	bne.n	80012fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	08da      	lsrs	r2, r3, #3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	3208      	adds	r2, #8
 80012ba:	0092      	lsls	r2, r2, #2
 80012bc:	58d3      	ldr	r3, [r2, r3]
 80012be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	2207      	movs	r2, #7
 80012c4:	4013      	ands	r3, r2
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	220f      	movs	r2, #15
 80012ca:	409a      	lsls	r2, r3
 80012cc:	0013      	movs	r3, r2
 80012ce:	43da      	mvns	r2, r3
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	4013      	ands	r3, r2
 80012d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	691a      	ldr	r2, [r3, #16]
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	2107      	movs	r1, #7
 80012de:	400b      	ands	r3, r1
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	409a      	lsls	r2, r3
 80012e4:	0013      	movs	r3, r2
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	08da      	lsrs	r2, r3, #3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	3208      	adds	r2, #8
 80012f4:	0092      	lsls	r2, r2, #2
 80012f6:	6939      	ldr	r1, [r7, #16]
 80012f8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	2203      	movs	r2, #3
 8001306:	409a      	lsls	r2, r3
 8001308:	0013      	movs	r3, r2
 800130a:	43da      	mvns	r2, r3
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	4013      	ands	r3, r2
 8001310:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	2203      	movs	r2, #3
 8001318:	401a      	ands	r2, r3
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	409a      	lsls	r2, r3
 8001320:	0013      	movs	r3, r2
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	4313      	orrs	r3, r2
 8001326:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685a      	ldr	r2, [r3, #4]
 8001332:	23c0      	movs	r3, #192	; 0xc0
 8001334:	029b      	lsls	r3, r3, #10
 8001336:	4013      	ands	r3, r2
 8001338:	d100      	bne.n	800133c <HAL_GPIO_Init+0x174>
 800133a:	e098      	b.n	800146e <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800133c:	4a53      	ldr	r2, [pc, #332]	; (800148c <HAL_GPIO_Init+0x2c4>)
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	089b      	lsrs	r3, r3, #2
 8001342:	3318      	adds	r3, #24
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	589b      	ldr	r3, [r3, r2]
 8001348:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	2203      	movs	r2, #3
 800134e:	4013      	ands	r3, r2
 8001350:	00db      	lsls	r3, r3, #3
 8001352:	220f      	movs	r2, #15
 8001354:	409a      	lsls	r2, r3
 8001356:	0013      	movs	r3, r2
 8001358:	43da      	mvns	r2, r3
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	4013      	ands	r3, r2
 800135e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001360:	687a      	ldr	r2, [r7, #4]
 8001362:	23a0      	movs	r3, #160	; 0xa0
 8001364:	05db      	lsls	r3, r3, #23
 8001366:	429a      	cmp	r2, r3
 8001368:	d019      	beq.n	800139e <HAL_GPIO_Init+0x1d6>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a48      	ldr	r2, [pc, #288]	; (8001490 <HAL_GPIO_Init+0x2c8>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d013      	beq.n	800139a <HAL_GPIO_Init+0x1d2>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a47      	ldr	r2, [pc, #284]	; (8001494 <HAL_GPIO_Init+0x2cc>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d00d      	beq.n	8001396 <HAL_GPIO_Init+0x1ce>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a46      	ldr	r2, [pc, #280]	; (8001498 <HAL_GPIO_Init+0x2d0>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d007      	beq.n	8001392 <HAL_GPIO_Init+0x1ca>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a45      	ldr	r2, [pc, #276]	; (800149c <HAL_GPIO_Init+0x2d4>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d101      	bne.n	800138e <HAL_GPIO_Init+0x1c6>
 800138a:	2304      	movs	r3, #4
 800138c:	e008      	b.n	80013a0 <HAL_GPIO_Init+0x1d8>
 800138e:	2305      	movs	r3, #5
 8001390:	e006      	b.n	80013a0 <HAL_GPIO_Init+0x1d8>
 8001392:	2303      	movs	r3, #3
 8001394:	e004      	b.n	80013a0 <HAL_GPIO_Init+0x1d8>
 8001396:	2302      	movs	r3, #2
 8001398:	e002      	b.n	80013a0 <HAL_GPIO_Init+0x1d8>
 800139a:	2301      	movs	r3, #1
 800139c:	e000      	b.n	80013a0 <HAL_GPIO_Init+0x1d8>
 800139e:	2300      	movs	r3, #0
 80013a0:	697a      	ldr	r2, [r7, #20]
 80013a2:	2103      	movs	r1, #3
 80013a4:	400a      	ands	r2, r1
 80013a6:	00d2      	lsls	r2, r2, #3
 80013a8:	4093      	lsls	r3, r2
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80013b0:	4936      	ldr	r1, [pc, #216]	; (800148c <HAL_GPIO_Init+0x2c4>)
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	089b      	lsrs	r3, r3, #2
 80013b6:	3318      	adds	r3, #24
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013be:	4b33      	ldr	r3, [pc, #204]	; (800148c <HAL_GPIO_Init+0x2c4>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	43da      	mvns	r2, r3
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	4013      	ands	r3, r2
 80013cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685a      	ldr	r2, [r3, #4]
 80013d2:	2380      	movs	r3, #128	; 0x80
 80013d4:	035b      	lsls	r3, r3, #13
 80013d6:	4013      	ands	r3, r2
 80013d8:	d003      	beq.n	80013e2 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	4313      	orrs	r3, r2
 80013e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013e2:	4b2a      	ldr	r3, [pc, #168]	; (800148c <HAL_GPIO_Init+0x2c4>)
 80013e4:	693a      	ldr	r2, [r7, #16]
 80013e6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80013e8:	4b28      	ldr	r3, [pc, #160]	; (800148c <HAL_GPIO_Init+0x2c4>)
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	43da      	mvns	r2, r3
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	4013      	ands	r3, r2
 80013f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685a      	ldr	r2, [r3, #4]
 80013fc:	2380      	movs	r3, #128	; 0x80
 80013fe:	039b      	lsls	r3, r3, #14
 8001400:	4013      	ands	r3, r2
 8001402:	d003      	beq.n	800140c <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001404:	693a      	ldr	r2, [r7, #16]
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	4313      	orrs	r3, r2
 800140a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800140c:	4b1f      	ldr	r3, [pc, #124]	; (800148c <HAL_GPIO_Init+0x2c4>)
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001412:	4a1e      	ldr	r2, [pc, #120]	; (800148c <HAL_GPIO_Init+0x2c4>)
 8001414:	2384      	movs	r3, #132	; 0x84
 8001416:	58d3      	ldr	r3, [r2, r3]
 8001418:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	43da      	mvns	r2, r3
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	4013      	ands	r3, r2
 8001422:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685a      	ldr	r2, [r3, #4]
 8001428:	2380      	movs	r3, #128	; 0x80
 800142a:	029b      	lsls	r3, r3, #10
 800142c:	4013      	ands	r3, r2
 800142e:	d003      	beq.n	8001438 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001430:	693a      	ldr	r2, [r7, #16]
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	4313      	orrs	r3, r2
 8001436:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001438:	4914      	ldr	r1, [pc, #80]	; (800148c <HAL_GPIO_Init+0x2c4>)
 800143a:	2284      	movs	r2, #132	; 0x84
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001440:	4a12      	ldr	r2, [pc, #72]	; (800148c <HAL_GPIO_Init+0x2c4>)
 8001442:	2380      	movs	r3, #128	; 0x80
 8001444:	58d3      	ldr	r3, [r2, r3]
 8001446:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	43da      	mvns	r2, r3
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	4013      	ands	r3, r2
 8001450:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685a      	ldr	r2, [r3, #4]
 8001456:	2380      	movs	r3, #128	; 0x80
 8001458:	025b      	lsls	r3, r3, #9
 800145a:	4013      	ands	r3, r2
 800145c:	d003      	beq.n	8001466 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	4313      	orrs	r3, r2
 8001464:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001466:	4909      	ldr	r1, [pc, #36]	; (800148c <HAL_GPIO_Init+0x2c4>)
 8001468:	2280      	movs	r2, #128	; 0x80
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	3301      	adds	r3, #1
 8001472:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	40da      	lsrs	r2, r3
 800147c:	1e13      	subs	r3, r2, #0
 800147e:	d000      	beq.n	8001482 <HAL_GPIO_Init+0x2ba>
 8001480:	e6aa      	b.n	80011d8 <HAL_GPIO_Init+0x10>
  }
}
 8001482:	46c0      	nop			; (mov r8, r8)
 8001484:	46c0      	nop			; (mov r8, r8)
 8001486:	46bd      	mov	sp, r7
 8001488:	b006      	add	sp, #24
 800148a:	bd80      	pop	{r7, pc}
 800148c:	40021800 	.word	0x40021800
 8001490:	50000400 	.word	0x50000400
 8001494:	50000800 	.word	0x50000800
 8001498:	50000c00 	.word	0x50000c00
 800149c:	50001000 	.word	0x50001000

080014a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	000a      	movs	r2, r1
 80014aa:	1cbb      	adds	r3, r7, #2
 80014ac:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	691b      	ldr	r3, [r3, #16]
 80014b2:	1cba      	adds	r2, r7, #2
 80014b4:	8812      	ldrh	r2, [r2, #0]
 80014b6:	4013      	ands	r3, r2
 80014b8:	d004      	beq.n	80014c4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80014ba:	230f      	movs	r3, #15
 80014bc:	18fb      	adds	r3, r7, r3
 80014be:	2201      	movs	r2, #1
 80014c0:	701a      	strb	r2, [r3, #0]
 80014c2:	e003      	b.n	80014cc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80014c4:	230f      	movs	r3, #15
 80014c6:	18fb      	adds	r3, r7, r3
 80014c8:	2200      	movs	r2, #0
 80014ca:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80014cc:	230f      	movs	r3, #15
 80014ce:	18fb      	adds	r3, r7, r3
 80014d0:	781b      	ldrb	r3, [r3, #0]
}
 80014d2:	0018      	movs	r0, r3
 80014d4:	46bd      	mov	sp, r7
 80014d6:	b004      	add	sp, #16
 80014d8:	bd80      	pop	{r7, pc}

080014da <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b082      	sub	sp, #8
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
 80014e2:	0008      	movs	r0, r1
 80014e4:	0011      	movs	r1, r2
 80014e6:	1cbb      	adds	r3, r7, #2
 80014e8:	1c02      	adds	r2, r0, #0
 80014ea:	801a      	strh	r2, [r3, #0]
 80014ec:	1c7b      	adds	r3, r7, #1
 80014ee:	1c0a      	adds	r2, r1, #0
 80014f0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014f2:	1c7b      	adds	r3, r7, #1
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d004      	beq.n	8001504 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014fa:	1cbb      	adds	r3, r7, #2
 80014fc:	881a      	ldrh	r2, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001502:	e003      	b.n	800150c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001504:	1cbb      	adds	r3, r7, #2
 8001506:	881a      	ldrh	r2, [r3, #0]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800150c:	46c0      	nop			; (mov r8, r8)
 800150e:	46bd      	mov	sp, r7
 8001510:	b002      	add	sp, #8
 8001512:	bd80      	pop	{r7, pc}

08001514 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800151c:	4b19      	ldr	r3, [pc, #100]	; (8001584 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a19      	ldr	r2, [pc, #100]	; (8001588 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001522:	4013      	ands	r3, r2
 8001524:	0019      	movs	r1, r3
 8001526:	4b17      	ldr	r3, [pc, #92]	; (8001584 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001528:	687a      	ldr	r2, [r7, #4]
 800152a:	430a      	orrs	r2, r1
 800152c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	2380      	movs	r3, #128	; 0x80
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	429a      	cmp	r2, r3
 8001536:	d11f      	bne.n	8001578 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001538:	4b14      	ldr	r3, [pc, #80]	; (800158c <HAL_PWREx_ControlVoltageScaling+0x78>)
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	0013      	movs	r3, r2
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	189b      	adds	r3, r3, r2
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	4912      	ldr	r1, [pc, #72]	; (8001590 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001546:	0018      	movs	r0, r3
 8001548:	f7fe fdee 	bl	8000128 <__udivsi3>
 800154c:	0003      	movs	r3, r0
 800154e:	3301      	adds	r3, #1
 8001550:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001552:	e008      	b.n	8001566 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d003      	beq.n	8001562 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	3b01      	subs	r3, #1
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	e001      	b.n	8001566 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	e009      	b.n	800157a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001566:	4b07      	ldr	r3, [pc, #28]	; (8001584 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001568:	695a      	ldr	r2, [r3, #20]
 800156a:	2380      	movs	r3, #128	; 0x80
 800156c:	00db      	lsls	r3, r3, #3
 800156e:	401a      	ands	r2, r3
 8001570:	2380      	movs	r3, #128	; 0x80
 8001572:	00db      	lsls	r3, r3, #3
 8001574:	429a      	cmp	r2, r3
 8001576:	d0ed      	beq.n	8001554 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001578:	2300      	movs	r3, #0
}
 800157a:	0018      	movs	r0, r3
 800157c:	46bd      	mov	sp, r7
 800157e:	b004      	add	sp, #16
 8001580:	bd80      	pop	{r7, pc}
 8001582:	46c0      	nop			; (mov r8, r8)
 8001584:	40007000 	.word	0x40007000
 8001588:	fffff9ff 	.word	0xfffff9ff
 800158c:	20000008 	.word	0x20000008
 8001590:	000f4240 	.word	0x000f4240

08001594 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001598:	4b03      	ldr	r3, [pc, #12]	; (80015a8 <LL_RCC_GetAPB1Prescaler+0x14>)
 800159a:	689a      	ldr	r2, [r3, #8]
 800159c:	23e0      	movs	r3, #224	; 0xe0
 800159e:	01db      	lsls	r3, r3, #7
 80015a0:	4013      	ands	r3, r2
}
 80015a2:	0018      	movs	r0, r3
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	40021000 	.word	0x40021000

080015ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b088      	sub	sp, #32
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d102      	bne.n	80015c0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	f000 fb50 	bl	8001c60 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2201      	movs	r2, #1
 80015c6:	4013      	ands	r3, r2
 80015c8:	d100      	bne.n	80015cc <HAL_RCC_OscConfig+0x20>
 80015ca:	e07c      	b.n	80016c6 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015cc:	4bc3      	ldr	r3, [pc, #780]	; (80018dc <HAL_RCC_OscConfig+0x330>)
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	2238      	movs	r2, #56	; 0x38
 80015d2:	4013      	ands	r3, r2
 80015d4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015d6:	4bc1      	ldr	r3, [pc, #772]	; (80018dc <HAL_RCC_OscConfig+0x330>)
 80015d8:	68db      	ldr	r3, [r3, #12]
 80015da:	2203      	movs	r2, #3
 80015dc:	4013      	ands	r3, r2
 80015de:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	2b10      	cmp	r3, #16
 80015e4:	d102      	bne.n	80015ec <HAL_RCC_OscConfig+0x40>
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	2b03      	cmp	r3, #3
 80015ea:	d002      	beq.n	80015f2 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	2b08      	cmp	r3, #8
 80015f0:	d10b      	bne.n	800160a <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015f2:	4bba      	ldr	r3, [pc, #744]	; (80018dc <HAL_RCC_OscConfig+0x330>)
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	2380      	movs	r3, #128	; 0x80
 80015f8:	029b      	lsls	r3, r3, #10
 80015fa:	4013      	ands	r3, r2
 80015fc:	d062      	beq.n	80016c4 <HAL_RCC_OscConfig+0x118>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d15e      	bne.n	80016c4 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e32a      	b.n	8001c60 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685a      	ldr	r2, [r3, #4]
 800160e:	2380      	movs	r3, #128	; 0x80
 8001610:	025b      	lsls	r3, r3, #9
 8001612:	429a      	cmp	r2, r3
 8001614:	d107      	bne.n	8001626 <HAL_RCC_OscConfig+0x7a>
 8001616:	4bb1      	ldr	r3, [pc, #708]	; (80018dc <HAL_RCC_OscConfig+0x330>)
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	4bb0      	ldr	r3, [pc, #704]	; (80018dc <HAL_RCC_OscConfig+0x330>)
 800161c:	2180      	movs	r1, #128	; 0x80
 800161e:	0249      	lsls	r1, r1, #9
 8001620:	430a      	orrs	r2, r1
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	e020      	b.n	8001668 <HAL_RCC_OscConfig+0xbc>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685a      	ldr	r2, [r3, #4]
 800162a:	23a0      	movs	r3, #160	; 0xa0
 800162c:	02db      	lsls	r3, r3, #11
 800162e:	429a      	cmp	r2, r3
 8001630:	d10e      	bne.n	8001650 <HAL_RCC_OscConfig+0xa4>
 8001632:	4baa      	ldr	r3, [pc, #680]	; (80018dc <HAL_RCC_OscConfig+0x330>)
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	4ba9      	ldr	r3, [pc, #676]	; (80018dc <HAL_RCC_OscConfig+0x330>)
 8001638:	2180      	movs	r1, #128	; 0x80
 800163a:	02c9      	lsls	r1, r1, #11
 800163c:	430a      	orrs	r2, r1
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	4ba6      	ldr	r3, [pc, #664]	; (80018dc <HAL_RCC_OscConfig+0x330>)
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	4ba5      	ldr	r3, [pc, #660]	; (80018dc <HAL_RCC_OscConfig+0x330>)
 8001646:	2180      	movs	r1, #128	; 0x80
 8001648:	0249      	lsls	r1, r1, #9
 800164a:	430a      	orrs	r2, r1
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	e00b      	b.n	8001668 <HAL_RCC_OscConfig+0xbc>
 8001650:	4ba2      	ldr	r3, [pc, #648]	; (80018dc <HAL_RCC_OscConfig+0x330>)
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	4ba1      	ldr	r3, [pc, #644]	; (80018dc <HAL_RCC_OscConfig+0x330>)
 8001656:	49a2      	ldr	r1, [pc, #648]	; (80018e0 <HAL_RCC_OscConfig+0x334>)
 8001658:	400a      	ands	r2, r1
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	4b9f      	ldr	r3, [pc, #636]	; (80018dc <HAL_RCC_OscConfig+0x330>)
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	4b9e      	ldr	r3, [pc, #632]	; (80018dc <HAL_RCC_OscConfig+0x330>)
 8001662:	49a0      	ldr	r1, [pc, #640]	; (80018e4 <HAL_RCC_OscConfig+0x338>)
 8001664:	400a      	ands	r2, r1
 8001666:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d014      	beq.n	800169a <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001670:	f7ff fc9c 	bl	8000fac <HAL_GetTick>
 8001674:	0003      	movs	r3, r0
 8001676:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001678:	e008      	b.n	800168c <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800167a:	f7ff fc97 	bl	8000fac <HAL_GetTick>
 800167e:	0002      	movs	r2, r0
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	2b64      	cmp	r3, #100	; 0x64
 8001686:	d901      	bls.n	800168c <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8001688:	2303      	movs	r3, #3
 800168a:	e2e9      	b.n	8001c60 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800168c:	4b93      	ldr	r3, [pc, #588]	; (80018dc <HAL_RCC_OscConfig+0x330>)
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	2380      	movs	r3, #128	; 0x80
 8001692:	029b      	lsls	r3, r3, #10
 8001694:	4013      	ands	r3, r2
 8001696:	d0f0      	beq.n	800167a <HAL_RCC_OscConfig+0xce>
 8001698:	e015      	b.n	80016c6 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800169a:	f7ff fc87 	bl	8000fac <HAL_GetTick>
 800169e:	0003      	movs	r3, r0
 80016a0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016a2:	e008      	b.n	80016b6 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016a4:	f7ff fc82 	bl	8000fac <HAL_GetTick>
 80016a8:	0002      	movs	r2, r0
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	2b64      	cmp	r3, #100	; 0x64
 80016b0:	d901      	bls.n	80016b6 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e2d4      	b.n	8001c60 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016b6:	4b89      	ldr	r3, [pc, #548]	; (80018dc <HAL_RCC_OscConfig+0x330>)
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	2380      	movs	r3, #128	; 0x80
 80016bc:	029b      	lsls	r3, r3, #10
 80016be:	4013      	ands	r3, r2
 80016c0:	d1f0      	bne.n	80016a4 <HAL_RCC_OscConfig+0xf8>
 80016c2:	e000      	b.n	80016c6 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016c4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	2202      	movs	r2, #2
 80016cc:	4013      	ands	r3, r2
 80016ce:	d100      	bne.n	80016d2 <HAL_RCC_OscConfig+0x126>
 80016d0:	e099      	b.n	8001806 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016d2:	4b82      	ldr	r3, [pc, #520]	; (80018dc <HAL_RCC_OscConfig+0x330>)
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	2238      	movs	r2, #56	; 0x38
 80016d8:	4013      	ands	r3, r2
 80016da:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016dc:	4b7f      	ldr	r3, [pc, #508]	; (80018dc <HAL_RCC_OscConfig+0x330>)
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	2203      	movs	r2, #3
 80016e2:	4013      	ands	r3, r2
 80016e4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	2b10      	cmp	r3, #16
 80016ea:	d102      	bne.n	80016f2 <HAL_RCC_OscConfig+0x146>
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d002      	beq.n	80016f8 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d135      	bne.n	8001764 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016f8:	4b78      	ldr	r3, [pc, #480]	; (80018dc <HAL_RCC_OscConfig+0x330>)
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	2380      	movs	r3, #128	; 0x80
 80016fe:	00db      	lsls	r3, r3, #3
 8001700:	4013      	ands	r3, r2
 8001702:	d005      	beq.n	8001710 <HAL_RCC_OscConfig+0x164>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d101      	bne.n	8001710 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	e2a7      	b.n	8001c60 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001710:	4b72      	ldr	r3, [pc, #456]	; (80018dc <HAL_RCC_OscConfig+0x330>)
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	4a74      	ldr	r2, [pc, #464]	; (80018e8 <HAL_RCC_OscConfig+0x33c>)
 8001716:	4013      	ands	r3, r2
 8001718:	0019      	movs	r1, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	695b      	ldr	r3, [r3, #20]
 800171e:	021a      	lsls	r2, r3, #8
 8001720:	4b6e      	ldr	r3, [pc, #440]	; (80018dc <HAL_RCC_OscConfig+0x330>)
 8001722:	430a      	orrs	r2, r1
 8001724:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d112      	bne.n	8001752 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800172c:	4b6b      	ldr	r3, [pc, #428]	; (80018dc <HAL_RCC_OscConfig+0x330>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a6e      	ldr	r2, [pc, #440]	; (80018ec <HAL_RCC_OscConfig+0x340>)
 8001732:	4013      	ands	r3, r2
 8001734:	0019      	movs	r1, r3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	691a      	ldr	r2, [r3, #16]
 800173a:	4b68      	ldr	r3, [pc, #416]	; (80018dc <HAL_RCC_OscConfig+0x330>)
 800173c:	430a      	orrs	r2, r1
 800173e:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001740:	4b66      	ldr	r3, [pc, #408]	; (80018dc <HAL_RCC_OscConfig+0x330>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	0adb      	lsrs	r3, r3, #11
 8001746:	2207      	movs	r2, #7
 8001748:	4013      	ands	r3, r2
 800174a:	4a69      	ldr	r2, [pc, #420]	; (80018f0 <HAL_RCC_OscConfig+0x344>)
 800174c:	40da      	lsrs	r2, r3
 800174e:	4b69      	ldr	r3, [pc, #420]	; (80018f4 <HAL_RCC_OscConfig+0x348>)
 8001750:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001752:	4b69      	ldr	r3, [pc, #420]	; (80018f8 <HAL_RCC_OscConfig+0x34c>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	0018      	movs	r0, r3
 8001758:	f7ff fbcc 	bl	8000ef4 <HAL_InitTick>
 800175c:	1e03      	subs	r3, r0, #0
 800175e:	d051      	beq.n	8001804 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e27d      	b.n	8001c60 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d030      	beq.n	80017ce <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800176c:	4b5b      	ldr	r3, [pc, #364]	; (80018dc <HAL_RCC_OscConfig+0x330>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a5e      	ldr	r2, [pc, #376]	; (80018ec <HAL_RCC_OscConfig+0x340>)
 8001772:	4013      	ands	r3, r2
 8001774:	0019      	movs	r1, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	691a      	ldr	r2, [r3, #16]
 800177a:	4b58      	ldr	r3, [pc, #352]	; (80018dc <HAL_RCC_OscConfig+0x330>)
 800177c:	430a      	orrs	r2, r1
 800177e:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001780:	4b56      	ldr	r3, [pc, #344]	; (80018dc <HAL_RCC_OscConfig+0x330>)
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	4b55      	ldr	r3, [pc, #340]	; (80018dc <HAL_RCC_OscConfig+0x330>)
 8001786:	2180      	movs	r1, #128	; 0x80
 8001788:	0049      	lsls	r1, r1, #1
 800178a:	430a      	orrs	r2, r1
 800178c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800178e:	f7ff fc0d 	bl	8000fac <HAL_GetTick>
 8001792:	0003      	movs	r3, r0
 8001794:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001796:	e008      	b.n	80017aa <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001798:	f7ff fc08 	bl	8000fac <HAL_GetTick>
 800179c:	0002      	movs	r2, r0
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e25a      	b.n	8001c60 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017aa:	4b4c      	ldr	r3, [pc, #304]	; (80018dc <HAL_RCC_OscConfig+0x330>)
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	2380      	movs	r3, #128	; 0x80
 80017b0:	00db      	lsls	r3, r3, #3
 80017b2:	4013      	ands	r3, r2
 80017b4:	d0f0      	beq.n	8001798 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017b6:	4b49      	ldr	r3, [pc, #292]	; (80018dc <HAL_RCC_OscConfig+0x330>)
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	4a4b      	ldr	r2, [pc, #300]	; (80018e8 <HAL_RCC_OscConfig+0x33c>)
 80017bc:	4013      	ands	r3, r2
 80017be:	0019      	movs	r1, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	695b      	ldr	r3, [r3, #20]
 80017c4:	021a      	lsls	r2, r3, #8
 80017c6:	4b45      	ldr	r3, [pc, #276]	; (80018dc <HAL_RCC_OscConfig+0x330>)
 80017c8:	430a      	orrs	r2, r1
 80017ca:	605a      	str	r2, [r3, #4]
 80017cc:	e01b      	b.n	8001806 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80017ce:	4b43      	ldr	r3, [pc, #268]	; (80018dc <HAL_RCC_OscConfig+0x330>)
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	4b42      	ldr	r3, [pc, #264]	; (80018dc <HAL_RCC_OscConfig+0x330>)
 80017d4:	4949      	ldr	r1, [pc, #292]	; (80018fc <HAL_RCC_OscConfig+0x350>)
 80017d6:	400a      	ands	r2, r1
 80017d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017da:	f7ff fbe7 	bl	8000fac <HAL_GetTick>
 80017de:	0003      	movs	r3, r0
 80017e0:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017e2:	e008      	b.n	80017f6 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017e4:	f7ff fbe2 	bl	8000fac <HAL_GetTick>
 80017e8:	0002      	movs	r2, r0
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e234      	b.n	8001c60 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017f6:	4b39      	ldr	r3, [pc, #228]	; (80018dc <HAL_RCC_OscConfig+0x330>)
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	2380      	movs	r3, #128	; 0x80
 80017fc:	00db      	lsls	r3, r3, #3
 80017fe:	4013      	ands	r3, r2
 8001800:	d1f0      	bne.n	80017e4 <HAL_RCC_OscConfig+0x238>
 8001802:	e000      	b.n	8001806 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001804:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2208      	movs	r2, #8
 800180c:	4013      	ands	r3, r2
 800180e:	d047      	beq.n	80018a0 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001810:	4b32      	ldr	r3, [pc, #200]	; (80018dc <HAL_RCC_OscConfig+0x330>)
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	2238      	movs	r2, #56	; 0x38
 8001816:	4013      	ands	r3, r2
 8001818:	2b18      	cmp	r3, #24
 800181a:	d10a      	bne.n	8001832 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800181c:	4b2f      	ldr	r3, [pc, #188]	; (80018dc <HAL_RCC_OscConfig+0x330>)
 800181e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001820:	2202      	movs	r2, #2
 8001822:	4013      	ands	r3, r2
 8001824:	d03c      	beq.n	80018a0 <HAL_RCC_OscConfig+0x2f4>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	699b      	ldr	r3, [r3, #24]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d138      	bne.n	80018a0 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e216      	b.n	8001c60 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	699b      	ldr	r3, [r3, #24]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d019      	beq.n	800186e <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800183a:	4b28      	ldr	r3, [pc, #160]	; (80018dc <HAL_RCC_OscConfig+0x330>)
 800183c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800183e:	4b27      	ldr	r3, [pc, #156]	; (80018dc <HAL_RCC_OscConfig+0x330>)
 8001840:	2101      	movs	r1, #1
 8001842:	430a      	orrs	r2, r1
 8001844:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001846:	f7ff fbb1 	bl	8000fac <HAL_GetTick>
 800184a:	0003      	movs	r3, r0
 800184c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800184e:	e008      	b.n	8001862 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001850:	f7ff fbac 	bl	8000fac <HAL_GetTick>
 8001854:	0002      	movs	r2, r0
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b02      	cmp	r3, #2
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e1fe      	b.n	8001c60 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001862:	4b1e      	ldr	r3, [pc, #120]	; (80018dc <HAL_RCC_OscConfig+0x330>)
 8001864:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001866:	2202      	movs	r2, #2
 8001868:	4013      	ands	r3, r2
 800186a:	d0f1      	beq.n	8001850 <HAL_RCC_OscConfig+0x2a4>
 800186c:	e018      	b.n	80018a0 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800186e:	4b1b      	ldr	r3, [pc, #108]	; (80018dc <HAL_RCC_OscConfig+0x330>)
 8001870:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001872:	4b1a      	ldr	r3, [pc, #104]	; (80018dc <HAL_RCC_OscConfig+0x330>)
 8001874:	2101      	movs	r1, #1
 8001876:	438a      	bics	r2, r1
 8001878:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800187a:	f7ff fb97 	bl	8000fac <HAL_GetTick>
 800187e:	0003      	movs	r3, r0
 8001880:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001882:	e008      	b.n	8001896 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001884:	f7ff fb92 	bl	8000fac <HAL_GetTick>
 8001888:	0002      	movs	r2, r0
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b02      	cmp	r3, #2
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e1e4      	b.n	8001c60 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001896:	4b11      	ldr	r3, [pc, #68]	; (80018dc <HAL_RCC_OscConfig+0x330>)
 8001898:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800189a:	2202      	movs	r2, #2
 800189c:	4013      	ands	r3, r2
 800189e:	d1f1      	bne.n	8001884 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2204      	movs	r2, #4
 80018a6:	4013      	ands	r3, r2
 80018a8:	d100      	bne.n	80018ac <HAL_RCC_OscConfig+0x300>
 80018aa:	e0c7      	b.n	8001a3c <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018ac:	231f      	movs	r3, #31
 80018ae:	18fb      	adds	r3, r7, r3
 80018b0:	2200      	movs	r2, #0
 80018b2:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80018b4:	4b09      	ldr	r3, [pc, #36]	; (80018dc <HAL_RCC_OscConfig+0x330>)
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	2238      	movs	r2, #56	; 0x38
 80018ba:	4013      	ands	r3, r2
 80018bc:	2b20      	cmp	r3, #32
 80018be:	d11f      	bne.n	8001900 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80018c0:	4b06      	ldr	r3, [pc, #24]	; (80018dc <HAL_RCC_OscConfig+0x330>)
 80018c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018c4:	2202      	movs	r2, #2
 80018c6:	4013      	ands	r3, r2
 80018c8:	d100      	bne.n	80018cc <HAL_RCC_OscConfig+0x320>
 80018ca:	e0b7      	b.n	8001a3c <HAL_RCC_OscConfig+0x490>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d000      	beq.n	80018d6 <HAL_RCC_OscConfig+0x32a>
 80018d4:	e0b2      	b.n	8001a3c <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e1c2      	b.n	8001c60 <HAL_RCC_OscConfig+0x6b4>
 80018da:	46c0      	nop			; (mov r8, r8)
 80018dc:	40021000 	.word	0x40021000
 80018e0:	fffeffff 	.word	0xfffeffff
 80018e4:	fffbffff 	.word	0xfffbffff
 80018e8:	ffff80ff 	.word	0xffff80ff
 80018ec:	ffffc7ff 	.word	0xffffc7ff
 80018f0:	00f42400 	.word	0x00f42400
 80018f4:	20000008 	.word	0x20000008
 80018f8:	2000000c 	.word	0x2000000c
 80018fc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001900:	4bb5      	ldr	r3, [pc, #724]	; (8001bd8 <HAL_RCC_OscConfig+0x62c>)
 8001902:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001904:	2380      	movs	r3, #128	; 0x80
 8001906:	055b      	lsls	r3, r3, #21
 8001908:	4013      	ands	r3, r2
 800190a:	d101      	bne.n	8001910 <HAL_RCC_OscConfig+0x364>
 800190c:	2301      	movs	r3, #1
 800190e:	e000      	b.n	8001912 <HAL_RCC_OscConfig+0x366>
 8001910:	2300      	movs	r3, #0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d011      	beq.n	800193a <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001916:	4bb0      	ldr	r3, [pc, #704]	; (8001bd8 <HAL_RCC_OscConfig+0x62c>)
 8001918:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800191a:	4baf      	ldr	r3, [pc, #700]	; (8001bd8 <HAL_RCC_OscConfig+0x62c>)
 800191c:	2180      	movs	r1, #128	; 0x80
 800191e:	0549      	lsls	r1, r1, #21
 8001920:	430a      	orrs	r2, r1
 8001922:	63da      	str	r2, [r3, #60]	; 0x3c
 8001924:	4bac      	ldr	r3, [pc, #688]	; (8001bd8 <HAL_RCC_OscConfig+0x62c>)
 8001926:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001928:	2380      	movs	r3, #128	; 0x80
 800192a:	055b      	lsls	r3, r3, #21
 800192c:	4013      	ands	r3, r2
 800192e:	60fb      	str	r3, [r7, #12]
 8001930:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001932:	231f      	movs	r3, #31
 8001934:	18fb      	adds	r3, r7, r3
 8001936:	2201      	movs	r2, #1
 8001938:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800193a:	4ba8      	ldr	r3, [pc, #672]	; (8001bdc <HAL_RCC_OscConfig+0x630>)
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	2380      	movs	r3, #128	; 0x80
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	4013      	ands	r3, r2
 8001944:	d11a      	bne.n	800197c <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001946:	4ba5      	ldr	r3, [pc, #660]	; (8001bdc <HAL_RCC_OscConfig+0x630>)
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	4ba4      	ldr	r3, [pc, #656]	; (8001bdc <HAL_RCC_OscConfig+0x630>)
 800194c:	2180      	movs	r1, #128	; 0x80
 800194e:	0049      	lsls	r1, r1, #1
 8001950:	430a      	orrs	r2, r1
 8001952:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001954:	f7ff fb2a 	bl	8000fac <HAL_GetTick>
 8001958:	0003      	movs	r3, r0
 800195a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800195c:	e008      	b.n	8001970 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800195e:	f7ff fb25 	bl	8000fac <HAL_GetTick>
 8001962:	0002      	movs	r2, r0
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	2b02      	cmp	r3, #2
 800196a:	d901      	bls.n	8001970 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 800196c:	2303      	movs	r3, #3
 800196e:	e177      	b.n	8001c60 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001970:	4b9a      	ldr	r3, [pc, #616]	; (8001bdc <HAL_RCC_OscConfig+0x630>)
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	2380      	movs	r3, #128	; 0x80
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	4013      	ands	r3, r2
 800197a:	d0f0      	beq.n	800195e <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d106      	bne.n	8001992 <HAL_RCC_OscConfig+0x3e6>
 8001984:	4b94      	ldr	r3, [pc, #592]	; (8001bd8 <HAL_RCC_OscConfig+0x62c>)
 8001986:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001988:	4b93      	ldr	r3, [pc, #588]	; (8001bd8 <HAL_RCC_OscConfig+0x62c>)
 800198a:	2101      	movs	r1, #1
 800198c:	430a      	orrs	r2, r1
 800198e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001990:	e01c      	b.n	80019cc <HAL_RCC_OscConfig+0x420>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	2b05      	cmp	r3, #5
 8001998:	d10c      	bne.n	80019b4 <HAL_RCC_OscConfig+0x408>
 800199a:	4b8f      	ldr	r3, [pc, #572]	; (8001bd8 <HAL_RCC_OscConfig+0x62c>)
 800199c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800199e:	4b8e      	ldr	r3, [pc, #568]	; (8001bd8 <HAL_RCC_OscConfig+0x62c>)
 80019a0:	2104      	movs	r1, #4
 80019a2:	430a      	orrs	r2, r1
 80019a4:	65da      	str	r2, [r3, #92]	; 0x5c
 80019a6:	4b8c      	ldr	r3, [pc, #560]	; (8001bd8 <HAL_RCC_OscConfig+0x62c>)
 80019a8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80019aa:	4b8b      	ldr	r3, [pc, #556]	; (8001bd8 <HAL_RCC_OscConfig+0x62c>)
 80019ac:	2101      	movs	r1, #1
 80019ae:	430a      	orrs	r2, r1
 80019b0:	65da      	str	r2, [r3, #92]	; 0x5c
 80019b2:	e00b      	b.n	80019cc <HAL_RCC_OscConfig+0x420>
 80019b4:	4b88      	ldr	r3, [pc, #544]	; (8001bd8 <HAL_RCC_OscConfig+0x62c>)
 80019b6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80019b8:	4b87      	ldr	r3, [pc, #540]	; (8001bd8 <HAL_RCC_OscConfig+0x62c>)
 80019ba:	2101      	movs	r1, #1
 80019bc:	438a      	bics	r2, r1
 80019be:	65da      	str	r2, [r3, #92]	; 0x5c
 80019c0:	4b85      	ldr	r3, [pc, #532]	; (8001bd8 <HAL_RCC_OscConfig+0x62c>)
 80019c2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80019c4:	4b84      	ldr	r3, [pc, #528]	; (8001bd8 <HAL_RCC_OscConfig+0x62c>)
 80019c6:	2104      	movs	r1, #4
 80019c8:	438a      	bics	r2, r1
 80019ca:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d014      	beq.n	80019fe <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d4:	f7ff faea 	bl	8000fac <HAL_GetTick>
 80019d8:	0003      	movs	r3, r0
 80019da:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019dc:	e009      	b.n	80019f2 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019de:	f7ff fae5 	bl	8000fac <HAL_GetTick>
 80019e2:	0002      	movs	r2, r0
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	4a7d      	ldr	r2, [pc, #500]	; (8001be0 <HAL_RCC_OscConfig+0x634>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e136      	b.n	8001c60 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019f2:	4b79      	ldr	r3, [pc, #484]	; (8001bd8 <HAL_RCC_OscConfig+0x62c>)
 80019f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019f6:	2202      	movs	r2, #2
 80019f8:	4013      	ands	r3, r2
 80019fa:	d0f0      	beq.n	80019de <HAL_RCC_OscConfig+0x432>
 80019fc:	e013      	b.n	8001a26 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019fe:	f7ff fad5 	bl	8000fac <HAL_GetTick>
 8001a02:	0003      	movs	r3, r0
 8001a04:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a06:	e009      	b.n	8001a1c <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a08:	f7ff fad0 	bl	8000fac <HAL_GetTick>
 8001a0c:	0002      	movs	r2, r0
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	4a73      	ldr	r2, [pc, #460]	; (8001be0 <HAL_RCC_OscConfig+0x634>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d901      	bls.n	8001a1c <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e121      	b.n	8001c60 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a1c:	4b6e      	ldr	r3, [pc, #440]	; (8001bd8 <HAL_RCC_OscConfig+0x62c>)
 8001a1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a20:	2202      	movs	r2, #2
 8001a22:	4013      	ands	r3, r2
 8001a24:	d1f0      	bne.n	8001a08 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001a26:	231f      	movs	r3, #31
 8001a28:	18fb      	adds	r3, r7, r3
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d105      	bne.n	8001a3c <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001a30:	4b69      	ldr	r3, [pc, #420]	; (8001bd8 <HAL_RCC_OscConfig+0x62c>)
 8001a32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a34:	4b68      	ldr	r3, [pc, #416]	; (8001bd8 <HAL_RCC_OscConfig+0x62c>)
 8001a36:	496b      	ldr	r1, [pc, #428]	; (8001be4 <HAL_RCC_OscConfig+0x638>)
 8001a38:	400a      	ands	r2, r1
 8001a3a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2220      	movs	r2, #32
 8001a42:	4013      	ands	r3, r2
 8001a44:	d039      	beq.n	8001aba <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	69db      	ldr	r3, [r3, #28]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d01b      	beq.n	8001a86 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a4e:	4b62      	ldr	r3, [pc, #392]	; (8001bd8 <HAL_RCC_OscConfig+0x62c>)
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	4b61      	ldr	r3, [pc, #388]	; (8001bd8 <HAL_RCC_OscConfig+0x62c>)
 8001a54:	2180      	movs	r1, #128	; 0x80
 8001a56:	03c9      	lsls	r1, r1, #15
 8001a58:	430a      	orrs	r2, r1
 8001a5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a5c:	f7ff faa6 	bl	8000fac <HAL_GetTick>
 8001a60:	0003      	movs	r3, r0
 8001a62:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001a64:	e008      	b.n	8001a78 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a66:	f7ff faa1 	bl	8000fac <HAL_GetTick>
 8001a6a:	0002      	movs	r2, r0
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d901      	bls.n	8001a78 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e0f3      	b.n	8001c60 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001a78:	4b57      	ldr	r3, [pc, #348]	; (8001bd8 <HAL_RCC_OscConfig+0x62c>)
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	2380      	movs	r3, #128	; 0x80
 8001a7e:	041b      	lsls	r3, r3, #16
 8001a80:	4013      	ands	r3, r2
 8001a82:	d0f0      	beq.n	8001a66 <HAL_RCC_OscConfig+0x4ba>
 8001a84:	e019      	b.n	8001aba <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001a86:	4b54      	ldr	r3, [pc, #336]	; (8001bd8 <HAL_RCC_OscConfig+0x62c>)
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	4b53      	ldr	r3, [pc, #332]	; (8001bd8 <HAL_RCC_OscConfig+0x62c>)
 8001a8c:	4956      	ldr	r1, [pc, #344]	; (8001be8 <HAL_RCC_OscConfig+0x63c>)
 8001a8e:	400a      	ands	r2, r1
 8001a90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a92:	f7ff fa8b 	bl	8000fac <HAL_GetTick>
 8001a96:	0003      	movs	r3, r0
 8001a98:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001a9a:	e008      	b.n	8001aae <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a9c:	f7ff fa86 	bl	8000fac <HAL_GetTick>
 8001aa0:	0002      	movs	r2, r0
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e0d8      	b.n	8001c60 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001aae:	4b4a      	ldr	r3, [pc, #296]	; (8001bd8 <HAL_RCC_OscConfig+0x62c>)
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	2380      	movs	r3, #128	; 0x80
 8001ab4:	041b      	lsls	r3, r3, #16
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	d1f0      	bne.n	8001a9c <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6a1b      	ldr	r3, [r3, #32]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d100      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x518>
 8001ac2:	e0cc      	b.n	8001c5e <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ac4:	4b44      	ldr	r3, [pc, #272]	; (8001bd8 <HAL_RCC_OscConfig+0x62c>)
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	2238      	movs	r2, #56	; 0x38
 8001aca:	4013      	ands	r3, r2
 8001acc:	2b10      	cmp	r3, #16
 8001ace:	d100      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x526>
 8001ad0:	e07b      	b.n	8001bca <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6a1b      	ldr	r3, [r3, #32]
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d156      	bne.n	8001b88 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ada:	4b3f      	ldr	r3, [pc, #252]	; (8001bd8 <HAL_RCC_OscConfig+0x62c>)
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	4b3e      	ldr	r3, [pc, #248]	; (8001bd8 <HAL_RCC_OscConfig+0x62c>)
 8001ae0:	4942      	ldr	r1, [pc, #264]	; (8001bec <HAL_RCC_OscConfig+0x640>)
 8001ae2:	400a      	ands	r2, r1
 8001ae4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae6:	f7ff fa61 	bl	8000fac <HAL_GetTick>
 8001aea:	0003      	movs	r3, r0
 8001aec:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001aee:	e008      	b.n	8001b02 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001af0:	f7ff fa5c 	bl	8000fac <HAL_GetTick>
 8001af4:	0002      	movs	r2, r0
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e0ae      	b.n	8001c60 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b02:	4b35      	ldr	r3, [pc, #212]	; (8001bd8 <HAL_RCC_OscConfig+0x62c>)
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	2380      	movs	r3, #128	; 0x80
 8001b08:	049b      	lsls	r3, r3, #18
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	d1f0      	bne.n	8001af0 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b0e:	4b32      	ldr	r3, [pc, #200]	; (8001bd8 <HAL_RCC_OscConfig+0x62c>)
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	4a37      	ldr	r2, [pc, #220]	; (8001bf0 <HAL_RCC_OscConfig+0x644>)
 8001b14:	4013      	ands	r3, r2
 8001b16:	0019      	movs	r1, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b20:	431a      	orrs	r2, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b26:	021b      	lsls	r3, r3, #8
 8001b28:	431a      	orrs	r2, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	431a      	orrs	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b34:	431a      	orrs	r2, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b3a:	431a      	orrs	r2, r3
 8001b3c:	4b26      	ldr	r3, [pc, #152]	; (8001bd8 <HAL_RCC_OscConfig+0x62c>)
 8001b3e:	430a      	orrs	r2, r1
 8001b40:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b42:	4b25      	ldr	r3, [pc, #148]	; (8001bd8 <HAL_RCC_OscConfig+0x62c>)
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	4b24      	ldr	r3, [pc, #144]	; (8001bd8 <HAL_RCC_OscConfig+0x62c>)
 8001b48:	2180      	movs	r1, #128	; 0x80
 8001b4a:	0449      	lsls	r1, r1, #17
 8001b4c:	430a      	orrs	r2, r1
 8001b4e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001b50:	4b21      	ldr	r3, [pc, #132]	; (8001bd8 <HAL_RCC_OscConfig+0x62c>)
 8001b52:	68da      	ldr	r2, [r3, #12]
 8001b54:	4b20      	ldr	r3, [pc, #128]	; (8001bd8 <HAL_RCC_OscConfig+0x62c>)
 8001b56:	2180      	movs	r1, #128	; 0x80
 8001b58:	0549      	lsls	r1, r1, #21
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b5e:	f7ff fa25 	bl	8000fac <HAL_GetTick>
 8001b62:	0003      	movs	r3, r0
 8001b64:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b66:	e008      	b.n	8001b7a <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b68:	f7ff fa20 	bl	8000fac <HAL_GetTick>
 8001b6c:	0002      	movs	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e072      	b.n	8001c60 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b7a:	4b17      	ldr	r3, [pc, #92]	; (8001bd8 <HAL_RCC_OscConfig+0x62c>)
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	2380      	movs	r3, #128	; 0x80
 8001b80:	049b      	lsls	r3, r3, #18
 8001b82:	4013      	ands	r3, r2
 8001b84:	d0f0      	beq.n	8001b68 <HAL_RCC_OscConfig+0x5bc>
 8001b86:	e06a      	b.n	8001c5e <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b88:	4b13      	ldr	r3, [pc, #76]	; (8001bd8 <HAL_RCC_OscConfig+0x62c>)
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	4b12      	ldr	r3, [pc, #72]	; (8001bd8 <HAL_RCC_OscConfig+0x62c>)
 8001b8e:	4917      	ldr	r1, [pc, #92]	; (8001bec <HAL_RCC_OscConfig+0x640>)
 8001b90:	400a      	ands	r2, r1
 8001b92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b94:	f7ff fa0a 	bl	8000fac <HAL_GetTick>
 8001b98:	0003      	movs	r3, r0
 8001b9a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b9c:	e008      	b.n	8001bb0 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b9e:	f7ff fa05 	bl	8000fac <HAL_GetTick>
 8001ba2:	0002      	movs	r2, r0
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d901      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e057      	b.n	8001c60 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bb0:	4b09      	ldr	r3, [pc, #36]	; (8001bd8 <HAL_RCC_OscConfig+0x62c>)
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	2380      	movs	r3, #128	; 0x80
 8001bb6:	049b      	lsls	r3, r3, #18
 8001bb8:	4013      	ands	r3, r2
 8001bba:	d1f0      	bne.n	8001b9e <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001bbc:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <HAL_RCC_OscConfig+0x62c>)
 8001bbe:	68da      	ldr	r2, [r3, #12]
 8001bc0:	4b05      	ldr	r3, [pc, #20]	; (8001bd8 <HAL_RCC_OscConfig+0x62c>)
 8001bc2:	490c      	ldr	r1, [pc, #48]	; (8001bf4 <HAL_RCC_OscConfig+0x648>)
 8001bc4:	400a      	ands	r2, r1
 8001bc6:	60da      	str	r2, [r3, #12]
 8001bc8:	e049      	b.n	8001c5e <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6a1b      	ldr	r3, [r3, #32]
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d112      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e044      	b.n	8001c60 <HAL_RCC_OscConfig+0x6b4>
 8001bd6:	46c0      	nop			; (mov r8, r8)
 8001bd8:	40021000 	.word	0x40021000
 8001bdc:	40007000 	.word	0x40007000
 8001be0:	00001388 	.word	0x00001388
 8001be4:	efffffff 	.word	0xefffffff
 8001be8:	ffbfffff 	.word	0xffbfffff
 8001bec:	feffffff 	.word	0xfeffffff
 8001bf0:	11c1808c 	.word	0x11c1808c
 8001bf4:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001bf8:	4b1b      	ldr	r3, [pc, #108]	; (8001c68 <HAL_RCC_OscConfig+0x6bc>)
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	2203      	movs	r2, #3
 8001c02:	401a      	ands	r2, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d126      	bne.n	8001c5a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	2270      	movs	r2, #112	; 0x70
 8001c10:	401a      	ands	r2, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d11f      	bne.n	8001c5a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c1a:	697a      	ldr	r2, [r7, #20]
 8001c1c:	23fe      	movs	r3, #254	; 0xfe
 8001c1e:	01db      	lsls	r3, r3, #7
 8001c20:	401a      	ands	r2, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c26:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d116      	bne.n	8001c5a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001c2c:	697a      	ldr	r2, [r7, #20]
 8001c2e:	23f8      	movs	r3, #248	; 0xf8
 8001c30:	039b      	lsls	r3, r3, #14
 8001c32:	401a      	ands	r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d10e      	bne.n	8001c5a <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001c3c:	697a      	ldr	r2, [r7, #20]
 8001c3e:	23e0      	movs	r3, #224	; 0xe0
 8001c40:	051b      	lsls	r3, r3, #20
 8001c42:	401a      	ands	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d106      	bne.n	8001c5a <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	0f5b      	lsrs	r3, r3, #29
 8001c50:	075a      	lsls	r2, r3, #29
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d001      	beq.n	8001c5e <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e000      	b.n	8001c60 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8001c5e:	2300      	movs	r3, #0
}
 8001c60:	0018      	movs	r0, r3
 8001c62:	46bd      	mov	sp, r7
 8001c64:	b008      	add	sp, #32
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	40021000 	.word	0x40021000

08001c6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d101      	bne.n	8001c80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e0e9      	b.n	8001e54 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c80:	4b76      	ldr	r3, [pc, #472]	; (8001e5c <HAL_RCC_ClockConfig+0x1f0>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2207      	movs	r2, #7
 8001c86:	4013      	ands	r3, r2
 8001c88:	683a      	ldr	r2, [r7, #0]
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d91e      	bls.n	8001ccc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c8e:	4b73      	ldr	r3, [pc, #460]	; (8001e5c <HAL_RCC_ClockConfig+0x1f0>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2207      	movs	r2, #7
 8001c94:	4393      	bics	r3, r2
 8001c96:	0019      	movs	r1, r3
 8001c98:	4b70      	ldr	r3, [pc, #448]	; (8001e5c <HAL_RCC_ClockConfig+0x1f0>)
 8001c9a:	683a      	ldr	r2, [r7, #0]
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ca0:	f7ff f984 	bl	8000fac <HAL_GetTick>
 8001ca4:	0003      	movs	r3, r0
 8001ca6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ca8:	e009      	b.n	8001cbe <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001caa:	f7ff f97f 	bl	8000fac <HAL_GetTick>
 8001cae:	0002      	movs	r2, r0
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	4a6a      	ldr	r2, [pc, #424]	; (8001e60 <HAL_RCC_ClockConfig+0x1f4>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e0ca      	b.n	8001e54 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001cbe:	4b67      	ldr	r3, [pc, #412]	; (8001e5c <HAL_RCC_ClockConfig+0x1f0>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2207      	movs	r2, #7
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	683a      	ldr	r2, [r7, #0]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d1ee      	bne.n	8001caa <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2202      	movs	r2, #2
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	d015      	beq.n	8001d02 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	2204      	movs	r2, #4
 8001cdc:	4013      	ands	r3, r2
 8001cde:	d006      	beq.n	8001cee <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001ce0:	4b60      	ldr	r3, [pc, #384]	; (8001e64 <HAL_RCC_ClockConfig+0x1f8>)
 8001ce2:	689a      	ldr	r2, [r3, #8]
 8001ce4:	4b5f      	ldr	r3, [pc, #380]	; (8001e64 <HAL_RCC_ClockConfig+0x1f8>)
 8001ce6:	21e0      	movs	r1, #224	; 0xe0
 8001ce8:	01c9      	lsls	r1, r1, #7
 8001cea:	430a      	orrs	r2, r1
 8001cec:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cee:	4b5d      	ldr	r3, [pc, #372]	; (8001e64 <HAL_RCC_ClockConfig+0x1f8>)
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	4a5d      	ldr	r2, [pc, #372]	; (8001e68 <HAL_RCC_ClockConfig+0x1fc>)
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	0019      	movs	r1, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	689a      	ldr	r2, [r3, #8]
 8001cfc:	4b59      	ldr	r3, [pc, #356]	; (8001e64 <HAL_RCC_ClockConfig+0x1f8>)
 8001cfe:	430a      	orrs	r2, r1
 8001d00:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	2201      	movs	r2, #1
 8001d08:	4013      	ands	r3, r2
 8001d0a:	d057      	beq.n	8001dbc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d107      	bne.n	8001d24 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d14:	4b53      	ldr	r3, [pc, #332]	; (8001e64 <HAL_RCC_ClockConfig+0x1f8>)
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	2380      	movs	r3, #128	; 0x80
 8001d1a:	029b      	lsls	r3, r3, #10
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	d12b      	bne.n	8001d78 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e097      	b.n	8001e54 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d107      	bne.n	8001d3c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d2c:	4b4d      	ldr	r3, [pc, #308]	; (8001e64 <HAL_RCC_ClockConfig+0x1f8>)
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	2380      	movs	r3, #128	; 0x80
 8001d32:	049b      	lsls	r3, r3, #18
 8001d34:	4013      	ands	r3, r2
 8001d36:	d11f      	bne.n	8001d78 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e08b      	b.n	8001e54 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d107      	bne.n	8001d54 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d44:	4b47      	ldr	r3, [pc, #284]	; (8001e64 <HAL_RCC_ClockConfig+0x1f8>)
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	2380      	movs	r3, #128	; 0x80
 8001d4a:	00db      	lsls	r3, r3, #3
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	d113      	bne.n	8001d78 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e07f      	b.n	8001e54 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	2b03      	cmp	r3, #3
 8001d5a:	d106      	bne.n	8001d6a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d5c:	4b41      	ldr	r3, [pc, #260]	; (8001e64 <HAL_RCC_ClockConfig+0x1f8>)
 8001d5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d60:	2202      	movs	r2, #2
 8001d62:	4013      	ands	r3, r2
 8001d64:	d108      	bne.n	8001d78 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e074      	b.n	8001e54 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d6a:	4b3e      	ldr	r3, [pc, #248]	; (8001e64 <HAL_RCC_ClockConfig+0x1f8>)
 8001d6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d6e:	2202      	movs	r2, #2
 8001d70:	4013      	ands	r3, r2
 8001d72:	d101      	bne.n	8001d78 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e06d      	b.n	8001e54 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d78:	4b3a      	ldr	r3, [pc, #232]	; (8001e64 <HAL_RCC_ClockConfig+0x1f8>)
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	2207      	movs	r2, #7
 8001d7e:	4393      	bics	r3, r2
 8001d80:	0019      	movs	r1, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685a      	ldr	r2, [r3, #4]
 8001d86:	4b37      	ldr	r3, [pc, #220]	; (8001e64 <HAL_RCC_ClockConfig+0x1f8>)
 8001d88:	430a      	orrs	r2, r1
 8001d8a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d8c:	f7ff f90e 	bl	8000fac <HAL_GetTick>
 8001d90:	0003      	movs	r3, r0
 8001d92:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d94:	e009      	b.n	8001daa <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d96:	f7ff f909 	bl	8000fac <HAL_GetTick>
 8001d9a:	0002      	movs	r2, r0
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	4a2f      	ldr	r2, [pc, #188]	; (8001e60 <HAL_RCC_ClockConfig+0x1f4>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e054      	b.n	8001e54 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001daa:	4b2e      	ldr	r3, [pc, #184]	; (8001e64 <HAL_RCC_ClockConfig+0x1f8>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	2238      	movs	r2, #56	; 0x38
 8001db0:	401a      	ands	r2, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	00db      	lsls	r3, r3, #3
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d1ec      	bne.n	8001d96 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001dbc:	4b27      	ldr	r3, [pc, #156]	; (8001e5c <HAL_RCC_ClockConfig+0x1f0>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2207      	movs	r2, #7
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	683a      	ldr	r2, [r7, #0]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d21e      	bcs.n	8001e08 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dca:	4b24      	ldr	r3, [pc, #144]	; (8001e5c <HAL_RCC_ClockConfig+0x1f0>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	2207      	movs	r2, #7
 8001dd0:	4393      	bics	r3, r2
 8001dd2:	0019      	movs	r1, r3
 8001dd4:	4b21      	ldr	r3, [pc, #132]	; (8001e5c <HAL_RCC_ClockConfig+0x1f0>)
 8001dd6:	683a      	ldr	r2, [r7, #0]
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ddc:	f7ff f8e6 	bl	8000fac <HAL_GetTick>
 8001de0:	0003      	movs	r3, r0
 8001de2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001de4:	e009      	b.n	8001dfa <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001de6:	f7ff f8e1 	bl	8000fac <HAL_GetTick>
 8001dea:	0002      	movs	r2, r0
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	4a1b      	ldr	r2, [pc, #108]	; (8001e60 <HAL_RCC_ClockConfig+0x1f4>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e02c      	b.n	8001e54 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001dfa:	4b18      	ldr	r3, [pc, #96]	; (8001e5c <HAL_RCC_ClockConfig+0x1f0>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2207      	movs	r2, #7
 8001e00:	4013      	ands	r3, r2
 8001e02:	683a      	ldr	r2, [r7, #0]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d1ee      	bne.n	8001de6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2204      	movs	r2, #4
 8001e0e:	4013      	ands	r3, r2
 8001e10:	d009      	beq.n	8001e26 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001e12:	4b14      	ldr	r3, [pc, #80]	; (8001e64 <HAL_RCC_ClockConfig+0x1f8>)
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	4a15      	ldr	r2, [pc, #84]	; (8001e6c <HAL_RCC_ClockConfig+0x200>)
 8001e18:	4013      	ands	r3, r2
 8001e1a:	0019      	movs	r1, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	68da      	ldr	r2, [r3, #12]
 8001e20:	4b10      	ldr	r3, [pc, #64]	; (8001e64 <HAL_RCC_ClockConfig+0x1f8>)
 8001e22:	430a      	orrs	r2, r1
 8001e24:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001e26:	f000 f829 	bl	8001e7c <HAL_RCC_GetSysClockFreq>
 8001e2a:	0001      	movs	r1, r0
 8001e2c:	4b0d      	ldr	r3, [pc, #52]	; (8001e64 <HAL_RCC_ClockConfig+0x1f8>)
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	0a1b      	lsrs	r3, r3, #8
 8001e32:	220f      	movs	r2, #15
 8001e34:	401a      	ands	r2, r3
 8001e36:	4b0e      	ldr	r3, [pc, #56]	; (8001e70 <HAL_RCC_ClockConfig+0x204>)
 8001e38:	0092      	lsls	r2, r2, #2
 8001e3a:	58d3      	ldr	r3, [r2, r3]
 8001e3c:	221f      	movs	r2, #31
 8001e3e:	4013      	ands	r3, r2
 8001e40:	000a      	movs	r2, r1
 8001e42:	40da      	lsrs	r2, r3
 8001e44:	4b0b      	ldr	r3, [pc, #44]	; (8001e74 <HAL_RCC_ClockConfig+0x208>)
 8001e46:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001e48:	4b0b      	ldr	r3, [pc, #44]	; (8001e78 <HAL_RCC_ClockConfig+0x20c>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	0018      	movs	r0, r3
 8001e4e:	f7ff f851 	bl	8000ef4 <HAL_InitTick>
 8001e52:	0003      	movs	r3, r0
}
 8001e54:	0018      	movs	r0, r3
 8001e56:	46bd      	mov	sp, r7
 8001e58:	b004      	add	sp, #16
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	40022000 	.word	0x40022000
 8001e60:	00001388 	.word	0x00001388
 8001e64:	40021000 	.word	0x40021000
 8001e68:	fffff0ff 	.word	0xfffff0ff
 8001e6c:	ffff8fff 	.word	0xffff8fff
 8001e70:	08006f64 	.word	0x08006f64
 8001e74:	20000008 	.word	0x20000008
 8001e78:	2000000c 	.word	0x2000000c

08001e7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b086      	sub	sp, #24
 8001e80:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e82:	4b3c      	ldr	r3, [pc, #240]	; (8001f74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	2238      	movs	r2, #56	; 0x38
 8001e88:	4013      	ands	r3, r2
 8001e8a:	d10f      	bne.n	8001eac <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001e8c:	4b39      	ldr	r3, [pc, #228]	; (8001f74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	0adb      	lsrs	r3, r3, #11
 8001e92:	2207      	movs	r2, #7
 8001e94:	4013      	ands	r3, r2
 8001e96:	2201      	movs	r2, #1
 8001e98:	409a      	lsls	r2, r3
 8001e9a:	0013      	movs	r3, r2
 8001e9c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001e9e:	6839      	ldr	r1, [r7, #0]
 8001ea0:	4835      	ldr	r0, [pc, #212]	; (8001f78 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001ea2:	f7fe f941 	bl	8000128 <__udivsi3>
 8001ea6:	0003      	movs	r3, r0
 8001ea8:	613b      	str	r3, [r7, #16]
 8001eaa:	e05d      	b.n	8001f68 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001eac:	4b31      	ldr	r3, [pc, #196]	; (8001f74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	2238      	movs	r2, #56	; 0x38
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	2b08      	cmp	r3, #8
 8001eb6:	d102      	bne.n	8001ebe <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001eb8:	4b30      	ldr	r3, [pc, #192]	; (8001f7c <HAL_RCC_GetSysClockFreq+0x100>)
 8001eba:	613b      	str	r3, [r7, #16]
 8001ebc:	e054      	b.n	8001f68 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ebe:	4b2d      	ldr	r3, [pc, #180]	; (8001f74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	2238      	movs	r2, #56	; 0x38
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	2b10      	cmp	r3, #16
 8001ec8:	d138      	bne.n	8001f3c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001eca:	4b2a      	ldr	r3, [pc, #168]	; (8001f74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	2203      	movs	r2, #3
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ed4:	4b27      	ldr	r3, [pc, #156]	; (8001f74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	091b      	lsrs	r3, r3, #4
 8001eda:	2207      	movs	r2, #7
 8001edc:	4013      	ands	r3, r2
 8001ede:	3301      	adds	r3, #1
 8001ee0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2b03      	cmp	r3, #3
 8001ee6:	d10d      	bne.n	8001f04 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ee8:	68b9      	ldr	r1, [r7, #8]
 8001eea:	4824      	ldr	r0, [pc, #144]	; (8001f7c <HAL_RCC_GetSysClockFreq+0x100>)
 8001eec:	f7fe f91c 	bl	8000128 <__udivsi3>
 8001ef0:	0003      	movs	r3, r0
 8001ef2:	0019      	movs	r1, r3
 8001ef4:	4b1f      	ldr	r3, [pc, #124]	; (8001f74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	0a1b      	lsrs	r3, r3, #8
 8001efa:	227f      	movs	r2, #127	; 0x7f
 8001efc:	4013      	ands	r3, r2
 8001efe:	434b      	muls	r3, r1
 8001f00:	617b      	str	r3, [r7, #20]
        break;
 8001f02:	e00d      	b.n	8001f20 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001f04:	68b9      	ldr	r1, [r7, #8]
 8001f06:	481c      	ldr	r0, [pc, #112]	; (8001f78 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001f08:	f7fe f90e 	bl	8000128 <__udivsi3>
 8001f0c:	0003      	movs	r3, r0
 8001f0e:	0019      	movs	r1, r3
 8001f10:	4b18      	ldr	r3, [pc, #96]	; (8001f74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	0a1b      	lsrs	r3, r3, #8
 8001f16:	227f      	movs	r2, #127	; 0x7f
 8001f18:	4013      	ands	r3, r2
 8001f1a:	434b      	muls	r3, r1
 8001f1c:	617b      	str	r3, [r7, #20]
        break;
 8001f1e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001f20:	4b14      	ldr	r3, [pc, #80]	; (8001f74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	0f5b      	lsrs	r3, r3, #29
 8001f26:	2207      	movs	r2, #7
 8001f28:	4013      	ands	r3, r2
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001f2e:	6879      	ldr	r1, [r7, #4]
 8001f30:	6978      	ldr	r0, [r7, #20]
 8001f32:	f7fe f8f9 	bl	8000128 <__udivsi3>
 8001f36:	0003      	movs	r3, r0
 8001f38:	613b      	str	r3, [r7, #16]
 8001f3a:	e015      	b.n	8001f68 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001f3c:	4b0d      	ldr	r3, [pc, #52]	; (8001f74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	2238      	movs	r2, #56	; 0x38
 8001f42:	4013      	ands	r3, r2
 8001f44:	2b20      	cmp	r3, #32
 8001f46:	d103      	bne.n	8001f50 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001f48:	2380      	movs	r3, #128	; 0x80
 8001f4a:	021b      	lsls	r3, r3, #8
 8001f4c:	613b      	str	r3, [r7, #16]
 8001f4e:	e00b      	b.n	8001f68 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001f50:	4b08      	ldr	r3, [pc, #32]	; (8001f74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	2238      	movs	r2, #56	; 0x38
 8001f56:	4013      	ands	r3, r2
 8001f58:	2b18      	cmp	r3, #24
 8001f5a:	d103      	bne.n	8001f64 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001f5c:	23fa      	movs	r3, #250	; 0xfa
 8001f5e:	01db      	lsls	r3, r3, #7
 8001f60:	613b      	str	r3, [r7, #16]
 8001f62:	e001      	b.n	8001f68 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001f64:	2300      	movs	r3, #0
 8001f66:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001f68:	693b      	ldr	r3, [r7, #16]
}
 8001f6a:	0018      	movs	r0, r3
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	b006      	add	sp, #24
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	46c0      	nop			; (mov r8, r8)
 8001f74:	40021000 	.word	0x40021000
 8001f78:	00f42400 	.word	0x00f42400
 8001f7c:	007a1200 	.word	0x007a1200

08001f80 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f84:	4b02      	ldr	r3, [pc, #8]	; (8001f90 <HAL_RCC_GetHCLKFreq+0x10>)
 8001f86:	681b      	ldr	r3, [r3, #0]
}
 8001f88:	0018      	movs	r0, r3
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	46c0      	nop			; (mov r8, r8)
 8001f90:	20000008 	.word	0x20000008

08001f94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f94:	b5b0      	push	{r4, r5, r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001f98:	f7ff fff2 	bl	8001f80 <HAL_RCC_GetHCLKFreq>
 8001f9c:	0004      	movs	r4, r0
 8001f9e:	f7ff faf9 	bl	8001594 <LL_RCC_GetAPB1Prescaler>
 8001fa2:	0003      	movs	r3, r0
 8001fa4:	0b1a      	lsrs	r2, r3, #12
 8001fa6:	4b05      	ldr	r3, [pc, #20]	; (8001fbc <HAL_RCC_GetPCLK1Freq+0x28>)
 8001fa8:	0092      	lsls	r2, r2, #2
 8001faa:	58d3      	ldr	r3, [r2, r3]
 8001fac:	221f      	movs	r2, #31
 8001fae:	4013      	ands	r3, r2
 8001fb0:	40dc      	lsrs	r4, r3
 8001fb2:	0023      	movs	r3, r4
}
 8001fb4:	0018      	movs	r0, r3
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bdb0      	pop	{r4, r5, r7, pc}
 8001fba:	46c0      	nop			; (mov r8, r8)
 8001fbc:	08006fa4 	.word	0x08006fa4

08001fc0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b086      	sub	sp, #24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001fc8:	2313      	movs	r3, #19
 8001fca:	18fb      	adds	r3, r7, r3
 8001fcc:	2200      	movs	r2, #0
 8001fce:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001fd0:	2312      	movs	r3, #18
 8001fd2:	18fb      	adds	r3, r7, r3
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	2380      	movs	r3, #128	; 0x80
 8001fde:	029b      	lsls	r3, r3, #10
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	d100      	bne.n	8001fe6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001fe4:	e0ad      	b.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fe6:	2011      	movs	r0, #17
 8001fe8:	183b      	adds	r3, r7, r0
 8001fea:	2200      	movs	r2, #0
 8001fec:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fee:	4b47      	ldr	r3, [pc, #284]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001ff0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ff2:	2380      	movs	r3, #128	; 0x80
 8001ff4:	055b      	lsls	r3, r3, #21
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	d110      	bne.n	800201c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ffa:	4b44      	ldr	r3, [pc, #272]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001ffc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ffe:	4b43      	ldr	r3, [pc, #268]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002000:	2180      	movs	r1, #128	; 0x80
 8002002:	0549      	lsls	r1, r1, #21
 8002004:	430a      	orrs	r2, r1
 8002006:	63da      	str	r2, [r3, #60]	; 0x3c
 8002008:	4b40      	ldr	r3, [pc, #256]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800200a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800200c:	2380      	movs	r3, #128	; 0x80
 800200e:	055b      	lsls	r3, r3, #21
 8002010:	4013      	ands	r3, r2
 8002012:	60bb      	str	r3, [r7, #8]
 8002014:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002016:	183b      	adds	r3, r7, r0
 8002018:	2201      	movs	r2, #1
 800201a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800201c:	4b3c      	ldr	r3, [pc, #240]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	4b3b      	ldr	r3, [pc, #236]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002022:	2180      	movs	r1, #128	; 0x80
 8002024:	0049      	lsls	r1, r1, #1
 8002026:	430a      	orrs	r2, r1
 8002028:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800202a:	f7fe ffbf 	bl	8000fac <HAL_GetTick>
 800202e:	0003      	movs	r3, r0
 8002030:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002032:	e00b      	b.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002034:	f7fe ffba 	bl	8000fac <HAL_GetTick>
 8002038:	0002      	movs	r2, r0
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b02      	cmp	r3, #2
 8002040:	d904      	bls.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002042:	2313      	movs	r3, #19
 8002044:	18fb      	adds	r3, r7, r3
 8002046:	2203      	movs	r2, #3
 8002048:	701a      	strb	r2, [r3, #0]
        break;
 800204a:	e005      	b.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800204c:	4b30      	ldr	r3, [pc, #192]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	2380      	movs	r3, #128	; 0x80
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	4013      	ands	r3, r2
 8002056:	d0ed      	beq.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002058:	2313      	movs	r3, #19
 800205a:	18fb      	adds	r3, r7, r3
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d15e      	bne.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002062:	4b2a      	ldr	r3, [pc, #168]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002064:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002066:	23c0      	movs	r3, #192	; 0xc0
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	4013      	ands	r3, r2
 800206c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d019      	beq.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002078:	697a      	ldr	r2, [r7, #20]
 800207a:	429a      	cmp	r2, r3
 800207c:	d014      	beq.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800207e:	4b23      	ldr	r3, [pc, #140]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002082:	4a24      	ldr	r2, [pc, #144]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8002084:	4013      	ands	r3, r2
 8002086:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002088:	4b20      	ldr	r3, [pc, #128]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800208a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800208c:	4b1f      	ldr	r3, [pc, #124]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800208e:	2180      	movs	r1, #128	; 0x80
 8002090:	0249      	lsls	r1, r1, #9
 8002092:	430a      	orrs	r2, r1
 8002094:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002096:	4b1d      	ldr	r3, [pc, #116]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002098:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800209a:	4b1c      	ldr	r3, [pc, #112]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800209c:	491e      	ldr	r1, [pc, #120]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 800209e:	400a      	ands	r2, r1
 80020a0:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80020a2:	4b1a      	ldr	r3, [pc, #104]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80020a4:	697a      	ldr	r2, [r7, #20]
 80020a6:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	2201      	movs	r2, #1
 80020ac:	4013      	ands	r3, r2
 80020ae:	d016      	beq.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b0:	f7fe ff7c 	bl	8000fac <HAL_GetTick>
 80020b4:	0003      	movs	r3, r0
 80020b6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020b8:	e00c      	b.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ba:	f7fe ff77 	bl	8000fac <HAL_GetTick>
 80020be:	0002      	movs	r2, r0
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	4a15      	ldr	r2, [pc, #84]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d904      	bls.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80020ca:	2313      	movs	r3, #19
 80020cc:	18fb      	adds	r3, r7, r3
 80020ce:	2203      	movs	r2, #3
 80020d0:	701a      	strb	r2, [r3, #0]
            break;
 80020d2:	e004      	b.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020d4:	4b0d      	ldr	r3, [pc, #52]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80020d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d8:	2202      	movs	r2, #2
 80020da:	4013      	ands	r3, r2
 80020dc:	d0ed      	beq.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80020de:	2313      	movs	r3, #19
 80020e0:	18fb      	adds	r3, r7, r3
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d10a      	bne.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020e8:	4b08      	ldr	r3, [pc, #32]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80020ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ec:	4a09      	ldr	r2, [pc, #36]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80020ee:	4013      	ands	r3, r2
 80020f0:	0019      	movs	r1, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020f6:	4b05      	ldr	r3, [pc, #20]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80020f8:	430a      	orrs	r2, r1
 80020fa:	65da      	str	r2, [r3, #92]	; 0x5c
 80020fc:	e016      	b.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80020fe:	2312      	movs	r3, #18
 8002100:	18fb      	adds	r3, r7, r3
 8002102:	2213      	movs	r2, #19
 8002104:	18ba      	adds	r2, r7, r2
 8002106:	7812      	ldrb	r2, [r2, #0]
 8002108:	701a      	strb	r2, [r3, #0]
 800210a:	e00f      	b.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800210c:	40021000 	.word	0x40021000
 8002110:	40007000 	.word	0x40007000
 8002114:	fffffcff 	.word	0xfffffcff
 8002118:	fffeffff 	.word	0xfffeffff
 800211c:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002120:	2312      	movs	r3, #18
 8002122:	18fb      	adds	r3, r7, r3
 8002124:	2213      	movs	r2, #19
 8002126:	18ba      	adds	r2, r7, r2
 8002128:	7812      	ldrb	r2, [r2, #0]
 800212a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800212c:	2311      	movs	r3, #17
 800212e:	18fb      	adds	r3, r7, r3
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	2b01      	cmp	r3, #1
 8002134:	d105      	bne.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002136:	4bb6      	ldr	r3, [pc, #728]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002138:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800213a:	4bb5      	ldr	r3, [pc, #724]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800213c:	49b5      	ldr	r1, [pc, #724]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800213e:	400a      	ands	r2, r1
 8002140:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2201      	movs	r2, #1
 8002148:	4013      	ands	r3, r2
 800214a:	d009      	beq.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800214c:	4bb0      	ldr	r3, [pc, #704]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800214e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002150:	2203      	movs	r2, #3
 8002152:	4393      	bics	r3, r2
 8002154:	0019      	movs	r1, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685a      	ldr	r2, [r3, #4]
 800215a:	4bad      	ldr	r3, [pc, #692]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800215c:	430a      	orrs	r2, r1
 800215e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2202      	movs	r2, #2
 8002166:	4013      	ands	r3, r2
 8002168:	d009      	beq.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800216a:	4ba9      	ldr	r3, [pc, #676]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800216c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800216e:	220c      	movs	r2, #12
 8002170:	4393      	bics	r3, r2
 8002172:	0019      	movs	r1, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689a      	ldr	r2, [r3, #8]
 8002178:	4ba5      	ldr	r3, [pc, #660]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800217a:	430a      	orrs	r2, r1
 800217c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	2204      	movs	r2, #4
 8002184:	4013      	ands	r3, r2
 8002186:	d009      	beq.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002188:	4ba1      	ldr	r3, [pc, #644]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800218a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800218c:	2230      	movs	r2, #48	; 0x30
 800218e:	4393      	bics	r3, r2
 8002190:	0019      	movs	r1, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	68da      	ldr	r2, [r3, #12]
 8002196:	4b9e      	ldr	r3, [pc, #632]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002198:	430a      	orrs	r2, r1
 800219a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2210      	movs	r2, #16
 80021a2:	4013      	ands	r3, r2
 80021a4:	d009      	beq.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80021a6:	4b9a      	ldr	r3, [pc, #616]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021aa:	4a9b      	ldr	r2, [pc, #620]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80021ac:	4013      	ands	r3, r2
 80021ae:	0019      	movs	r1, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	691a      	ldr	r2, [r3, #16]
 80021b4:	4b96      	ldr	r3, [pc, #600]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021b6:	430a      	orrs	r2, r1
 80021b8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	2380      	movs	r3, #128	; 0x80
 80021c0:	015b      	lsls	r3, r3, #5
 80021c2:	4013      	ands	r3, r2
 80021c4:	d009      	beq.n	80021da <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 80021c6:	4b92      	ldr	r3, [pc, #584]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ca:	4a94      	ldr	r2, [pc, #592]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80021cc:	4013      	ands	r3, r2
 80021ce:	0019      	movs	r1, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	695a      	ldr	r2, [r3, #20]
 80021d4:	4b8e      	ldr	r3, [pc, #568]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021d6:	430a      	orrs	r2, r1
 80021d8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	2380      	movs	r3, #128	; 0x80
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	4013      	ands	r3, r2
 80021e4:	d009      	beq.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80021e6:	4b8a      	ldr	r3, [pc, #552]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ea:	4a8d      	ldr	r2, [pc, #564]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 80021ec:	4013      	ands	r3, r2
 80021ee:	0019      	movs	r1, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021f4:	4b86      	ldr	r3, [pc, #536]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021f6:	430a      	orrs	r2, r1
 80021f8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	2380      	movs	r3, #128	; 0x80
 8002200:	00db      	lsls	r3, r3, #3
 8002202:	4013      	ands	r3, r2
 8002204:	d009      	beq.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002206:	4b82      	ldr	r3, [pc, #520]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800220a:	4a86      	ldr	r2, [pc, #536]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 800220c:	4013      	ands	r3, r2
 800220e:	0019      	movs	r1, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002214:	4b7e      	ldr	r3, [pc, #504]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002216:	430a      	orrs	r2, r1
 8002218:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2220      	movs	r2, #32
 8002220:	4013      	ands	r3, r2
 8002222:	d009      	beq.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002224:	4b7a      	ldr	r3, [pc, #488]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002228:	4a7f      	ldr	r2, [pc, #508]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800222a:	4013      	ands	r3, r2
 800222c:	0019      	movs	r1, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	699a      	ldr	r2, [r3, #24]
 8002232:	4b77      	ldr	r3, [pc, #476]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002234:	430a      	orrs	r2, r1
 8002236:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2240      	movs	r2, #64	; 0x40
 800223e:	4013      	ands	r3, r2
 8002240:	d009      	beq.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002242:	4b73      	ldr	r3, [pc, #460]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002246:	4a79      	ldr	r2, [pc, #484]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8002248:	4013      	ands	r3, r2
 800224a:	0019      	movs	r1, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	69da      	ldr	r2, [r3, #28]
 8002250:	4b6f      	ldr	r3, [pc, #444]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002252:	430a      	orrs	r2, r1
 8002254:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	2380      	movs	r3, #128	; 0x80
 800225c:	01db      	lsls	r3, r3, #7
 800225e:	4013      	ands	r3, r2
 8002260:	d015      	beq.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002262:	4b6b      	ldr	r3, [pc, #428]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	0899      	lsrs	r1, r3, #2
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800226e:	4b68      	ldr	r3, [pc, #416]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002270:	430a      	orrs	r2, r1
 8002272:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002278:	2380      	movs	r3, #128	; 0x80
 800227a:	05db      	lsls	r3, r3, #23
 800227c:	429a      	cmp	r2, r3
 800227e:	d106      	bne.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002280:	4b63      	ldr	r3, [pc, #396]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002282:	68da      	ldr	r2, [r3, #12]
 8002284:	4b62      	ldr	r3, [pc, #392]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002286:	2180      	movs	r1, #128	; 0x80
 8002288:	0249      	lsls	r1, r1, #9
 800228a:	430a      	orrs	r2, r1
 800228c:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	2380      	movs	r3, #128	; 0x80
 8002294:	031b      	lsls	r3, r3, #12
 8002296:	4013      	ands	r3, r2
 8002298:	d009      	beq.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800229a:	4b5d      	ldr	r3, [pc, #372]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800229c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800229e:	2240      	movs	r2, #64	; 0x40
 80022a0:	4393      	bics	r3, r2
 80022a2:	0019      	movs	r1, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022a8:	4b59      	ldr	r3, [pc, #356]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022aa:	430a      	orrs	r2, r1
 80022ac:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	2380      	movs	r3, #128	; 0x80
 80022b4:	039b      	lsls	r3, r3, #14
 80022b6:	4013      	ands	r3, r2
 80022b8:	d016      	beq.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80022ba:	4b55      	ldr	r3, [pc, #340]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022be:	4a5c      	ldr	r2, [pc, #368]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80022c0:	4013      	ands	r3, r2
 80022c2:	0019      	movs	r1, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022c8:	4b51      	ldr	r3, [pc, #324]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022ca:	430a      	orrs	r2, r1
 80022cc:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022d2:	2380      	movs	r3, #128	; 0x80
 80022d4:	03db      	lsls	r3, r3, #15
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d106      	bne.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80022da:	4b4d      	ldr	r3, [pc, #308]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022dc:	68da      	ldr	r2, [r3, #12]
 80022de:	4b4c      	ldr	r3, [pc, #304]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022e0:	2180      	movs	r1, #128	; 0x80
 80022e2:	0449      	lsls	r1, r1, #17
 80022e4:	430a      	orrs	r2, r1
 80022e6:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	2380      	movs	r3, #128	; 0x80
 80022ee:	03db      	lsls	r3, r3, #15
 80022f0:	4013      	ands	r3, r2
 80022f2:	d016      	beq.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80022f4:	4b46      	ldr	r3, [pc, #280]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022f8:	4a4e      	ldr	r2, [pc, #312]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80022fa:	4013      	ands	r3, r2
 80022fc:	0019      	movs	r1, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002302:	4b43      	ldr	r3, [pc, #268]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002304:	430a      	orrs	r2, r1
 8002306:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800230c:	2380      	movs	r3, #128	; 0x80
 800230e:	045b      	lsls	r3, r3, #17
 8002310:	429a      	cmp	r2, r3
 8002312:	d106      	bne.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002314:	4b3e      	ldr	r3, [pc, #248]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002316:	68da      	ldr	r2, [r3, #12]
 8002318:	4b3d      	ldr	r3, [pc, #244]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800231a:	2180      	movs	r1, #128	; 0x80
 800231c:	0449      	lsls	r1, r1, #17
 800231e:	430a      	orrs	r2, r1
 8002320:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	2380      	movs	r3, #128	; 0x80
 8002328:	011b      	lsls	r3, r3, #4
 800232a:	4013      	ands	r3, r2
 800232c:	d014      	beq.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800232e:	4b38      	ldr	r3, [pc, #224]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002332:	2203      	movs	r2, #3
 8002334:	4393      	bics	r3, r2
 8002336:	0019      	movs	r1, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6a1a      	ldr	r2, [r3, #32]
 800233c:	4b34      	ldr	r3, [pc, #208]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800233e:	430a      	orrs	r2, r1
 8002340:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6a1b      	ldr	r3, [r3, #32]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d106      	bne.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800234a:	4b31      	ldr	r3, [pc, #196]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800234c:	68da      	ldr	r2, [r3, #12]
 800234e:	4b30      	ldr	r3, [pc, #192]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002350:	2180      	movs	r1, #128	; 0x80
 8002352:	0249      	lsls	r1, r1, #9
 8002354:	430a      	orrs	r2, r1
 8002356:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	2380      	movs	r3, #128	; 0x80
 800235e:	019b      	lsls	r3, r3, #6
 8002360:	4013      	ands	r3, r2
 8002362:	d014      	beq.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002364:	4b2a      	ldr	r3, [pc, #168]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002368:	220c      	movs	r2, #12
 800236a:	4393      	bics	r3, r2
 800236c:	0019      	movs	r1, r3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002372:	4b27      	ldr	r3, [pc, #156]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002374:	430a      	orrs	r2, r1
 8002376:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237c:	2b04      	cmp	r3, #4
 800237e:	d106      	bne.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002380:	4b23      	ldr	r3, [pc, #140]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002382:	68da      	ldr	r2, [r3, #12]
 8002384:	4b22      	ldr	r3, [pc, #136]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002386:	2180      	movs	r1, #128	; 0x80
 8002388:	0249      	lsls	r1, r1, #9
 800238a:	430a      	orrs	r2, r1
 800238c:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	2380      	movs	r3, #128	; 0x80
 8002394:	045b      	lsls	r3, r3, #17
 8002396:	4013      	ands	r3, r2
 8002398:	d016      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800239a:	4b1d      	ldr	r3, [pc, #116]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800239c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800239e:	4a22      	ldr	r2, [pc, #136]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80023a0:	4013      	ands	r3, r2
 80023a2:	0019      	movs	r1, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80023a8:	4b19      	ldr	r3, [pc, #100]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023aa:	430a      	orrs	r2, r1
 80023ac:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80023b2:	2380      	movs	r3, #128	; 0x80
 80023b4:	019b      	lsls	r3, r3, #6
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d106      	bne.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80023ba:	4b15      	ldr	r3, [pc, #84]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023bc:	68da      	ldr	r2, [r3, #12]
 80023be:	4b14      	ldr	r3, [pc, #80]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023c0:	2180      	movs	r1, #128	; 0x80
 80023c2:	0449      	lsls	r1, r1, #17
 80023c4:	430a      	orrs	r2, r1
 80023c6:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	2380      	movs	r3, #128	; 0x80
 80023ce:	049b      	lsls	r3, r3, #18
 80023d0:	4013      	ands	r3, r2
 80023d2:	d016      	beq.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80023d4:	4b0e      	ldr	r3, [pc, #56]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023d8:	4a10      	ldr	r2, [pc, #64]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80023da:	4013      	ands	r3, r2
 80023dc:	0019      	movs	r1, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80023e2:	4b0b      	ldr	r3, [pc, #44]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023e4:	430a      	orrs	r2, r1
 80023e6:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80023ec:	2380      	movs	r3, #128	; 0x80
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d106      	bne.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80023f4:	4b06      	ldr	r3, [pc, #24]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023f6:	68da      	ldr	r2, [r3, #12]
 80023f8:	4b05      	ldr	r3, [pc, #20]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023fa:	2180      	movs	r1, #128	; 0x80
 80023fc:	0449      	lsls	r1, r1, #17
 80023fe:	430a      	orrs	r2, r1
 8002400:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002402:	2312      	movs	r3, #18
 8002404:	18fb      	adds	r3, r7, r3
 8002406:	781b      	ldrb	r3, [r3, #0]
}
 8002408:	0018      	movs	r0, r3
 800240a:	46bd      	mov	sp, r7
 800240c:	b006      	add	sp, #24
 800240e:	bd80      	pop	{r7, pc}
 8002410:	40021000 	.word	0x40021000
 8002414:	efffffff 	.word	0xefffffff
 8002418:	fffff3ff 	.word	0xfffff3ff
 800241c:	fffffcff 	.word	0xfffffcff
 8002420:	fff3ffff 	.word	0xfff3ffff
 8002424:	ffcfffff 	.word	0xffcfffff
 8002428:	ffffcfff 	.word	0xffffcfff
 800242c:	ffff3fff 	.word	0xffff3fff
 8002430:	ffbfffff 	.word	0xffbfffff
 8002434:	feffffff 	.word	0xfeffffff

08002438 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d101      	bne.n	800244a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e046      	b.n	80024d8 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2288      	movs	r2, #136	; 0x88
 800244e:	589b      	ldr	r3, [r3, r2]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d107      	bne.n	8002464 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2284      	movs	r2, #132	; 0x84
 8002458:	2100      	movs	r1, #0
 800245a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	0018      	movs	r0, r3
 8002460:	f7fe fbc8 	bl	8000bf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2288      	movs	r2, #136	; 0x88
 8002468:	2124      	movs	r1, #36	; 0x24
 800246a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2101      	movs	r1, #1
 8002478:	438a      	bics	r2, r1
 800247a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002480:	2b00      	cmp	r3, #0
 8002482:	d003      	beq.n	800248c <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	0018      	movs	r0, r3
 8002488:	f000 fd0c 	bl	8002ea4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	0018      	movs	r0, r3
 8002490:	f000 f9b2 	bl	80027f8 <UART_SetConfig>
 8002494:	0003      	movs	r3, r0
 8002496:	2b01      	cmp	r3, #1
 8002498:	d101      	bne.n	800249e <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e01c      	b.n	80024d8 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	685a      	ldr	r2, [r3, #4]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	490d      	ldr	r1, [pc, #52]	; (80024e0 <HAL_UART_Init+0xa8>)
 80024aa:	400a      	ands	r2, r1
 80024ac:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	689a      	ldr	r2, [r3, #8]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	212a      	movs	r1, #42	; 0x2a
 80024ba:	438a      	bics	r2, r1
 80024bc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2101      	movs	r1, #1
 80024ca:	430a      	orrs	r2, r1
 80024cc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	0018      	movs	r0, r3
 80024d2:	f000 fd9b 	bl	800300c <UART_CheckIdleState>
 80024d6:	0003      	movs	r3, r0
}
 80024d8:	0018      	movs	r0, r3
 80024da:	46bd      	mov	sp, r7
 80024dc:	b002      	add	sp, #8
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	ffffb7ff 	.word	0xffffb7ff

080024e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b08a      	sub	sp, #40	; 0x28
 80024e8:	af02      	add	r7, sp, #8
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	603b      	str	r3, [r7, #0]
 80024f0:	1dbb      	adds	r3, r7, #6
 80024f2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2288      	movs	r2, #136	; 0x88
 80024f8:	589b      	ldr	r3, [r3, r2]
 80024fa:	2b20      	cmp	r3, #32
 80024fc:	d000      	beq.n	8002500 <HAL_UART_Transmit+0x1c>
 80024fe:	e090      	b.n	8002622 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d003      	beq.n	800250e <HAL_UART_Transmit+0x2a>
 8002506:	1dbb      	adds	r3, r7, #6
 8002508:	881b      	ldrh	r3, [r3, #0]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d101      	bne.n	8002512 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e088      	b.n	8002624 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	689a      	ldr	r2, [r3, #8]
 8002516:	2380      	movs	r3, #128	; 0x80
 8002518:	015b      	lsls	r3, r3, #5
 800251a:	429a      	cmp	r2, r3
 800251c:	d109      	bne.n	8002532 <HAL_UART_Transmit+0x4e>
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d105      	bne.n	8002532 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	2201      	movs	r2, #1
 800252a:	4013      	ands	r3, r2
 800252c:	d001      	beq.n	8002532 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e078      	b.n	8002624 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2290      	movs	r2, #144	; 0x90
 8002536:	2100      	movs	r1, #0
 8002538:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2288      	movs	r2, #136	; 0x88
 800253e:	2121      	movs	r1, #33	; 0x21
 8002540:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002542:	f7fe fd33 	bl	8000fac <HAL_GetTick>
 8002546:	0003      	movs	r3, r0
 8002548:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	1dba      	adds	r2, r7, #6
 800254e:	2154      	movs	r1, #84	; 0x54
 8002550:	8812      	ldrh	r2, [r2, #0]
 8002552:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	1dba      	adds	r2, r7, #6
 8002558:	2156      	movs	r1, #86	; 0x56
 800255a:	8812      	ldrh	r2, [r2, #0]
 800255c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	689a      	ldr	r2, [r3, #8]
 8002562:	2380      	movs	r3, #128	; 0x80
 8002564:	015b      	lsls	r3, r3, #5
 8002566:	429a      	cmp	r2, r3
 8002568:	d108      	bne.n	800257c <HAL_UART_Transmit+0x98>
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	691b      	ldr	r3, [r3, #16]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d104      	bne.n	800257c <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8002572:	2300      	movs	r3, #0
 8002574:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	61bb      	str	r3, [r7, #24]
 800257a:	e003      	b.n	8002584 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002580:	2300      	movs	r3, #0
 8002582:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002584:	e030      	b.n	80025e8 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002586:	697a      	ldr	r2, [r7, #20]
 8002588:	68f8      	ldr	r0, [r7, #12]
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	9300      	str	r3, [sp, #0]
 800258e:	0013      	movs	r3, r2
 8002590:	2200      	movs	r2, #0
 8002592:	2180      	movs	r1, #128	; 0x80
 8002594:	f000 fde4 	bl	8003160 <UART_WaitOnFlagUntilTimeout>
 8002598:	1e03      	subs	r3, r0, #0
 800259a:	d005      	beq.n	80025a8 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2288      	movs	r2, #136	; 0x88
 80025a0:	2120      	movs	r1, #32
 80025a2:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e03d      	b.n	8002624 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d10b      	bne.n	80025c6 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	881b      	ldrh	r3, [r3, #0]
 80025b2:	001a      	movs	r2, r3
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	05d2      	lsls	r2, r2, #23
 80025ba:	0dd2      	lsrs	r2, r2, #23
 80025bc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	3302      	adds	r3, #2
 80025c2:	61bb      	str	r3, [r7, #24]
 80025c4:	e007      	b.n	80025d6 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	781a      	ldrb	r2, [r3, #0]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	3301      	adds	r3, #1
 80025d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2256      	movs	r2, #86	; 0x56
 80025da:	5a9b      	ldrh	r3, [r3, r2]
 80025dc:	b29b      	uxth	r3, r3
 80025de:	3b01      	subs	r3, #1
 80025e0:	b299      	uxth	r1, r3
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2256      	movs	r2, #86	; 0x56
 80025e6:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2256      	movs	r2, #86	; 0x56
 80025ec:	5a9b      	ldrh	r3, [r3, r2]
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d1c8      	bne.n	8002586 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025f4:	697a      	ldr	r2, [r7, #20]
 80025f6:	68f8      	ldr	r0, [r7, #12]
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	9300      	str	r3, [sp, #0]
 80025fc:	0013      	movs	r3, r2
 80025fe:	2200      	movs	r2, #0
 8002600:	2140      	movs	r1, #64	; 0x40
 8002602:	f000 fdad 	bl	8003160 <UART_WaitOnFlagUntilTimeout>
 8002606:	1e03      	subs	r3, r0, #0
 8002608:	d005      	beq.n	8002616 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2288      	movs	r2, #136	; 0x88
 800260e:	2120      	movs	r1, #32
 8002610:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e006      	b.n	8002624 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2288      	movs	r2, #136	; 0x88
 800261a:	2120      	movs	r1, #32
 800261c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800261e:	2300      	movs	r3, #0
 8002620:	e000      	b.n	8002624 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8002622:	2302      	movs	r3, #2
  }
}
 8002624:	0018      	movs	r0, r3
 8002626:	46bd      	mov	sp, r7
 8002628:	b008      	add	sp, #32
 800262a:	bd80      	pop	{r7, pc}

0800262c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b08a      	sub	sp, #40	; 0x28
 8002630:	af02      	add	r7, sp, #8
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	60b9      	str	r1, [r7, #8]
 8002636:	603b      	str	r3, [r7, #0]
 8002638:	1dbb      	adds	r3, r7, #6
 800263a:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	228c      	movs	r2, #140	; 0x8c
 8002640:	589b      	ldr	r3, [r3, r2]
 8002642:	2b20      	cmp	r3, #32
 8002644:	d000      	beq.n	8002648 <HAL_UART_Receive+0x1c>
 8002646:	e0d0      	b.n	80027ea <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d003      	beq.n	8002656 <HAL_UART_Receive+0x2a>
 800264e:	1dbb      	adds	r3, r7, #6
 8002650:	881b      	ldrh	r3, [r3, #0]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d101      	bne.n	800265a <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e0c8      	b.n	80027ec <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	689a      	ldr	r2, [r3, #8]
 800265e:	2380      	movs	r3, #128	; 0x80
 8002660:	015b      	lsls	r3, r3, #5
 8002662:	429a      	cmp	r2, r3
 8002664:	d109      	bne.n	800267a <HAL_UART_Receive+0x4e>
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d105      	bne.n	800267a <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	2201      	movs	r2, #1
 8002672:	4013      	ands	r3, r2
 8002674:	d001      	beq.n	800267a <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e0b8      	b.n	80027ec <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2290      	movs	r2, #144	; 0x90
 800267e:	2100      	movs	r1, #0
 8002680:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	228c      	movs	r2, #140	; 0x8c
 8002686:	2122      	movs	r1, #34	; 0x22
 8002688:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2200      	movs	r2, #0
 800268e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002690:	f7fe fc8c 	bl	8000fac <HAL_GetTick>
 8002694:	0003      	movs	r3, r0
 8002696:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	1dba      	adds	r2, r7, #6
 800269c:	215c      	movs	r1, #92	; 0x5c
 800269e:	8812      	ldrh	r2, [r2, #0]
 80026a0:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	1dba      	adds	r2, r7, #6
 80026a6:	215e      	movs	r1, #94	; 0x5e
 80026a8:	8812      	ldrh	r2, [r2, #0]
 80026aa:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	689a      	ldr	r2, [r3, #8]
 80026b0:	2380      	movs	r3, #128	; 0x80
 80026b2:	015b      	lsls	r3, r3, #5
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d10d      	bne.n	80026d4 <HAL_UART_Receive+0xa8>
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	691b      	ldr	r3, [r3, #16]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d104      	bne.n	80026ca <HAL_UART_Receive+0x9e>
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2260      	movs	r2, #96	; 0x60
 80026c4:	494b      	ldr	r1, [pc, #300]	; (80027f4 <HAL_UART_Receive+0x1c8>)
 80026c6:	5299      	strh	r1, [r3, r2]
 80026c8:	e02e      	b.n	8002728 <HAL_UART_Receive+0xfc>
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2260      	movs	r2, #96	; 0x60
 80026ce:	21ff      	movs	r1, #255	; 0xff
 80026d0:	5299      	strh	r1, [r3, r2]
 80026d2:	e029      	b.n	8002728 <HAL_UART_Receive+0xfc>
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d10d      	bne.n	80026f8 <HAL_UART_Receive+0xcc>
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	691b      	ldr	r3, [r3, #16]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d104      	bne.n	80026ee <HAL_UART_Receive+0xc2>
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2260      	movs	r2, #96	; 0x60
 80026e8:	21ff      	movs	r1, #255	; 0xff
 80026ea:	5299      	strh	r1, [r3, r2]
 80026ec:	e01c      	b.n	8002728 <HAL_UART_Receive+0xfc>
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2260      	movs	r2, #96	; 0x60
 80026f2:	217f      	movs	r1, #127	; 0x7f
 80026f4:	5299      	strh	r1, [r3, r2]
 80026f6:	e017      	b.n	8002728 <HAL_UART_Receive+0xfc>
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	689a      	ldr	r2, [r3, #8]
 80026fc:	2380      	movs	r3, #128	; 0x80
 80026fe:	055b      	lsls	r3, r3, #21
 8002700:	429a      	cmp	r2, r3
 8002702:	d10d      	bne.n	8002720 <HAL_UART_Receive+0xf4>
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	691b      	ldr	r3, [r3, #16]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d104      	bne.n	8002716 <HAL_UART_Receive+0xea>
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2260      	movs	r2, #96	; 0x60
 8002710:	217f      	movs	r1, #127	; 0x7f
 8002712:	5299      	strh	r1, [r3, r2]
 8002714:	e008      	b.n	8002728 <HAL_UART_Receive+0xfc>
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2260      	movs	r2, #96	; 0x60
 800271a:	213f      	movs	r1, #63	; 0x3f
 800271c:	5299      	strh	r1, [r3, r2]
 800271e:	e003      	b.n	8002728 <HAL_UART_Receive+0xfc>
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2260      	movs	r2, #96	; 0x60
 8002724:	2100      	movs	r1, #0
 8002726:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8002728:	2312      	movs	r3, #18
 800272a:	18fb      	adds	r3, r7, r3
 800272c:	68fa      	ldr	r2, [r7, #12]
 800272e:	2160      	movs	r1, #96	; 0x60
 8002730:	5a52      	ldrh	r2, [r2, r1]
 8002732:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	689a      	ldr	r2, [r3, #8]
 8002738:	2380      	movs	r3, #128	; 0x80
 800273a:	015b      	lsls	r3, r3, #5
 800273c:	429a      	cmp	r2, r3
 800273e:	d108      	bne.n	8002752 <HAL_UART_Receive+0x126>
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	691b      	ldr	r3, [r3, #16]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d104      	bne.n	8002752 <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8002748:	2300      	movs	r3, #0
 800274a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	61bb      	str	r3, [r7, #24]
 8002750:	e003      	b.n	800275a <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002756:	2300      	movs	r3, #0
 8002758:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800275a:	e03a      	b.n	80027d2 <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800275c:	697a      	ldr	r2, [r7, #20]
 800275e:	68f8      	ldr	r0, [r7, #12]
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	9300      	str	r3, [sp, #0]
 8002764:	0013      	movs	r3, r2
 8002766:	2200      	movs	r2, #0
 8002768:	2120      	movs	r1, #32
 800276a:	f000 fcf9 	bl	8003160 <UART_WaitOnFlagUntilTimeout>
 800276e:	1e03      	subs	r3, r0, #0
 8002770:	d005      	beq.n	800277e <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	228c      	movs	r2, #140	; 0x8c
 8002776:	2120      	movs	r1, #32
 8002778:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e036      	b.n	80027ec <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d10e      	bne.n	80027a2 <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278a:	b29b      	uxth	r3, r3
 800278c:	2212      	movs	r2, #18
 800278e:	18ba      	adds	r2, r7, r2
 8002790:	8812      	ldrh	r2, [r2, #0]
 8002792:	4013      	ands	r3, r2
 8002794:	b29a      	uxth	r2, r3
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	3302      	adds	r3, #2
 800279e:	61bb      	str	r3, [r7, #24]
 80027a0:	e00e      	b.n	80027c0 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2212      	movs	r2, #18
 80027ac:	18ba      	adds	r2, r7, r2
 80027ae:	8812      	ldrh	r2, [r2, #0]
 80027b0:	b2d2      	uxtb	r2, r2
 80027b2:	4013      	ands	r3, r2
 80027b4:	b2da      	uxtb	r2, r3
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	3301      	adds	r3, #1
 80027be:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	225e      	movs	r2, #94	; 0x5e
 80027c4:	5a9b      	ldrh	r3, [r3, r2]
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	3b01      	subs	r3, #1
 80027ca:	b299      	uxth	r1, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	225e      	movs	r2, #94	; 0x5e
 80027d0:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	225e      	movs	r2, #94	; 0x5e
 80027d6:	5a9b      	ldrh	r3, [r3, r2]
 80027d8:	b29b      	uxth	r3, r3
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d1be      	bne.n	800275c <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	228c      	movs	r2, #140	; 0x8c
 80027e2:	2120      	movs	r1, #32
 80027e4:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80027e6:	2300      	movs	r3, #0
 80027e8:	e000      	b.n	80027ec <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 80027ea:	2302      	movs	r3, #2
  }
}
 80027ec:	0018      	movs	r0, r3
 80027ee:	46bd      	mov	sp, r7
 80027f0:	b008      	add	sp, #32
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	000001ff 	.word	0x000001ff

080027f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027f8:	b5b0      	push	{r4, r5, r7, lr}
 80027fa:	b090      	sub	sp, #64	; 0x40
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002800:	231a      	movs	r3, #26
 8002802:	2220      	movs	r2, #32
 8002804:	189b      	adds	r3, r3, r2
 8002806:	19db      	adds	r3, r3, r7
 8002808:	2200      	movs	r2, #0
 800280a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800280c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280e:	689a      	ldr	r2, [r3, #8]
 8002810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002812:	691b      	ldr	r3, [r3, #16]
 8002814:	431a      	orrs	r2, r3
 8002816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002818:	695b      	ldr	r3, [r3, #20]
 800281a:	431a      	orrs	r2, r3
 800281c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281e:	69db      	ldr	r3, [r3, #28]
 8002820:	4313      	orrs	r3, r2
 8002822:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4ac1      	ldr	r2, [pc, #772]	; (8002b30 <UART_SetConfig+0x338>)
 800282c:	4013      	ands	r3, r2
 800282e:	0019      	movs	r1, r3
 8002830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002836:	430b      	orrs	r3, r1
 8002838:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800283a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	4abc      	ldr	r2, [pc, #752]	; (8002b34 <UART_SetConfig+0x33c>)
 8002842:	4013      	ands	r3, r2
 8002844:	0018      	movs	r0, r3
 8002846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002848:	68d9      	ldr	r1, [r3, #12]
 800284a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	0003      	movs	r3, r0
 8002850:	430b      	orrs	r3, r1
 8002852:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002856:	699b      	ldr	r3, [r3, #24]
 8002858:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800285a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4ab6      	ldr	r2, [pc, #728]	; (8002b38 <UART_SetConfig+0x340>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d009      	beq.n	8002878 <UART_SetConfig+0x80>
 8002864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4ab4      	ldr	r2, [pc, #720]	; (8002b3c <UART_SetConfig+0x344>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d004      	beq.n	8002878 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800286e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002870:	6a1b      	ldr	r3, [r3, #32]
 8002872:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002874:	4313      	orrs	r3, r2
 8002876:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	4ab0      	ldr	r2, [pc, #704]	; (8002b40 <UART_SetConfig+0x348>)
 8002880:	4013      	ands	r3, r2
 8002882:	0019      	movs	r1, r3
 8002884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800288a:	430b      	orrs	r3, r1
 800288c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800288e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002894:	220f      	movs	r2, #15
 8002896:	4393      	bics	r3, r2
 8002898:	0018      	movs	r0, r3
 800289a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800289e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	0003      	movs	r3, r0
 80028a4:	430b      	orrs	r3, r1
 80028a6:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80028a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4aa5      	ldr	r2, [pc, #660]	; (8002b44 <UART_SetConfig+0x34c>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d131      	bne.n	8002916 <UART_SetConfig+0x11e>
 80028b2:	4ba5      	ldr	r3, [pc, #660]	; (8002b48 <UART_SetConfig+0x350>)
 80028b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028b6:	2203      	movs	r2, #3
 80028b8:	4013      	ands	r3, r2
 80028ba:	2b03      	cmp	r3, #3
 80028bc:	d01d      	beq.n	80028fa <UART_SetConfig+0x102>
 80028be:	d823      	bhi.n	8002908 <UART_SetConfig+0x110>
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d00c      	beq.n	80028de <UART_SetConfig+0xe6>
 80028c4:	d820      	bhi.n	8002908 <UART_SetConfig+0x110>
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d002      	beq.n	80028d0 <UART_SetConfig+0xd8>
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d00e      	beq.n	80028ec <UART_SetConfig+0xf4>
 80028ce:	e01b      	b.n	8002908 <UART_SetConfig+0x110>
 80028d0:	231b      	movs	r3, #27
 80028d2:	2220      	movs	r2, #32
 80028d4:	189b      	adds	r3, r3, r2
 80028d6:	19db      	adds	r3, r3, r7
 80028d8:	2200      	movs	r2, #0
 80028da:	701a      	strb	r2, [r3, #0]
 80028dc:	e154      	b.n	8002b88 <UART_SetConfig+0x390>
 80028de:	231b      	movs	r3, #27
 80028e0:	2220      	movs	r2, #32
 80028e2:	189b      	adds	r3, r3, r2
 80028e4:	19db      	adds	r3, r3, r7
 80028e6:	2202      	movs	r2, #2
 80028e8:	701a      	strb	r2, [r3, #0]
 80028ea:	e14d      	b.n	8002b88 <UART_SetConfig+0x390>
 80028ec:	231b      	movs	r3, #27
 80028ee:	2220      	movs	r2, #32
 80028f0:	189b      	adds	r3, r3, r2
 80028f2:	19db      	adds	r3, r3, r7
 80028f4:	2204      	movs	r2, #4
 80028f6:	701a      	strb	r2, [r3, #0]
 80028f8:	e146      	b.n	8002b88 <UART_SetConfig+0x390>
 80028fa:	231b      	movs	r3, #27
 80028fc:	2220      	movs	r2, #32
 80028fe:	189b      	adds	r3, r3, r2
 8002900:	19db      	adds	r3, r3, r7
 8002902:	2208      	movs	r2, #8
 8002904:	701a      	strb	r2, [r3, #0]
 8002906:	e13f      	b.n	8002b88 <UART_SetConfig+0x390>
 8002908:	231b      	movs	r3, #27
 800290a:	2220      	movs	r2, #32
 800290c:	189b      	adds	r3, r3, r2
 800290e:	19db      	adds	r3, r3, r7
 8002910:	2210      	movs	r2, #16
 8002912:	701a      	strb	r2, [r3, #0]
 8002914:	e138      	b.n	8002b88 <UART_SetConfig+0x390>
 8002916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a8c      	ldr	r2, [pc, #560]	; (8002b4c <UART_SetConfig+0x354>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d131      	bne.n	8002984 <UART_SetConfig+0x18c>
 8002920:	4b89      	ldr	r3, [pc, #548]	; (8002b48 <UART_SetConfig+0x350>)
 8002922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002924:	220c      	movs	r2, #12
 8002926:	4013      	ands	r3, r2
 8002928:	2b0c      	cmp	r3, #12
 800292a:	d01d      	beq.n	8002968 <UART_SetConfig+0x170>
 800292c:	d823      	bhi.n	8002976 <UART_SetConfig+0x17e>
 800292e:	2b08      	cmp	r3, #8
 8002930:	d00c      	beq.n	800294c <UART_SetConfig+0x154>
 8002932:	d820      	bhi.n	8002976 <UART_SetConfig+0x17e>
 8002934:	2b00      	cmp	r3, #0
 8002936:	d002      	beq.n	800293e <UART_SetConfig+0x146>
 8002938:	2b04      	cmp	r3, #4
 800293a:	d00e      	beq.n	800295a <UART_SetConfig+0x162>
 800293c:	e01b      	b.n	8002976 <UART_SetConfig+0x17e>
 800293e:	231b      	movs	r3, #27
 8002940:	2220      	movs	r2, #32
 8002942:	189b      	adds	r3, r3, r2
 8002944:	19db      	adds	r3, r3, r7
 8002946:	2200      	movs	r2, #0
 8002948:	701a      	strb	r2, [r3, #0]
 800294a:	e11d      	b.n	8002b88 <UART_SetConfig+0x390>
 800294c:	231b      	movs	r3, #27
 800294e:	2220      	movs	r2, #32
 8002950:	189b      	adds	r3, r3, r2
 8002952:	19db      	adds	r3, r3, r7
 8002954:	2202      	movs	r2, #2
 8002956:	701a      	strb	r2, [r3, #0]
 8002958:	e116      	b.n	8002b88 <UART_SetConfig+0x390>
 800295a:	231b      	movs	r3, #27
 800295c:	2220      	movs	r2, #32
 800295e:	189b      	adds	r3, r3, r2
 8002960:	19db      	adds	r3, r3, r7
 8002962:	2204      	movs	r2, #4
 8002964:	701a      	strb	r2, [r3, #0]
 8002966:	e10f      	b.n	8002b88 <UART_SetConfig+0x390>
 8002968:	231b      	movs	r3, #27
 800296a:	2220      	movs	r2, #32
 800296c:	189b      	adds	r3, r3, r2
 800296e:	19db      	adds	r3, r3, r7
 8002970:	2208      	movs	r2, #8
 8002972:	701a      	strb	r2, [r3, #0]
 8002974:	e108      	b.n	8002b88 <UART_SetConfig+0x390>
 8002976:	231b      	movs	r3, #27
 8002978:	2220      	movs	r2, #32
 800297a:	189b      	adds	r3, r3, r2
 800297c:	19db      	adds	r3, r3, r7
 800297e:	2210      	movs	r2, #16
 8002980:	701a      	strb	r2, [r3, #0]
 8002982:	e101      	b.n	8002b88 <UART_SetConfig+0x390>
 8002984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a71      	ldr	r2, [pc, #452]	; (8002b50 <UART_SetConfig+0x358>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d131      	bne.n	80029f2 <UART_SetConfig+0x1fa>
 800298e:	4b6e      	ldr	r3, [pc, #440]	; (8002b48 <UART_SetConfig+0x350>)
 8002990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002992:	2230      	movs	r2, #48	; 0x30
 8002994:	4013      	ands	r3, r2
 8002996:	2b30      	cmp	r3, #48	; 0x30
 8002998:	d01d      	beq.n	80029d6 <UART_SetConfig+0x1de>
 800299a:	d823      	bhi.n	80029e4 <UART_SetConfig+0x1ec>
 800299c:	2b20      	cmp	r3, #32
 800299e:	d00c      	beq.n	80029ba <UART_SetConfig+0x1c2>
 80029a0:	d820      	bhi.n	80029e4 <UART_SetConfig+0x1ec>
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d002      	beq.n	80029ac <UART_SetConfig+0x1b4>
 80029a6:	2b10      	cmp	r3, #16
 80029a8:	d00e      	beq.n	80029c8 <UART_SetConfig+0x1d0>
 80029aa:	e01b      	b.n	80029e4 <UART_SetConfig+0x1ec>
 80029ac:	231b      	movs	r3, #27
 80029ae:	2220      	movs	r2, #32
 80029b0:	189b      	adds	r3, r3, r2
 80029b2:	19db      	adds	r3, r3, r7
 80029b4:	2200      	movs	r2, #0
 80029b6:	701a      	strb	r2, [r3, #0]
 80029b8:	e0e6      	b.n	8002b88 <UART_SetConfig+0x390>
 80029ba:	231b      	movs	r3, #27
 80029bc:	2220      	movs	r2, #32
 80029be:	189b      	adds	r3, r3, r2
 80029c0:	19db      	adds	r3, r3, r7
 80029c2:	2202      	movs	r2, #2
 80029c4:	701a      	strb	r2, [r3, #0]
 80029c6:	e0df      	b.n	8002b88 <UART_SetConfig+0x390>
 80029c8:	231b      	movs	r3, #27
 80029ca:	2220      	movs	r2, #32
 80029cc:	189b      	adds	r3, r3, r2
 80029ce:	19db      	adds	r3, r3, r7
 80029d0:	2204      	movs	r2, #4
 80029d2:	701a      	strb	r2, [r3, #0]
 80029d4:	e0d8      	b.n	8002b88 <UART_SetConfig+0x390>
 80029d6:	231b      	movs	r3, #27
 80029d8:	2220      	movs	r2, #32
 80029da:	189b      	adds	r3, r3, r2
 80029dc:	19db      	adds	r3, r3, r7
 80029de:	2208      	movs	r2, #8
 80029e0:	701a      	strb	r2, [r3, #0]
 80029e2:	e0d1      	b.n	8002b88 <UART_SetConfig+0x390>
 80029e4:	231b      	movs	r3, #27
 80029e6:	2220      	movs	r2, #32
 80029e8:	189b      	adds	r3, r3, r2
 80029ea:	19db      	adds	r3, r3, r7
 80029ec:	2210      	movs	r2, #16
 80029ee:	701a      	strb	r2, [r3, #0]
 80029f0:	e0ca      	b.n	8002b88 <UART_SetConfig+0x390>
 80029f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a57      	ldr	r2, [pc, #348]	; (8002b54 <UART_SetConfig+0x35c>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d106      	bne.n	8002a0a <UART_SetConfig+0x212>
 80029fc:	231b      	movs	r3, #27
 80029fe:	2220      	movs	r2, #32
 8002a00:	189b      	adds	r3, r3, r2
 8002a02:	19db      	adds	r3, r3, r7
 8002a04:	2200      	movs	r2, #0
 8002a06:	701a      	strb	r2, [r3, #0]
 8002a08:	e0be      	b.n	8002b88 <UART_SetConfig+0x390>
 8002a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a52      	ldr	r2, [pc, #328]	; (8002b58 <UART_SetConfig+0x360>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d106      	bne.n	8002a22 <UART_SetConfig+0x22a>
 8002a14:	231b      	movs	r3, #27
 8002a16:	2220      	movs	r2, #32
 8002a18:	189b      	adds	r3, r3, r2
 8002a1a:	19db      	adds	r3, r3, r7
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	701a      	strb	r2, [r3, #0]
 8002a20:	e0b2      	b.n	8002b88 <UART_SetConfig+0x390>
 8002a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a4d      	ldr	r2, [pc, #308]	; (8002b5c <UART_SetConfig+0x364>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d106      	bne.n	8002a3a <UART_SetConfig+0x242>
 8002a2c:	231b      	movs	r3, #27
 8002a2e:	2220      	movs	r2, #32
 8002a30:	189b      	adds	r3, r3, r2
 8002a32:	19db      	adds	r3, r3, r7
 8002a34:	2200      	movs	r2, #0
 8002a36:	701a      	strb	r2, [r3, #0]
 8002a38:	e0a6      	b.n	8002b88 <UART_SetConfig+0x390>
 8002a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a3e      	ldr	r2, [pc, #248]	; (8002b38 <UART_SetConfig+0x340>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d13e      	bne.n	8002ac2 <UART_SetConfig+0x2ca>
 8002a44:	4b40      	ldr	r3, [pc, #256]	; (8002b48 <UART_SetConfig+0x350>)
 8002a46:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002a48:	23c0      	movs	r3, #192	; 0xc0
 8002a4a:	011b      	lsls	r3, r3, #4
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	22c0      	movs	r2, #192	; 0xc0
 8002a50:	0112      	lsls	r2, r2, #4
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d027      	beq.n	8002aa6 <UART_SetConfig+0x2ae>
 8002a56:	22c0      	movs	r2, #192	; 0xc0
 8002a58:	0112      	lsls	r2, r2, #4
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d82a      	bhi.n	8002ab4 <UART_SetConfig+0x2bc>
 8002a5e:	2280      	movs	r2, #128	; 0x80
 8002a60:	0112      	lsls	r2, r2, #4
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d011      	beq.n	8002a8a <UART_SetConfig+0x292>
 8002a66:	2280      	movs	r2, #128	; 0x80
 8002a68:	0112      	lsls	r2, r2, #4
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d822      	bhi.n	8002ab4 <UART_SetConfig+0x2bc>
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d004      	beq.n	8002a7c <UART_SetConfig+0x284>
 8002a72:	2280      	movs	r2, #128	; 0x80
 8002a74:	00d2      	lsls	r2, r2, #3
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d00e      	beq.n	8002a98 <UART_SetConfig+0x2a0>
 8002a7a:	e01b      	b.n	8002ab4 <UART_SetConfig+0x2bc>
 8002a7c:	231b      	movs	r3, #27
 8002a7e:	2220      	movs	r2, #32
 8002a80:	189b      	adds	r3, r3, r2
 8002a82:	19db      	adds	r3, r3, r7
 8002a84:	2200      	movs	r2, #0
 8002a86:	701a      	strb	r2, [r3, #0]
 8002a88:	e07e      	b.n	8002b88 <UART_SetConfig+0x390>
 8002a8a:	231b      	movs	r3, #27
 8002a8c:	2220      	movs	r2, #32
 8002a8e:	189b      	adds	r3, r3, r2
 8002a90:	19db      	adds	r3, r3, r7
 8002a92:	2202      	movs	r2, #2
 8002a94:	701a      	strb	r2, [r3, #0]
 8002a96:	e077      	b.n	8002b88 <UART_SetConfig+0x390>
 8002a98:	231b      	movs	r3, #27
 8002a9a:	2220      	movs	r2, #32
 8002a9c:	189b      	adds	r3, r3, r2
 8002a9e:	19db      	adds	r3, r3, r7
 8002aa0:	2204      	movs	r2, #4
 8002aa2:	701a      	strb	r2, [r3, #0]
 8002aa4:	e070      	b.n	8002b88 <UART_SetConfig+0x390>
 8002aa6:	231b      	movs	r3, #27
 8002aa8:	2220      	movs	r2, #32
 8002aaa:	189b      	adds	r3, r3, r2
 8002aac:	19db      	adds	r3, r3, r7
 8002aae:	2208      	movs	r2, #8
 8002ab0:	701a      	strb	r2, [r3, #0]
 8002ab2:	e069      	b.n	8002b88 <UART_SetConfig+0x390>
 8002ab4:	231b      	movs	r3, #27
 8002ab6:	2220      	movs	r2, #32
 8002ab8:	189b      	adds	r3, r3, r2
 8002aba:	19db      	adds	r3, r3, r7
 8002abc:	2210      	movs	r2, #16
 8002abe:	701a      	strb	r2, [r3, #0]
 8002ac0:	e062      	b.n	8002b88 <UART_SetConfig+0x390>
 8002ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a1d      	ldr	r2, [pc, #116]	; (8002b3c <UART_SetConfig+0x344>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d157      	bne.n	8002b7c <UART_SetConfig+0x384>
 8002acc:	4b1e      	ldr	r3, [pc, #120]	; (8002b48 <UART_SetConfig+0x350>)
 8002ace:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002ad0:	23c0      	movs	r3, #192	; 0xc0
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	22c0      	movs	r2, #192	; 0xc0
 8002ad8:	0092      	lsls	r2, r2, #2
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d040      	beq.n	8002b60 <UART_SetConfig+0x368>
 8002ade:	22c0      	movs	r2, #192	; 0xc0
 8002ae0:	0092      	lsls	r2, r2, #2
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d843      	bhi.n	8002b6e <UART_SetConfig+0x376>
 8002ae6:	2280      	movs	r2, #128	; 0x80
 8002ae8:	0092      	lsls	r2, r2, #2
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d011      	beq.n	8002b12 <UART_SetConfig+0x31a>
 8002aee:	2280      	movs	r2, #128	; 0x80
 8002af0:	0092      	lsls	r2, r2, #2
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d83b      	bhi.n	8002b6e <UART_SetConfig+0x376>
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d004      	beq.n	8002b04 <UART_SetConfig+0x30c>
 8002afa:	2280      	movs	r2, #128	; 0x80
 8002afc:	0052      	lsls	r2, r2, #1
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d00e      	beq.n	8002b20 <UART_SetConfig+0x328>
 8002b02:	e034      	b.n	8002b6e <UART_SetConfig+0x376>
 8002b04:	231b      	movs	r3, #27
 8002b06:	2220      	movs	r2, #32
 8002b08:	189b      	adds	r3, r3, r2
 8002b0a:	19db      	adds	r3, r3, r7
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	701a      	strb	r2, [r3, #0]
 8002b10:	e03a      	b.n	8002b88 <UART_SetConfig+0x390>
 8002b12:	231b      	movs	r3, #27
 8002b14:	2220      	movs	r2, #32
 8002b16:	189b      	adds	r3, r3, r2
 8002b18:	19db      	adds	r3, r3, r7
 8002b1a:	2202      	movs	r2, #2
 8002b1c:	701a      	strb	r2, [r3, #0]
 8002b1e:	e033      	b.n	8002b88 <UART_SetConfig+0x390>
 8002b20:	231b      	movs	r3, #27
 8002b22:	2220      	movs	r2, #32
 8002b24:	189b      	adds	r3, r3, r2
 8002b26:	19db      	adds	r3, r3, r7
 8002b28:	2204      	movs	r2, #4
 8002b2a:	701a      	strb	r2, [r3, #0]
 8002b2c:	e02c      	b.n	8002b88 <UART_SetConfig+0x390>
 8002b2e:	46c0      	nop			; (mov r8, r8)
 8002b30:	cfff69f3 	.word	0xcfff69f3
 8002b34:	ffffcfff 	.word	0xffffcfff
 8002b38:	40008000 	.word	0x40008000
 8002b3c:	40008400 	.word	0x40008400
 8002b40:	11fff4ff 	.word	0x11fff4ff
 8002b44:	40013800 	.word	0x40013800
 8002b48:	40021000 	.word	0x40021000
 8002b4c:	40004400 	.word	0x40004400
 8002b50:	40004800 	.word	0x40004800
 8002b54:	40004c00 	.word	0x40004c00
 8002b58:	40005000 	.word	0x40005000
 8002b5c:	40013c00 	.word	0x40013c00
 8002b60:	231b      	movs	r3, #27
 8002b62:	2220      	movs	r2, #32
 8002b64:	189b      	adds	r3, r3, r2
 8002b66:	19db      	adds	r3, r3, r7
 8002b68:	2208      	movs	r2, #8
 8002b6a:	701a      	strb	r2, [r3, #0]
 8002b6c:	e00c      	b.n	8002b88 <UART_SetConfig+0x390>
 8002b6e:	231b      	movs	r3, #27
 8002b70:	2220      	movs	r2, #32
 8002b72:	189b      	adds	r3, r3, r2
 8002b74:	19db      	adds	r3, r3, r7
 8002b76:	2210      	movs	r2, #16
 8002b78:	701a      	strb	r2, [r3, #0]
 8002b7a:	e005      	b.n	8002b88 <UART_SetConfig+0x390>
 8002b7c:	231b      	movs	r3, #27
 8002b7e:	2220      	movs	r2, #32
 8002b80:	189b      	adds	r3, r3, r2
 8002b82:	19db      	adds	r3, r3, r7
 8002b84:	2210      	movs	r2, #16
 8002b86:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4ac1      	ldr	r2, [pc, #772]	; (8002e94 <UART_SetConfig+0x69c>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d005      	beq.n	8002b9e <UART_SetConfig+0x3a6>
 8002b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4ac0      	ldr	r2, [pc, #768]	; (8002e98 <UART_SetConfig+0x6a0>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d000      	beq.n	8002b9e <UART_SetConfig+0x3a6>
 8002b9c:	e093      	b.n	8002cc6 <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002b9e:	231b      	movs	r3, #27
 8002ba0:	2220      	movs	r2, #32
 8002ba2:	189b      	adds	r3, r3, r2
 8002ba4:	19db      	adds	r3, r3, r7
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	2b08      	cmp	r3, #8
 8002baa:	d015      	beq.n	8002bd8 <UART_SetConfig+0x3e0>
 8002bac:	dc18      	bgt.n	8002be0 <UART_SetConfig+0x3e8>
 8002bae:	2b04      	cmp	r3, #4
 8002bb0:	d00d      	beq.n	8002bce <UART_SetConfig+0x3d6>
 8002bb2:	dc15      	bgt.n	8002be0 <UART_SetConfig+0x3e8>
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d002      	beq.n	8002bbe <UART_SetConfig+0x3c6>
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d005      	beq.n	8002bc8 <UART_SetConfig+0x3d0>
 8002bbc:	e010      	b.n	8002be0 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002bbe:	f7ff f9e9 	bl	8001f94 <HAL_RCC_GetPCLK1Freq>
 8002bc2:	0003      	movs	r3, r0
 8002bc4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002bc6:	e014      	b.n	8002bf2 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002bc8:	4bb4      	ldr	r3, [pc, #720]	; (8002e9c <UART_SetConfig+0x6a4>)
 8002bca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002bcc:	e011      	b.n	8002bf2 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002bce:	f7ff f955 	bl	8001e7c <HAL_RCC_GetSysClockFreq>
 8002bd2:	0003      	movs	r3, r0
 8002bd4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002bd6:	e00c      	b.n	8002bf2 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002bd8:	2380      	movs	r3, #128	; 0x80
 8002bda:	021b      	lsls	r3, r3, #8
 8002bdc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002bde:	e008      	b.n	8002bf2 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8002be0:	2300      	movs	r3, #0
 8002be2:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002be4:	231a      	movs	r3, #26
 8002be6:	2220      	movs	r2, #32
 8002be8:	189b      	adds	r3, r3, r2
 8002bea:	19db      	adds	r3, r3, r7
 8002bec:	2201      	movs	r2, #1
 8002bee:	701a      	strb	r2, [r3, #0]
        break;
 8002bf0:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002bf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d100      	bne.n	8002bfa <UART_SetConfig+0x402>
 8002bf8:	e135      	b.n	8002e66 <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bfe:	4ba8      	ldr	r3, [pc, #672]	; (8002ea0 <UART_SetConfig+0x6a8>)
 8002c00:	0052      	lsls	r2, r2, #1
 8002c02:	5ad3      	ldrh	r3, [r2, r3]
 8002c04:	0019      	movs	r1, r3
 8002c06:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002c08:	f7fd fa8e 	bl	8000128 <__udivsi3>
 8002c0c:	0003      	movs	r3, r0
 8002c0e:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c12:	685a      	ldr	r2, [r3, #4]
 8002c14:	0013      	movs	r3, r2
 8002c16:	005b      	lsls	r3, r3, #1
 8002c18:	189b      	adds	r3, r3, r2
 8002c1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d305      	bcc.n	8002c2c <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002c26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d906      	bls.n	8002c3a <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8002c2c:	231a      	movs	r3, #26
 8002c2e:	2220      	movs	r2, #32
 8002c30:	189b      	adds	r3, r3, r2
 8002c32:	19db      	adds	r3, r3, r7
 8002c34:	2201      	movs	r2, #1
 8002c36:	701a      	strb	r2, [r3, #0]
 8002c38:	e044      	b.n	8002cc4 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002c3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c3c:	61bb      	str	r3, [r7, #24]
 8002c3e:	2300      	movs	r3, #0
 8002c40:	61fb      	str	r3, [r7, #28]
 8002c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c46:	4b96      	ldr	r3, [pc, #600]	; (8002ea0 <UART_SetConfig+0x6a8>)
 8002c48:	0052      	lsls	r2, r2, #1
 8002c4a:	5ad3      	ldrh	r3, [r2, r3]
 8002c4c:	613b      	str	r3, [r7, #16]
 8002c4e:	2300      	movs	r3, #0
 8002c50:	617b      	str	r3, [r7, #20]
 8002c52:	693a      	ldr	r2, [r7, #16]
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	69b8      	ldr	r0, [r7, #24]
 8002c58:	69f9      	ldr	r1, [r7, #28]
 8002c5a:	f7fd fbdb 	bl	8000414 <__aeabi_uldivmod>
 8002c5e:	0002      	movs	r2, r0
 8002c60:	000b      	movs	r3, r1
 8002c62:	0e11      	lsrs	r1, r2, #24
 8002c64:	021d      	lsls	r5, r3, #8
 8002c66:	430d      	orrs	r5, r1
 8002c68:	0214      	lsls	r4, r2, #8
 8002c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	085b      	lsrs	r3, r3, #1
 8002c70:	60bb      	str	r3, [r7, #8]
 8002c72:	2300      	movs	r3, #0
 8002c74:	60fb      	str	r3, [r7, #12]
 8002c76:	68b8      	ldr	r0, [r7, #8]
 8002c78:	68f9      	ldr	r1, [r7, #12]
 8002c7a:	1900      	adds	r0, r0, r4
 8002c7c:	4169      	adcs	r1, r5
 8002c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	603b      	str	r3, [r7, #0]
 8002c84:	2300      	movs	r3, #0
 8002c86:	607b      	str	r3, [r7, #4]
 8002c88:	683a      	ldr	r2, [r7, #0]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f7fd fbc2 	bl	8000414 <__aeabi_uldivmod>
 8002c90:	0002      	movs	r2, r0
 8002c92:	000b      	movs	r3, r1
 8002c94:	0013      	movs	r3, r2
 8002c96:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002c98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c9a:	23c0      	movs	r3, #192	; 0xc0
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d309      	bcc.n	8002cb6 <UART_SetConfig+0x4be>
 8002ca2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ca4:	2380      	movs	r3, #128	; 0x80
 8002ca6:	035b      	lsls	r3, r3, #13
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d204      	bcs.n	8002cb6 <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8002cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cb2:	60da      	str	r2, [r3, #12]
 8002cb4:	e006      	b.n	8002cc4 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 8002cb6:	231a      	movs	r3, #26
 8002cb8:	2220      	movs	r2, #32
 8002cba:	189b      	adds	r3, r3, r2
 8002cbc:	19db      	adds	r3, r3, r7
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8002cc2:	e0d0      	b.n	8002e66 <UART_SetConfig+0x66e>
 8002cc4:	e0cf      	b.n	8002e66 <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc8:	69da      	ldr	r2, [r3, #28]
 8002cca:	2380      	movs	r3, #128	; 0x80
 8002ccc:	021b      	lsls	r3, r3, #8
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d000      	beq.n	8002cd4 <UART_SetConfig+0x4dc>
 8002cd2:	e070      	b.n	8002db6 <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8002cd4:	231b      	movs	r3, #27
 8002cd6:	2220      	movs	r2, #32
 8002cd8:	189b      	adds	r3, r3, r2
 8002cda:	19db      	adds	r3, r3, r7
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	2b08      	cmp	r3, #8
 8002ce0:	d015      	beq.n	8002d0e <UART_SetConfig+0x516>
 8002ce2:	dc18      	bgt.n	8002d16 <UART_SetConfig+0x51e>
 8002ce4:	2b04      	cmp	r3, #4
 8002ce6:	d00d      	beq.n	8002d04 <UART_SetConfig+0x50c>
 8002ce8:	dc15      	bgt.n	8002d16 <UART_SetConfig+0x51e>
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d002      	beq.n	8002cf4 <UART_SetConfig+0x4fc>
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d005      	beq.n	8002cfe <UART_SetConfig+0x506>
 8002cf2:	e010      	b.n	8002d16 <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002cf4:	f7ff f94e 	bl	8001f94 <HAL_RCC_GetPCLK1Freq>
 8002cf8:	0003      	movs	r3, r0
 8002cfa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002cfc:	e014      	b.n	8002d28 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002cfe:	4b67      	ldr	r3, [pc, #412]	; (8002e9c <UART_SetConfig+0x6a4>)
 8002d00:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002d02:	e011      	b.n	8002d28 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d04:	f7ff f8ba 	bl	8001e7c <HAL_RCC_GetSysClockFreq>
 8002d08:	0003      	movs	r3, r0
 8002d0a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002d0c:	e00c      	b.n	8002d28 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d0e:	2380      	movs	r3, #128	; 0x80
 8002d10:	021b      	lsls	r3, r3, #8
 8002d12:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002d14:	e008      	b.n	8002d28 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 8002d16:	2300      	movs	r3, #0
 8002d18:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002d1a:	231a      	movs	r3, #26
 8002d1c:	2220      	movs	r2, #32
 8002d1e:	189b      	adds	r3, r3, r2
 8002d20:	19db      	adds	r3, r3, r7
 8002d22:	2201      	movs	r2, #1
 8002d24:	701a      	strb	r2, [r3, #0]
        break;
 8002d26:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d100      	bne.n	8002d30 <UART_SetConfig+0x538>
 8002d2e:	e09a      	b.n	8002e66 <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d34:	4b5a      	ldr	r3, [pc, #360]	; (8002ea0 <UART_SetConfig+0x6a8>)
 8002d36:	0052      	lsls	r2, r2, #1
 8002d38:	5ad3      	ldrh	r3, [r2, r3]
 8002d3a:	0019      	movs	r1, r3
 8002d3c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002d3e:	f7fd f9f3 	bl	8000128 <__udivsi3>
 8002d42:	0003      	movs	r3, r0
 8002d44:	005a      	lsls	r2, r3, #1
 8002d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	085b      	lsrs	r3, r3, #1
 8002d4c:	18d2      	adds	r2, r2, r3
 8002d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	0019      	movs	r1, r3
 8002d54:	0010      	movs	r0, r2
 8002d56:	f7fd f9e7 	bl	8000128 <__udivsi3>
 8002d5a:	0003      	movs	r3, r0
 8002d5c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d60:	2b0f      	cmp	r3, #15
 8002d62:	d921      	bls.n	8002da8 <UART_SetConfig+0x5b0>
 8002d64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d66:	2380      	movs	r3, #128	; 0x80
 8002d68:	025b      	lsls	r3, r3, #9
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d21c      	bcs.n	8002da8 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d70:	b29a      	uxth	r2, r3
 8002d72:	200e      	movs	r0, #14
 8002d74:	2420      	movs	r4, #32
 8002d76:	1903      	adds	r3, r0, r4
 8002d78:	19db      	adds	r3, r3, r7
 8002d7a:	210f      	movs	r1, #15
 8002d7c:	438a      	bics	r2, r1
 8002d7e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d82:	085b      	lsrs	r3, r3, #1
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	2207      	movs	r2, #7
 8002d88:	4013      	ands	r3, r2
 8002d8a:	b299      	uxth	r1, r3
 8002d8c:	1903      	adds	r3, r0, r4
 8002d8e:	19db      	adds	r3, r3, r7
 8002d90:	1902      	adds	r2, r0, r4
 8002d92:	19d2      	adds	r2, r2, r7
 8002d94:	8812      	ldrh	r2, [r2, #0]
 8002d96:	430a      	orrs	r2, r1
 8002d98:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	1902      	adds	r2, r0, r4
 8002da0:	19d2      	adds	r2, r2, r7
 8002da2:	8812      	ldrh	r2, [r2, #0]
 8002da4:	60da      	str	r2, [r3, #12]
 8002da6:	e05e      	b.n	8002e66 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8002da8:	231a      	movs	r3, #26
 8002daa:	2220      	movs	r2, #32
 8002dac:	189b      	adds	r3, r3, r2
 8002dae:	19db      	adds	r3, r3, r7
 8002db0:	2201      	movs	r2, #1
 8002db2:	701a      	strb	r2, [r3, #0]
 8002db4:	e057      	b.n	8002e66 <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002db6:	231b      	movs	r3, #27
 8002db8:	2220      	movs	r2, #32
 8002dba:	189b      	adds	r3, r3, r2
 8002dbc:	19db      	adds	r3, r3, r7
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	2b08      	cmp	r3, #8
 8002dc2:	d015      	beq.n	8002df0 <UART_SetConfig+0x5f8>
 8002dc4:	dc18      	bgt.n	8002df8 <UART_SetConfig+0x600>
 8002dc6:	2b04      	cmp	r3, #4
 8002dc8:	d00d      	beq.n	8002de6 <UART_SetConfig+0x5ee>
 8002dca:	dc15      	bgt.n	8002df8 <UART_SetConfig+0x600>
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d002      	beq.n	8002dd6 <UART_SetConfig+0x5de>
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d005      	beq.n	8002de0 <UART_SetConfig+0x5e8>
 8002dd4:	e010      	b.n	8002df8 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002dd6:	f7ff f8dd 	bl	8001f94 <HAL_RCC_GetPCLK1Freq>
 8002dda:	0003      	movs	r3, r0
 8002ddc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002dde:	e014      	b.n	8002e0a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002de0:	4b2e      	ldr	r3, [pc, #184]	; (8002e9c <UART_SetConfig+0x6a4>)
 8002de2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002de4:	e011      	b.n	8002e0a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002de6:	f7ff f849 	bl	8001e7c <HAL_RCC_GetSysClockFreq>
 8002dea:	0003      	movs	r3, r0
 8002dec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002dee:	e00c      	b.n	8002e0a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002df0:	2380      	movs	r3, #128	; 0x80
 8002df2:	021b      	lsls	r3, r3, #8
 8002df4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002df6:	e008      	b.n	8002e0a <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002dfc:	231a      	movs	r3, #26
 8002dfe:	2220      	movs	r2, #32
 8002e00:	189b      	adds	r3, r3, r2
 8002e02:	19db      	adds	r3, r3, r7
 8002e04:	2201      	movs	r2, #1
 8002e06:	701a      	strb	r2, [r3, #0]
        break;
 8002e08:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d02a      	beq.n	8002e66 <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e14:	4b22      	ldr	r3, [pc, #136]	; (8002ea0 <UART_SetConfig+0x6a8>)
 8002e16:	0052      	lsls	r2, r2, #1
 8002e18:	5ad3      	ldrh	r3, [r2, r3]
 8002e1a:	0019      	movs	r1, r3
 8002e1c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002e1e:	f7fd f983 	bl	8000128 <__udivsi3>
 8002e22:	0003      	movs	r3, r0
 8002e24:	001a      	movs	r2, r3
 8002e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	085b      	lsrs	r3, r3, #1
 8002e2c:	18d2      	adds	r2, r2, r3
 8002e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	0019      	movs	r1, r3
 8002e34:	0010      	movs	r0, r2
 8002e36:	f7fd f977 	bl	8000128 <__udivsi3>
 8002e3a:	0003      	movs	r3, r0
 8002e3c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e40:	2b0f      	cmp	r3, #15
 8002e42:	d90a      	bls.n	8002e5a <UART_SetConfig+0x662>
 8002e44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e46:	2380      	movs	r3, #128	; 0x80
 8002e48:	025b      	lsls	r3, r3, #9
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d205      	bcs.n	8002e5a <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e50:	b29a      	uxth	r2, r3
 8002e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	60da      	str	r2, [r3, #12]
 8002e58:	e005      	b.n	8002e66 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8002e5a:	231a      	movs	r3, #26
 8002e5c:	2220      	movs	r2, #32
 8002e5e:	189b      	adds	r3, r3, r2
 8002e60:	19db      	adds	r3, r3, r7
 8002e62:	2201      	movs	r2, #1
 8002e64:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e68:	226a      	movs	r2, #106	; 0x6a
 8002e6a:	2101      	movs	r1, #1
 8002e6c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e70:	2268      	movs	r2, #104	; 0x68
 8002e72:	2101      	movs	r1, #1
 8002e74:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e78:	2200      	movs	r2, #0
 8002e7a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8002e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7e:	2200      	movs	r2, #0
 8002e80:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8002e82:	231a      	movs	r3, #26
 8002e84:	2220      	movs	r2, #32
 8002e86:	189b      	adds	r3, r3, r2
 8002e88:	19db      	adds	r3, r3, r7
 8002e8a:	781b      	ldrb	r3, [r3, #0]
}
 8002e8c:	0018      	movs	r0, r3
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	b010      	add	sp, #64	; 0x40
 8002e92:	bdb0      	pop	{r4, r5, r7, pc}
 8002e94:	40008000 	.word	0x40008000
 8002e98:	40008400 	.word	0x40008400
 8002e9c:	00f42400 	.word	0x00f42400
 8002ea0:	08006fc4 	.word	0x08006fc4

08002ea4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb0:	2208      	movs	r2, #8
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	d00b      	beq.n	8002ece <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	4a4a      	ldr	r2, [pc, #296]	; (8002fe8 <UART_AdvFeatureConfig+0x144>)
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	0019      	movs	r1, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	d00b      	beq.n	8002ef0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	4a43      	ldr	r2, [pc, #268]	; (8002fec <UART_AdvFeatureConfig+0x148>)
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	0019      	movs	r1, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	430a      	orrs	r2, r1
 8002eee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef4:	2202      	movs	r2, #2
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	d00b      	beq.n	8002f12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	4a3b      	ldr	r2, [pc, #236]	; (8002ff0 <UART_AdvFeatureConfig+0x14c>)
 8002f02:	4013      	ands	r3, r2
 8002f04:	0019      	movs	r1, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	430a      	orrs	r2, r1
 8002f10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f16:	2204      	movs	r2, #4
 8002f18:	4013      	ands	r3, r2
 8002f1a:	d00b      	beq.n	8002f34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	4a34      	ldr	r2, [pc, #208]	; (8002ff4 <UART_AdvFeatureConfig+0x150>)
 8002f24:	4013      	ands	r3, r2
 8002f26:	0019      	movs	r1, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	430a      	orrs	r2, r1
 8002f32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f38:	2210      	movs	r2, #16
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	d00b      	beq.n	8002f56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	4a2c      	ldr	r2, [pc, #176]	; (8002ff8 <UART_AdvFeatureConfig+0x154>)
 8002f46:	4013      	ands	r3, r2
 8002f48:	0019      	movs	r1, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	430a      	orrs	r2, r1
 8002f54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f5a:	2220      	movs	r2, #32
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	d00b      	beq.n	8002f78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	4a25      	ldr	r2, [pc, #148]	; (8002ffc <UART_AdvFeatureConfig+0x158>)
 8002f68:	4013      	ands	r3, r2
 8002f6a:	0019      	movs	r1, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	430a      	orrs	r2, r1
 8002f76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f7c:	2240      	movs	r2, #64	; 0x40
 8002f7e:	4013      	ands	r3, r2
 8002f80:	d01d      	beq.n	8002fbe <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	4a1d      	ldr	r2, [pc, #116]	; (8003000 <UART_AdvFeatureConfig+0x15c>)
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	0019      	movs	r1, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	430a      	orrs	r2, r1
 8002f98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f9e:	2380      	movs	r3, #128	; 0x80
 8002fa0:	035b      	lsls	r3, r3, #13
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d10b      	bne.n	8002fbe <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	4a15      	ldr	r2, [pc, #84]	; (8003004 <UART_AdvFeatureConfig+0x160>)
 8002fae:	4013      	ands	r3, r2
 8002fb0:	0019      	movs	r1, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	430a      	orrs	r2, r1
 8002fbc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc2:	2280      	movs	r2, #128	; 0x80
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	d00b      	beq.n	8002fe0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	4a0e      	ldr	r2, [pc, #56]	; (8003008 <UART_AdvFeatureConfig+0x164>)
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	0019      	movs	r1, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	430a      	orrs	r2, r1
 8002fde:	605a      	str	r2, [r3, #4]
  }
}
 8002fe0:	46c0      	nop			; (mov r8, r8)
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	b002      	add	sp, #8
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	ffff7fff 	.word	0xffff7fff
 8002fec:	fffdffff 	.word	0xfffdffff
 8002ff0:	fffeffff 	.word	0xfffeffff
 8002ff4:	fffbffff 	.word	0xfffbffff
 8002ff8:	ffffefff 	.word	0xffffefff
 8002ffc:	ffffdfff 	.word	0xffffdfff
 8003000:	ffefffff 	.word	0xffefffff
 8003004:	ff9fffff 	.word	0xff9fffff
 8003008:	fff7ffff 	.word	0xfff7ffff

0800300c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b092      	sub	sp, #72	; 0x48
 8003010:	af02      	add	r7, sp, #8
 8003012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2290      	movs	r2, #144	; 0x90
 8003018:	2100      	movs	r1, #0
 800301a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800301c:	f7fd ffc6 	bl	8000fac <HAL_GetTick>
 8003020:	0003      	movs	r3, r0
 8003022:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2208      	movs	r2, #8
 800302c:	4013      	ands	r3, r2
 800302e:	2b08      	cmp	r3, #8
 8003030:	d12d      	bne.n	800308e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003032:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003034:	2280      	movs	r2, #128	; 0x80
 8003036:	0391      	lsls	r1, r2, #14
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	4a47      	ldr	r2, [pc, #284]	; (8003158 <UART_CheckIdleState+0x14c>)
 800303c:	9200      	str	r2, [sp, #0]
 800303e:	2200      	movs	r2, #0
 8003040:	f000 f88e 	bl	8003160 <UART_WaitOnFlagUntilTimeout>
 8003044:	1e03      	subs	r3, r0, #0
 8003046:	d022      	beq.n	800308e <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003048:	f3ef 8310 	mrs	r3, PRIMASK
 800304c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800304e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003050:	63bb      	str	r3, [r7, #56]	; 0x38
 8003052:	2301      	movs	r3, #1
 8003054:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003058:	f383 8810 	msr	PRIMASK, r3
}
 800305c:	46c0      	nop			; (mov r8, r8)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2180      	movs	r1, #128	; 0x80
 800306a:	438a      	bics	r2, r1
 800306c:	601a      	str	r2, [r3, #0]
 800306e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003070:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003074:	f383 8810 	msr	PRIMASK, r3
}
 8003078:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2288      	movs	r2, #136	; 0x88
 800307e:	2120      	movs	r1, #32
 8003080:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2284      	movs	r2, #132	; 0x84
 8003086:	2100      	movs	r1, #0
 8003088:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e060      	b.n	8003150 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2204      	movs	r2, #4
 8003096:	4013      	ands	r3, r2
 8003098:	2b04      	cmp	r3, #4
 800309a:	d146      	bne.n	800312a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800309c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800309e:	2280      	movs	r2, #128	; 0x80
 80030a0:	03d1      	lsls	r1, r2, #15
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	4a2c      	ldr	r2, [pc, #176]	; (8003158 <UART_CheckIdleState+0x14c>)
 80030a6:	9200      	str	r2, [sp, #0]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f000 f859 	bl	8003160 <UART_WaitOnFlagUntilTimeout>
 80030ae:	1e03      	subs	r3, r0, #0
 80030b0:	d03b      	beq.n	800312a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030b2:	f3ef 8310 	mrs	r3, PRIMASK
 80030b6:	60fb      	str	r3, [r7, #12]
  return(result);
 80030b8:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80030ba:	637b      	str	r3, [r7, #52]	; 0x34
 80030bc:	2301      	movs	r3, #1
 80030be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	f383 8810 	msr	PRIMASK, r3
}
 80030c6:	46c0      	nop			; (mov r8, r8)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4922      	ldr	r1, [pc, #136]	; (800315c <UART_CheckIdleState+0x150>)
 80030d4:	400a      	ands	r2, r1
 80030d6:	601a      	str	r2, [r3, #0]
 80030d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030da:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	f383 8810 	msr	PRIMASK, r3
}
 80030e2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030e4:	f3ef 8310 	mrs	r3, PRIMASK
 80030e8:	61bb      	str	r3, [r7, #24]
  return(result);
 80030ea:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030ec:	633b      	str	r3, [r7, #48]	; 0x30
 80030ee:	2301      	movs	r3, #1
 80030f0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	f383 8810 	msr	PRIMASK, r3
}
 80030f8:	46c0      	nop			; (mov r8, r8)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	689a      	ldr	r2, [r3, #8]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2101      	movs	r1, #1
 8003106:	438a      	bics	r2, r1
 8003108:	609a      	str	r2, [r3, #8]
 800310a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800310c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800310e:	6a3b      	ldr	r3, [r7, #32]
 8003110:	f383 8810 	msr	PRIMASK, r3
}
 8003114:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	228c      	movs	r2, #140	; 0x8c
 800311a:	2120      	movs	r1, #32
 800311c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2284      	movs	r2, #132	; 0x84
 8003122:	2100      	movs	r1, #0
 8003124:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e012      	b.n	8003150 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2288      	movs	r2, #136	; 0x88
 800312e:	2120      	movs	r1, #32
 8003130:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	228c      	movs	r2, #140	; 0x8c
 8003136:	2120      	movs	r1, #32
 8003138:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2284      	movs	r2, #132	; 0x84
 800314a:	2100      	movs	r1, #0
 800314c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800314e:	2300      	movs	r3, #0
}
 8003150:	0018      	movs	r0, r3
 8003152:	46bd      	mov	sp, r7
 8003154:	b010      	add	sp, #64	; 0x40
 8003156:	bd80      	pop	{r7, pc}
 8003158:	01ffffff 	.word	0x01ffffff
 800315c:	fffffedf 	.word	0xfffffedf

08003160 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	60b9      	str	r1, [r7, #8]
 800316a:	603b      	str	r3, [r7, #0]
 800316c:	1dfb      	adds	r3, r7, #7
 800316e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003170:	e051      	b.n	8003216 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	3301      	adds	r3, #1
 8003176:	d04e      	beq.n	8003216 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003178:	f7fd ff18 	bl	8000fac <HAL_GetTick>
 800317c:	0002      	movs	r2, r0
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	69ba      	ldr	r2, [r7, #24]
 8003184:	429a      	cmp	r2, r3
 8003186:	d302      	bcc.n	800318e <UART_WaitOnFlagUntilTimeout+0x2e>
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d101      	bne.n	8003192 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e051      	b.n	8003236 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2204      	movs	r2, #4
 800319a:	4013      	ands	r3, r2
 800319c:	d03b      	beq.n	8003216 <UART_WaitOnFlagUntilTimeout+0xb6>
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	2b80      	cmp	r3, #128	; 0x80
 80031a2:	d038      	beq.n	8003216 <UART_WaitOnFlagUntilTimeout+0xb6>
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	2b40      	cmp	r3, #64	; 0x40
 80031a8:	d035      	beq.n	8003216 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	69db      	ldr	r3, [r3, #28]
 80031b0:	2208      	movs	r2, #8
 80031b2:	4013      	ands	r3, r2
 80031b4:	2b08      	cmp	r3, #8
 80031b6:	d111      	bne.n	80031dc <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	2208      	movs	r2, #8
 80031be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	0018      	movs	r0, r3
 80031c4:	f000 f83c 	bl	8003240 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2290      	movs	r2, #144	; 0x90
 80031cc:	2108      	movs	r1, #8
 80031ce:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2284      	movs	r2, #132	; 0x84
 80031d4:	2100      	movs	r1, #0
 80031d6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e02c      	b.n	8003236 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	69da      	ldr	r2, [r3, #28]
 80031e2:	2380      	movs	r3, #128	; 0x80
 80031e4:	011b      	lsls	r3, r3, #4
 80031e6:	401a      	ands	r2, r3
 80031e8:	2380      	movs	r3, #128	; 0x80
 80031ea:	011b      	lsls	r3, r3, #4
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d112      	bne.n	8003216 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2280      	movs	r2, #128	; 0x80
 80031f6:	0112      	lsls	r2, r2, #4
 80031f8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	0018      	movs	r0, r3
 80031fe:	f000 f81f 	bl	8003240 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2290      	movs	r2, #144	; 0x90
 8003206:	2120      	movs	r1, #32
 8003208:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2284      	movs	r2, #132	; 0x84
 800320e:	2100      	movs	r1, #0
 8003210:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e00f      	b.n	8003236 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	69db      	ldr	r3, [r3, #28]
 800321c:	68ba      	ldr	r2, [r7, #8]
 800321e:	4013      	ands	r3, r2
 8003220:	68ba      	ldr	r2, [r7, #8]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	425a      	negs	r2, r3
 8003226:	4153      	adcs	r3, r2
 8003228:	b2db      	uxtb	r3, r3
 800322a:	001a      	movs	r2, r3
 800322c:	1dfb      	adds	r3, r7, #7
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	429a      	cmp	r2, r3
 8003232:	d09e      	beq.n	8003172 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003234:	2300      	movs	r3, #0
}
 8003236:	0018      	movs	r0, r3
 8003238:	46bd      	mov	sp, r7
 800323a:	b004      	add	sp, #16
 800323c:	bd80      	pop	{r7, pc}
	...

08003240 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b08e      	sub	sp, #56	; 0x38
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003248:	f3ef 8310 	mrs	r3, PRIMASK
 800324c:	617b      	str	r3, [r7, #20]
  return(result);
 800324e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003250:	637b      	str	r3, [r7, #52]	; 0x34
 8003252:	2301      	movs	r3, #1
 8003254:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003256:	69bb      	ldr	r3, [r7, #24]
 8003258:	f383 8810 	msr	PRIMASK, r3
}
 800325c:	46c0      	nop			; (mov r8, r8)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4926      	ldr	r1, [pc, #152]	; (8003304 <UART_EndRxTransfer+0xc4>)
 800326a:	400a      	ands	r2, r1
 800326c:	601a      	str	r2, [r3, #0]
 800326e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003270:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	f383 8810 	msr	PRIMASK, r3
}
 8003278:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800327a:	f3ef 8310 	mrs	r3, PRIMASK
 800327e:	623b      	str	r3, [r7, #32]
  return(result);
 8003280:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003282:	633b      	str	r3, [r7, #48]	; 0x30
 8003284:	2301      	movs	r3, #1
 8003286:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328a:	f383 8810 	msr	PRIMASK, r3
}
 800328e:	46c0      	nop			; (mov r8, r8)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	689a      	ldr	r2, [r3, #8]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	491b      	ldr	r1, [pc, #108]	; (8003308 <UART_EndRxTransfer+0xc8>)
 800329c:	400a      	ands	r2, r1
 800329e:	609a      	str	r2, [r3, #8]
 80032a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032a2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a6:	f383 8810 	msr	PRIMASK, r3
}
 80032aa:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d118      	bne.n	80032e6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032b4:	f3ef 8310 	mrs	r3, PRIMASK
 80032b8:	60bb      	str	r3, [r7, #8]
  return(result);
 80032ba:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032be:	2301      	movs	r3, #1
 80032c0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	f383 8810 	msr	PRIMASK, r3
}
 80032c8:	46c0      	nop			; (mov r8, r8)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2110      	movs	r1, #16
 80032d6:	438a      	bics	r2, r1
 80032d8:	601a      	str	r2, [r3, #0]
 80032da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	f383 8810 	msr	PRIMASK, r3
}
 80032e4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	228c      	movs	r2, #140	; 0x8c
 80032ea:	2120      	movs	r1, #32
 80032ec:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	675a      	str	r2, [r3, #116]	; 0x74
}
 80032fa:	46c0      	nop			; (mov r8, r8)
 80032fc:	46bd      	mov	sp, r7
 80032fe:	b00e      	add	sp, #56	; 0x38
 8003300:	bd80      	pop	{r7, pc}
 8003302:	46c0      	nop			; (mov r8, r8)
 8003304:	fffffedf 	.word	0xfffffedf
 8003308:	effffffe 	.word	0xeffffffe

0800330c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2284      	movs	r2, #132	; 0x84
 8003318:	5c9b      	ldrb	r3, [r3, r2]
 800331a:	2b01      	cmp	r3, #1
 800331c:	d101      	bne.n	8003322 <HAL_UARTEx_DisableFifoMode+0x16>
 800331e:	2302      	movs	r3, #2
 8003320:	e027      	b.n	8003372 <HAL_UARTEx_DisableFifoMode+0x66>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2284      	movs	r2, #132	; 0x84
 8003326:	2101      	movs	r1, #1
 8003328:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2288      	movs	r2, #136	; 0x88
 800332e:	2124      	movs	r1, #36	; 0x24
 8003330:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2101      	movs	r1, #1
 8003346:	438a      	bics	r2, r1
 8003348:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	4a0b      	ldr	r2, [pc, #44]	; (800337c <HAL_UARTEx_DisableFifoMode+0x70>)
 800334e:	4013      	ands	r3, r2
 8003350:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68fa      	ldr	r2, [r7, #12]
 800335e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2288      	movs	r2, #136	; 0x88
 8003364:	2120      	movs	r1, #32
 8003366:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2284      	movs	r2, #132	; 0x84
 800336c:	2100      	movs	r1, #0
 800336e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003370:	2300      	movs	r3, #0
}
 8003372:	0018      	movs	r0, r3
 8003374:	46bd      	mov	sp, r7
 8003376:	b004      	add	sp, #16
 8003378:	bd80      	pop	{r7, pc}
 800337a:	46c0      	nop			; (mov r8, r8)
 800337c:	dfffffff 	.word	0xdfffffff

08003380 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2284      	movs	r2, #132	; 0x84
 800338e:	5c9b      	ldrb	r3, [r3, r2]
 8003390:	2b01      	cmp	r3, #1
 8003392:	d101      	bne.n	8003398 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003394:	2302      	movs	r3, #2
 8003396:	e02e      	b.n	80033f6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2284      	movs	r2, #132	; 0x84
 800339c:	2101      	movs	r1, #1
 800339e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2288      	movs	r2, #136	; 0x88
 80033a4:	2124      	movs	r1, #36	; 0x24
 80033a6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2101      	movs	r1, #1
 80033bc:	438a      	bics	r2, r1
 80033be:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	00db      	lsls	r3, r3, #3
 80033c8:	08d9      	lsrs	r1, r3, #3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	683a      	ldr	r2, [r7, #0]
 80033d0:	430a      	orrs	r2, r1
 80033d2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	0018      	movs	r0, r3
 80033d8:	f000 f854 	bl	8003484 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	68fa      	ldr	r2, [r7, #12]
 80033e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2288      	movs	r2, #136	; 0x88
 80033e8:	2120      	movs	r1, #32
 80033ea:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2284      	movs	r2, #132	; 0x84
 80033f0:	2100      	movs	r1, #0
 80033f2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80033f4:	2300      	movs	r3, #0
}
 80033f6:	0018      	movs	r0, r3
 80033f8:	46bd      	mov	sp, r7
 80033fa:	b004      	add	sp, #16
 80033fc:	bd80      	pop	{r7, pc}
	...

08003400 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2284      	movs	r2, #132	; 0x84
 800340e:	5c9b      	ldrb	r3, [r3, r2]
 8003410:	2b01      	cmp	r3, #1
 8003412:	d101      	bne.n	8003418 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003414:	2302      	movs	r3, #2
 8003416:	e02f      	b.n	8003478 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2284      	movs	r2, #132	; 0x84
 800341c:	2101      	movs	r1, #1
 800341e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2288      	movs	r2, #136	; 0x88
 8003424:	2124      	movs	r1, #36	; 0x24
 8003426:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	2101      	movs	r1, #1
 800343c:	438a      	bics	r2, r1
 800343e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	4a0e      	ldr	r2, [pc, #56]	; (8003480 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003448:	4013      	ands	r3, r2
 800344a:	0019      	movs	r1, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	683a      	ldr	r2, [r7, #0]
 8003452:	430a      	orrs	r2, r1
 8003454:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	0018      	movs	r0, r3
 800345a:	f000 f813 	bl	8003484 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	68fa      	ldr	r2, [r7, #12]
 8003464:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2288      	movs	r2, #136	; 0x88
 800346a:	2120      	movs	r1, #32
 800346c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2284      	movs	r2, #132	; 0x84
 8003472:	2100      	movs	r1, #0
 8003474:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003476:	2300      	movs	r3, #0
}
 8003478:	0018      	movs	r0, r3
 800347a:	46bd      	mov	sp, r7
 800347c:	b004      	add	sp, #16
 800347e:	bd80      	pop	{r7, pc}
 8003480:	f1ffffff 	.word	0xf1ffffff

08003484 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003486:	b085      	sub	sp, #20
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003490:	2b00      	cmp	r3, #0
 8003492:	d108      	bne.n	80034a6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	226a      	movs	r2, #106	; 0x6a
 8003498:	2101      	movs	r1, #1
 800349a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2268      	movs	r2, #104	; 0x68
 80034a0:	2101      	movs	r1, #1
 80034a2:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80034a4:	e043      	b.n	800352e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80034a6:	260f      	movs	r6, #15
 80034a8:	19bb      	adds	r3, r7, r6
 80034aa:	2208      	movs	r2, #8
 80034ac:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80034ae:	200e      	movs	r0, #14
 80034b0:	183b      	adds	r3, r7, r0
 80034b2:	2208      	movs	r2, #8
 80034b4:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	0e5b      	lsrs	r3, r3, #25
 80034be:	b2da      	uxtb	r2, r3
 80034c0:	240d      	movs	r4, #13
 80034c2:	193b      	adds	r3, r7, r4
 80034c4:	2107      	movs	r1, #7
 80034c6:	400a      	ands	r2, r1
 80034c8:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	0f5b      	lsrs	r3, r3, #29
 80034d2:	b2da      	uxtb	r2, r3
 80034d4:	250c      	movs	r5, #12
 80034d6:	197b      	adds	r3, r7, r5
 80034d8:	2107      	movs	r1, #7
 80034da:	400a      	ands	r2, r1
 80034dc:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80034de:	183b      	adds	r3, r7, r0
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	197a      	adds	r2, r7, r5
 80034e4:	7812      	ldrb	r2, [r2, #0]
 80034e6:	4914      	ldr	r1, [pc, #80]	; (8003538 <UARTEx_SetNbDataToProcess+0xb4>)
 80034e8:	5c8a      	ldrb	r2, [r1, r2]
 80034ea:	435a      	muls	r2, r3
 80034ec:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80034ee:	197b      	adds	r3, r7, r5
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	4a12      	ldr	r2, [pc, #72]	; (800353c <UARTEx_SetNbDataToProcess+0xb8>)
 80034f4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80034f6:	0019      	movs	r1, r3
 80034f8:	f7fc fea0 	bl	800023c <__divsi3>
 80034fc:	0003      	movs	r3, r0
 80034fe:	b299      	uxth	r1, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	226a      	movs	r2, #106	; 0x6a
 8003504:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003506:	19bb      	adds	r3, r7, r6
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	193a      	adds	r2, r7, r4
 800350c:	7812      	ldrb	r2, [r2, #0]
 800350e:	490a      	ldr	r1, [pc, #40]	; (8003538 <UARTEx_SetNbDataToProcess+0xb4>)
 8003510:	5c8a      	ldrb	r2, [r1, r2]
 8003512:	435a      	muls	r2, r3
 8003514:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003516:	193b      	adds	r3, r7, r4
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	4a08      	ldr	r2, [pc, #32]	; (800353c <UARTEx_SetNbDataToProcess+0xb8>)
 800351c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800351e:	0019      	movs	r1, r3
 8003520:	f7fc fe8c 	bl	800023c <__divsi3>
 8003524:	0003      	movs	r3, r0
 8003526:	b299      	uxth	r1, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2268      	movs	r2, #104	; 0x68
 800352c:	5299      	strh	r1, [r3, r2]
}
 800352e:	46c0      	nop			; (mov r8, r8)
 8003530:	46bd      	mov	sp, r7
 8003532:	b005      	add	sp, #20
 8003534:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003536:	46c0      	nop			; (mov r8, r8)
 8003538:	08006fdc 	.word	0x08006fdc
 800353c:	08006fe4 	.word	0x08006fe4

08003540 <astronode_send_cfg_sr>:
        }
    }
}

void astronode_send_cfg_sr(void)
{
 8003540:	b5b0      	push	{r4, r5, r7, lr}
 8003542:	b0e4      	sub	sp, #400	; 0x190
 8003544:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8003546:	24c8      	movs	r4, #200	; 0xc8
 8003548:	193b      	adds	r3, r7, r4
 800354a:	0018      	movs	r0, r3
 800354c:	23c6      	movs	r3, #198	; 0xc6
 800354e:	001a      	movs	r2, r3
 8003550:	2100      	movs	r1, #0
 8003552:	f001 fc15 	bl	8004d80 <memset>
    astronode_app_msg_t answer = {0};
 8003556:	4b13      	ldr	r3, [pc, #76]	; (80035a4 <astronode_send_cfg_sr+0x64>)
 8003558:	25c8      	movs	r5, #200	; 0xc8
 800355a:	006d      	lsls	r5, r5, #1
 800355c:	195b      	adds	r3, r3, r5
 800355e:	19db      	adds	r3, r3, r7
 8003560:	0018      	movs	r0, r3
 8003562:	23c6      	movs	r3, #198	; 0xc6
 8003564:	001a      	movs	r2, r3
 8003566:	2100      	movs	r1, #0
 8003568:	f001 fc0a 	bl	8004d80 <memset>

    request.op_code = ASTRONODE_OP_CODE_CFG_SR;
 800356c:	193b      	adds	r3, r7, r4
 800356e:	2210      	movs	r2, #16
 8003570:	701a      	strb	r2, [r3, #0]

    astronode_transport_send_receive(&request, &answer);
 8003572:	003a      	movs	r2, r7
 8003574:	193b      	adds	r3, r7, r4
 8003576:	0011      	movs	r1, r2
 8003578:	0018      	movs	r0, r3
 800357a:	f001 f91d 	bl	80047b8 <astronode_transport_send_receive>

    if (answer.op_code == ASTRONODE_OP_CODE_CFG_SA)
 800357e:	4b09      	ldr	r3, [pc, #36]	; (80035a4 <astronode_send_cfg_sr+0x64>)
 8003580:	195b      	adds	r3, r3, r5
 8003582:	19db      	adds	r3, r3, r7
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	2b90      	cmp	r3, #144	; 0x90
 8003588:	d104      	bne.n	8003594 <astronode_send_cfg_sr+0x54>
    {
        send_debug_logs("Astronode configuration successfully saved in NVM.");
 800358a:	4b07      	ldr	r3, [pc, #28]	; (80035a8 <astronode_send_cfg_sr+0x68>)
 800358c:	0018      	movs	r0, r3
 800358e:	f7fd fa51 	bl	8000a34 <send_debug_logs>
    }
    else
    {
        send_debug_logs("Failed to save the Astronode configuration in NVM.");
    }
}
 8003592:	e003      	b.n	800359c <astronode_send_cfg_sr+0x5c>
        send_debug_logs("Failed to save the Astronode configuration in NVM.");
 8003594:	4b05      	ldr	r3, [pc, #20]	; (80035ac <astronode_send_cfg_sr+0x6c>)
 8003596:	0018      	movs	r0, r3
 8003598:	f7fd fa4c 	bl	8000a34 <send_debug_logs>
}
 800359c:	46c0      	nop			; (mov r8, r8)
 800359e:	46bd      	mov	sp, r7
 80035a0:	b064      	add	sp, #400	; 0x190
 80035a2:	bdb0      	pop	{r4, r5, r7, pc}
 80035a4:	fffffe70 	.word	0xfffffe70
 80035a8:	08005b50 	.word	0x08005b50
 80035ac:	08005b84 	.word	0x08005b84

080035b0 <astronode_send_cfg_wr>:
                            bool deep_sleep_mode,
                            bool message_ack_event_pin_mask,
                            bool reset_notification_event_pin_mask,
							bool command_available_event_pin_mask,
							bool message_tx_event_pin_mask)
{
 80035b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035b2:	b0e7      	sub	sp, #412	; 0x19c
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	0005      	movs	r5, r0
 80035b8:	000c      	movs	r4, r1
 80035ba:	0010      	movs	r0, r2
 80035bc:	0019      	movs	r1, r3
 80035be:	4b4b      	ldr	r3, [pc, #300]	; (80036ec <astronode_send_cfg_wr+0x13c>)
 80035c0:	26cc      	movs	r6, #204	; 0xcc
 80035c2:	0076      	lsls	r6, r6, #1
 80035c4:	199b      	adds	r3, r3, r6
 80035c6:	19db      	adds	r3, r3, r7
 80035c8:	1c2a      	adds	r2, r5, #0
 80035ca:	701a      	strb	r2, [r3, #0]
 80035cc:	4b48      	ldr	r3, [pc, #288]	; (80036f0 <astronode_send_cfg_wr+0x140>)
 80035ce:	0035      	movs	r5, r6
 80035d0:	195b      	adds	r3, r3, r5
 80035d2:	19db      	adds	r3, r3, r7
 80035d4:	1c22      	adds	r2, r4, #0
 80035d6:	701a      	strb	r2, [r3, #0]
 80035d8:	4b46      	ldr	r3, [pc, #280]	; (80036f4 <astronode_send_cfg_wr+0x144>)
 80035da:	002c      	movs	r4, r5
 80035dc:	191b      	adds	r3, r3, r4
 80035de:	19db      	adds	r3, r3, r7
 80035e0:	1c02      	adds	r2, r0, #0
 80035e2:	701a      	strb	r2, [r3, #0]
 80035e4:	4b44      	ldr	r3, [pc, #272]	; (80036f8 <astronode_send_cfg_wr+0x148>)
 80035e6:	191b      	adds	r3, r3, r4
 80035e8:	19db      	adds	r3, r3, r7
 80035ea:	1c0a      	adds	r2, r1, #0
 80035ec:	701a      	strb	r2, [r3, #0]
    astronode_app_msg_t request = {0};
 80035ee:	25d0      	movs	r5, #208	; 0xd0
 80035f0:	197b      	adds	r3, r7, r5
 80035f2:	0018      	movs	r0, r3
 80035f4:	23c6      	movs	r3, #198	; 0xc6
 80035f6:	001a      	movs	r2, r3
 80035f8:	2100      	movs	r1, #0
 80035fa:	f001 fbc1 	bl	8004d80 <memset>
    astronode_app_msg_t answer = {0};
 80035fe:	4b3f      	ldr	r3, [pc, #252]	; (80036fc <astronode_send_cfg_wr+0x14c>)
 8003600:	191b      	adds	r3, r3, r4
 8003602:	19db      	adds	r3, r3, r7
 8003604:	0018      	movs	r0, r3
 8003606:	23c6      	movs	r3, #198	; 0xc6
 8003608:	001a      	movs	r2, r3
 800360a:	2100      	movs	r1, #0
 800360c:	f001 fbb8 	bl	8004d80 <memset>

    request.op_code = ASTRONODE_OP_CODE_CFG_WR;
 8003610:	0029      	movs	r1, r5
 8003612:	187b      	adds	r3, r7, r1
 8003614:	2205      	movs	r2, #5
 8003616:	701a      	strb	r2, [r3, #0]

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
        | add_geolocation << ASTRONODE_BIT_OFFSET_ADD_GEO
 8003618:	4b34      	ldr	r3, [pc, #208]	; (80036ec <astronode_send_cfg_wr+0x13c>)
 800361a:	191b      	adds	r3, r3, r4
 800361c:	19db      	adds	r3, r3, r7
 800361e:	2200      	movs	r2, #0
 8003620:	569a      	ldrsb	r2, [r3, r2]
 8003622:	4b33      	ldr	r3, [pc, #204]	; (80036f0 <astronode_send_cfg_wr+0x140>)
 8003624:	191b      	adds	r3, r3, r4
 8003626:	19db      	adds	r3, r3, r7
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	005b      	lsls	r3, r3, #1
 800362c:	b25b      	sxtb	r3, r3
 800362e:	4313      	orrs	r3, r2
 8003630:	b25a      	sxtb	r2, r3
        | enable_ephemeris << ASTRONODE_BIT_OFFSET_ENABLE_EPH
 8003632:	4b30      	ldr	r3, [pc, #192]	; (80036f4 <astronode_send_cfg_wr+0x144>)
 8003634:	191b      	adds	r3, r3, r4
 8003636:	19db      	adds	r3, r3, r7
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	b25b      	sxtb	r3, r3
 800363e:	4313      	orrs	r3, r2
 8003640:	b25a      	sxtb	r2, r3
        | deep_sleep_mode << ASTRONODE_BIT_OFFSET_DEEP_SLEEP_MODE;
 8003642:	4b2d      	ldr	r3, [pc, #180]	; (80036f8 <astronode_send_cfg_wr+0x148>)
 8003644:	191b      	adds	r3, r3, r4
 8003646:	19db      	adds	r3, r3, r7
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	00db      	lsls	r3, r3, #3
 800364c:	b25b      	sxtb	r3, r3
 800364e:	4313      	orrs	r3, r2
 8003650:	b25b      	sxtb	r3, r3
 8003652:	b2da      	uxtb	r2, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
 8003654:	187b      	adds	r3, r7, r1
 8003656:	705a      	strb	r2, [r3, #1]

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
        | reset_notification_event_pin_mask << ASTRONODE_BIT_OFFSET_RST_NTF_EVT_PIN_MASK
 8003658:	23d4      	movs	r3, #212	; 0xd4
 800365a:	005b      	lsls	r3, r3, #1
 800365c:	2508      	movs	r5, #8
 800365e:	195b      	adds	r3, r3, r5
 8003660:	19db      	adds	r3, r3, r7
 8003662:	2200      	movs	r2, #0
 8003664:	569a      	ldrsb	r2, [r3, r2]
 8003666:	23d6      	movs	r3, #214	; 0xd6
 8003668:	005b      	lsls	r3, r3, #1
 800366a:	195b      	adds	r3, r3, r5
 800366c:	19db      	adds	r3, r3, r7
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	005b      	lsls	r3, r3, #1
 8003672:	b25b      	sxtb	r3, r3
 8003674:	4313      	orrs	r3, r2
 8003676:	b25a      	sxtb	r2, r3
        | command_available_event_pin_mask << ASTRONODE_BIT_OFFSET_CMD_AVA_EVT_PIN_MASK
 8003678:	23d8      	movs	r3, #216	; 0xd8
 800367a:	005b      	lsls	r3, r3, #1
 800367c:	195b      	adds	r3, r3, r5
 800367e:	19db      	adds	r3, r3, r7
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	b25b      	sxtb	r3, r3
 8003686:	4313      	orrs	r3, r2
 8003688:	b25a      	sxtb	r2, r3
        | message_tx_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_TXP_EVT_PIN_MASK;
 800368a:	23da      	movs	r3, #218	; 0xda
 800368c:	005b      	lsls	r3, r3, #1
 800368e:	195b      	adds	r3, r3, r5
 8003690:	19db      	adds	r3, r3, r7
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	00db      	lsls	r3, r3, #3
 8003696:	b25b      	sxtb	r3, r3
 8003698:	4313      	orrs	r3, r2
 800369a:	b25b      	sxtb	r3, r3
 800369c:	b2da      	uxtb	r2, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
 800369e:	187b      	adds	r3, r7, r1
 80036a0:	70da      	strb	r2, [r3, #3]

    request.payload_len = 3;
 80036a2:	0008      	movs	r0, r1
 80036a4:	187b      	adds	r3, r7, r1
 80036a6:	22c4      	movs	r2, #196	; 0xc4
 80036a8:	2103      	movs	r1, #3
 80036aa:	5299      	strh	r1, [r3, r2]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80036ac:	002b      	movs	r3, r5
 80036ae:	18fa      	adds	r2, r7, r3
 80036b0:	183b      	adds	r3, r7, r0
 80036b2:	0011      	movs	r1, r2
 80036b4:	0018      	movs	r0, r3
 80036b6:	f001 f87f 	bl	80047b8 <astronode_transport_send_receive>
 80036ba:	0003      	movs	r3, r0
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d10f      	bne.n	80036e0 <astronode_send_cfg_wr+0x130>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CFG_WA)
 80036c0:	4b0e      	ldr	r3, [pc, #56]	; (80036fc <astronode_send_cfg_wr+0x14c>)
 80036c2:	191b      	adds	r3, r3, r4
 80036c4:	19db      	adds	r3, r3, r7
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	2b85      	cmp	r3, #133	; 0x85
 80036ca:	d105      	bne.n	80036d8 <astronode_send_cfg_wr+0x128>
        {
            send_debug_logs("Astronode configuration successfully set.");
 80036cc:	4b0c      	ldr	r3, [pc, #48]	; (8003700 <astronode_send_cfg_wr+0x150>)
 80036ce:	0018      	movs	r0, r3
 80036d0:	f7fd f9b0 	bl	8000a34 <send_debug_logs>
            return true ;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e004      	b.n	80036e2 <astronode_send_cfg_wr+0x132>
        }
        else
        {
            send_debug_logs("Failed to set the Astronode configuration.");
 80036d8:	4b0a      	ldr	r3, [pc, #40]	; (8003704 <astronode_send_cfg_wr+0x154>)
 80036da:	0018      	movs	r0, r3
 80036dc:	f7fd f9aa 	bl	8000a34 <send_debug_logs>
        }
    }
    return false ;
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	0018      	movs	r0, r3
 80036e4:	46bd      	mov	sp, r7
 80036e6:	b067      	add	sp, #412	; 0x19c
 80036e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036ea:	46c0      	nop			; (mov r8, r8)
 80036ec:	fffffe6f 	.word	0xfffffe6f
 80036f0:	fffffe6e 	.word	0xfffffe6e
 80036f4:	fffffe6d 	.word	0xfffffe6d
 80036f8:	fffffe6c 	.word	0xfffffe6c
 80036fc:	fffffe70 	.word	0xfffffe70
 8003700:	08005bb8 	.word	0x08005bb8
 8003704:	08005be4 	.word	0x08005be4

08003708 <astronode_send_mgi_rr>:
        send_debug_logs("Failed to save the Astronode context in NVM.");
    }
}

void astronode_send_mgi_rr(void)
{
 8003708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800370a:	b0ed      	sub	sp, #436	; 0x1b4
 800370c:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 800370e:	21c8      	movs	r1, #200	; 0xc8
 8003710:	2318      	movs	r3, #24
 8003712:	18cb      	adds	r3, r1, r3
 8003714:	19db      	adds	r3, r3, r7
 8003716:	0018      	movs	r0, r3
 8003718:	23c6      	movs	r3, #198	; 0xc6
 800371a:	001a      	movs	r2, r3
 800371c:	2100      	movs	r1, #0
 800371e:	f001 fb2f 	bl	8004d80 <memset>
    astronode_app_msg_t answer = {0};
 8003722:	4b4a      	ldr	r3, [pc, #296]	; (800384c <astronode_send_mgi_rr+0x144>)
 8003724:	26cc      	movs	r6, #204	; 0xcc
 8003726:	0076      	lsls	r6, r6, #1
 8003728:	199b      	adds	r3, r3, r6
 800372a:	2218      	movs	r2, #24
 800372c:	4694      	mov	ip, r2
 800372e:	44bc      	add	ip, r7
 8003730:	4463      	add	r3, ip
 8003732:	0018      	movs	r0, r3
 8003734:	23c6      	movs	r3, #198	; 0xc6
 8003736:	001a      	movs	r2, r3
 8003738:	2100      	movs	r1, #0
 800373a:	f001 fb21 	bl	8004d80 <memset>

    request.op_code = ASTRONODE_OP_CODE_MGI_RR;
 800373e:	21c8      	movs	r1, #200	; 0xc8
 8003740:	2318      	movs	r3, #24
 8003742:	18cb      	adds	r3, r1, r3
 8003744:	19db      	adds	r3, r3, r7
 8003746:	2219      	movs	r2, #25
 8003748:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800374a:	2318      	movs	r3, #24
 800374c:	18fa      	adds	r2, r7, r3
 800374e:	2318      	movs	r3, #24
 8003750:	18cb      	adds	r3, r1, r3
 8003752:	19db      	adds	r3, r3, r7
 8003754:	0011      	movs	r1, r2
 8003756:	0018      	movs	r0, r3
 8003758:	f001 f82e 	bl	80047b8 <astronode_transport_send_receive>
 800375c:	0003      	movs	r3, r0
 800375e:	2b01      	cmp	r3, #1
 8003760:	d16f      	bne.n	8003842 <astronode_send_mgi_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MGI_RA)
 8003762:	4b3a      	ldr	r3, [pc, #232]	; (800384c <astronode_send_mgi_rr+0x144>)
 8003764:	0032      	movs	r2, r6
 8003766:	189b      	adds	r3, r3, r2
 8003768:	2118      	movs	r1, #24
 800376a:	468c      	mov	ip, r1
 800376c:	44bc      	add	ip, r7
 800376e:	4463      	add	r3, ip
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	2b99      	cmp	r3, #153	; 0x99
 8003774:	d161      	bne.n	800383a <astronode_send_mgi_rr+0x132>
        {
 8003776:	466b      	mov	r3, sp
 8003778:	001e      	movs	r6, r3
            char guid[answer.payload_len];
 800377a:	4b34      	ldr	r3, [pc, #208]	; (800384c <astronode_send_mgi_rr+0x144>)
 800377c:	189b      	adds	r3, r3, r2
 800377e:	2218      	movs	r2, #24
 8003780:	4694      	mov	ip, r2
 8003782:	44bc      	add	ip, r7
 8003784:	4463      	add	r3, ip
 8003786:	22c4      	movs	r2, #196	; 0xc4
 8003788:	5a9b      	ldrh	r3, [r3, r2]
 800378a:	001a      	movs	r2, r3
 800378c:	3a01      	subs	r2, #1
 800378e:	21ca      	movs	r1, #202	; 0xca
 8003790:	0049      	lsls	r1, r1, #1
 8003792:	2018      	movs	r0, #24
 8003794:	1809      	adds	r1, r1, r0
 8003796:	19c9      	adds	r1, r1, r7
 8003798:	600a      	str	r2, [r1, #0]
 800379a:	001c      	movs	r4, r3
 800379c:	2200      	movs	r2, #0
 800379e:	0015      	movs	r5, r2
 80037a0:	0020      	movs	r0, r4
 80037a2:	0029      	movs	r1, r5
 80037a4:	0004      	movs	r4, r0
 80037a6:	0f62      	lsrs	r2, r4, #29
 80037a8:	000c      	movs	r4, r1
 80037aa:	00e4      	lsls	r4, r4, #3
 80037ac:	617c      	str	r4, [r7, #20]
 80037ae:	697c      	ldr	r4, [r7, #20]
 80037b0:	4314      	orrs	r4, r2
 80037b2:	617c      	str	r4, [r7, #20]
 80037b4:	0001      	movs	r1, r0
 80037b6:	00c9      	lsls	r1, r1, #3
 80037b8:	6139      	str	r1, [r7, #16]
 80037ba:	603b      	str	r3, [r7, #0]
 80037bc:	2200      	movs	r2, #0
 80037be:	607a      	str	r2, [r7, #4]
 80037c0:	6838      	ldr	r0, [r7, #0]
 80037c2:	6879      	ldr	r1, [r7, #4]
 80037c4:	0004      	movs	r4, r0
 80037c6:	0f62      	lsrs	r2, r4, #29
 80037c8:	000c      	movs	r4, r1
 80037ca:	00e4      	lsls	r4, r4, #3
 80037cc:	60fc      	str	r4, [r7, #12]
 80037ce:	68fc      	ldr	r4, [r7, #12]
 80037d0:	4314      	orrs	r4, r2
 80037d2:	60fc      	str	r4, [r7, #12]
 80037d4:	0001      	movs	r1, r0
 80037d6:	00ca      	lsls	r2, r1, #3
 80037d8:	60ba      	str	r2, [r7, #8]
 80037da:	3307      	adds	r3, #7
 80037dc:	08db      	lsrs	r3, r3, #3
 80037de:	00db      	lsls	r3, r3, #3
 80037e0:	4669      	mov	r1, sp
 80037e2:	1acb      	subs	r3, r1, r3
 80037e4:	469d      	mov	sp, r3
 80037e6:	466b      	mov	r3, sp
 80037e8:	3300      	adds	r3, #0
 80037ea:	24c8      	movs	r4, #200	; 0xc8
 80037ec:	0064      	lsls	r4, r4, #1
 80037ee:	2218      	movs	r2, #24
 80037f0:	18a2      	adds	r2, r4, r2
 80037f2:	19d1      	adds	r1, r2, r7
 80037f4:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module GUID is:");
 80037f6:	4b16      	ldr	r3, [pc, #88]	; (8003850 <astronode_send_mgi_rr+0x148>)
 80037f8:	0018      	movs	r0, r3
 80037fa:	f7fd f91b 	bl	8000a34 <send_debug_logs>
            snprintf(guid, answer.payload_len, "%s", answer.p_payload);
 80037fe:	4b13      	ldr	r3, [pc, #76]	; (800384c <astronode_send_mgi_rr+0x144>)
 8003800:	22cc      	movs	r2, #204	; 0xcc
 8003802:	0052      	lsls	r2, r2, #1
 8003804:	189b      	adds	r3, r3, r2
 8003806:	2218      	movs	r2, #24
 8003808:	4694      	mov	ip, r2
 800380a:	44bc      	add	ip, r7
 800380c:	4463      	add	r3, ip
 800380e:	22c4      	movs	r2, #196	; 0xc4
 8003810:	5a9b      	ldrh	r3, [r3, r2]
 8003812:	0019      	movs	r1, r3
 8003814:	2318      	movs	r3, #24
 8003816:	18fb      	adds	r3, r7, r3
 8003818:	3301      	adds	r3, #1
 800381a:	4a0e      	ldr	r2, [pc, #56]	; (8003854 <astronode_send_mgi_rr+0x14c>)
 800381c:	2018      	movs	r0, #24
 800381e:	1820      	adds	r0, r4, r0
 8003820:	19c0      	adds	r0, r0, r7
 8003822:	6800      	ldr	r0, [r0, #0]
 8003824:	f001 fa58 	bl	8004cd8 <sniprintf>
            send_debug_logs(guid);
 8003828:	2318      	movs	r3, #24
 800382a:	18e3      	adds	r3, r4, r3
 800382c:	19db      	adds	r3, r3, r7
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	0018      	movs	r0, r3
 8003832:	f7fd f8ff 	bl	8000a34 <send_debug_logs>
 8003836:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module GUID.");
        }
    }
}
 8003838:	e003      	b.n	8003842 <astronode_send_mgi_rr+0x13a>
            send_debug_logs("Failed to read module GUID.");
 800383a:	4b07      	ldr	r3, [pc, #28]	; (8003858 <astronode_send_mgi_rr+0x150>)
 800383c:	0018      	movs	r0, r3
 800383e:	f7fd f8f9 	bl	8000a34 <send_debug_logs>
}
 8003842:	46c0      	nop			; (mov r8, r8)
 8003844:	46bd      	mov	sp, r7
 8003846:	b06d      	add	sp, #436	; 0x1b4
 8003848:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800384a:	46c0      	nop			; (mov r8, r8)
 800384c:	fffffe68 	.word	0xfffffe68
 8003850:	08005c70 	.word	0x08005c70
 8003854:	08005c80 	.word	0x08005c80
 8003858:	08005c84 	.word	0x08005c84

0800385c <astronode_send_msn_rr>:

void astronode_send_msn_rr(void)
{
 800385c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800385e:	b0ed      	sub	sp, #436	; 0x1b4
 8003860:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8003862:	21c8      	movs	r1, #200	; 0xc8
 8003864:	2318      	movs	r3, #24
 8003866:	18cb      	adds	r3, r1, r3
 8003868:	19db      	adds	r3, r3, r7
 800386a:	0018      	movs	r0, r3
 800386c:	23c6      	movs	r3, #198	; 0xc6
 800386e:	001a      	movs	r2, r3
 8003870:	2100      	movs	r1, #0
 8003872:	f001 fa85 	bl	8004d80 <memset>
    astronode_app_msg_t answer = {0};
 8003876:	4b4a      	ldr	r3, [pc, #296]	; (80039a0 <astronode_send_msn_rr+0x144>)
 8003878:	26cc      	movs	r6, #204	; 0xcc
 800387a:	0076      	lsls	r6, r6, #1
 800387c:	199b      	adds	r3, r3, r6
 800387e:	2218      	movs	r2, #24
 8003880:	4694      	mov	ip, r2
 8003882:	44bc      	add	ip, r7
 8003884:	4463      	add	r3, ip
 8003886:	0018      	movs	r0, r3
 8003888:	23c6      	movs	r3, #198	; 0xc6
 800388a:	001a      	movs	r2, r3
 800388c:	2100      	movs	r1, #0
 800388e:	f001 fa77 	bl	8004d80 <memset>

    request.op_code = ASTRONODE_OP_CODE_MSN_RR;
 8003892:	21c8      	movs	r1, #200	; 0xc8
 8003894:	2318      	movs	r3, #24
 8003896:	18cb      	adds	r3, r1, r3
 8003898:	19db      	adds	r3, r3, r7
 800389a:	221a      	movs	r2, #26
 800389c:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800389e:	2318      	movs	r3, #24
 80038a0:	18fa      	adds	r2, r7, r3
 80038a2:	2318      	movs	r3, #24
 80038a4:	18cb      	adds	r3, r1, r3
 80038a6:	19db      	adds	r3, r3, r7
 80038a8:	0011      	movs	r1, r2
 80038aa:	0018      	movs	r0, r3
 80038ac:	f000 ff84 	bl	80047b8 <astronode_transport_send_receive>
 80038b0:	0003      	movs	r3, r0
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d16f      	bne.n	8003996 <astronode_send_msn_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MSN_RA)
 80038b6:	4b3a      	ldr	r3, [pc, #232]	; (80039a0 <astronode_send_msn_rr+0x144>)
 80038b8:	0032      	movs	r2, r6
 80038ba:	189b      	adds	r3, r3, r2
 80038bc:	2118      	movs	r1, #24
 80038be:	468c      	mov	ip, r1
 80038c0:	44bc      	add	ip, r7
 80038c2:	4463      	add	r3, ip
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	2b9a      	cmp	r3, #154	; 0x9a
 80038c8:	d161      	bne.n	800398e <astronode_send_msn_rr+0x132>
        {
 80038ca:	466b      	mov	r3, sp
 80038cc:	001e      	movs	r6, r3
            char serial_number[answer.payload_len];
 80038ce:	4b34      	ldr	r3, [pc, #208]	; (80039a0 <astronode_send_msn_rr+0x144>)
 80038d0:	189b      	adds	r3, r3, r2
 80038d2:	2218      	movs	r2, #24
 80038d4:	4694      	mov	ip, r2
 80038d6:	44bc      	add	ip, r7
 80038d8:	4463      	add	r3, ip
 80038da:	22c4      	movs	r2, #196	; 0xc4
 80038dc:	5a9b      	ldrh	r3, [r3, r2]
 80038de:	001a      	movs	r2, r3
 80038e0:	3a01      	subs	r2, #1
 80038e2:	21ca      	movs	r1, #202	; 0xca
 80038e4:	0049      	lsls	r1, r1, #1
 80038e6:	2018      	movs	r0, #24
 80038e8:	1809      	adds	r1, r1, r0
 80038ea:	19c9      	adds	r1, r1, r7
 80038ec:	600a      	str	r2, [r1, #0]
 80038ee:	001c      	movs	r4, r3
 80038f0:	2200      	movs	r2, #0
 80038f2:	0015      	movs	r5, r2
 80038f4:	0020      	movs	r0, r4
 80038f6:	0029      	movs	r1, r5
 80038f8:	0004      	movs	r4, r0
 80038fa:	0f62      	lsrs	r2, r4, #29
 80038fc:	000c      	movs	r4, r1
 80038fe:	00e4      	lsls	r4, r4, #3
 8003900:	617c      	str	r4, [r7, #20]
 8003902:	697c      	ldr	r4, [r7, #20]
 8003904:	4314      	orrs	r4, r2
 8003906:	617c      	str	r4, [r7, #20]
 8003908:	0001      	movs	r1, r0
 800390a:	00c9      	lsls	r1, r1, #3
 800390c:	6139      	str	r1, [r7, #16]
 800390e:	603b      	str	r3, [r7, #0]
 8003910:	2200      	movs	r2, #0
 8003912:	607a      	str	r2, [r7, #4]
 8003914:	6838      	ldr	r0, [r7, #0]
 8003916:	6879      	ldr	r1, [r7, #4]
 8003918:	0004      	movs	r4, r0
 800391a:	0f62      	lsrs	r2, r4, #29
 800391c:	000c      	movs	r4, r1
 800391e:	00e4      	lsls	r4, r4, #3
 8003920:	60fc      	str	r4, [r7, #12]
 8003922:	68fc      	ldr	r4, [r7, #12]
 8003924:	4314      	orrs	r4, r2
 8003926:	60fc      	str	r4, [r7, #12]
 8003928:	0001      	movs	r1, r0
 800392a:	00ca      	lsls	r2, r1, #3
 800392c:	60ba      	str	r2, [r7, #8]
 800392e:	3307      	adds	r3, #7
 8003930:	08db      	lsrs	r3, r3, #3
 8003932:	00db      	lsls	r3, r3, #3
 8003934:	4669      	mov	r1, sp
 8003936:	1acb      	subs	r3, r1, r3
 8003938:	469d      	mov	sp, r3
 800393a:	466b      	mov	r3, sp
 800393c:	3300      	adds	r3, #0
 800393e:	24c8      	movs	r4, #200	; 0xc8
 8003940:	0064      	lsls	r4, r4, #1
 8003942:	2218      	movs	r2, #24
 8003944:	18a2      	adds	r2, r4, r2
 8003946:	19d1      	adds	r1, r2, r7
 8003948:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module's Serial Number is:");
 800394a:	4b16      	ldr	r3, [pc, #88]	; (80039a4 <astronode_send_msn_rr+0x148>)
 800394c:	0018      	movs	r0, r3
 800394e:	f7fd f871 	bl	8000a34 <send_debug_logs>
            snprintf(serial_number, answer.payload_len, "%s", answer.p_payload);
 8003952:	4b13      	ldr	r3, [pc, #76]	; (80039a0 <astronode_send_msn_rr+0x144>)
 8003954:	22cc      	movs	r2, #204	; 0xcc
 8003956:	0052      	lsls	r2, r2, #1
 8003958:	189b      	adds	r3, r3, r2
 800395a:	2218      	movs	r2, #24
 800395c:	4694      	mov	ip, r2
 800395e:	44bc      	add	ip, r7
 8003960:	4463      	add	r3, ip
 8003962:	22c4      	movs	r2, #196	; 0xc4
 8003964:	5a9b      	ldrh	r3, [r3, r2]
 8003966:	0019      	movs	r1, r3
 8003968:	2318      	movs	r3, #24
 800396a:	18fb      	adds	r3, r7, r3
 800396c:	3301      	adds	r3, #1
 800396e:	4a0e      	ldr	r2, [pc, #56]	; (80039a8 <astronode_send_msn_rr+0x14c>)
 8003970:	2018      	movs	r0, #24
 8003972:	1820      	adds	r0, r4, r0
 8003974:	19c0      	adds	r0, r0, r7
 8003976:	6800      	ldr	r0, [r0, #0]
 8003978:	f001 f9ae 	bl	8004cd8 <sniprintf>
            send_debug_logs(serial_number);
 800397c:	2318      	movs	r3, #24
 800397e:	18e3      	adds	r3, r4, r3
 8003980:	19db      	adds	r3, r3, r7
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	0018      	movs	r0, r3
 8003986:	f7fd f855 	bl	8000a34 <send_debug_logs>
 800398a:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module Serial Number.");
        }
    }
}
 800398c:	e003      	b.n	8003996 <astronode_send_msn_rr+0x13a>
            send_debug_logs("Failed to read module Serial Number.");
 800398e:	4b07      	ldr	r3, [pc, #28]	; (80039ac <astronode_send_msn_rr+0x150>)
 8003990:	0018      	movs	r0, r3
 8003992:	f7fd f84f 	bl	8000a34 <send_debug_logs>
}
 8003996:	46c0      	nop			; (mov r8, r8)
 8003998:	46bd      	mov	sp, r7
 800399a:	b06d      	add	sp, #436	; 0x1b4
 800399c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800399e:	46c0      	nop			; (mov r8, r8)
 80039a0:	fffffe68 	.word	0xfffffe68
 80039a4:	08005ca0 	.word	0x08005ca0
 80039a8:	08005c80 	.word	0x08005c80
 80039ac:	08005cbc 	.word	0x08005cbc

080039b0 <astronode_send_evt_rr>:
    }
    return 0xFFFFFFFF ; // Longest possible time
}

void astronode_send_evt_rr(void)
{
 80039b0:	b5b0      	push	{r4, r5, r7, lr}
 80039b2:	b0e4      	sub	sp, #400	; 0x190
 80039b4:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80039b6:	24c8      	movs	r4, #200	; 0xc8
 80039b8:	193b      	adds	r3, r7, r4
 80039ba:	0018      	movs	r0, r3
 80039bc:	23c6      	movs	r3, #198	; 0xc6
 80039be:	001a      	movs	r2, r3
 80039c0:	2100      	movs	r1, #0
 80039c2:	f001 f9dd 	bl	8004d80 <memset>
    astronode_app_msg_t answer = {0};
 80039c6:	4b31      	ldr	r3, [pc, #196]	; (8003a8c <astronode_send_evt_rr+0xdc>)
 80039c8:	25c8      	movs	r5, #200	; 0xc8
 80039ca:	006d      	lsls	r5, r5, #1
 80039cc:	195b      	adds	r3, r3, r5
 80039ce:	19db      	adds	r3, r3, r7
 80039d0:	0018      	movs	r0, r3
 80039d2:	23c6      	movs	r3, #198	; 0xc6
 80039d4:	001a      	movs	r2, r3
 80039d6:	2100      	movs	r1, #0
 80039d8:	f001 f9d2 	bl	8004d80 <memset>

    request.op_code = ASTRONODE_OP_CODE_EVT_RR;
 80039dc:	193b      	adds	r3, r7, r4
 80039de:	2265      	movs	r2, #101	; 0x65
 80039e0:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80039e2:	003a      	movs	r2, r7
 80039e4:	193b      	adds	r3, r7, r4
 80039e6:	0011      	movs	r1, r2
 80039e8:	0018      	movs	r0, r3
 80039ea:	f000 fee5 	bl	80047b8 <astronode_transport_send_receive>
 80039ee:	0003      	movs	r3, r0
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d147      	bne.n	8003a84 <astronode_send_evt_rr+0xd4>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_EVT_RA)
 80039f4:	4b25      	ldr	r3, [pc, #148]	; (8003a8c <astronode_send_evt_rr+0xdc>)
 80039f6:	195b      	adds	r3, r3, r5
 80039f8:	19db      	adds	r3, r3, r7
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	2be5      	cmp	r3, #229	; 0xe5
 80039fe:	d141      	bne.n	8003a84 <astronode_send_evt_rr+0xd4>
        {
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_ACK))
 8003a00:	4b22      	ldr	r3, [pc, #136]	; (8003a8c <astronode_send_evt_rr+0xdc>)
 8003a02:	195b      	adds	r3, r3, r5
 8003a04:	19db      	adds	r3, r3, r7
 8003a06:	785b      	ldrb	r3, [r3, #1]
 8003a08:	001a      	movs	r2, r3
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	d006      	beq.n	8003a1e <astronode_send_evt_rr+0x6e>
            {
                g_is_sak_available = true;
 8003a10:	4b1f      	ldr	r3, [pc, #124]	; (8003a90 <astronode_send_evt_rr+0xe0>)
 8003a12:	2201      	movs	r2, #1
 8003a14:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Message acknowledgment available.");
 8003a16:	4b1f      	ldr	r3, [pc, #124]	; (8003a94 <astronode_send_evt_rr+0xe4>)
 8003a18:	0018      	movs	r0, r3
 8003a1a:	f7fd f80b 	bl	8000a34 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_RST))
 8003a1e:	4b1b      	ldr	r3, [pc, #108]	; (8003a8c <astronode_send_evt_rr+0xdc>)
 8003a20:	22c8      	movs	r2, #200	; 0xc8
 8003a22:	0052      	lsls	r2, r2, #1
 8003a24:	189b      	adds	r3, r3, r2
 8003a26:	19db      	adds	r3, r3, r7
 8003a28:	785b      	ldrb	r3, [r3, #1]
 8003a2a:	001a      	movs	r2, r3
 8003a2c:	2302      	movs	r3, #2
 8003a2e:	4013      	ands	r3, r2
 8003a30:	d006      	beq.n	8003a40 <astronode_send_evt_rr+0x90>
            {
                g_is_astronode_reset = true;
 8003a32:	4b19      	ldr	r3, [pc, #100]	; (8003a98 <astronode_send_evt_rr+0xe8>)
 8003a34:	2201      	movs	r2, #1
 8003a36:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Astronode has reset.");
 8003a38:	4b18      	ldr	r3, [pc, #96]	; (8003a9c <astronode_send_evt_rr+0xec>)
 8003a3a:	0018      	movs	r0, r3
 8003a3c:	f7fc fffa 	bl	8000a34 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_CMD))
 8003a40:	4b12      	ldr	r3, [pc, #72]	; (8003a8c <astronode_send_evt_rr+0xdc>)
 8003a42:	22c8      	movs	r2, #200	; 0xc8
 8003a44:	0052      	lsls	r2, r2, #1
 8003a46:	189b      	adds	r3, r3, r2
 8003a48:	19db      	adds	r3, r3, r7
 8003a4a:	785b      	ldrb	r3, [r3, #1]
 8003a4c:	001a      	movs	r2, r3
 8003a4e:	2304      	movs	r3, #4
 8003a50:	4013      	ands	r3, r2
 8003a52:	d006      	beq.n	8003a62 <astronode_send_evt_rr+0xb2>
            {
                g_is_command_available = true;
 8003a54:	4b12      	ldr	r3, [pc, #72]	; (8003aa0 <astronode_send_evt_rr+0xf0>)
 8003a56:	2201      	movs	r2, #1
 8003a58:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Command available.");
 8003a5a:	4b12      	ldr	r3, [pc, #72]	; (8003aa4 <astronode_send_evt_rr+0xf4>)
 8003a5c:	0018      	movs	r0, r3
 8003a5e:	f7fc ffe9 	bl	8000a34 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFEST_MSG_TX))
 8003a62:	4b0a      	ldr	r3, [pc, #40]	; (8003a8c <astronode_send_evt_rr+0xdc>)
 8003a64:	22c8      	movs	r2, #200	; 0xc8
 8003a66:	0052      	lsls	r2, r2, #1
 8003a68:	189b      	adds	r3, r3, r2
 8003a6a:	19db      	adds	r3, r3, r7
 8003a6c:	785b      	ldrb	r3, [r3, #1]
 8003a6e:	001a      	movs	r2, r3
 8003a70:	2308      	movs	r3, #8
 8003a72:	4013      	ands	r3, r2
 8003a74:	d006      	beq.n	8003a84 <astronode_send_evt_rr+0xd4>
            {
                g_is_tx_msg_pending = true;
 8003a76:	4b0c      	ldr	r3, [pc, #48]	; (8003aa8 <astronode_send_evt_rr+0xf8>)
 8003a78:	2201      	movs	r2, #1
 8003a7a:	701a      	strb	r2, [r3, #0]
                send_debug_logs("TX message pending.");
 8003a7c:	4b0b      	ldr	r3, [pc, #44]	; (8003aac <astronode_send_evt_rr+0xfc>)
 8003a7e:	0018      	movs	r0, r3
 8003a80:	f7fc ffd8 	bl	8000a34 <send_debug_logs>
            }

        }
    }
}
 8003a84:	46c0      	nop			; (mov r8, r8)
 8003a86:	46bd      	mov	sp, r7
 8003a88:	b064      	add	sp, #400	; 0x190
 8003a8a:	bdb0      	pop	{r4, r5, r7, pc}
 8003a8c:	fffffe70 	.word	0xfffffe70
 8003a90:	20000340 	.word	0x20000340
 8003a94:	08005d64 	.word	0x08005d64
 8003a98:	20000341 	.word	0x20000341
 8003a9c:	08005d88 	.word	0x08005d88
 8003aa0:	20000342 	.word	0x20000342
 8003aa4:	08005da0 	.word	0x08005da0
 8003aa8:	20000343 	.word	0x20000343
 8003aac:	08005db4 	.word	0x08005db4

08003ab0 <astronode_send_pld_fr>:
    }
    return false ;
}

void astronode_send_pld_fr(void)
{
 8003ab0:	b5b0      	push	{r4, r5, r7, lr}
 8003ab2:	b0e4      	sub	sp, #400	; 0x190
 8003ab4:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8003ab6:	24c8      	movs	r4, #200	; 0xc8
 8003ab8:	193b      	adds	r3, r7, r4
 8003aba:	0018      	movs	r0, r3
 8003abc:	23c6      	movs	r3, #198	; 0xc6
 8003abe:	001a      	movs	r2, r3
 8003ac0:	2100      	movs	r1, #0
 8003ac2:	f001 f95d 	bl	8004d80 <memset>
    astronode_app_msg_t answer = {0};
 8003ac6:	4b15      	ldr	r3, [pc, #84]	; (8003b1c <astronode_send_pld_fr+0x6c>)
 8003ac8:	25c8      	movs	r5, #200	; 0xc8
 8003aca:	006d      	lsls	r5, r5, #1
 8003acc:	195b      	adds	r3, r3, r5
 8003ace:	19db      	adds	r3, r3, r7
 8003ad0:	0018      	movs	r0, r3
 8003ad2:	23c6      	movs	r3, #198	; 0xc6
 8003ad4:	001a      	movs	r2, r3
 8003ad6:	2100      	movs	r1, #0
 8003ad8:	f001 f952 	bl	8004d80 <memset>

    request.op_code = ASTRONODE_OP_CODE_PLD_FR;
 8003adc:	193b      	adds	r3, r7, r4
 8003ade:	2227      	movs	r2, #39	; 0x27
 8003ae0:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8003ae2:	003a      	movs	r2, r7
 8003ae4:	193b      	adds	r3, r7, r4
 8003ae6:	0011      	movs	r1, r2
 8003ae8:	0018      	movs	r0, r3
 8003aea:	f000 fe65 	bl	80047b8 <astronode_transport_send_receive>
 8003aee:	0003      	movs	r3, r0
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d10e      	bne.n	8003b12 <astronode_send_pld_fr+0x62>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_PLD_FA)
 8003af4:	4b09      	ldr	r3, [pc, #36]	; (8003b1c <astronode_send_pld_fr+0x6c>)
 8003af6:	195b      	adds	r3, r3, r5
 8003af8:	19db      	adds	r3, r3, r7
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	2ba7      	cmp	r3, #167	; 0xa7
 8003afe:	d104      	bne.n	8003b0a <astronode_send_pld_fr+0x5a>
        {
            send_debug_logs("astronode_application: payload queue has been cleared.");
 8003b00:	4b07      	ldr	r3, [pc, #28]	; (8003b20 <astronode_send_pld_fr+0x70>)
 8003b02:	0018      	movs	r0, r3
 8003b04:	f7fc ff96 	bl	8000a34 <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: Failed to clear the payload queue.");
        }
    }
}
 8003b08:	e003      	b.n	8003b12 <astronode_send_pld_fr+0x62>
            send_debug_logs("astronode_application: Failed to clear the payload queue.");
 8003b0a:	4b06      	ldr	r3, [pc, #24]	; (8003b24 <astronode_send_pld_fr+0x74>)
 8003b0c:	0018      	movs	r0, r3
 8003b0e:	f7fc ff91 	bl	8000a34 <send_debug_logs>
}
 8003b12:	46c0      	nop			; (mov r8, r8)
 8003b14:	46bd      	mov	sp, r7
 8003b16:	b064      	add	sp, #400	; 0x190
 8003b18:	bdb0      	pop	{r4, r5, r7, pc}
 8003b1a:	46c0      	nop			; (mov r8, r8)
 8003b1c:	fffffe70 	.word	0xfffffe70
 8003b20:	08005ee4 	.word	0x08005ee4
 8003b24:	08005f1c 	.word	0x08005f1c

08003b28 <astronode_send_res_cr>:

void astronode_send_res_cr(void)
{
 8003b28:	b5b0      	push	{r4, r5, r7, lr}
 8003b2a:	b0e4      	sub	sp, #400	; 0x190
 8003b2c:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8003b2e:	24c8      	movs	r4, #200	; 0xc8
 8003b30:	193b      	adds	r3, r7, r4
 8003b32:	0018      	movs	r0, r3
 8003b34:	23c6      	movs	r3, #198	; 0xc6
 8003b36:	001a      	movs	r2, r3
 8003b38:	2100      	movs	r1, #0
 8003b3a:	f001 f921 	bl	8004d80 <memset>
    astronode_app_msg_t answer = {0};
 8003b3e:	4b16      	ldr	r3, [pc, #88]	; (8003b98 <astronode_send_res_cr+0x70>)
 8003b40:	25c8      	movs	r5, #200	; 0xc8
 8003b42:	006d      	lsls	r5, r5, #1
 8003b44:	195b      	adds	r3, r3, r5
 8003b46:	19db      	adds	r3, r3, r7
 8003b48:	0018      	movs	r0, r3
 8003b4a:	23c6      	movs	r3, #198	; 0xc6
 8003b4c:	001a      	movs	r2, r3
 8003b4e:	2100      	movs	r1, #0
 8003b50:	f001 f916 	bl	8004d80 <memset>

    request.op_code = ASTRONODE_OP_CODE_RES_CR;
 8003b54:	193b      	adds	r3, r7, r4
 8003b56:	2255      	movs	r2, #85	; 0x55
 8003b58:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8003b5a:	003a      	movs	r2, r7
 8003b5c:	193b      	adds	r3, r7, r4
 8003b5e:	0011      	movs	r1, r2
 8003b60:	0018      	movs	r0, r3
 8003b62:	f000 fe29 	bl	80047b8 <astronode_transport_send_receive>
 8003b66:	0003      	movs	r3, r0
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d111      	bne.n	8003b90 <astronode_send_res_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_RES_CA)
 8003b6c:	4b0a      	ldr	r3, [pc, #40]	; (8003b98 <astronode_send_res_cr+0x70>)
 8003b6e:	195b      	adds	r3, r3, r5
 8003b70:	19db      	adds	r3, r3, r7
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	2bd5      	cmp	r3, #213	; 0xd5
 8003b76:	d107      	bne.n	8003b88 <astronode_send_res_cr+0x60>
        {
            g_is_astronode_reset = false;
 8003b78:	4b08      	ldr	r3, [pc, #32]	; (8003b9c <astronode_send_res_cr+0x74>)
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	701a      	strb	r2, [r3, #0]
            send_debug_logs("astronode_application: The reset has been cleared.");
 8003b7e:	4b08      	ldr	r3, [pc, #32]	; (8003ba0 <astronode_send_res_cr+0x78>)
 8003b80:	0018      	movs	r0, r3
 8003b82:	f7fc ff57 	bl	8000a34 <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: No reset to clear.");
        }
    }
}
 8003b86:	e003      	b.n	8003b90 <astronode_send_res_cr+0x68>
            send_debug_logs("astronode_application: No reset to clear.");
 8003b88:	4b06      	ldr	r3, [pc, #24]	; (8003ba4 <astronode_send_res_cr+0x7c>)
 8003b8a:	0018      	movs	r0, r3
 8003b8c:	f7fc ff52 	bl	8000a34 <send_debug_logs>
}
 8003b90:	46c0      	nop			; (mov r8, r8)
 8003b92:	46bd      	mov	sp, r7
 8003b94:	b064      	add	sp, #400	; 0x190
 8003b96:	bdb0      	pop	{r4, r5, r7, pc}
 8003b98:	fffffe70 	.word	0xfffffe70
 8003b9c:	20000341 	.word	0x20000341
 8003ba0:	08005f58 	.word	0x08005f58
 8003ba4:	08005f8c 	.word	0x08005f8c

08003ba8 <astronode_send_rtc_rr>:

uint32_t astronode_send_rtc_rr ( void )
{
 8003ba8:	b5b0      	push	{r4, r5, r7, lr}
 8003baa:	b0fa      	sub	sp, #488	; 0x1e8
 8003bac:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0} ;
 8003bae:	258e      	movs	r5, #142	; 0x8e
 8003bb0:	006d      	lsls	r5, r5, #1
 8003bb2:	197b      	adds	r3, r7, r5
 8003bb4:	0018      	movs	r0, r3
 8003bb6:	23c6      	movs	r3, #198	; 0xc6
 8003bb8:	001a      	movs	r2, r3
 8003bba:	2100      	movs	r1, #0
 8003bbc:	f001 f8e0 	bl	8004d80 <memset>
    astronode_app_msg_t answer = {0} ;
 8003bc0:	4b28      	ldr	r3, [pc, #160]	; (8003c64 <astronode_send_rtc_rr+0xbc>)
 8003bc2:	24f4      	movs	r4, #244	; 0xf4
 8003bc4:	0064      	lsls	r4, r4, #1
 8003bc6:	191b      	adds	r3, r3, r4
 8003bc8:	19db      	adds	r3, r3, r7
 8003bca:	0018      	movs	r0, r3
 8003bcc:	23c6      	movs	r3, #198	; 0xc6
 8003bce:	001a      	movs	r2, r3
 8003bd0:	2100      	movs	r1, #0
 8003bd2:	f001 f8d5 	bl	8004d80 <memset>

    request.op_code = ASTRONODE_OP_CODE_RTC_RR ;
 8003bd6:	197b      	adds	r3, r7, r5
 8003bd8:	2217      	movs	r2, #23
 8003bda:	701a      	strb	r2, [r3, #0]

    if ( astronode_transport_send_receive ( &request , &answer ) == RS_SUCCESS )
 8003bdc:	2354      	movs	r3, #84	; 0x54
 8003bde:	18fa      	adds	r2, r7, r3
 8003be0:	197b      	adds	r3, r7, r5
 8003be2:	0011      	movs	r1, r2
 8003be4:	0018      	movs	r0, r3
 8003be6:	f000 fde7 	bl	80047b8 <astronode_transport_send_receive>
 8003bea:	0003      	movs	r3, r0
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d133      	bne.n	8003c58 <astronode_send_rtc_rr+0xb0>
    {
        if ( answer.op_code == ASTRONODE_OP_CODE_RTC_RA )
 8003bf0:	4b1c      	ldr	r3, [pc, #112]	; (8003c64 <astronode_send_rtc_rr+0xbc>)
 8003bf2:	0021      	movs	r1, r4
 8003bf4:	185b      	adds	r3, r3, r1
 8003bf6:	19db      	adds	r3, r3, r7
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	2b97      	cmp	r3, #151	; 0x97
 8003bfc:	d128      	bne.n	8003c50 <astronode_send_rtc_rr+0xa8>
        {
            uint32_t rtc_time = answer.p_payload[0]
 8003bfe:	4b19      	ldr	r3, [pc, #100]	; (8003c64 <astronode_send_rtc_rr+0xbc>)
 8003c00:	185b      	adds	r3, r3, r1
 8003c02:	19db      	adds	r3, r3, r7
 8003c04:	785b      	ldrb	r3, [r3, #1]
 8003c06:	001a      	movs	r2, r3
                                        + ( answer.p_payload[1] << 8 )
 8003c08:	4b16      	ldr	r3, [pc, #88]	; (8003c64 <astronode_send_rtc_rr+0xbc>)
 8003c0a:	185b      	adds	r3, r3, r1
 8003c0c:	19db      	adds	r3, r3, r7
 8003c0e:	789b      	ldrb	r3, [r3, #2]
 8003c10:	021b      	lsls	r3, r3, #8
 8003c12:	18d2      	adds	r2, r2, r3
                                        + ( answer.p_payload[2] << 16 )
 8003c14:	4b13      	ldr	r3, [pc, #76]	; (8003c64 <astronode_send_rtc_rr+0xbc>)
 8003c16:	185b      	adds	r3, r3, r1
 8003c18:	19db      	adds	r3, r3, r7
 8003c1a:	78db      	ldrb	r3, [r3, #3]
 8003c1c:	041b      	lsls	r3, r3, #16
 8003c1e:	18d2      	adds	r2, r2, r3
                                        + ( answer.p_payload[3] << 24 ) ;
 8003c20:	4b10      	ldr	r3, [pc, #64]	; (8003c64 <astronode_send_rtc_rr+0xbc>)
 8003c22:	185b      	adds	r3, r3, r1
 8003c24:	19db      	adds	r3, r3, r7
 8003c26:	791b      	ldrb	r3, [r3, #4]
 8003c28:	061b      	lsls	r3, r3, #24
 8003c2a:	18d3      	adds	r3, r2, r3
            uint32_t rtc_time = answer.p_payload[0]
 8003c2c:	24f2      	movs	r4, #242	; 0xf2
 8003c2e:	0064      	lsls	r4, r4, #1
 8003c30:	193a      	adds	r2, r7, r4
 8003c32:	6013      	str	r3, [r2, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH] ;
            sprintf ( str , "RTC time since Astrocast Epoch (2018-01-01 00:00:00 UTC): %lds." , rtc_time ) ;
 8003c34:	193b      	adds	r3, r7, r4
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	490b      	ldr	r1, [pc, #44]	; (8003c68 <astronode_send_rtc_rr+0xc0>)
 8003c3a:	1d3b      	adds	r3, r7, #4
 8003c3c:	0018      	movs	r0, r3
 8003c3e:	f001 f87f 	bl	8004d40 <siprintf>
            send_debug_logs ( str ) ;
 8003c42:	1d3b      	adds	r3, r7, #4
 8003c44:	0018      	movs	r0, r3
 8003c46:	f7fc fef5 	bl	8000a34 <send_debug_logs>
            return rtc_time ;
 8003c4a:	193b      	adds	r3, r7, r4
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	e004      	b.n	8003c5a <astronode_send_rtc_rr+0xb2>
        }
        else
        {
            send_debug_logs ( "Failed to read rtc time." ) ;
 8003c50:	4b06      	ldr	r3, [pc, #24]	; (8003c6c <astronode_send_rtc_rr+0xc4>)
 8003c52:	0018      	movs	r0, r3
 8003c54:	f7fc feee 	bl	8000a34 <send_debug_logs>
        }
    }
    return 0 ;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	0018      	movs	r0, r3
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	b07a      	add	sp, #488	; 0x1e8
 8003c60:	bdb0      	pop	{r4, r5, r7, pc}
 8003c62:	46c0      	nop			; (mov r8, r8)
 8003c64:	fffffe6c 	.word	0xfffffe6c
 8003c68:	08005fb8 	.word	0x08005fb8
 8003c6c:	08005ff8 	.word	0x08005ff8

08003c70 <astronode_send_sak_rr>:

void astronode_send_sak_rr(void)
{
 8003c70:	b5b0      	push	{r4, r5, r7, lr}
 8003c72:	b0f8      	sub	sp, #480	; 0x1e0
 8003c74:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8003c76:	258c      	movs	r5, #140	; 0x8c
 8003c78:	006d      	lsls	r5, r5, #1
 8003c7a:	197b      	adds	r3, r7, r5
 8003c7c:	0018      	movs	r0, r3
 8003c7e:	23c6      	movs	r3, #198	; 0xc6
 8003c80:	001a      	movs	r2, r3
 8003c82:	2100      	movs	r1, #0
 8003c84:	f001 f87c 	bl	8004d80 <memset>
    astronode_app_msg_t answer = {0};
 8003c88:	4b21      	ldr	r3, [pc, #132]	; (8003d10 <astronode_send_sak_rr+0xa0>)
 8003c8a:	24f0      	movs	r4, #240	; 0xf0
 8003c8c:	0064      	lsls	r4, r4, #1
 8003c8e:	191b      	adds	r3, r3, r4
 8003c90:	19db      	adds	r3, r3, r7
 8003c92:	0018      	movs	r0, r3
 8003c94:	23c6      	movs	r3, #198	; 0xc6
 8003c96:	001a      	movs	r2, r3
 8003c98:	2100      	movs	r1, #0
 8003c9a:	f001 f871 	bl	8004d80 <memset>

    request.op_code = ASTRONODE_OP_CODE_SAK_RR;
 8003c9e:	197b      	adds	r3, r7, r5
 8003ca0:	2245      	movs	r2, #69	; 0x45
 8003ca2:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8003ca4:	2350      	movs	r3, #80	; 0x50
 8003ca6:	18fa      	adds	r2, r7, r3
 8003ca8:	197b      	adds	r3, r7, r5
 8003caa:	0011      	movs	r1, r2
 8003cac:	0018      	movs	r0, r3
 8003cae:	f000 fd83 	bl	80047b8 <astronode_transport_send_receive>
 8003cb2:	0003      	movs	r3, r0
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d126      	bne.n	8003d06 <astronode_send_sak_rr+0x96>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_SAK_RA)
 8003cb8:	4b15      	ldr	r3, [pc, #84]	; (8003d10 <astronode_send_sak_rr+0xa0>)
 8003cba:	191b      	adds	r3, r3, r4
 8003cbc:	19db      	adds	r3, r3, r7
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	2bc5      	cmp	r3, #197	; 0xc5
 8003cc2:	d11c      	bne.n	8003cfe <astronode_send_sak_rr+0x8e>
        {
            uint16_t payload_id = answer.p_payload[0] + (answer.p_payload[1] << 8);
 8003cc4:	4b12      	ldr	r3, [pc, #72]	; (8003d10 <astronode_send_sak_rr+0xa0>)
 8003cc6:	191b      	adds	r3, r3, r4
 8003cc8:	19db      	adds	r3, r3, r7
 8003cca:	785b      	ldrb	r3, [r3, #1]
 8003ccc:	b299      	uxth	r1, r3
 8003cce:	4b10      	ldr	r3, [pc, #64]	; (8003d10 <astronode_send_sak_rr+0xa0>)
 8003cd0:	191b      	adds	r3, r3, r4
 8003cd2:	19db      	adds	r3, r3, r7
 8003cd4:	789b      	ldrb	r3, [r3, #2]
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	021b      	lsls	r3, r3, #8
 8003cda:	b29a      	uxth	r2, r3
 8003cdc:	20ef      	movs	r0, #239	; 0xef
 8003cde:	0040      	lsls	r0, r0, #1
 8003ce0:	183b      	adds	r3, r7, r0
 8003ce2:	188a      	adds	r2, r1, r2
 8003ce4:	801a      	strh	r2, [r3, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "Acknowledgment for payload %d is available.", payload_id);
 8003ce6:	183b      	adds	r3, r7, r0
 8003ce8:	881a      	ldrh	r2, [r3, #0]
 8003cea:	490a      	ldr	r1, [pc, #40]	; (8003d14 <astronode_send_sak_rr+0xa4>)
 8003cec:	003b      	movs	r3, r7
 8003cee:	0018      	movs	r0, r3
 8003cf0:	f001 f826 	bl	8004d40 <siprintf>
            send_debug_logs(str);
 8003cf4:	003b      	movs	r3, r7
 8003cf6:	0018      	movs	r0, r3
 8003cf8:	f7fc fe9c 	bl	8000a34 <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: No acknowledgment available.");
        }
    }
}
 8003cfc:	e003      	b.n	8003d06 <astronode_send_sak_rr+0x96>
            send_debug_logs("astronode_application: No acknowledgment available.");
 8003cfe:	4b06      	ldr	r3, [pc, #24]	; (8003d18 <astronode_send_sak_rr+0xa8>)
 8003d00:	0018      	movs	r0, r3
 8003d02:	f7fc fe97 	bl	8000a34 <send_debug_logs>
}
 8003d06:	46c0      	nop			; (mov r8, r8)
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	b078      	add	sp, #480	; 0x1e0
 8003d0c:	bdb0      	pop	{r4, r5, r7, pc}
 8003d0e:	46c0      	nop			; (mov r8, r8)
 8003d10:	fffffe70 	.word	0xfffffe70
 8003d14:	08006014 	.word	0x08006014
 8003d18:	08006040 	.word	0x08006040

08003d1c <astronode_send_sak_cr>:

void astronode_send_sak_cr(void)
{
 8003d1c:	b5b0      	push	{r4, r5, r7, lr}
 8003d1e:	b0e4      	sub	sp, #400	; 0x190
 8003d20:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8003d22:	24c8      	movs	r4, #200	; 0xc8
 8003d24:	193b      	adds	r3, r7, r4
 8003d26:	0018      	movs	r0, r3
 8003d28:	23c6      	movs	r3, #198	; 0xc6
 8003d2a:	001a      	movs	r2, r3
 8003d2c:	2100      	movs	r1, #0
 8003d2e:	f001 f827 	bl	8004d80 <memset>
    astronode_app_msg_t answer = {0};
 8003d32:	4b16      	ldr	r3, [pc, #88]	; (8003d8c <astronode_send_sak_cr+0x70>)
 8003d34:	25c8      	movs	r5, #200	; 0xc8
 8003d36:	006d      	lsls	r5, r5, #1
 8003d38:	195b      	adds	r3, r3, r5
 8003d3a:	19db      	adds	r3, r3, r7
 8003d3c:	0018      	movs	r0, r3
 8003d3e:	23c6      	movs	r3, #198	; 0xc6
 8003d40:	001a      	movs	r2, r3
 8003d42:	2100      	movs	r1, #0
 8003d44:	f001 f81c 	bl	8004d80 <memset>

    request.op_code = ASTRONODE_OP_CODE_SAK_CR;
 8003d48:	193b      	adds	r3, r7, r4
 8003d4a:	2246      	movs	r2, #70	; 0x46
 8003d4c:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8003d4e:	003a      	movs	r2, r7
 8003d50:	193b      	adds	r3, r7, r4
 8003d52:	0011      	movs	r1, r2
 8003d54:	0018      	movs	r0, r3
 8003d56:	f000 fd2f 	bl	80047b8 <astronode_transport_send_receive>
 8003d5a:	0003      	movs	r3, r0
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d111      	bne.n	8003d84 <astronode_send_sak_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_SAK_CA)
 8003d60:	4b0a      	ldr	r3, [pc, #40]	; (8003d8c <astronode_send_sak_cr+0x70>)
 8003d62:	195b      	adds	r3, r3, r5
 8003d64:	19db      	adds	r3, r3, r7
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	2bc6      	cmp	r3, #198	; 0xc6
 8003d6a:	d107      	bne.n	8003d7c <astronode_send_sak_cr+0x60>
        {
            g_is_sak_available = false;
 8003d6c:	4b08      	ldr	r3, [pc, #32]	; (8003d90 <astronode_send_sak_cr+0x74>)
 8003d6e:	2200      	movs	r2, #0
 8003d70:	701a      	strb	r2, [r3, #0]
            send_debug_logs("The acknowledgment has been cleared.");
 8003d72:	4b08      	ldr	r3, [pc, #32]	; (8003d94 <astronode_send_sak_cr+0x78>)
 8003d74:	0018      	movs	r0, r3
 8003d76:	f7fc fe5d 	bl	8000a34 <send_debug_logs>
        else
        {
            send_debug_logs("No acknowledgment available.");
        }
    }
}
 8003d7a:	e003      	b.n	8003d84 <astronode_send_sak_cr+0x68>
            send_debug_logs("No acknowledgment available.");
 8003d7c:	4b06      	ldr	r3, [pc, #24]	; (8003d98 <astronode_send_sak_cr+0x7c>)
 8003d7e:	0018      	movs	r0, r3
 8003d80:	f7fc fe58 	bl	8000a34 <send_debug_logs>
}
 8003d84:	46c0      	nop			; (mov r8, r8)
 8003d86:	46bd      	mov	sp, r7
 8003d88:	b064      	add	sp, #400	; 0x190
 8003d8a:	bdb0      	pop	{r4, r5, r7, pc}
 8003d8c:	fffffe70 	.word	0xfffffe70
 8003d90:	20000340 	.word	0x20000340
 8003d94:	08006074 	.word	0x08006074
 8003d98:	0800609c 	.word	0x0800609c

08003d9c <astronode_send_mpn_rr>:
        }
    }
}

void astronode_send_mpn_rr(void)
{
 8003d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d9e:	b0ed      	sub	sp, #436	; 0x1b4
 8003da0:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8003da2:	21c8      	movs	r1, #200	; 0xc8
 8003da4:	2318      	movs	r3, #24
 8003da6:	18cb      	adds	r3, r1, r3
 8003da8:	19db      	adds	r3, r3, r7
 8003daa:	0018      	movs	r0, r3
 8003dac:	23c6      	movs	r3, #198	; 0xc6
 8003dae:	001a      	movs	r2, r3
 8003db0:	2100      	movs	r1, #0
 8003db2:	f000 ffe5 	bl	8004d80 <memset>
    astronode_app_msg_t answer = {0};
 8003db6:	4b4a      	ldr	r3, [pc, #296]	; (8003ee0 <astronode_send_mpn_rr+0x144>)
 8003db8:	26cc      	movs	r6, #204	; 0xcc
 8003dba:	0076      	lsls	r6, r6, #1
 8003dbc:	199b      	adds	r3, r3, r6
 8003dbe:	2218      	movs	r2, #24
 8003dc0:	4694      	mov	ip, r2
 8003dc2:	44bc      	add	ip, r7
 8003dc4:	4463      	add	r3, ip
 8003dc6:	0018      	movs	r0, r3
 8003dc8:	23c6      	movs	r3, #198	; 0xc6
 8003dca:	001a      	movs	r2, r3
 8003dcc:	2100      	movs	r1, #0
 8003dce:	f000 ffd7 	bl	8004d80 <memset>

    request.op_code = ASTRONODE_OP_CODE_MPN_RR;
 8003dd2:	21c8      	movs	r1, #200	; 0xc8
 8003dd4:	2318      	movs	r3, #24
 8003dd6:	18cb      	adds	r3, r1, r3
 8003dd8:	19db      	adds	r3, r3, r7
 8003dda:	221b      	movs	r2, #27
 8003ddc:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8003dde:	2318      	movs	r3, #24
 8003de0:	18fa      	adds	r2, r7, r3
 8003de2:	2318      	movs	r3, #24
 8003de4:	18cb      	adds	r3, r1, r3
 8003de6:	19db      	adds	r3, r3, r7
 8003de8:	0011      	movs	r1, r2
 8003dea:	0018      	movs	r0, r3
 8003dec:	f000 fce4 	bl	80047b8 <astronode_transport_send_receive>
 8003df0:	0003      	movs	r3, r0
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d16f      	bne.n	8003ed6 <astronode_send_mpn_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MPN_RA)
 8003df6:	4b3a      	ldr	r3, [pc, #232]	; (8003ee0 <astronode_send_mpn_rr+0x144>)
 8003df8:	0032      	movs	r2, r6
 8003dfa:	189b      	adds	r3, r3, r2
 8003dfc:	2118      	movs	r1, #24
 8003dfe:	468c      	mov	ip, r1
 8003e00:	44bc      	add	ip, r7
 8003e02:	4463      	add	r3, ip
 8003e04:	781b      	ldrb	r3, [r3, #0]
 8003e06:	2b9b      	cmp	r3, #155	; 0x9b
 8003e08:	d161      	bne.n	8003ece <astronode_send_mpn_rr+0x132>
        {
 8003e0a:	466b      	mov	r3, sp
 8003e0c:	001e      	movs	r6, r3
            char product_number[answer.payload_len];
 8003e0e:	4b34      	ldr	r3, [pc, #208]	; (8003ee0 <astronode_send_mpn_rr+0x144>)
 8003e10:	189b      	adds	r3, r3, r2
 8003e12:	2218      	movs	r2, #24
 8003e14:	4694      	mov	ip, r2
 8003e16:	44bc      	add	ip, r7
 8003e18:	4463      	add	r3, ip
 8003e1a:	22c4      	movs	r2, #196	; 0xc4
 8003e1c:	5a9b      	ldrh	r3, [r3, r2]
 8003e1e:	001a      	movs	r2, r3
 8003e20:	3a01      	subs	r2, #1
 8003e22:	21ca      	movs	r1, #202	; 0xca
 8003e24:	0049      	lsls	r1, r1, #1
 8003e26:	2018      	movs	r0, #24
 8003e28:	1809      	adds	r1, r1, r0
 8003e2a:	19c9      	adds	r1, r1, r7
 8003e2c:	600a      	str	r2, [r1, #0]
 8003e2e:	001c      	movs	r4, r3
 8003e30:	2200      	movs	r2, #0
 8003e32:	0015      	movs	r5, r2
 8003e34:	0020      	movs	r0, r4
 8003e36:	0029      	movs	r1, r5
 8003e38:	0004      	movs	r4, r0
 8003e3a:	0f62      	lsrs	r2, r4, #29
 8003e3c:	000c      	movs	r4, r1
 8003e3e:	00e4      	lsls	r4, r4, #3
 8003e40:	617c      	str	r4, [r7, #20]
 8003e42:	697c      	ldr	r4, [r7, #20]
 8003e44:	4314      	orrs	r4, r2
 8003e46:	617c      	str	r4, [r7, #20]
 8003e48:	0001      	movs	r1, r0
 8003e4a:	00c9      	lsls	r1, r1, #3
 8003e4c:	6139      	str	r1, [r7, #16]
 8003e4e:	603b      	str	r3, [r7, #0]
 8003e50:	2200      	movs	r2, #0
 8003e52:	607a      	str	r2, [r7, #4]
 8003e54:	6838      	ldr	r0, [r7, #0]
 8003e56:	6879      	ldr	r1, [r7, #4]
 8003e58:	0004      	movs	r4, r0
 8003e5a:	0f62      	lsrs	r2, r4, #29
 8003e5c:	000c      	movs	r4, r1
 8003e5e:	00e4      	lsls	r4, r4, #3
 8003e60:	60fc      	str	r4, [r7, #12]
 8003e62:	68fc      	ldr	r4, [r7, #12]
 8003e64:	4314      	orrs	r4, r2
 8003e66:	60fc      	str	r4, [r7, #12]
 8003e68:	0001      	movs	r1, r0
 8003e6a:	00ca      	lsls	r2, r1, #3
 8003e6c:	60ba      	str	r2, [r7, #8]
 8003e6e:	3307      	adds	r3, #7
 8003e70:	08db      	lsrs	r3, r3, #3
 8003e72:	00db      	lsls	r3, r3, #3
 8003e74:	4669      	mov	r1, sp
 8003e76:	1acb      	subs	r3, r1, r3
 8003e78:	469d      	mov	sp, r3
 8003e7a:	466b      	mov	r3, sp
 8003e7c:	3300      	adds	r3, #0
 8003e7e:	24c8      	movs	r4, #200	; 0xc8
 8003e80:	0064      	lsls	r4, r4, #1
 8003e82:	2218      	movs	r2, #24
 8003e84:	18a2      	adds	r2, r4, r2
 8003e86:	19d1      	adds	r1, r2, r7
 8003e88:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module's product number is:");
 8003e8a:	4b16      	ldr	r3, [pc, #88]	; (8003ee4 <astronode_send_mpn_rr+0x148>)
 8003e8c:	0018      	movs	r0, r3
 8003e8e:	f7fc fdd1 	bl	8000a34 <send_debug_logs>
            snprintf(product_number, answer.payload_len, "%s", answer.p_payload);
 8003e92:	4b13      	ldr	r3, [pc, #76]	; (8003ee0 <astronode_send_mpn_rr+0x144>)
 8003e94:	22cc      	movs	r2, #204	; 0xcc
 8003e96:	0052      	lsls	r2, r2, #1
 8003e98:	189b      	adds	r3, r3, r2
 8003e9a:	2218      	movs	r2, #24
 8003e9c:	4694      	mov	ip, r2
 8003e9e:	44bc      	add	ip, r7
 8003ea0:	4463      	add	r3, ip
 8003ea2:	22c4      	movs	r2, #196	; 0xc4
 8003ea4:	5a9b      	ldrh	r3, [r3, r2]
 8003ea6:	0019      	movs	r1, r3
 8003ea8:	2318      	movs	r3, #24
 8003eaa:	18fb      	adds	r3, r7, r3
 8003eac:	3301      	adds	r3, #1
 8003eae:	4a0e      	ldr	r2, [pc, #56]	; (8003ee8 <astronode_send_mpn_rr+0x14c>)
 8003eb0:	2018      	movs	r0, #24
 8003eb2:	1820      	adds	r0, r4, r0
 8003eb4:	19c0      	adds	r0, r0, r7
 8003eb6:	6800      	ldr	r0, [r0, #0]
 8003eb8:	f000 ff0e 	bl	8004cd8 <sniprintf>
            send_debug_logs(product_number);
 8003ebc:	2318      	movs	r3, #24
 8003ebe:	18e3      	adds	r3, r4, r3
 8003ec0:	19db      	adds	r3, r3, r7
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	0018      	movs	r0, r3
 8003ec6:	f7fc fdb5 	bl	8000a34 <send_debug_logs>
 8003eca:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module Serial Number.");
        }
    }
}
 8003ecc:	e003      	b.n	8003ed6 <astronode_send_mpn_rr+0x13a>
            send_debug_logs("Failed to read module Serial Number.");
 8003ece:	4b07      	ldr	r3, [pc, #28]	; (8003eec <astronode_send_mpn_rr+0x150>)
 8003ed0:	0018      	movs	r0, r3
 8003ed2:	f7fc fdaf 	bl	8000a34 <send_debug_logs>
}
 8003ed6:	46c0      	nop			; (mov r8, r8)
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	b06d      	add	sp, #436	; 0x1b4
 8003edc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ede:	46c0      	nop			; (mov r8, r8)
 8003ee0:	fffffe68 	.word	0xfffffe68
 8003ee4:	08006164 	.word	0x08006164
 8003ee8:	08005c80 	.word	0x08005c80
 8003eec:	08005cbc 	.word	0x08005cbc

08003ef0 <astronode_send_cmd_cr>:
        }
    }
}

void astronode_send_cmd_cr(void)
{
 8003ef0:	b5b0      	push	{r4, r5, r7, lr}
 8003ef2:	b0e4      	sub	sp, #400	; 0x190
 8003ef4:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8003ef6:	24c8      	movs	r4, #200	; 0xc8
 8003ef8:	193b      	adds	r3, r7, r4
 8003efa:	0018      	movs	r0, r3
 8003efc:	23c6      	movs	r3, #198	; 0xc6
 8003efe:	001a      	movs	r2, r3
 8003f00:	2100      	movs	r1, #0
 8003f02:	f000 ff3d 	bl	8004d80 <memset>
    astronode_app_msg_t answer = {0};
 8003f06:	4b16      	ldr	r3, [pc, #88]	; (8003f60 <astronode_send_cmd_cr+0x70>)
 8003f08:	25c8      	movs	r5, #200	; 0xc8
 8003f0a:	006d      	lsls	r5, r5, #1
 8003f0c:	195b      	adds	r3, r3, r5
 8003f0e:	19db      	adds	r3, r3, r7
 8003f10:	0018      	movs	r0, r3
 8003f12:	23c6      	movs	r3, #198	; 0xc6
 8003f14:	001a      	movs	r2, r3
 8003f16:	2100      	movs	r1, #0
 8003f18:	f000 ff32 	bl	8004d80 <memset>

    request.op_code = ASTRONODE_OP_CODE_CMD_CR;
 8003f1c:	193b      	adds	r3, r7, r4
 8003f1e:	2248      	movs	r2, #72	; 0x48
 8003f20:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8003f22:	003a      	movs	r2, r7
 8003f24:	193b      	adds	r3, r7, r4
 8003f26:	0011      	movs	r1, r2
 8003f28:	0018      	movs	r0, r3
 8003f2a:	f000 fc45 	bl	80047b8 <astronode_transport_send_receive>
 8003f2e:	0003      	movs	r3, r0
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d111      	bne.n	8003f58 <astronode_send_cmd_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CMD_CA)
 8003f34:	4b0a      	ldr	r3, [pc, #40]	; (8003f60 <astronode_send_cmd_cr+0x70>)
 8003f36:	195b      	adds	r3, r3, r5
 8003f38:	19db      	adds	r3, r3, r7
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	2bc8      	cmp	r3, #200	; 0xc8
 8003f3e:	d107      	bne.n	8003f50 <astronode_send_cmd_cr+0x60>
        {
            g_is_command_available = false;
 8003f40:	4b08      	ldr	r3, [pc, #32]	; (8003f64 <astronode_send_cmd_cr+0x74>)
 8003f42:	2200      	movs	r2, #0
 8003f44:	701a      	strb	r2, [r3, #0]
            send_debug_logs("The command ack has been cleared.");
 8003f46:	4b08      	ldr	r3, [pc, #32]	; (8003f68 <astronode_send_cmd_cr+0x78>)
 8003f48:	0018      	movs	r0, r3
 8003f4a:	f7fc fd73 	bl	8000a34 <send_debug_logs>
        else
        {
            send_debug_logs("No command to clear.");
        }
    }
}
 8003f4e:	e003      	b.n	8003f58 <astronode_send_cmd_cr+0x68>
            send_debug_logs("No command to clear.");
 8003f50:	4b06      	ldr	r3, [pc, #24]	; (8003f6c <astronode_send_cmd_cr+0x7c>)
 8003f52:	0018      	movs	r0, r3
 8003f54:	f7fc fd6e 	bl	8000a34 <send_debug_logs>
}
 8003f58:	46c0      	nop			; (mov r8, r8)
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	b064      	add	sp, #400	; 0x190
 8003f5e:	bdb0      	pop	{r4, r5, r7, pc}
 8003f60:	fffffe70 	.word	0xfffffe70
 8003f64:	20000342 	.word	0x20000342
 8003f68:	080065b4 	.word	0x080065b4
 8003f6c:	080065d8 	.word	0x080065d8

08003f70 <astronode_send_cmd_rr>:

bool astronode_send_cmd_rr ( char* my_astro_rcv_cmd )
{
 8003f70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f72:	4cc6      	ldr	r4, [pc, #792]	; (800428c <astronode_send_cmd_rr+0x31c>)
 8003f74:	44a5      	add	sp, r4
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	61f8      	str	r0, [r7, #28]
    astronode_app_msg_t request = {0};
 8003f7a:	2190      	movs	r1, #144	; 0x90
 8003f7c:	0049      	lsls	r1, r1, #1
 8003f7e:	2318      	movs	r3, #24
 8003f80:	18cb      	adds	r3, r1, r3
 8003f82:	19db      	adds	r3, r3, r7
 8003f84:	0018      	movs	r0, r3
 8003f86:	23c6      	movs	r3, #198	; 0xc6
 8003f88:	001a      	movs	r2, r3
 8003f8a:	2100      	movs	r1, #0
 8003f8c:	f000 fef8 	bl	8004d80 <memset>
    astronode_app_msg_t answer = {0};
 8003f90:	4bbf      	ldr	r3, [pc, #764]	; (8004290 <astronode_send_cmd_rr+0x320>)
 8003f92:	26fc      	movs	r6, #252	; 0xfc
 8003f94:	0076      	lsls	r6, r6, #1
 8003f96:	199b      	adds	r3, r3, r6
 8003f98:	2218      	movs	r2, #24
 8003f9a:	4694      	mov	ip, r2
 8003f9c:	44bc      	add	ip, r7
 8003f9e:	4463      	add	r3, ip
 8003fa0:	0018      	movs	r0, r3
 8003fa2:	23c6      	movs	r3, #198	; 0xc6
 8003fa4:	001a      	movs	r2, r3
 8003fa6:	2100      	movs	r1, #0
 8003fa8:	f000 feea 	bl	8004d80 <memset>
    bool result = false ;
 8003fac:	23f8      	movs	r3, #248	; 0xf8
 8003fae:	33ff      	adds	r3, #255	; 0xff
 8003fb0:	2218      	movs	r2, #24
 8003fb2:	189b      	adds	r3, r3, r2
 8003fb4:	19db      	adds	r3, r3, r7
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	701a      	strb	r2, [r3, #0]

    request.op_code = ASTRONODE_OP_CODE_CMD_RR;
 8003fba:	2190      	movs	r1, #144	; 0x90
 8003fbc:	0049      	lsls	r1, r1, #1
 8003fbe:	2318      	movs	r3, #24
 8003fc0:	18cb      	adds	r3, r1, r3
 8003fc2:	19db      	adds	r3, r3, r7
 8003fc4:	2247      	movs	r2, #71	; 0x47
 8003fc6:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8003fc8:	2258      	movs	r2, #88	; 0x58
 8003fca:	2318      	movs	r3, #24
 8003fcc:	18d3      	adds	r3, r2, r3
 8003fce:	19da      	adds	r2, r3, r7
 8003fd0:	2318      	movs	r3, #24
 8003fd2:	18cb      	adds	r3, r1, r3
 8003fd4:	19db      	adds	r3, r3, r7
 8003fd6:	0011      	movs	r1, r2
 8003fd8:	0018      	movs	r0, r3
 8003fda:	f000 fbed 	bl	80047b8 <astronode_transport_send_receive>
 8003fde:	0003      	movs	r3, r0
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d000      	beq.n	8003fe6 <astronode_send_cmd_rr+0x76>
 8003fe4:	e146      	b.n	8004274 <astronode_send_cmd_rr+0x304>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CMD_RA)
 8003fe6:	4baa      	ldr	r3, [pc, #680]	; (8004290 <astronode_send_cmd_rr+0x320>)
 8003fe8:	199a      	adds	r2, r3, r6
 8003fea:	2318      	movs	r3, #24
 8003fec:	18fb      	adds	r3, r7, r3
 8003fee:	18d3      	adds	r3, r2, r3
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	2bc7      	cmp	r3, #199	; 0xc7
 8003ff4:	d000      	beq.n	8003ff8 <astronode_send_cmd_rr+0x88>
 8003ff6:	e139      	b.n	800426c <astronode_send_cmd_rr+0x2fc>
        {
 8003ff8:	466b      	mov	r3, sp
 8003ffa:	001e      	movs	r6, r3
            send_debug_logs("Received downlink command");
 8003ffc:	4ba5      	ldr	r3, [pc, #660]	; (8004294 <astronode_send_cmd_rr+0x324>)
 8003ffe:	0018      	movs	r0, r3
 8004000:	f7fc fd18 	bl	8000a34 <send_debug_logs>
            uint32_t rtc_time = answer.p_payload[0]
 8004004:	4ba2      	ldr	r3, [pc, #648]	; (8004290 <astronode_send_cmd_rr+0x320>)
 8004006:	21fc      	movs	r1, #252	; 0xfc
 8004008:	0049      	lsls	r1, r1, #1
 800400a:	185a      	adds	r2, r3, r1
 800400c:	2318      	movs	r3, #24
 800400e:	18fb      	adds	r3, r7, r3
 8004010:	18d3      	adds	r3, r2, r3
 8004012:	785b      	ldrb	r3, [r3, #1]
 8004014:	001a      	movs	r2, r3
                                + (answer.p_payload[1] << 8)
 8004016:	4b9e      	ldr	r3, [pc, #632]	; (8004290 <astronode_send_cmd_rr+0x320>)
 8004018:	1858      	adds	r0, r3, r1
 800401a:	2318      	movs	r3, #24
 800401c:	18fb      	adds	r3, r7, r3
 800401e:	18c3      	adds	r3, r0, r3
 8004020:	789b      	ldrb	r3, [r3, #2]
 8004022:	021b      	lsls	r3, r3, #8
 8004024:	18d2      	adds	r2, r2, r3
                                + (answer.p_payload[2] << 16)
 8004026:	4b9a      	ldr	r3, [pc, #616]	; (8004290 <astronode_send_cmd_rr+0x320>)
 8004028:	1858      	adds	r0, r3, r1
 800402a:	2318      	movs	r3, #24
 800402c:	18fb      	adds	r3, r7, r3
 800402e:	18c3      	adds	r3, r0, r3
 8004030:	78db      	ldrb	r3, [r3, #3]
 8004032:	041b      	lsls	r3, r3, #16
 8004034:	18d2      	adds	r2, r2, r3
                                + (answer.p_payload[3] << 24);
 8004036:	4b96      	ldr	r3, [pc, #600]	; (8004290 <astronode_send_cmd_rr+0x320>)
 8004038:	1858      	adds	r0, r3, r1
 800403a:	2318      	movs	r3, #24
 800403c:	18fb      	adds	r3, r7, r3
 800403e:	18c3      	adds	r3, r0, r3
 8004040:	791b      	ldrb	r3, [r3, #4]
 8004042:	061b      	lsls	r3, r3, #24
 8004044:	18d3      	adds	r3, r2, r3
            uint32_t rtc_time = answer.p_payload[0]
 8004046:	22f8      	movs	r2, #248	; 0xf8
 8004048:	0052      	lsls	r2, r2, #1
 800404a:	2118      	movs	r1, #24
 800404c:	1851      	adds	r1, r2, r1
 800404e:	19c8      	adds	r0, r1, r7
 8004050:	6003      	str	r3, [r0, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "Command created date, Ref is astrocast Epoch (2018-01-01 00:00:00 UTC): %lds.", rtc_time);
 8004052:	2318      	movs	r3, #24
 8004054:	18d3      	adds	r3, r2, r3
 8004056:	19da      	adds	r2, r3, r7
 8004058:	6812      	ldr	r2, [r2, #0]
 800405a:	498f      	ldr	r1, [pc, #572]	; (8004298 <astronode_send_cmd_rr+0x328>)
 800405c:	2008      	movs	r0, #8
 800405e:	2318      	movs	r3, #24
 8004060:	18c3      	adds	r3, r0, r3
 8004062:	19db      	adds	r3, r3, r7
 8004064:	0018      	movs	r0, r3
 8004066:	f000 fe6b 	bl	8004d40 <siprintf>
            send_debug_logs(str);
 800406a:	2008      	movs	r0, #8
 800406c:	2318      	movs	r3, #24
 800406e:	18c3      	adds	r3, r0, r3
 8004070:	19db      	adds	r3, r3, r7
 8004072:	0018      	movs	r0, r3
 8004074:	f7fc fcde 	bl	8000a34 <send_debug_logs>

            if (((answer.payload_len - 4) != 40) && ((answer.payload_len - 4) != 8))
 8004078:	4b85      	ldr	r3, [pc, #532]	; (8004290 <astronode_send_cmd_rr+0x320>)
 800407a:	21fc      	movs	r1, #252	; 0xfc
 800407c:	0049      	lsls	r1, r1, #1
 800407e:	185a      	adds	r2, r3, r1
 8004080:	2318      	movs	r3, #24
 8004082:	18fb      	adds	r3, r7, r3
 8004084:	18d3      	adds	r3, r2, r3
 8004086:	22c4      	movs	r2, #196	; 0xc4
 8004088:	5a9b      	ldrh	r3, [r3, r2]
 800408a:	2b2c      	cmp	r3, #44	; 0x2c
 800408c:	d013      	beq.n	80040b6 <astronode_send_cmd_rr+0x146>
 800408e:	4b80      	ldr	r3, [pc, #512]	; (8004290 <astronode_send_cmd_rr+0x320>)
 8004090:	185a      	adds	r2, r3, r1
 8004092:	2318      	movs	r3, #24
 8004094:	18fb      	adds	r3, r7, r3
 8004096:	18d3      	adds	r3, r2, r3
 8004098:	22c4      	movs	r2, #196	; 0xc4
 800409a:	5a9b      	ldrh	r3, [r3, r2]
 800409c:	2b0c      	cmp	r3, #12
 800409e:	d00a      	beq.n	80040b6 <astronode_send_cmd_rr+0x146>
            {
                send_debug_logs("Command size error");
 80040a0:	4b7e      	ldr	r3, [pc, #504]	; (800429c <astronode_send_cmd_rr+0x32c>)
 80040a2:	0018      	movs	r0, r3
 80040a4:	f7fc fcc6 	bl	8000a34 <send_debug_logs>
                return result ;
 80040a8:	23f8      	movs	r3, #248	; 0xf8
 80040aa:	33ff      	adds	r3, #255	; 0xff
 80040ac:	2218      	movs	r2, #24
 80040ae:	189b      	adds	r3, r3, r2
 80040b0:	19db      	adds	r3, r3, r7
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	e0d8      	b.n	8004268 <astronode_send_cmd_rr+0x2f8>
            }

            char command_content[answer.payload_len];
 80040b6:	4b76      	ldr	r3, [pc, #472]	; (8004290 <astronode_send_cmd_rr+0x320>)
 80040b8:	22fc      	movs	r2, #252	; 0xfc
 80040ba:	0052      	lsls	r2, r2, #1
 80040bc:	189b      	adds	r3, r3, r2
 80040be:	2218      	movs	r2, #24
 80040c0:	4694      	mov	ip, r2
 80040c2:	44bc      	add	ip, r7
 80040c4:	4463      	add	r3, ip
 80040c6:	22c4      	movs	r2, #196	; 0xc4
 80040c8:	5a9b      	ldrh	r3, [r3, r2]
 80040ca:	001a      	movs	r2, r3
 80040cc:	3a01      	subs	r2, #1
 80040ce:	21f6      	movs	r1, #246	; 0xf6
 80040d0:	0049      	lsls	r1, r1, #1
 80040d2:	2018      	movs	r0, #24
 80040d4:	1809      	adds	r1, r1, r0
 80040d6:	19c9      	adds	r1, r1, r7
 80040d8:	600a      	str	r2, [r1, #0]
 80040da:	001c      	movs	r4, r3
 80040dc:	2200      	movs	r2, #0
 80040de:	0015      	movs	r5, r2
 80040e0:	0020      	movs	r0, r4
 80040e2:	0029      	movs	r1, r5
 80040e4:	0004      	movs	r4, r0
 80040e6:	0f62      	lsrs	r2, r4, #29
 80040e8:	000c      	movs	r4, r1
 80040ea:	00e4      	lsls	r4, r4, #3
 80040ec:	617c      	str	r4, [r7, #20]
 80040ee:	697c      	ldr	r4, [r7, #20]
 80040f0:	4314      	orrs	r4, r2
 80040f2:	617c      	str	r4, [r7, #20]
 80040f4:	0001      	movs	r1, r0
 80040f6:	00c9      	lsls	r1, r1, #3
 80040f8:	6139      	str	r1, [r7, #16]
 80040fa:	603b      	str	r3, [r7, #0]
 80040fc:	2200      	movs	r2, #0
 80040fe:	607a      	str	r2, [r7, #4]
 8004100:	6838      	ldr	r0, [r7, #0]
 8004102:	6879      	ldr	r1, [r7, #4]
 8004104:	0004      	movs	r4, r0
 8004106:	0f62      	lsrs	r2, r4, #29
 8004108:	000c      	movs	r4, r1
 800410a:	00e4      	lsls	r4, r4, #3
 800410c:	60fc      	str	r4, [r7, #12]
 800410e:	68fc      	ldr	r4, [r7, #12]
 8004110:	4314      	orrs	r4, r2
 8004112:	60fc      	str	r4, [r7, #12]
 8004114:	0001      	movs	r1, r0
 8004116:	00ca      	lsls	r2, r1, #3
 8004118:	60ba      	str	r2, [r7, #8]
 800411a:	3307      	adds	r3, #7
 800411c:	08db      	lsrs	r3, r3, #3
 800411e:	00db      	lsls	r3, r3, #3
 8004120:	4669      	mov	r1, sp
 8004122:	1acb      	subs	r3, r1, r3
 8004124:	469d      	mov	sp, r3
 8004126:	466b      	mov	r3, sp
 8004128:	3300      	adds	r3, #0
 800412a:	20f4      	movs	r0, #244	; 0xf4
 800412c:	0040      	lsls	r0, r0, #1
 800412e:	2218      	movs	r2, #24
 8004130:	1882      	adds	r2, r0, r2
 8004132:	19d1      	adds	r1, r2, r7
 8004134:	600b      	str	r3, [r1, #0]
            uint16_t command_content_size = snprintf(command_content, (answer.payload_len - 4) + 1, "%s", &answer.p_payload[4]);
 8004136:	4b56      	ldr	r3, [pc, #344]	; (8004290 <astronode_send_cmd_rr+0x320>)
 8004138:	22fc      	movs	r2, #252	; 0xfc
 800413a:	0052      	lsls	r2, r2, #1
 800413c:	189b      	adds	r3, r3, r2
 800413e:	2218      	movs	r2, #24
 8004140:	4694      	mov	ip, r2
 8004142:	44bc      	add	ip, r7
 8004144:	4463      	add	r3, ip
 8004146:	22c4      	movs	r2, #196	; 0xc4
 8004148:	5a9b      	ldrh	r3, [r3, r2]
 800414a:	3b03      	subs	r3, #3
 800414c:	0019      	movs	r1, r3
 800414e:	2358      	movs	r3, #88	; 0x58
 8004150:	2218      	movs	r2, #24
 8004152:	189b      	adds	r3, r3, r2
 8004154:	19db      	adds	r3, r3, r7
 8004156:	3305      	adds	r3, #5
 8004158:	4a51      	ldr	r2, [pc, #324]	; (80042a0 <astronode_send_cmd_rr+0x330>)
 800415a:	2418      	movs	r4, #24
 800415c:	1900      	adds	r0, r0, r4
 800415e:	19c0      	adds	r0, r0, r7
 8004160:	6800      	ldr	r0, [r0, #0]
 8004162:	f000 fdb9 	bl	8004cd8 <sniprintf>
 8004166:	0002      	movs	r2, r0
 8004168:	23f3      	movs	r3, #243	; 0xf3
 800416a:	005b      	lsls	r3, r3, #1
 800416c:	2118      	movs	r1, #24
 800416e:	185b      	adds	r3, r3, r1
 8004170:	19db      	adds	r3, r3, r7
 8004172:	801a      	strh	r2, [r3, #0]
            for (uint8_t index = 0; index < command_content_size; index++)
 8004174:	23fb      	movs	r3, #251	; 0xfb
 8004176:	005b      	lsls	r3, r3, #1
 8004178:	2218      	movs	r2, #24
 800417a:	189b      	adds	r3, r3, r2
 800417c:	19db      	adds	r3, r3, r7
 800417e:	2200      	movs	r2, #0
 8004180:	701a      	strb	r2, [r3, #0]
 8004182:	e037      	b.n	80041f4 <astronode_send_cmd_rr+0x284>
            {
            	if (isprint((unsigned char)command_content[index]) == 0)
 8004184:	23fb      	movs	r3, #251	; 0xfb
 8004186:	005b      	lsls	r3, r3, #1
 8004188:	2218      	movs	r2, #24
 800418a:	189b      	adds	r3, r3, r2
 800418c:	19db      	adds	r3, r3, r7
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	22f4      	movs	r2, #244	; 0xf4
 8004192:	0052      	lsls	r2, r2, #1
 8004194:	2118      	movs	r1, #24
 8004196:	1852      	adds	r2, r2, r1
 8004198:	19d2      	adds	r2, r2, r7
 800419a:	6812      	ldr	r2, [r2, #0]
 800419c:	5cd3      	ldrb	r3, [r2, r3]
 800419e:	1c5a      	adds	r2, r3, #1
 80041a0:	4b40      	ldr	r3, [pc, #256]	; (80042a4 <astronode_send_cmd_rr+0x334>)
 80041a2:	18d3      	adds	r3, r2, r3
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	001a      	movs	r2, r3
 80041a8:	2397      	movs	r3, #151	; 0x97
 80041aa:	4013      	ands	r3, r2
 80041ac:	d105      	bne.n	80041ba <astronode_send_cmd_rr+0x24a>
                {
                    send_debug_logs("Command contains non printable characters");
 80041ae:	4b3e      	ldr	r3, [pc, #248]	; (80042a8 <astronode_send_cmd_rr+0x338>)
 80041b0:	0018      	movs	r0, r3
 80041b2:	f7fc fc3f 	bl	8000a34 <send_debug_logs>
                    return false;
 80041b6:	2300      	movs	r3, #0
 80041b8:	e056      	b.n	8004268 <astronode_send_cmd_rr+0x2f8>
                }
            	my_astro_rcv_cmd[index] = command_content[index] ;
 80041ba:	20fb      	movs	r0, #251	; 0xfb
 80041bc:	0040      	lsls	r0, r0, #1
 80041be:	2318      	movs	r3, #24
 80041c0:	18c3      	adds	r3, r0, r3
 80041c2:	19db      	adds	r3, r3, r7
 80041c4:	781a      	ldrb	r2, [r3, #0]
 80041c6:	2318      	movs	r3, #24
 80041c8:	18c3      	adds	r3, r0, r3
 80041ca:	19db      	adds	r3, r3, r7
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	69f9      	ldr	r1, [r7, #28]
 80041d0:	18cb      	adds	r3, r1, r3
 80041d2:	21f4      	movs	r1, #244	; 0xf4
 80041d4:	0049      	lsls	r1, r1, #1
 80041d6:	2418      	movs	r4, #24
 80041d8:	1909      	adds	r1, r1, r4
 80041da:	19c9      	adds	r1, r1, r7
 80041dc:	6809      	ldr	r1, [r1, #0]
 80041de:	5c8a      	ldrb	r2, [r1, r2]
 80041e0:	701a      	strb	r2, [r3, #0]
            for (uint8_t index = 0; index < command_content_size; index++)
 80041e2:	2318      	movs	r3, #24
 80041e4:	18c3      	adds	r3, r0, r3
 80041e6:	19db      	adds	r3, r3, r7
 80041e8:	781a      	ldrb	r2, [r3, #0]
 80041ea:	2318      	movs	r3, #24
 80041ec:	18c3      	adds	r3, r0, r3
 80041ee:	19db      	adds	r3, r3, r7
 80041f0:	3201      	adds	r2, #1
 80041f2:	701a      	strb	r2, [r3, #0]
 80041f4:	23fb      	movs	r3, #251	; 0xfb
 80041f6:	005b      	lsls	r3, r3, #1
 80041f8:	2218      	movs	r2, #24
 80041fa:	189b      	adds	r3, r3, r2
 80041fc:	19db      	adds	r3, r3, r7
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	b29b      	uxth	r3, r3
 8004202:	21f3      	movs	r1, #243	; 0xf3
 8004204:	0049      	lsls	r1, r1, #1
 8004206:	2218      	movs	r2, #24
 8004208:	188a      	adds	r2, r1, r2
 800420a:	19d2      	adds	r2, r2, r7
 800420c:	8812      	ldrh	r2, [r2, #0]
 800420e:	429a      	cmp	r2, r3
 8004210:	d8b8      	bhi.n	8004184 <astronode_send_cmd_rr+0x214>
            }
            result = true ;
 8004212:	23f8      	movs	r3, #248	; 0xf8
 8004214:	33ff      	adds	r3, #255	; 0xff
 8004216:	2218      	movs	r2, #24
 8004218:	189b      	adds	r3, r3, r2
 800421a:	19db      	adds	r3, r3, r7
 800421c:	2201      	movs	r2, #1
 800421e:	701a      	strb	r2, [r3, #0]
            my_astro_rcv_cmd[command_content_size] = 0 ;
 8004220:	2318      	movs	r3, #24
 8004222:	18cb      	adds	r3, r1, r3
 8004224:	19db      	adds	r3, r3, r7
 8004226:	881b      	ldrh	r3, [r3, #0]
 8004228:	69fa      	ldr	r2, [r7, #28]
 800422a:	18d3      	adds	r3, r2, r3
 800422c:	2200      	movs	r2, #0
 800422e:	701a      	strb	r2, [r3, #0]
            send_debug_logs("Command content is: ");
 8004230:	4b1e      	ldr	r3, [pc, #120]	; (80042ac <astronode_send_cmd_rr+0x33c>)
 8004232:	0018      	movs	r0, r3
 8004234:	f7fc fbfe 	bl	8000a34 <send_debug_logs>
            sprintf(command_content, "%s ", &answer.p_payload[4]);
 8004238:	2358      	movs	r3, #88	; 0x58
 800423a:	2218      	movs	r2, #24
 800423c:	189b      	adds	r3, r3, r2
 800423e:	19db      	adds	r3, r3, r7
 8004240:	1d5a      	adds	r2, r3, #5
 8004242:	491b      	ldr	r1, [pc, #108]	; (80042b0 <astronode_send_cmd_rr+0x340>)
 8004244:	24f4      	movs	r4, #244	; 0xf4
 8004246:	0064      	lsls	r4, r4, #1
 8004248:	2318      	movs	r3, #24
 800424a:	18e3      	adds	r3, r4, r3
 800424c:	19db      	adds	r3, r3, r7
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	0018      	movs	r0, r3
 8004252:	f000 fd75 	bl	8004d40 <siprintf>
            send_debug_logs(command_content);
 8004256:	2318      	movs	r3, #24
 8004258:	18e3      	adds	r3, r4, r3
 800425a:	19db      	adds	r3, r3, r7
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	0018      	movs	r0, r3
 8004260:	f7fc fbe8 	bl	8000a34 <send_debug_logs>
 8004264:	46b5      	mov	sp, r6
 8004266:	e005      	b.n	8004274 <astronode_send_cmd_rr+0x304>
                return result ;
 8004268:	46b5      	mov	sp, r6
 800426a:	e009      	b.n	8004280 <astronode_send_cmd_rr+0x310>
        }
        else
        {
            send_debug_logs("No command available.");
 800426c:	4b11      	ldr	r3, [pc, #68]	; (80042b4 <astronode_send_cmd_rr+0x344>)
 800426e:	0018      	movs	r0, r3
 8004270:	f7fc fbe0 	bl	8000a34 <send_debug_logs>
        }
    }
    return result ;
 8004274:	23f8      	movs	r3, #248	; 0xf8
 8004276:	33ff      	adds	r3, #255	; 0xff
 8004278:	2218      	movs	r2, #24
 800427a:	189b      	adds	r3, r3, r2
 800427c:	19db      	adds	r3, r3, r7
 800427e:	781b      	ldrb	r3, [r3, #0]
}
 8004280:	0018      	movs	r0, r3
 8004282:	46bd      	mov	sp, r7
 8004284:	2385      	movs	r3, #133	; 0x85
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	449d      	add	sp, r3
 800428a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800428c:	fffffdec 	.word	0xfffffdec
 8004290:	fffffe60 	.word	0xfffffe60
 8004294:	080065f0 	.word	0x080065f0
 8004298:	0800660c 	.word	0x0800660c
 800429c:	0800665c 	.word	0x0800665c
 80042a0:	08005c80 	.word	0x08005c80
 80042a4:	08006ffc 	.word	0x08006ffc
 80042a8:	08006670 	.word	0x08006670
 80042ac:	0800669c 	.word	0x0800669c
 80042b0:	080066b4 	.word	0x080066b4
 80042b4:	080066b8 	.word	0x080066b8

080042b8 <is_sak_available>:
        }
    }
}

bool is_sak_available()
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	af00      	add	r7, sp, #0
    return g_is_sak_available;
 80042bc:	4b02      	ldr	r3, [pc, #8]	; (80042c8 <is_sak_available+0x10>)
 80042be:	781b      	ldrb	r3, [r3, #0]
}
 80042c0:	0018      	movs	r0, r3
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	46c0      	nop			; (mov r8, r8)
 80042c8:	20000340 	.word	0x20000340

080042cc <is_astronode_reset>:

bool is_astronode_reset()
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	af00      	add	r7, sp, #0
    return g_is_astronode_reset;
 80042d0:	4b02      	ldr	r3, [pc, #8]	; (80042dc <is_astronode_reset+0x10>)
 80042d2:	781b      	ldrb	r3, [r3, #0]
}
 80042d4:	0018      	movs	r0, r3
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	46c0      	nop			; (mov r8, r8)
 80042dc:	20000341 	.word	0x20000341

080042e0 <is_command_available>:

bool is_command_available()
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	af00      	add	r7, sp, #0
    return g_is_command_available;
 80042e4:	4b02      	ldr	r3, [pc, #8]	; (80042f0 <is_command_available+0x10>)
 80042e6:	781b      	ldrb	r3, [r3, #0]
}
 80042e8:	0018      	movs	r0, r3
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	46c0      	nop			; (mov r8, r8)
 80042f0:	20000342 	.word	0x20000342

080042f4 <ascii_to_value>:

//------------------------------------------------------------------------------
// Function definitions
//------------------------------------------------------------------------------
static bool ascii_to_value(const uint8_t ascii, uint8_t *p_value)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	0002      	movs	r2, r0
 80042fc:	6039      	str	r1, [r7, #0]
 80042fe:	1dfb      	adds	r3, r7, #7
 8004300:	701a      	strb	r2, [r3, #0]
    if (ascii >= '0' && ascii <= '9')
 8004302:	1dfb      	adds	r3, r7, #7
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	2b2f      	cmp	r3, #47	; 0x2f
 8004308:	d90b      	bls.n	8004322 <ascii_to_value+0x2e>
 800430a:	1dfb      	adds	r3, r7, #7
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	2b39      	cmp	r3, #57	; 0x39
 8004310:	d807      	bhi.n	8004322 <ascii_to_value+0x2e>
    {
        *p_value = ascii - '0';
 8004312:	1dfb      	adds	r3, r7, #7
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	3b30      	subs	r3, #48	; 0x30
 8004318:	b2da      	uxtb	r2, r3
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	701a      	strb	r2, [r3, #0]
        return true;
 800431e:	2301      	movs	r3, #1
 8004320:	e010      	b.n	8004344 <ascii_to_value+0x50>
    }
    else if (ascii >= 'A' && ascii <= 'F')
 8004322:	1dfb      	adds	r3, r7, #7
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	2b40      	cmp	r3, #64	; 0x40
 8004328:	d90b      	bls.n	8004342 <ascii_to_value+0x4e>
 800432a:	1dfb      	adds	r3, r7, #7
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	2b46      	cmp	r3, #70	; 0x46
 8004330:	d807      	bhi.n	8004342 <ascii_to_value+0x4e>
    {
        *p_value = ascii - 'A' + 10;
 8004332:	1dfb      	adds	r3, r7, #7
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	3b37      	subs	r3, #55	; 0x37
 8004338:	b2da      	uxtb	r2, r3
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	701a      	strb	r2, [r3, #0]
        return true;
 800433e:	2301      	movs	r3, #1
 8004340:	e000      	b.n	8004344 <ascii_to_value+0x50>
    }
    else
    {
        return false;
 8004342:	2300      	movs	r3, #0
    }
}
 8004344:	0018      	movs	r0, r3
 8004346:	46bd      	mov	sp, r7
 8004348:	b002      	add	sp, #8
 800434a:	bd80      	pop	{r7, pc}

0800434c <astronode_create_request_transport>:

static uint16_t astronode_create_request_transport(astronode_app_msg_t *p_source_message, uint8_t *p_destination_buffer)
{
 800434c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800434e:	b085      	sub	sp, #20
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	6039      	str	r1, [r7, #0]
    uint16_t index = 0;
 8004356:	250e      	movs	r5, #14
 8004358:	197b      	adds	r3, r7, r5
 800435a:	2200      	movs	r2, #0
 800435c:	801a      	strh	r2, [r3, #0]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_STX;
 800435e:	197b      	adds	r3, r7, r5
 8004360:	881b      	ldrh	r3, [r3, #0]
 8004362:	197a      	adds	r2, r7, r5
 8004364:	1c59      	adds	r1, r3, #1
 8004366:	8011      	strh	r1, [r2, #0]
 8004368:	001a      	movs	r2, r3
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	189b      	adds	r3, r3, r2
 800436e:	2202      	movs	r2, #2
 8004370:	701a      	strb	r2, [r3, #0]

    uint16_t crc = calculate_crc((const uint8_t *)&p_source_message->op_code, 1, 0xFFFF);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	260a      	movs	r6, #10
 8004376:	19bc      	adds	r4, r7, r6
 8004378:	4a44      	ldr	r2, [pc, #272]	; (800448c <astronode_create_request_transport+0x140>)
 800437a:	2101      	movs	r1, #1
 800437c:	0018      	movs	r0, r3
 800437e:	f000 fa7d 	bl	800487c <calculate_crc>
 8004382:	0003      	movs	r3, r0
 8004384:	8023      	strh	r3, [r4, #0]
    crc = calculate_crc((const uint8_t *)&p_source_message->p_payload, p_source_message->payload_len, crc);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	1c58      	adds	r0, r3, #1
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	22c4      	movs	r2, #196	; 0xc4
 800438e:	5a99      	ldrh	r1, [r3, r2]
 8004390:	19bc      	adds	r4, r7, r6
 8004392:	19bb      	adds	r3, r7, r6
 8004394:	881b      	ldrh	r3, [r3, #0]
 8004396:	001a      	movs	r2, r3
 8004398:	f000 fa70 	bl	800487c <calculate_crc>
 800439c:	0003      	movs	r3, r0
 800439e:	8023      	strh	r3, [r4, #0]
    crc = ((crc << 8) & 0xff00) | ((crc >> 8) & 0x00ff);
 80043a0:	19bb      	adds	r3, r7, r6
 80043a2:	881b      	ldrh	r3, [r3, #0]
 80043a4:	021b      	lsls	r3, r3, #8
 80043a6:	b21a      	sxth	r2, r3
 80043a8:	0031      	movs	r1, r6
 80043aa:	19bb      	adds	r3, r7, r6
 80043ac:	881b      	ldrh	r3, [r3, #0]
 80043ae:	0a1b      	lsrs	r3, r3, #8
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	b21b      	sxth	r3, r3
 80043b4:	4313      	orrs	r3, r2
 80043b6:	b21a      	sxth	r2, r3
 80043b8:	187b      	adds	r3, r7, r1
 80043ba:	801a      	strh	r2, [r3, #0]

    uint8_to_ascii_buffer(p_source_message->op_code, &p_destination_buffer[index]);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	7818      	ldrb	r0, [r3, #0]
 80043c0:	197b      	adds	r3, r7, r5
 80043c2:	881b      	ldrh	r3, [r3, #0]
 80043c4:	683a      	ldr	r2, [r7, #0]
 80043c6:	18d3      	adds	r3, r2, r3
 80043c8:	0019      	movs	r1, r3
 80043ca:	f000 fbeb 	bl	8004ba4 <uint8_to_ascii_buffer>
    index += 2;
 80043ce:	197b      	adds	r3, r7, r5
 80043d0:	197a      	adds	r2, r7, r5
 80043d2:	8812      	ldrh	r2, [r2, #0]
 80043d4:	3202      	adds	r2, #2
 80043d6:	801a      	strh	r2, [r3, #0]

    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 80043d8:	230c      	movs	r3, #12
 80043da:	18fb      	adds	r3, r7, r3
 80043dc:	2200      	movs	r2, #0
 80043de:	801a      	strh	r2, [r3, #0]
 80043e0:	e017      	b.n	8004412 <astronode_create_request_transport+0xc6>
    {
        uint8_to_ascii_buffer(p_source_message->p_payload[i], &p_destination_buffer[index]);
 80043e2:	240c      	movs	r4, #12
 80043e4:	193b      	adds	r3, r7, r4
 80043e6:	881b      	ldrh	r3, [r3, #0]
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	18d3      	adds	r3, r2, r3
 80043ec:	7858      	ldrb	r0, [r3, #1]
 80043ee:	250e      	movs	r5, #14
 80043f0:	197b      	adds	r3, r7, r5
 80043f2:	881b      	ldrh	r3, [r3, #0]
 80043f4:	683a      	ldr	r2, [r7, #0]
 80043f6:	18d3      	adds	r3, r2, r3
 80043f8:	0019      	movs	r1, r3
 80043fa:	f000 fbd3 	bl	8004ba4 <uint8_to_ascii_buffer>
        index += 2;
 80043fe:	197b      	adds	r3, r7, r5
 8004400:	197a      	adds	r2, r7, r5
 8004402:	8812      	ldrh	r2, [r2, #0]
 8004404:	3202      	adds	r2, #2
 8004406:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 8004408:	193b      	adds	r3, r7, r4
 800440a:	881a      	ldrh	r2, [r3, #0]
 800440c:	193b      	adds	r3, r7, r4
 800440e:	3201      	adds	r2, #1
 8004410:	801a      	strh	r2, [r3, #0]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	22c4      	movs	r2, #196	; 0xc4
 8004416:	5a9b      	ldrh	r3, [r3, r2]
 8004418:	220c      	movs	r2, #12
 800441a:	18ba      	adds	r2, r7, r2
 800441c:	8812      	ldrh	r2, [r2, #0]
 800441e:	429a      	cmp	r2, r3
 8004420:	d3df      	bcc.n	80043e2 <astronode_create_request_transport+0x96>
    }

    uint8_to_ascii_buffer(crc >> 8, &p_destination_buffer[index]);
 8004422:	250a      	movs	r5, #10
 8004424:	197b      	adds	r3, r7, r5
 8004426:	881b      	ldrh	r3, [r3, #0]
 8004428:	0a1b      	lsrs	r3, r3, #8
 800442a:	b29b      	uxth	r3, r3
 800442c:	b2d8      	uxtb	r0, r3
 800442e:	240e      	movs	r4, #14
 8004430:	193b      	adds	r3, r7, r4
 8004432:	881b      	ldrh	r3, [r3, #0]
 8004434:	683a      	ldr	r2, [r7, #0]
 8004436:	18d3      	adds	r3, r2, r3
 8004438:	0019      	movs	r1, r3
 800443a:	f000 fbb3 	bl	8004ba4 <uint8_to_ascii_buffer>
    index += 2;
 800443e:	0021      	movs	r1, r4
 8004440:	187b      	adds	r3, r7, r1
 8004442:	187a      	adds	r2, r7, r1
 8004444:	8812      	ldrh	r2, [r2, #0]
 8004446:	3202      	adds	r2, #2
 8004448:	801a      	strh	r2, [r3, #0]
    uint8_to_ascii_buffer(crc & 0xFF, &p_destination_buffer[index]);
 800444a:	197b      	adds	r3, r7, r5
 800444c:	881b      	ldrh	r3, [r3, #0]
 800444e:	b2d8      	uxtb	r0, r3
 8004450:	000c      	movs	r4, r1
 8004452:	187b      	adds	r3, r7, r1
 8004454:	881b      	ldrh	r3, [r3, #0]
 8004456:	683a      	ldr	r2, [r7, #0]
 8004458:	18d3      	adds	r3, r2, r3
 800445a:	0019      	movs	r1, r3
 800445c:	f000 fba2 	bl	8004ba4 <uint8_to_ascii_buffer>
    index += 2;
 8004460:	0020      	movs	r0, r4
 8004462:	183b      	adds	r3, r7, r0
 8004464:	183a      	adds	r2, r7, r0
 8004466:	8812      	ldrh	r2, [r2, #0]
 8004468:	3202      	adds	r2, #2
 800446a:	801a      	strh	r2, [r3, #0]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_ETX;
 800446c:	183b      	adds	r3, r7, r0
 800446e:	881b      	ldrh	r3, [r3, #0]
 8004470:	183a      	adds	r2, r7, r0
 8004472:	1c59      	adds	r1, r3, #1
 8004474:	8011      	strh	r1, [r2, #0]
 8004476:	001a      	movs	r2, r3
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	189b      	adds	r3, r3, r2
 800447c:	2203      	movs	r2, #3
 800447e:	701a      	strb	r2, [r3, #0]

    return index;
 8004480:	183b      	adds	r3, r7, r0
 8004482:	881b      	ldrh	r3, [r3, #0]
}
 8004484:	0018      	movs	r0, r3
 8004486:	46bd      	mov	sp, r7
 8004488:	b005      	add	sp, #20
 800448a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800448c:	0000ffff 	.word	0x0000ffff

08004490 <astronode_decode_answer_transport>:

static return_status_t astronode_decode_answer_transport(uint8_t *p_source_buffer, uint16_t length_buffer, astronode_app_msg_t *p_destination_message)
{
 8004490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004492:	b089      	sub	sp, #36	; 0x24
 8004494:	af00      	add	r7, sp, #0
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	607a      	str	r2, [r7, #4]
 800449a:	230a      	movs	r3, #10
 800449c:	18fb      	adds	r3, r7, r3
 800449e:	1c0a      	adds	r2, r1, #0
 80044a0:	801a      	strh	r2, [r3, #0]
    if (p_source_buffer[0] != ASTRONODE_TRANSPORT_STX)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	781b      	ldrb	r3, [r3, #0]
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d005      	beq.n	80044b6 <astronode_decode_answer_transport+0x26>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not start with STX character.");
 80044aa:	4bbd      	ldr	r3, [pc, #756]	; (80047a0 <astronode_decode_answer_transport+0x310>)
 80044ac:	0018      	movs	r0, r3
 80044ae:	f7fc fac1 	bl	8000a34 <send_debug_logs>
        return RS_FAILURE;
 80044b2:	2300      	movs	r3, #0
 80044b4:	e170      	b.n	8004798 <astronode_decode_answer_transport+0x308>
    }

    if (length_buffer % 2 == 1 || length_buffer < 8) // 8: STX, ETX, 2 x opcode, 4 x CRC
 80044b6:	210a      	movs	r1, #10
 80044b8:	187b      	adds	r3, r7, r1
 80044ba:	881b      	ldrh	r3, [r3, #0]
 80044bc:	2201      	movs	r2, #1
 80044be:	4013      	ands	r3, r2
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d103      	bne.n	80044ce <astronode_decode_answer_transport+0x3e>
 80044c6:	187b      	adds	r3, r7, r1
 80044c8:	881b      	ldrh	r3, [r3, #0]
 80044ca:	2b07      	cmp	r3, #7
 80044cc:	d805      	bhi.n	80044da <astronode_decode_answer_transport+0x4a>
    {
        send_debug_logs("ERROR : Message received from the Astronode is missing at least one character.");
 80044ce:	4bb5      	ldr	r3, [pc, #724]	; (80047a4 <astronode_decode_answer_transport+0x314>)
 80044d0:	0018      	movs	r0, r3
 80044d2:	f7fc faaf 	bl	8000a34 <send_debug_logs>
        return RS_FAILURE;
 80044d6:	2300      	movs	r3, #0
 80044d8:	e15e      	b.n	8004798 <astronode_decode_answer_transport+0x308>
    }

    p_destination_message->payload_len = (length_buffer - 8) / 2;
 80044da:	230a      	movs	r3, #10
 80044dc:	18fb      	adds	r3, r7, r3
 80044de:	881b      	ldrh	r3, [r3, #0]
 80044e0:	3b08      	subs	r3, #8
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	da00      	bge.n	80044e8 <astronode_decode_answer_transport+0x58>
 80044e6:	3301      	adds	r3, #1
 80044e8:	105b      	asrs	r3, r3, #1
 80044ea:	b299      	uxth	r1, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	22c4      	movs	r2, #196	; 0xc4
 80044f0:	5299      	strh	r1, [r3, r2]

    if (p_source_buffer[length_buffer - 1] != ASTRONODE_TRANSPORT_ETX)
 80044f2:	230a      	movs	r3, #10
 80044f4:	18fb      	adds	r3, r7, r3
 80044f6:	881b      	ldrh	r3, [r3, #0]
 80044f8:	3b01      	subs	r3, #1
 80044fa:	68fa      	ldr	r2, [r7, #12]
 80044fc:	18d3      	adds	r3, r2, r3
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	2b03      	cmp	r3, #3
 8004502:	d005      	beq.n	8004510 <astronode_decode_answer_transport+0x80>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not end with ETX character.");
 8004504:	4ba8      	ldr	r3, [pc, #672]	; (80047a8 <astronode_decode_answer_transport+0x318>)
 8004506:	0018      	movs	r0, r3
 8004508:	f7fc fa94 	bl	8000a34 <send_debug_logs>
        return RS_FAILURE;
 800450c:	2300      	movs	r3, #0
 800450e:	e143      	b.n	8004798 <astronode_decode_answer_transport+0x308>
    }

    uint8_t nibble_high = 0;
 8004510:	2117      	movs	r1, #23
 8004512:	187b      	adds	r3, r7, r1
 8004514:	2200      	movs	r2, #0
 8004516:	701a      	strb	r2, [r3, #0]
    uint8_t nibble_low = 0;
 8004518:	2416      	movs	r4, #22
 800451a:	193b      	adds	r3, r7, r4
 800451c:	2200      	movs	r2, #0
 800451e:	701a      	strb	r2, [r3, #0]

    // Op code
    if (ascii_to_value(p_source_buffer[1], &nibble_high) == false
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	3301      	adds	r3, #1
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	187a      	adds	r2, r7, r1
 8004528:	0011      	movs	r1, r2
 800452a:	0018      	movs	r0, r3
 800452c:	f7ff fee2 	bl	80042f4 <ascii_to_value>
 8004530:	0003      	movs	r3, r0
 8004532:	001a      	movs	r2, r3
 8004534:	2301      	movs	r3, #1
 8004536:	4053      	eors	r3, r2
 8004538:	b2db      	uxtb	r3, r3
 800453a:	2b00      	cmp	r3, #0
 800453c:	d10e      	bne.n	800455c <astronode_decode_answer_transport+0xcc>
        || ascii_to_value(p_source_buffer[2], &nibble_low) == false)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	3302      	adds	r3, #2
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	193a      	adds	r2, r7, r4
 8004546:	0011      	movs	r1, r2
 8004548:	0018      	movs	r0, r3
 800454a:	f7ff fed3 	bl	80042f4 <ascii_to_value>
 800454e:	0003      	movs	r3, r0
 8004550:	001a      	movs	r2, r3
 8004552:	2301      	movs	r3, #1
 8004554:	4053      	eors	r3, r2
 8004556:	b2db      	uxtb	r3, r3
 8004558:	2b00      	cmp	r3, #0
 800455a:	d005      	beq.n	8004568 <astronode_decode_answer_transport+0xd8>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 800455c:	4b93      	ldr	r3, [pc, #588]	; (80047ac <astronode_decode_answer_transport+0x31c>)
 800455e:	0018      	movs	r0, r3
 8004560:	f7fc fa68 	bl	8000a34 <send_debug_logs>
        return RS_FAILURE;
 8004564:	2300      	movs	r3, #0
 8004566:	e117      	b.n	8004798 <astronode_decode_answer_transport+0x308>
    }

    p_destination_message->op_code = (nibble_high << 4) + nibble_low;
 8004568:	2317      	movs	r3, #23
 800456a:	18fb      	adds	r3, r7, r3
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	011b      	lsls	r3, r3, #4
 8004570:	b2da      	uxtb	r2, r3
 8004572:	2316      	movs	r3, #22
 8004574:	18fb      	adds	r3, r7, r3
 8004576:	781b      	ldrb	r3, [r3, #0]
 8004578:	18d3      	adds	r3, r2, r3
 800457a:	b2da      	uxtb	r2, r3
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	701a      	strb	r2, [r3, #0]

    // Payload
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 8004580:	231e      	movs	r3, #30
 8004582:	18fb      	adds	r3, r7, r3
 8004584:	2203      	movs	r2, #3
 8004586:	801a      	strh	r2, [r3, #0]
 8004588:	231c      	movs	r3, #28
 800458a:	18fb      	adds	r3, r7, r3
 800458c:	2200      	movs	r2, #0
 800458e:	801a      	strh	r2, [r3, #0]
 8004590:	e045      	b.n	800461e <astronode_decode_answer_transport+0x18e>
    {
        if (ascii_to_value(p_source_buffer[i], &nibble_high) == false
 8004592:	241e      	movs	r4, #30
 8004594:	193b      	adds	r3, r7, r4
 8004596:	881b      	ldrh	r3, [r3, #0]
 8004598:	68fa      	ldr	r2, [r7, #12]
 800459a:	18d3      	adds	r3, r2, r3
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	2217      	movs	r2, #23
 80045a0:	18ba      	adds	r2, r7, r2
 80045a2:	0011      	movs	r1, r2
 80045a4:	0018      	movs	r0, r3
 80045a6:	f7ff fea5 	bl	80042f4 <ascii_to_value>
 80045aa:	0003      	movs	r3, r0
 80045ac:	001a      	movs	r2, r3
 80045ae:	2301      	movs	r3, #1
 80045b0:	4053      	eors	r3, r2
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d112      	bne.n	80045de <astronode_decode_answer_transport+0x14e>
            || ascii_to_value(p_source_buffer[i + 1], &nibble_low) == false)
 80045b8:	193b      	adds	r3, r7, r4
 80045ba:	881b      	ldrh	r3, [r3, #0]
 80045bc:	3301      	adds	r3, #1
 80045be:	68fa      	ldr	r2, [r7, #12]
 80045c0:	18d3      	adds	r3, r2, r3
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	2216      	movs	r2, #22
 80045c6:	18ba      	adds	r2, r7, r2
 80045c8:	0011      	movs	r1, r2
 80045ca:	0018      	movs	r0, r3
 80045cc:	f7ff fe92 	bl	80042f4 <ascii_to_value>
 80045d0:	0003      	movs	r3, r0
 80045d2:	001a      	movs	r2, r3
 80045d4:	2301      	movs	r3, #1
 80045d6:	4053      	eors	r3, r2
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d005      	beq.n	80045ea <astronode_decode_answer_transport+0x15a>
        {
            send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 80045de:	4b73      	ldr	r3, [pc, #460]	; (80047ac <astronode_decode_answer_transport+0x31c>)
 80045e0:	0018      	movs	r0, r3
 80045e2:	f7fc fa27 	bl	8000a34 <send_debug_logs>
            return RS_FAILURE;
 80045e6:	2300      	movs	r3, #0
 80045e8:	e0d6      	b.n	8004798 <astronode_decode_answer_transport+0x308>
        }

        p_destination_message->p_payload[j++] = (nibble_high << 4) + nibble_low;
 80045ea:	2317      	movs	r3, #23
 80045ec:	18fb      	adds	r3, r7, r3
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	011b      	lsls	r3, r3, #4
 80045f2:	b2d9      	uxtb	r1, r3
 80045f4:	2316      	movs	r3, #22
 80045f6:	18fb      	adds	r3, r7, r3
 80045f8:	781a      	ldrb	r2, [r3, #0]
 80045fa:	201c      	movs	r0, #28
 80045fc:	183b      	adds	r3, r7, r0
 80045fe:	881b      	ldrh	r3, [r3, #0]
 8004600:	1838      	adds	r0, r7, r0
 8004602:	1c5c      	adds	r4, r3, #1
 8004604:	8004      	strh	r4, [r0, #0]
 8004606:	0018      	movs	r0, r3
 8004608:	188b      	adds	r3, r1, r2
 800460a:	b2da      	uxtb	r2, r3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	181b      	adds	r3, r3, r0
 8004610:	705a      	strb	r2, [r3, #1]
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 8004612:	221e      	movs	r2, #30
 8004614:	18bb      	adds	r3, r7, r2
 8004616:	18ba      	adds	r2, r7, r2
 8004618:	8812      	ldrh	r2, [r2, #0]
 800461a:	3202      	adds	r2, #2
 800461c:	801a      	strh	r2, [r3, #0]
 800461e:	231e      	movs	r3, #30
 8004620:	18fb      	adds	r3, r7, r3
 8004622:	881a      	ldrh	r2, [r3, #0]
 8004624:	260a      	movs	r6, #10
 8004626:	19bb      	adds	r3, r7, r6
 8004628:	881b      	ldrh	r3, [r3, #0]
 800462a:	3b05      	subs	r3, #5
 800462c:	429a      	cmp	r2, r3
 800462e:	dbb0      	blt.n	8004592 <astronode_decode_answer_transport+0x102>
    }

    // CRC
    uint16_t crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->op_code, 1, 0xFFFF);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	251a      	movs	r5, #26
 8004634:	197c      	adds	r4, r7, r5
 8004636:	4a5e      	ldr	r2, [pc, #376]	; (80047b0 <astronode_decode_answer_transport+0x320>)
 8004638:	2101      	movs	r1, #1
 800463a:	0018      	movs	r0, r3
 800463c:	f000 f91e 	bl	800487c <calculate_crc>
 8004640:	0003      	movs	r3, r0
 8004642:	8023      	strh	r3, [r4, #0]
    crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->p_payload, p_destination_message->payload_len, crc_calculated);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	1c58      	adds	r0, r3, #1
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	22c4      	movs	r2, #196	; 0xc4
 800464c:	5a99      	ldrh	r1, [r3, r2]
 800464e:	197c      	adds	r4, r7, r5
 8004650:	197b      	adds	r3, r7, r5
 8004652:	881b      	ldrh	r3, [r3, #0]
 8004654:	001a      	movs	r2, r3
 8004656:	f000 f911 	bl	800487c <calculate_crc>
 800465a:	0003      	movs	r3, r0
 800465c:	8023      	strh	r3, [r4, #0]
    crc_calculated = ((crc_calculated << 8) & 0xff00) | ((crc_calculated >> 8) & 0x00ff);
 800465e:	197b      	adds	r3, r7, r5
 8004660:	881b      	ldrh	r3, [r3, #0]
 8004662:	021b      	lsls	r3, r3, #8
 8004664:	b21a      	sxth	r2, r3
 8004666:	0029      	movs	r1, r5
 8004668:	197b      	adds	r3, r7, r5
 800466a:	881b      	ldrh	r3, [r3, #0]
 800466c:	0a1b      	lsrs	r3, r3, #8
 800466e:	b29b      	uxth	r3, r3
 8004670:	b21b      	sxth	r3, r3
 8004672:	4313      	orrs	r3, r2
 8004674:	b21a      	sxth	r2, r3
 8004676:	187b      	adds	r3, r7, r1
 8004678:	801a      	strh	r2, [r3, #0]


    if (ascii_to_value(p_source_buffer[length_buffer - 5], &nibble_high) == false
 800467a:	19bb      	adds	r3, r7, r6
 800467c:	881b      	ldrh	r3, [r3, #0]
 800467e:	3b05      	subs	r3, #5
 8004680:	68fa      	ldr	r2, [r7, #12]
 8004682:	18d3      	adds	r3, r2, r3
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	2217      	movs	r2, #23
 8004688:	18ba      	adds	r2, r7, r2
 800468a:	0011      	movs	r1, r2
 800468c:	0018      	movs	r0, r3
 800468e:	f7ff fe31 	bl	80042f4 <ascii_to_value>
 8004692:	0003      	movs	r3, r0
 8004694:	001a      	movs	r2, r3
 8004696:	2301      	movs	r3, #1
 8004698:	4053      	eors	r3, r2
 800469a:	b2db      	uxtb	r3, r3
 800469c:	2b00      	cmp	r3, #0
 800469e:	d112      	bne.n	80046c6 <astronode_decode_answer_transport+0x236>
        || ascii_to_value(p_source_buffer[length_buffer - 4], &nibble_low) == false)
 80046a0:	19bb      	adds	r3, r7, r6
 80046a2:	881b      	ldrh	r3, [r3, #0]
 80046a4:	3b04      	subs	r3, #4
 80046a6:	68fa      	ldr	r2, [r7, #12]
 80046a8:	18d3      	adds	r3, r2, r3
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	2216      	movs	r2, #22
 80046ae:	18ba      	adds	r2, r7, r2
 80046b0:	0011      	movs	r1, r2
 80046b2:	0018      	movs	r0, r3
 80046b4:	f7ff fe1e 	bl	80042f4 <ascii_to_value>
 80046b8:	0003      	movs	r3, r0
 80046ba:	001a      	movs	r2, r3
 80046bc:	2301      	movs	r3, #1
 80046be:	4053      	eors	r3, r2
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d005      	beq.n	80046d2 <astronode_decode_answer_transport+0x242>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 80046c6:	4b39      	ldr	r3, [pc, #228]	; (80047ac <astronode_decode_answer_transport+0x31c>)
 80046c8:	0018      	movs	r0, r3
 80046ca:	f7fc f9b3 	bl	8000a34 <send_debug_logs>
        return RS_FAILURE;
 80046ce:	2300      	movs	r3, #0
 80046d0:	e062      	b.n	8004798 <astronode_decode_answer_transport+0x308>
    }

    uint16_t crc_received = (nibble_high << 12) + (nibble_low << 8);
 80046d2:	2017      	movs	r0, #23
 80046d4:	183b      	adds	r3, r7, r0
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	b29b      	uxth	r3, r3
 80046da:	031b      	lsls	r3, r3, #12
 80046dc:	b299      	uxth	r1, r3
 80046de:	2416      	movs	r4, #22
 80046e0:	193b      	adds	r3, r7, r4
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	021b      	lsls	r3, r3, #8
 80046e8:	b29a      	uxth	r2, r3
 80046ea:	2318      	movs	r3, #24
 80046ec:	18fb      	adds	r3, r7, r3
 80046ee:	188a      	adds	r2, r1, r2
 80046f0:	801a      	strh	r2, [r3, #0]

    if (ascii_to_value(p_source_buffer[length_buffer - 3], &nibble_high) == false
 80046f2:	250a      	movs	r5, #10
 80046f4:	197b      	adds	r3, r7, r5
 80046f6:	881b      	ldrh	r3, [r3, #0]
 80046f8:	3b03      	subs	r3, #3
 80046fa:	68fa      	ldr	r2, [r7, #12]
 80046fc:	18d3      	adds	r3, r2, r3
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	183a      	adds	r2, r7, r0
 8004702:	0011      	movs	r1, r2
 8004704:	0018      	movs	r0, r3
 8004706:	f7ff fdf5 	bl	80042f4 <ascii_to_value>
 800470a:	0003      	movs	r3, r0
 800470c:	001a      	movs	r2, r3
 800470e:	2301      	movs	r3, #1
 8004710:	4053      	eors	r3, r2
 8004712:	b2db      	uxtb	r3, r3
 8004714:	2b00      	cmp	r3, #0
 8004716:	d111      	bne.n	800473c <astronode_decode_answer_transport+0x2ac>
        || ascii_to_value(p_source_buffer[length_buffer - 2], &nibble_low) == false)
 8004718:	197b      	adds	r3, r7, r5
 800471a:	881b      	ldrh	r3, [r3, #0]
 800471c:	3b02      	subs	r3, #2
 800471e:	68fa      	ldr	r2, [r7, #12]
 8004720:	18d3      	adds	r3, r2, r3
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	193a      	adds	r2, r7, r4
 8004726:	0011      	movs	r1, r2
 8004728:	0018      	movs	r0, r3
 800472a:	f7ff fde3 	bl	80042f4 <ascii_to_value>
 800472e:	0003      	movs	r3, r0
 8004730:	001a      	movs	r2, r3
 8004732:	2301      	movs	r3, #1
 8004734:	4053      	eors	r3, r2
 8004736:	b2db      	uxtb	r3, r3
 8004738:	2b00      	cmp	r3, #0
 800473a:	d005      	beq.n	8004748 <astronode_decode_answer_transport+0x2b8>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 800473c:	4b1b      	ldr	r3, [pc, #108]	; (80047ac <astronode_decode_answer_transport+0x31c>)
 800473e:	0018      	movs	r0, r3
 8004740:	f7fc f978 	bl	8000a34 <send_debug_logs>
        return RS_FAILURE;
 8004744:	2300      	movs	r3, #0
 8004746:	e027      	b.n	8004798 <astronode_decode_answer_transport+0x308>
    }

    crc_received += (nibble_high << 4) + nibble_low;
 8004748:	2317      	movs	r3, #23
 800474a:	18fb      	adds	r3, r7, r3
 800474c:	781b      	ldrb	r3, [r3, #0]
 800474e:	b29b      	uxth	r3, r3
 8004750:	011b      	lsls	r3, r3, #4
 8004752:	b29a      	uxth	r2, r3
 8004754:	2316      	movs	r3, #22
 8004756:	18fb      	adds	r3, r7, r3
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	b29b      	uxth	r3, r3
 800475c:	18d3      	adds	r3, r2, r3
 800475e:	b299      	uxth	r1, r3
 8004760:	2018      	movs	r0, #24
 8004762:	183b      	adds	r3, r7, r0
 8004764:	183a      	adds	r2, r7, r0
 8004766:	8812      	ldrh	r2, [r2, #0]
 8004768:	188a      	adds	r2, r1, r2
 800476a:	801a      	strh	r2, [r3, #0]

    if (crc_received != crc_calculated)
 800476c:	183a      	adds	r2, r7, r0
 800476e:	231a      	movs	r3, #26
 8004770:	18fb      	adds	r3, r7, r3
 8004772:	8812      	ldrh	r2, [r2, #0]
 8004774:	881b      	ldrh	r3, [r3, #0]
 8004776:	429a      	cmp	r2, r3
 8004778:	d005      	beq.n	8004786 <astronode_decode_answer_transport+0x2f6>
    {
        send_debug_logs("ERROR : CRC sent by the Astronode does not match the expected CRC");
 800477a:	4b0e      	ldr	r3, [pc, #56]	; (80047b4 <astronode_decode_answer_transport+0x324>)
 800477c:	0018      	movs	r0, r3
 800477e:	f7fc f959 	bl	8000a34 <send_debug_logs>
        return RS_FAILURE;
 8004782:	2300      	movs	r3, #0
 8004784:	e008      	b.n	8004798 <astronode_decode_answer_transport+0x308>
    }

    if (p_destination_message->op_code == ASTRONODE_OP_CODE_ERROR)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	2bff      	cmp	r3, #255	; 0xff
 800478c:	d103      	bne.n	8004796 <astronode_decode_answer_transport+0x306>
    {
        check_for_error(p_destination_message);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	0018      	movs	r0, r3
 8004792:	f000 f8c3 	bl	800491c <check_for_error>
    }

    return RS_SUCCESS;
 8004796:	2301      	movs	r3, #1
}
 8004798:	0018      	movs	r0, r3
 800479a:	46bd      	mov	sp, r7
 800479c:	b009      	add	sp, #36	; 0x24
 800479e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047a0:	08006748 	.word	0x08006748
 80047a4:	08006798 	.word	0x08006798
 80047a8:	080067e8 	.word	0x080067e8
 80047ac:	08006838 	.word	0x08006838
 80047b0:	0000ffff 	.word	0x0000ffff
 80047b4:	08006884 	.word	0x08006884

080047b8 <astronode_transport_send_receive>:

return_status_t astronode_transport_send_receive(astronode_app_msg_t *p_request, astronode_app_msg_t *p_answer)
{
 80047b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047ba:	4c2b      	ldr	r4, [pc, #172]	; (8004868 <astronode_transport_send_receive+0xb0>)
 80047bc:	44a5      	add	sp, r4
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]
 80047c2:	6039      	str	r1, [r7, #0]
    uint8_t request_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 80047c4:	4b29      	ldr	r3, [pc, #164]	; (800486c <astronode_transport_send_receive+0xb4>)
 80047c6:	25ca      	movs	r5, #202	; 0xca
 80047c8:	00ad      	lsls	r5, r5, #2
 80047ca:	195b      	adds	r3, r3, r5
 80047cc:	19db      	adds	r3, r3, r7
 80047ce:	2200      	movs	r2, #0
 80047d0:	601a      	str	r2, [r3, #0]
 80047d2:	3304      	adds	r3, #4
 80047d4:	22c4      	movs	r2, #196	; 0xc4
 80047d6:	0052      	lsls	r2, r2, #1
 80047d8:	2100      	movs	r1, #0
 80047da:	0018      	movs	r0, r3
 80047dc:	f000 fad0 	bl	8004d80 <memset>
    uint8_t answer_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 80047e0:	4b23      	ldr	r3, [pc, #140]	; (8004870 <astronode_transport_send_receive+0xb8>)
 80047e2:	195b      	adds	r3, r3, r5
 80047e4:	19db      	adds	r3, r3, r7
 80047e6:	2200      	movs	r2, #0
 80047e8:	601a      	str	r2, [r3, #0]
 80047ea:	3304      	adds	r3, #4
 80047ec:	22c4      	movs	r2, #196	; 0xc4
 80047ee:	0052      	lsls	r2, r2, #1
 80047f0:	2100      	movs	r1, #0
 80047f2:	0018      	movs	r0, r3
 80047f4:	f000 fac4 	bl	8004d80 <memset>
    uint16_t answer_length =  0;
 80047f8:	4b1e      	ldr	r3, [pc, #120]	; (8004874 <astronode_transport_send_receive+0xbc>)
 80047fa:	195b      	adds	r3, r3, r5
 80047fc:	19db      	adds	r3, r3, r7
 80047fe:	2200      	movs	r2, #0
 8004800:	801a      	strh	r2, [r3, #0]

    uint16_t request_length = astronode_create_request_transport(p_request, request_transport);
 8004802:	4e1d      	ldr	r6, [pc, #116]	; (8004878 <astronode_transport_send_receive+0xc0>)
 8004804:	19bc      	adds	r4, r7, r6
 8004806:	23cc      	movs	r3, #204	; 0xcc
 8004808:	005b      	lsls	r3, r3, #1
 800480a:	18fa      	adds	r2, r7, r3
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	0011      	movs	r1, r2
 8004810:	0018      	movs	r0, r3
 8004812:	f7ff fd9b 	bl	800434c <astronode_create_request_transport>
 8004816:	0003      	movs	r3, r0
 8004818:	8023      	strh	r3, [r4, #0]

    send_astronode_request(request_transport, request_length);
 800481a:	19bb      	adds	r3, r7, r6
 800481c:	881a      	ldrh	r2, [r3, #0]
 800481e:	23cc      	movs	r3, #204	; 0xcc
 8004820:	005b      	lsls	r3, r3, #1
 8004822:	18fb      	adds	r3, r7, r3
 8004824:	0011      	movs	r1, r2
 8004826:	0018      	movs	r0, r3
 8004828:	f7fc f934 	bl	8000a94 <send_astronode_request>
    if(receive_astronode_answer(answer_transport, &answer_length) == RS_SUCCESS)
 800482c:	230a      	movs	r3, #10
 800482e:	18fa      	adds	r2, r7, r3
 8004830:	240c      	movs	r4, #12
 8004832:	193b      	adds	r3, r7, r4
 8004834:	0011      	movs	r1, r2
 8004836:	0018      	movs	r0, r3
 8004838:	f000 f92c 	bl	8004a94 <receive_astronode_answer>
 800483c:	0003      	movs	r3, r0
 800483e:	2b01      	cmp	r3, #1
 8004840:	d10a      	bne.n	8004858 <astronode_transport_send_receive+0xa0>
    {
        return astronode_decode_answer_transport(answer_transport, answer_length, p_answer);
 8004842:	4b0c      	ldr	r3, [pc, #48]	; (8004874 <astronode_transport_send_receive+0xbc>)
 8004844:	195b      	adds	r3, r3, r5
 8004846:	19db      	adds	r3, r3, r7
 8004848:	8819      	ldrh	r1, [r3, #0]
 800484a:	683a      	ldr	r2, [r7, #0]
 800484c:	193b      	adds	r3, r7, r4
 800484e:	0018      	movs	r0, r3
 8004850:	f7ff fe1e 	bl	8004490 <astronode_decode_answer_transport>
 8004854:	0003      	movs	r3, r0
 8004856:	e000      	b.n	800485a <astronode_transport_send_receive+0xa2>
    }
    else
    {
        return RS_FAILURE;
 8004858:	2300      	movs	r3, #0
    }
}
 800485a:	0018      	movs	r0, r3
 800485c:	46bd      	mov	sp, r7
 800485e:	23cb      	movs	r3, #203	; 0xcb
 8004860:	009b      	lsls	r3, r3, #2
 8004862:	449d      	add	sp, r3
 8004864:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004866:	46c0      	nop			; (mov r8, r8)
 8004868:	fffffcd4 	.word	0xfffffcd4
 800486c:	fffffe70 	.word	0xfffffe70
 8004870:	fffffce4 	.word	0xfffffce4
 8004874:	fffffce2 	.word	0xfffffce2
 8004878:	00000326 	.word	0x00000326

0800487c <calculate_crc>:

static uint16_t calculate_crc(const uint8_t *p_data, uint16_t data_len, uint16_t init_value)
{
 800487c:	b590      	push	{r4, r7, lr}
 800487e:	b085      	sub	sp, #20
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	0008      	movs	r0, r1
 8004886:	0011      	movs	r1, r2
 8004888:	1cbb      	adds	r3, r7, #2
 800488a:	1c02      	adds	r2, r0, #0
 800488c:	801a      	strh	r2, [r3, #0]
 800488e:	003b      	movs	r3, r7
 8004890:	1c0a      	adds	r2, r1, #0
 8004892:	801a      	strh	r2, [r3, #0]
    uint16_t crc = init_value;
 8004894:	230e      	movs	r3, #14
 8004896:	18fb      	adds	r3, r7, r3
 8004898:	003a      	movs	r2, r7
 800489a:	8812      	ldrh	r2, [r2, #0]
 800489c:	801a      	strh	r2, [r3, #0]

    while (data_len--)
 800489e:	e02e      	b.n	80048fe <calculate_crc+0x82>
    {
        uint16_t x = crc >> 8 ^ *p_data++;
 80048a0:	240e      	movs	r4, #14
 80048a2:	193b      	adds	r3, r7, r4
 80048a4:	881b      	ldrh	r3, [r3, #0]
 80048a6:	0a1b      	lsrs	r3, r3, #8
 80048a8:	b299      	uxth	r1, r3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	1c5a      	adds	r2, r3, #1
 80048ae:	607a      	str	r2, [r7, #4]
 80048b0:	781b      	ldrb	r3, [r3, #0]
 80048b2:	b29a      	uxth	r2, r3
 80048b4:	200c      	movs	r0, #12
 80048b6:	183b      	adds	r3, r7, r0
 80048b8:	404a      	eors	r2, r1
 80048ba:	801a      	strh	r2, [r3, #0]
        x ^= x >> 4;
 80048bc:	183b      	adds	r3, r7, r0
 80048be:	881b      	ldrh	r3, [r3, #0]
 80048c0:	091b      	lsrs	r3, r3, #4
 80048c2:	b299      	uxth	r1, r3
 80048c4:	183b      	adds	r3, r7, r0
 80048c6:	183a      	adds	r2, r7, r0
 80048c8:	8812      	ldrh	r2, [r2, #0]
 80048ca:	404a      	eors	r2, r1
 80048cc:	801a      	strh	r2, [r3, #0]
        crc = (crc << 8) ^ (x << 12) ^ (x << 5) ^ (x);
 80048ce:	0021      	movs	r1, r4
 80048d0:	187b      	adds	r3, r7, r1
 80048d2:	881b      	ldrh	r3, [r3, #0]
 80048d4:	021b      	lsls	r3, r3, #8
 80048d6:	b21a      	sxth	r2, r3
 80048d8:	183b      	adds	r3, r7, r0
 80048da:	881b      	ldrh	r3, [r3, #0]
 80048dc:	031b      	lsls	r3, r3, #12
 80048de:	b21b      	sxth	r3, r3
 80048e0:	4053      	eors	r3, r2
 80048e2:	b21a      	sxth	r2, r3
 80048e4:	183b      	adds	r3, r7, r0
 80048e6:	881b      	ldrh	r3, [r3, #0]
 80048e8:	015b      	lsls	r3, r3, #5
 80048ea:	b21b      	sxth	r3, r3
 80048ec:	4053      	eors	r3, r2
 80048ee:	b21a      	sxth	r2, r3
 80048f0:	183b      	adds	r3, r7, r0
 80048f2:	2000      	movs	r0, #0
 80048f4:	5e1b      	ldrsh	r3, [r3, r0]
 80048f6:	4053      	eors	r3, r2
 80048f8:	b21a      	sxth	r2, r3
 80048fa:	187b      	adds	r3, r7, r1
 80048fc:	801a      	strh	r2, [r3, #0]
    while (data_len--)
 80048fe:	1cbb      	adds	r3, r7, #2
 8004900:	881b      	ldrh	r3, [r3, #0]
 8004902:	1cba      	adds	r2, r7, #2
 8004904:	1e59      	subs	r1, r3, #1
 8004906:	8011      	strh	r1, [r2, #0]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d1c9      	bne.n	80048a0 <calculate_crc+0x24>
    }
    return crc;
 800490c:	230e      	movs	r3, #14
 800490e:	18fb      	adds	r3, r7, r3
 8004910:	881b      	ldrh	r3, [r3, #0]
}
 8004912:	0018      	movs	r0, r3
 8004914:	46bd      	mov	sp, r7
 8004916:	b005      	add	sp, #20
 8004918:	bd90      	pop	{r4, r7, pc}
	...

0800491c <check_for_error>:

static void check_for_error(astronode_app_msg_t *p_answer)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
    uint16_t error_code = p_answer->p_payload[0] + (p_answer->p_payload[1] << 8);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	785b      	ldrb	r3, [r3, #1]
 8004928:	b299      	uxth	r1, r3
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	789b      	ldrb	r3, [r3, #2]
 800492e:	b29b      	uxth	r3, r3
 8004930:	021b      	lsls	r3, r3, #8
 8004932:	b29a      	uxth	r2, r3
 8004934:	200e      	movs	r0, #14
 8004936:	183b      	adds	r3, r7, r0
 8004938:	188a      	adds	r2, r1, r2
 800493a:	801a      	strh	r2, [r3, #0]

    switch (error_code)
 800493c:	183b      	adds	r3, r7, r0
 800493e:	881b      	ldrh	r3, [r3, #0]
 8004940:	4a40      	ldr	r2, [pc, #256]	; (8004a44 <check_for_error+0x128>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d100      	bne.n	8004948 <check_for_error+0x2c>
 8004946:	e06f      	b.n	8004a28 <check_for_error+0x10c>
 8004948:	4a3e      	ldr	r2, [pc, #248]	; (8004a44 <check_for_error+0x128>)
 800494a:	4293      	cmp	r3, r2
 800494c:	dd00      	ble.n	8004950 <check_for_error+0x34>
 800494e:	e070      	b.n	8004a32 <check_for_error+0x116>
 8004950:	4a3d      	ldr	r2, [pc, #244]	; (8004a48 <check_for_error+0x12c>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d100      	bne.n	8004958 <check_for_error+0x3c>
 8004956:	e062      	b.n	8004a1e <check_for_error+0x102>
 8004958:	4a3b      	ldr	r2, [pc, #236]	; (8004a48 <check_for_error+0x12c>)
 800495a:	4293      	cmp	r3, r2
 800495c:	dd00      	ble.n	8004960 <check_for_error+0x44>
 800495e:	e068      	b.n	8004a32 <check_for_error+0x116>
 8004960:	4a3a      	ldr	r2, [pc, #232]	; (8004a4c <check_for_error+0x130>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d056      	beq.n	8004a14 <check_for_error+0xf8>
 8004966:	4a39      	ldr	r2, [pc, #228]	; (8004a4c <check_for_error+0x130>)
 8004968:	4293      	cmp	r3, r2
 800496a:	dd00      	ble.n	800496e <check_for_error+0x52>
 800496c:	e061      	b.n	8004a32 <check_for_error+0x116>
 800496e:	4a38      	ldr	r2, [pc, #224]	; (8004a50 <check_for_error+0x134>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d04a      	beq.n	8004a0a <check_for_error+0xee>
 8004974:	4a36      	ldr	r2, [pc, #216]	; (8004a50 <check_for_error+0x134>)
 8004976:	4293      	cmp	r3, r2
 8004978:	dc5b      	bgt.n	8004a32 <check_for_error+0x116>
 800497a:	4a36      	ldr	r2, [pc, #216]	; (8004a54 <check_for_error+0x138>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d03f      	beq.n	8004a00 <check_for_error+0xe4>
 8004980:	4a34      	ldr	r2, [pc, #208]	; (8004a54 <check_for_error+0x138>)
 8004982:	4293      	cmp	r3, r2
 8004984:	dc55      	bgt.n	8004a32 <check_for_error+0x116>
 8004986:	4a34      	ldr	r2, [pc, #208]	; (8004a58 <check_for_error+0x13c>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d034      	beq.n	80049f6 <check_for_error+0xda>
 800498c:	4a32      	ldr	r2, [pc, #200]	; (8004a58 <check_for_error+0x13c>)
 800498e:	4293      	cmp	r3, r2
 8004990:	dc4f      	bgt.n	8004a32 <check_for_error+0x116>
 8004992:	4a32      	ldr	r2, [pc, #200]	; (8004a5c <check_for_error+0x140>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d029      	beq.n	80049ec <check_for_error+0xd0>
 8004998:	4a30      	ldr	r2, [pc, #192]	; (8004a5c <check_for_error+0x140>)
 800499a:	4293      	cmp	r3, r2
 800499c:	dc49      	bgt.n	8004a32 <check_for_error+0x116>
 800499e:	4a30      	ldr	r2, [pc, #192]	; (8004a60 <check_for_error+0x144>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d01e      	beq.n	80049e2 <check_for_error+0xc6>
 80049a4:	4a2e      	ldr	r2, [pc, #184]	; (8004a60 <check_for_error+0x144>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	dc43      	bgt.n	8004a32 <check_for_error+0x116>
 80049aa:	2222      	movs	r2, #34	; 0x22
 80049ac:	32ff      	adds	r2, #255	; 0xff
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d012      	beq.n	80049d8 <check_for_error+0xbc>
 80049b2:	2291      	movs	r2, #145	; 0x91
 80049b4:	0052      	lsls	r2, r2, #1
 80049b6:	4293      	cmp	r3, r2
 80049b8:	da3b      	bge.n	8004a32 <check_for_error+0x116>
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d002      	beq.n	80049c4 <check_for_error+0xa8>
 80049be:	2b11      	cmp	r3, #17
 80049c0:	d005      	beq.n	80049ce <check_for_error+0xb2>
 80049c2:	e036      	b.n	8004a32 <check_for_error+0x116>
    {
        case ASTRONODE_ERR_CODE_CRC_NOT_VALID:
            send_debug_logs("[ERROR] CRC_NOT_VALID : Discrepancy between provided CRC and expected CRC.");
 80049c4:	4b27      	ldr	r3, [pc, #156]	; (8004a64 <check_for_error+0x148>)
 80049c6:	0018      	movs	r0, r3
 80049c8:	f7fc f834 	bl	8000a34 <send_debug_logs>
            break;
 80049cc:	e036      	b.n	8004a3c <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_LENGTH_NOT_VALID:
            send_debug_logs("[ERROR] LENGTH_NOT_VALID : Message exceeds the maximum length allowed by the given operation code.");
 80049ce:	4b26      	ldr	r3, [pc, #152]	; (8004a68 <check_for_error+0x14c>)
 80049d0:	0018      	movs	r0, r3
 80049d2:	f7fc f82f 	bl	8000a34 <send_debug_logs>
            break;
 80049d6:	e031      	b.n	8004a3c <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_OPCODE_NOT_VALID:
            send_debug_logs("[ERROR] OPCODE_NOT_VALID : Invalid operation code used.");
 80049d8:	4b24      	ldr	r3, [pc, #144]	; (8004a6c <check_for_error+0x150>)
 80049da:	0018      	movs	r0, r3
 80049dc:	f7fc f82a 	bl	8000a34 <send_debug_logs>
            break;
 80049e0:	e02c      	b.n	8004a3c <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_FORMAT_NOT_VALID:
            send_debug_logs("[ERROR] FORMAT_NOT_VALID : At least one of the fields (SSID, password, token) is not composed of exclusively printable standard ASCII characters (0x20 to 0x7E).");
 80049e2:	4b23      	ldr	r3, [pc, #140]	; (8004a70 <check_for_error+0x154>)
 80049e4:	0018      	movs	r0, r3
 80049e6:	f7fc f825 	bl	8000a34 <send_debug_logs>
            break;
 80049ea:	e027      	b.n	8004a3c <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_FLASH_WRITING_FAILED:
            send_debug_logs("[ERROR] FLASH_WRITING_FAILED : Failed to write the Wi-Fi settings (SSID, password, token) to the flash.");
 80049ec:	4b21      	ldr	r3, [pc, #132]	; (8004a74 <check_for_error+0x158>)
 80049ee:	0018      	movs	r0, r3
 80049f0:	f7fc f820 	bl	8000a34 <send_debug_logs>
            break;
 80049f4:	e022      	b.n	8004a3c <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_BUFFER_FULL:
            send_debug_logs("[ERROR] BUFFER_FULL : Failed to queue the payload because the sending queue is already full.");
 80049f6:	4b20      	ldr	r3, [pc, #128]	; (8004a78 <check_for_error+0x15c>)
 80049f8:	0018      	movs	r0, r3
 80049fa:	f7fc f81b 	bl	8000a34 <send_debug_logs>
            break;
 80049fe:	e01d      	b.n	8004a3c <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_DUPLICATE_ID:
            send_debug_logs("[ERROR] DUPLICATE_ID : Failed to queue the payload because the Payload ID provided by the asset is already in use in the Astronode queue.");
 8004a00:	4b1e      	ldr	r3, [pc, #120]	; (8004a7c <check_for_error+0x160>)
 8004a02:	0018      	movs	r0, r3
 8004a04:	f7fc f816 	bl	8000a34 <send_debug_logs>
            break;
 8004a08:	e018      	b.n	8004a3c <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_BUFFER_EMPTY:
            send_debug_logs("[ERROR] BUFFER_EMPTY : Failed to dequeue a payload from the buffer because the buffer is empty.");
 8004a0a:	4b1d      	ldr	r3, [pc, #116]	; (8004a80 <check_for_error+0x164>)
 8004a0c:	0018      	movs	r0, r3
 8004a0e:	f7fc f811 	bl	8000a34 <send_debug_logs>
            break;
 8004a12:	e013      	b.n	8004a3c <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_INVALID_POS:
            send_debug_logs("[ERROR] INVALID_POS : Failed to update the geolocation information. Latitude and longitude fields must in the range [-90,90] degrees and [-180,180] degrees, respectively.");
 8004a14:	4b1b      	ldr	r3, [pc, #108]	; (8004a84 <check_for_error+0x168>)
 8004a16:	0018      	movs	r0, r3
 8004a18:	f7fc f80c 	bl	8000a34 <send_debug_logs>
            break;
 8004a1c:	e00e      	b.n	8004a3c <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_NO_ACK:
            send_debug_logs("[ERROR] NO_ACK : No satellite acknowledgement available for any payload.");
 8004a1e:	4b1a      	ldr	r3, [pc, #104]	; (8004a88 <check_for_error+0x16c>)
 8004a20:	0018      	movs	r0, r3
 8004a22:	f7fc f807 	bl	8000a34 <send_debug_logs>
            break;
 8004a26:	e009      	b.n	8004a3c <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_NO_CLEAR:
            send_debug_logs("[ERROR] NO_CLEAR : No payload ack to clear, or it was already cleared.");
 8004a28:	4b18      	ldr	r3, [pc, #96]	; (8004a8c <check_for_error+0x170>)
 8004a2a:	0018      	movs	r0, r3
 8004a2c:	f7fc f802 	bl	8000a34 <send_debug_logs>
            break;
 8004a30:	e004      	b.n	8004a3c <check_for_error+0x120>

        default:
            send_debug_logs("[ERROR] error_code is not defined.");
 8004a32:	4b17      	ldr	r3, [pc, #92]	; (8004a90 <check_for_error+0x174>)
 8004a34:	0018      	movs	r0, r3
 8004a36:	f7fb fffd 	bl	8000a34 <send_debug_logs>
            break;
 8004a3a:	46c0      	nop			; (mov r8, r8)
    }
}
 8004a3c:	46c0      	nop			; (mov r8, r8)
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	b004      	add	sp, #16
 8004a42:	bd80      	pop	{r7, pc}
 8004a44:	00004601 	.word	0x00004601
 8004a48:	00004501 	.word	0x00004501
 8004a4c:	00003501 	.word	0x00003501
 8004a50:	00002601 	.word	0x00002601
 8004a54:	00002511 	.word	0x00002511
 8004a58:	00002501 	.word	0x00002501
 8004a5c:	00000611 	.word	0x00000611
 8004a60:	00000601 	.word	0x00000601
 8004a64:	080068c8 	.word	0x080068c8
 8004a68:	08006914 	.word	0x08006914
 8004a6c:	08006978 	.word	0x08006978
 8004a70:	080069b0 	.word	0x080069b0
 8004a74:	08006a54 	.word	0x08006a54
 8004a78:	08006abc 	.word	0x08006abc
 8004a7c:	08006b1c 	.word	0x08006b1c
 8004a80:	08006ba8 	.word	0x08006ba8
 8004a84:	08006c08 	.word	0x08006c08
 8004a88:	08006cb4 	.word	0x08006cb4
 8004a8c:	08006d00 	.word	0x08006d00
 8004a90:	08006d48 	.word	0x08006d48

08004a94 <receive_astronode_answer>:

static return_status_t receive_astronode_answer(uint8_t *p_rx_buffer, uint16_t *p_buffer_length)
{
 8004a94:	b5b0      	push	{r4, r5, r7, lr}
 8004a96:	b086      	sub	sp, #24
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	6039      	str	r1, [r7, #0]
    uint8_t rx_char = 0;
 8004a9e:	230f      	movs	r3, #15
 8004aa0:	18fb      	adds	r3, r7, r3
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	701a      	strb	r2, [r3, #0]
    uint16_t length = 0;
 8004aa6:	2316      	movs	r3, #22
 8004aa8:	18fb      	adds	r3, r7, r3
 8004aaa:	2200      	movs	r2, #0
 8004aac:	801a      	strh	r2, [r3, #0]
    uint32_t timeout_answer_received = get_systick();
 8004aae:	f7fc f80f 	bl	8000ad0 <get_systick>
 8004ab2:	0003      	movs	r3, r0
 8004ab4:	613b      	str	r3, [r7, #16]
    bool is_answer_received = false;
 8004ab6:	2315      	movs	r3, #21
 8004ab8:	18fb      	adds	r3, r7, r3
 8004aba:	2200      	movs	r2, #0
 8004abc:	701a      	strb	r2, [r3, #0]

    while (is_answer_received == false)
 8004abe:	e054      	b.n	8004b6a <receive_astronode_answer+0xd6>
    {
        if (is_systick_timeout_over(timeout_answer_received, ASTRONODE_ANSWER_TIMEOUT_MS))
 8004ac0:	4a34      	ldr	r2, [pc, #208]	; (8004b94 <receive_astronode_answer+0x100>)
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	0011      	movs	r1, r2
 8004ac6:	0018      	movs	r0, r3
 8004ac8:	f7fc f80a 	bl	8000ae0 <is_systick_timeout_over>
 8004acc:	1e03      	subs	r3, r0, #0
 8004ace:	d005      	beq.n	8004adc <receive_astronode_answer+0x48>
        {
            send_debug_logs("ERROR : Received answer timeout..");
 8004ad0:	4b31      	ldr	r3, [pc, #196]	; (8004b98 <receive_astronode_answer+0x104>)
 8004ad2:	0018      	movs	r0, r3
 8004ad4:	f7fb ffae 	bl	8000a34 <send_debug_logs>
            return RS_FAILURE;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	e057      	b.n	8004b8c <receive_astronode_answer+0xf8>
        }
        if (is_astronode_character_received(&rx_char))
 8004adc:	250f      	movs	r5, #15
 8004ade:	197b      	adds	r3, r7, r5
 8004ae0:	0018      	movs	r0, r3
 8004ae2:	f7fc f813 	bl	8000b0c <is_astronode_character_received>
 8004ae6:	0003      	movs	r3, r0
 8004ae8:	0019      	movs	r1, r3
 8004aea:	2016      	movs	r0, #22
 8004aec:	183b      	adds	r3, r7, r0
 8004aee:	183a      	adds	r2, r7, r0
 8004af0:	8812      	ldrh	r2, [r2, #0]
 8004af2:	801a      	strh	r2, [r3, #0]
 8004af4:	2415      	movs	r4, #21
 8004af6:	193b      	adds	r3, r7, r4
 8004af8:	193a      	adds	r2, r7, r4
 8004afa:	7812      	ldrb	r2, [r2, #0]
 8004afc:	701a      	strb	r2, [r3, #0]
 8004afe:	2900      	cmp	r1, #0
 8004b00:	d033      	beq.n	8004b6a <receive_astronode_answer+0xd6>
        {
            if (rx_char == ASTRONODE_TRANSPORT_STX)
 8004b02:	197b      	adds	r3, r7, r5
 8004b04:	781b      	ldrb	r3, [r3, #0]
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	d105      	bne.n	8004b16 <receive_astronode_answer+0x82>
            {
                is_answer_received = false;
 8004b0a:	193b      	adds	r3, r7, r4
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	701a      	strb	r2, [r3, #0]
                length = 0;
 8004b10:	183b      	adds	r3, r7, r0
 8004b12:	2200      	movs	r2, #0
 8004b14:	801a      	strh	r2, [r3, #0]
            }

            p_rx_buffer[length] = rx_char;
 8004b16:	2116      	movs	r1, #22
 8004b18:	187b      	adds	r3, r7, r1
 8004b1a:	881b      	ldrh	r3, [r3, #0]
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	18d3      	adds	r3, r2, r3
 8004b20:	220f      	movs	r2, #15
 8004b22:	18ba      	adds	r2, r7, r2
 8004b24:	7812      	ldrb	r2, [r2, #0]
 8004b26:	701a      	strb	r2, [r3, #0]
            length++;
 8004b28:	187b      	adds	r3, r7, r1
 8004b2a:	881a      	ldrh	r2, [r3, #0]
 8004b2c:	187b      	adds	r3, r7, r1
 8004b2e:	3201      	adds	r2, #1
 8004b30:	801a      	strh	r2, [r3, #0]

            if (length > ASTRONODE_MAX_LENGTH_RESPONSE)
 8004b32:	187b      	adds	r3, r7, r1
 8004b34:	881b      	ldrh	r3, [r3, #0]
 8004b36:	2bb2      	cmp	r3, #178	; 0xb2
 8004b38:	d905      	bls.n	8004b46 <receive_astronode_answer+0xb2>
            {
                send_debug_logs("ERROR : Message received from the Astronode exceed maximum length allowed.");
 8004b3a:	4b18      	ldr	r3, [pc, #96]	; (8004b9c <receive_astronode_answer+0x108>)
 8004b3c:	0018      	movs	r0, r3
 8004b3e:	f7fb ff79 	bl	8000a34 <send_debug_logs>
                return RS_FAILURE;
 8004b42:	2300      	movs	r3, #0
 8004b44:	e022      	b.n	8004b8c <receive_astronode_answer+0xf8>
            }

            if (rx_char == ASTRONODE_TRANSPORT_ETX)
 8004b46:	230f      	movs	r3, #15
 8004b48:	18fb      	adds	r3, r7, r3
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	2b03      	cmp	r3, #3
 8004b4e:	d10c      	bne.n	8004b6a <receive_astronode_answer+0xd6>
            {
                if (length > 1)
 8004b50:	2216      	movs	r2, #22
 8004b52:	18bb      	adds	r3, r7, r2
 8004b54:	881b      	ldrh	r3, [r3, #0]
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d907      	bls.n	8004b6a <receive_astronode_answer+0xd6>
                {
                    *p_buffer_length = length;
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	18ba      	adds	r2, r7, r2
 8004b5e:	8812      	ldrh	r2, [r2, #0]
 8004b60:	801a      	strh	r2, [r3, #0]
                    is_answer_received = true;
 8004b62:	2315      	movs	r3, #21
 8004b64:	18fb      	adds	r3, r7, r3
 8004b66:	2201      	movs	r2, #1
 8004b68:	701a      	strb	r2, [r3, #0]
    while (is_answer_received == false)
 8004b6a:	2315      	movs	r3, #21
 8004b6c:	18fb      	adds	r3, r7, r3
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	2201      	movs	r2, #1
 8004b72:	4053      	eors	r3, r2
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d1a2      	bne.n	8004ac0 <receive_astronode_answer+0x2c>
                }
            }
        }
    }
    send_debug_logs("Message received from the Astronode <-- ");
 8004b7a:	4b09      	ldr	r3, [pc, #36]	; (8004ba0 <receive_astronode_answer+0x10c>)
 8004b7c:	0018      	movs	r0, r3
 8004b7e:	f7fb ff59 	bl	8000a34 <send_debug_logs>
    send_debug_logs((char *) p_rx_buffer);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	0018      	movs	r0, r3
 8004b86:	f7fb ff55 	bl	8000a34 <send_debug_logs>

    return RS_SUCCESS;
 8004b8a:	2301      	movs	r3, #1
}
 8004b8c:	0018      	movs	r0, r3
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	b006      	add	sp, #24
 8004b92:	bdb0      	pop	{r4, r5, r7, pc}
 8004b94:	000005dc 	.word	0x000005dc
 8004b98:	08006d6c 	.word	0x08006d6c
 8004b9c:	08006d90 	.word	0x08006d90
 8004ba0:	08006ddc 	.word	0x08006ddc

08004ba4 <uint8_to_ascii_buffer>:

static void uint8_to_ascii_buffer(const uint8_t value, uint8_t *p_target_buffer)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b082      	sub	sp, #8
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	0002      	movs	r2, r0
 8004bac:	6039      	str	r1, [r7, #0]
 8004bae:	1dfb      	adds	r3, r7, #7
 8004bb0:	701a      	strb	r2, [r3, #0]
    p_target_buffer[0] = g_ascii_lookup[value >> 4];
 8004bb2:	1dfb      	adds	r3, r7, #7
 8004bb4:	781b      	ldrb	r3, [r3, #0]
 8004bb6:	091b      	lsrs	r3, r3, #4
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	001a      	movs	r2, r3
 8004bbc:	4b08      	ldr	r3, [pc, #32]	; (8004be0 <uint8_to_ascii_buffer+0x3c>)
 8004bbe:	5c9a      	ldrb	r2, [r3, r2]
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	701a      	strb	r2, [r3, #0]
    p_target_buffer[1] = g_ascii_lookup[value & 0x0F];
 8004bc4:	1dfb      	adds	r3, r7, #7
 8004bc6:	781b      	ldrb	r3, [r3, #0]
 8004bc8:	220f      	movs	r2, #15
 8004bca:	401a      	ands	r2, r3
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	3301      	adds	r3, #1
 8004bd0:	4903      	ldr	r1, [pc, #12]	; (8004be0 <uint8_to_ascii_buffer+0x3c>)
 8004bd2:	5c8a      	ldrb	r2, [r1, r2]
 8004bd4:	701a      	strb	r2, [r3, #0]
}
 8004bd6:	46c0      	nop			; (mov r8, r8)
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	b002      	add	sp, #8
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	46c0      	nop			; (mov r8, r8)
 8004be0:	08006fec 	.word	0x08006fec

08004be4 <my_astro_init>:
char 		my_astro_rcv_cmd[40] = {0} ;
bool		astro_rcv_cmd_flag = false ;


bool my_astro_init ()
{
 8004be4:	b590      	push	{r4, r7, lr}
 8004be6:	b087      	sub	sp, #28
 8004be8:	af04      	add	r7, sp, #16
	bool cfg_wr = false ;
 8004bea:	1dfb      	adds	r3, r7, #7
 8004bec:	2200      	movs	r2, #0
 8004bee:	701a      	strb	r2, [r3, #0]

	while ( !cfg_wr )
 8004bf0:	e012      	b.n	8004c18 <my_astro_init+0x34>
	{
		astro_reset () ;
 8004bf2:	f7fb fef3 	bl	80009dc <astro_reset>
		// Deep Sleep Mode (false) NOT used
		// Satellite Ack Event Pin Mask (true): EVT pin shows EVT register Payload Ack bit state
		// Reset Notification Event Pin Mask (true):  EVT pin shows EVT register Reset Event Notification bit state
		// Command Available Event Pin Mask (true): EVT pin shows EVT register Command Available bit state
		// Message Transmission (Tx) Pending Event Pin Mask (false):  EVT pin does not show EVT register Msg Tx Pending bit state
		cfg_wr = astronode_send_cfg_wr ( true , true , true , false , true , true , true , false  ) ;
 8004bf6:	1dfc      	adds	r4, r7, #7
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	9303      	str	r3, [sp, #12]
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	9302      	str	r3, [sp, #8]
 8004c00:	2301      	movs	r3, #1
 8004c02:	9301      	str	r3, [sp, #4]
 8004c04:	2301      	movs	r3, #1
 8004c06:	9300      	str	r3, [sp, #0]
 8004c08:	2300      	movs	r3, #0
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	2101      	movs	r1, #1
 8004c0e:	2001      	movs	r0, #1
 8004c10:	f7fe fcce 	bl	80035b0 <astronode_send_cfg_wr>
 8004c14:	0003      	movs	r3, r0
 8004c16:	7023      	strb	r3, [r4, #0]
	while ( !cfg_wr )
 8004c18:	1dfb      	adds	r3, r7, #7
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	4053      	eors	r3, r2
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d1e5      	bne.n	8004bf2 <my_astro_init+0xe>
	}

	if ( cfg_wr )
 8004c26:	1dfb      	adds	r3, r7, #7
 8004c28:	781b      	ldrb	r3, [r3, #0]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d00d      	beq.n	8004c4a <my_astro_init+0x66>
	{
		astronode_send_rtc_rr () ;
 8004c2e:	f7fe ffbb 	bl	8003ba8 <astronode_send_rtc_rr>
		astronode_send_cfg_sr () ;
 8004c32:	f7fe fc85 	bl	8003540 <astronode_send_cfg_sr>
		astronode_send_mpn_rr () ;
 8004c36:	f7ff f8b1 	bl	8003d9c <astronode_send_mpn_rr>
		astronode_send_msn_rr () ;
 8004c3a:	f7fe fe0f 	bl	800385c <astronode_send_msn_rr>
		astronode_send_mgi_rr () ;
 8004c3e:	f7fe fd63 	bl	8003708 <astronode_send_mgi_rr>
		astronode_send_pld_fr () ;
 8004c42:	f7fe ff35 	bl	8003ab0 <astronode_send_pld_fr>
		return true ;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e000      	b.n	8004c4c <my_astro_init+0x68>
	}
	else
	{
		return false ;
 8004c4a:	2300      	movs	r3, #0
	}
}
 8004c4c:	0018      	movs	r0, r3
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	b003      	add	sp, #12
 8004c52:	bd90      	pop	{r4, r7, pc}

08004c54 <my_astro_handle_evt>:
		send_debug_logs ( "my_astronode.c,my_astro_add_payload_2_queue,Payload exceeded ASTRONODE_APP_PAYLOAD_MAX_LEN_BYTES value." ) ;
	}
	return false ;
}
bool my_astro_handle_evt ( void )
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	af00      	add	r7, sp, #0
	send_debug_logs ( "my_astronode.c,my_astro_handle_evt,evt pin is high." ) ;
 8004c58:	4b19      	ldr	r3, [pc, #100]	; (8004cc0 <my_astro_handle_evt+0x6c>)
 8004c5a:	0018      	movs	r0, r3
 8004c5c:	f7fb feea 	bl	8000a34 <send_debug_logs>
	astronode_send_evt_rr () ;
 8004c60:	f7fe fea6 	bl	80039b0 <astronode_send_evt_rr>
	if (is_sak_available () )
 8004c64:	f7ff fb28 	bl	80042b8 <is_sak_available>
 8004c68:	1e03      	subs	r3, r0, #0
 8004c6a:	d007      	beq.n	8004c7c <my_astro_handle_evt+0x28>
	{
	  astronode_send_sak_rr () ;
 8004c6c:	f7ff f800 	bl	8003c70 <astronode_send_sak_rr>
	  astronode_send_sak_cr () ;
 8004c70:	f7ff f854 	bl	8003d1c <astronode_send_sak_cr>
	  send_debug_logs ( "my_astronode.c,my_astro_handle_evt,message has been acknowledged." ) ;
 8004c74:	4b13      	ldr	r3, [pc, #76]	; (8004cc4 <my_astro_handle_evt+0x70>)
 8004c76:	0018      	movs	r0, r3
 8004c78:	f7fb fedc 	bl	8000a34 <send_debug_logs>
	  //astronode_send_per_rr () ;
	}
	if ( is_astronode_reset () )
 8004c7c:	f7ff fb26 	bl	80042cc <is_astronode_reset>
 8004c80:	1e03      	subs	r3, r0, #0
 8004c82:	d005      	beq.n	8004c90 <my_astro_handle_evt+0x3c>
	{
	  send_debug_logs ( "my_astronode.c,my_astro_handle_evt,terminal has been reset." ) ;
 8004c84:	4b10      	ldr	r3, [pc, #64]	; (8004cc8 <my_astro_handle_evt+0x74>)
 8004c86:	0018      	movs	r0, r3
 8004c88:	f7fb fed4 	bl	8000a34 <send_debug_logs>
	  astronode_send_res_cr () ;
 8004c8c:	f7fe ff4c 	bl	8003b28 <astronode_send_res_cr>
	}
	if ( is_command_available () )
 8004c90:	f7ff fb26 	bl	80042e0 <is_command_available>
 8004c94:	1e03      	subs	r3, r0, #0
 8004c96:	d00e      	beq.n	8004cb6 <my_astro_handle_evt+0x62>
	{
	  send_debug_logs ( "my_astronode.c,my_astro_handle_evt,unicast command is available" ) ;
 8004c98:	4b0c      	ldr	r3, [pc, #48]	; (8004ccc <my_astro_handle_evt+0x78>)
 8004c9a:	0018      	movs	r0, r3
 8004c9c:	f7fb feca 	bl	8000a34 <send_debug_logs>
	  if ( astronode_send_cmd_rr ( my_astro_rcv_cmd ) )
 8004ca0:	4b0b      	ldr	r3, [pc, #44]	; (8004cd0 <my_astro_handle_evt+0x7c>)
 8004ca2:	0018      	movs	r0, r3
 8004ca4:	f7ff f964 	bl	8003f70 <astronode_send_cmd_rr>
 8004ca8:	1e03      	subs	r3, r0, #0
 8004caa:	d002      	beq.n	8004cb2 <my_astro_handle_evt+0x5e>
	  {
		  astro_rcv_cmd_flag = true ;
 8004cac:	4b09      	ldr	r3, [pc, #36]	; (8004cd4 <my_astro_handle_evt+0x80>)
 8004cae:	2201      	movs	r2, #1
 8004cb0:	701a      	strb	r2, [r3, #0]
	  }
	  astronode_send_cmd_cr () ;
 8004cb2:	f7ff f91d 	bl	8003ef0 <astronode_send_cmd_cr>
	}
	return true ;
 8004cb6:	2301      	movs	r3, #1
}
 8004cb8:	0018      	movs	r0, r3
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
 8004cbe:	46c0      	nop			; (mov r8, r8)
 8004cc0:	08006e70 	.word	0x08006e70
 8004cc4:	08006ea4 	.word	0x08006ea4
 8004cc8:	08006ee8 	.word	0x08006ee8
 8004ccc:	08006f24 	.word	0x08006f24
 8004cd0:	20000344 	.word	0x20000344
 8004cd4:	2000036c 	.word	0x2000036c

08004cd8 <sniprintf>:
 8004cd8:	b40c      	push	{r2, r3}
 8004cda:	b530      	push	{r4, r5, lr}
 8004cdc:	4b17      	ldr	r3, [pc, #92]	; (8004d3c <sniprintf+0x64>)
 8004cde:	000c      	movs	r4, r1
 8004ce0:	681d      	ldr	r5, [r3, #0]
 8004ce2:	b09d      	sub	sp, #116	; 0x74
 8004ce4:	2900      	cmp	r1, #0
 8004ce6:	da08      	bge.n	8004cfa <sniprintf+0x22>
 8004ce8:	238b      	movs	r3, #139	; 0x8b
 8004cea:	2001      	movs	r0, #1
 8004cec:	602b      	str	r3, [r5, #0]
 8004cee:	4240      	negs	r0, r0
 8004cf0:	b01d      	add	sp, #116	; 0x74
 8004cf2:	bc30      	pop	{r4, r5}
 8004cf4:	bc08      	pop	{r3}
 8004cf6:	b002      	add	sp, #8
 8004cf8:	4718      	bx	r3
 8004cfa:	2382      	movs	r3, #130	; 0x82
 8004cfc:	466a      	mov	r2, sp
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	8293      	strh	r3, [r2, #20]
 8004d02:	2300      	movs	r3, #0
 8004d04:	9002      	str	r0, [sp, #8]
 8004d06:	9006      	str	r0, [sp, #24]
 8004d08:	4299      	cmp	r1, r3
 8004d0a:	d000      	beq.n	8004d0e <sniprintf+0x36>
 8004d0c:	1e4b      	subs	r3, r1, #1
 8004d0e:	9304      	str	r3, [sp, #16]
 8004d10:	9307      	str	r3, [sp, #28]
 8004d12:	2301      	movs	r3, #1
 8004d14:	466a      	mov	r2, sp
 8004d16:	425b      	negs	r3, r3
 8004d18:	82d3      	strh	r3, [r2, #22]
 8004d1a:	0028      	movs	r0, r5
 8004d1c:	ab21      	add	r3, sp, #132	; 0x84
 8004d1e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004d20:	a902      	add	r1, sp, #8
 8004d22:	9301      	str	r3, [sp, #4]
 8004d24:	f000 f9ca 	bl	80050bc <_svfiprintf_r>
 8004d28:	1c43      	adds	r3, r0, #1
 8004d2a:	da01      	bge.n	8004d30 <sniprintf+0x58>
 8004d2c:	238b      	movs	r3, #139	; 0x8b
 8004d2e:	602b      	str	r3, [r5, #0]
 8004d30:	2c00      	cmp	r4, #0
 8004d32:	d0dd      	beq.n	8004cf0 <sniprintf+0x18>
 8004d34:	2200      	movs	r2, #0
 8004d36:	9b02      	ldr	r3, [sp, #8]
 8004d38:	701a      	strb	r2, [r3, #0]
 8004d3a:	e7d9      	b.n	8004cf0 <sniprintf+0x18>
 8004d3c:	20000060 	.word	0x20000060

08004d40 <siprintf>:
 8004d40:	b40e      	push	{r1, r2, r3}
 8004d42:	b500      	push	{lr}
 8004d44:	490b      	ldr	r1, [pc, #44]	; (8004d74 <siprintf+0x34>)
 8004d46:	b09c      	sub	sp, #112	; 0x70
 8004d48:	ab1d      	add	r3, sp, #116	; 0x74
 8004d4a:	9002      	str	r0, [sp, #8]
 8004d4c:	9006      	str	r0, [sp, #24]
 8004d4e:	9107      	str	r1, [sp, #28]
 8004d50:	9104      	str	r1, [sp, #16]
 8004d52:	4809      	ldr	r0, [pc, #36]	; (8004d78 <siprintf+0x38>)
 8004d54:	4909      	ldr	r1, [pc, #36]	; (8004d7c <siprintf+0x3c>)
 8004d56:	cb04      	ldmia	r3!, {r2}
 8004d58:	9105      	str	r1, [sp, #20]
 8004d5a:	6800      	ldr	r0, [r0, #0]
 8004d5c:	a902      	add	r1, sp, #8
 8004d5e:	9301      	str	r3, [sp, #4]
 8004d60:	f000 f9ac 	bl	80050bc <_svfiprintf_r>
 8004d64:	2200      	movs	r2, #0
 8004d66:	9b02      	ldr	r3, [sp, #8]
 8004d68:	701a      	strb	r2, [r3, #0]
 8004d6a:	b01c      	add	sp, #112	; 0x70
 8004d6c:	bc08      	pop	{r3}
 8004d6e:	b003      	add	sp, #12
 8004d70:	4718      	bx	r3
 8004d72:	46c0      	nop			; (mov r8, r8)
 8004d74:	7fffffff 	.word	0x7fffffff
 8004d78:	20000060 	.word	0x20000060
 8004d7c:	ffff0208 	.word	0xffff0208

08004d80 <memset>:
 8004d80:	0003      	movs	r3, r0
 8004d82:	1882      	adds	r2, r0, r2
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d100      	bne.n	8004d8a <memset+0xa>
 8004d88:	4770      	bx	lr
 8004d8a:	7019      	strb	r1, [r3, #0]
 8004d8c:	3301      	adds	r3, #1
 8004d8e:	e7f9      	b.n	8004d84 <memset+0x4>

08004d90 <__errno>:
 8004d90:	4b01      	ldr	r3, [pc, #4]	; (8004d98 <__errno+0x8>)
 8004d92:	6818      	ldr	r0, [r3, #0]
 8004d94:	4770      	bx	lr
 8004d96:	46c0      	nop			; (mov r8, r8)
 8004d98:	20000060 	.word	0x20000060

08004d9c <__libc_init_array>:
 8004d9c:	b570      	push	{r4, r5, r6, lr}
 8004d9e:	2600      	movs	r6, #0
 8004da0:	4c0c      	ldr	r4, [pc, #48]	; (8004dd4 <__libc_init_array+0x38>)
 8004da2:	4d0d      	ldr	r5, [pc, #52]	; (8004dd8 <__libc_init_array+0x3c>)
 8004da4:	1b64      	subs	r4, r4, r5
 8004da6:	10a4      	asrs	r4, r4, #2
 8004da8:	42a6      	cmp	r6, r4
 8004daa:	d109      	bne.n	8004dc0 <__libc_init_array+0x24>
 8004dac:	2600      	movs	r6, #0
 8004dae:	f000 fc6d 	bl	800568c <_init>
 8004db2:	4c0a      	ldr	r4, [pc, #40]	; (8004ddc <__libc_init_array+0x40>)
 8004db4:	4d0a      	ldr	r5, [pc, #40]	; (8004de0 <__libc_init_array+0x44>)
 8004db6:	1b64      	subs	r4, r4, r5
 8004db8:	10a4      	asrs	r4, r4, #2
 8004dba:	42a6      	cmp	r6, r4
 8004dbc:	d105      	bne.n	8004dca <__libc_init_array+0x2e>
 8004dbe:	bd70      	pop	{r4, r5, r6, pc}
 8004dc0:	00b3      	lsls	r3, r6, #2
 8004dc2:	58eb      	ldr	r3, [r5, r3]
 8004dc4:	4798      	blx	r3
 8004dc6:	3601      	adds	r6, #1
 8004dc8:	e7ee      	b.n	8004da8 <__libc_init_array+0xc>
 8004dca:	00b3      	lsls	r3, r6, #2
 8004dcc:	58eb      	ldr	r3, [r5, r3]
 8004dce:	4798      	blx	r3
 8004dd0:	3601      	adds	r6, #1
 8004dd2:	e7f2      	b.n	8004dba <__libc_init_array+0x1e>
 8004dd4:	08007138 	.word	0x08007138
 8004dd8:	08007138 	.word	0x08007138
 8004ddc:	0800713c 	.word	0x0800713c
 8004de0:	08007138 	.word	0x08007138

08004de4 <__retarget_lock_acquire_recursive>:
 8004de4:	4770      	bx	lr

08004de6 <__retarget_lock_release_recursive>:
 8004de6:	4770      	bx	lr

08004de8 <memcpy>:
 8004de8:	2300      	movs	r3, #0
 8004dea:	b510      	push	{r4, lr}
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d100      	bne.n	8004df2 <memcpy+0xa>
 8004df0:	bd10      	pop	{r4, pc}
 8004df2:	5ccc      	ldrb	r4, [r1, r3]
 8004df4:	54c4      	strb	r4, [r0, r3]
 8004df6:	3301      	adds	r3, #1
 8004df8:	e7f8      	b.n	8004dec <memcpy+0x4>
	...

08004dfc <_free_r>:
 8004dfc:	b570      	push	{r4, r5, r6, lr}
 8004dfe:	0005      	movs	r5, r0
 8004e00:	2900      	cmp	r1, #0
 8004e02:	d010      	beq.n	8004e26 <_free_r+0x2a>
 8004e04:	1f0c      	subs	r4, r1, #4
 8004e06:	6823      	ldr	r3, [r4, #0]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	da00      	bge.n	8004e0e <_free_r+0x12>
 8004e0c:	18e4      	adds	r4, r4, r3
 8004e0e:	0028      	movs	r0, r5
 8004e10:	f000 f8e2 	bl	8004fd8 <__malloc_lock>
 8004e14:	4a1d      	ldr	r2, [pc, #116]	; (8004e8c <_free_r+0x90>)
 8004e16:	6813      	ldr	r3, [r2, #0]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d105      	bne.n	8004e28 <_free_r+0x2c>
 8004e1c:	6063      	str	r3, [r4, #4]
 8004e1e:	6014      	str	r4, [r2, #0]
 8004e20:	0028      	movs	r0, r5
 8004e22:	f000 f8e1 	bl	8004fe8 <__malloc_unlock>
 8004e26:	bd70      	pop	{r4, r5, r6, pc}
 8004e28:	42a3      	cmp	r3, r4
 8004e2a:	d908      	bls.n	8004e3e <_free_r+0x42>
 8004e2c:	6820      	ldr	r0, [r4, #0]
 8004e2e:	1821      	adds	r1, r4, r0
 8004e30:	428b      	cmp	r3, r1
 8004e32:	d1f3      	bne.n	8004e1c <_free_r+0x20>
 8004e34:	6819      	ldr	r1, [r3, #0]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	1809      	adds	r1, r1, r0
 8004e3a:	6021      	str	r1, [r4, #0]
 8004e3c:	e7ee      	b.n	8004e1c <_free_r+0x20>
 8004e3e:	001a      	movs	r2, r3
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d001      	beq.n	8004e4a <_free_r+0x4e>
 8004e46:	42a3      	cmp	r3, r4
 8004e48:	d9f9      	bls.n	8004e3e <_free_r+0x42>
 8004e4a:	6811      	ldr	r1, [r2, #0]
 8004e4c:	1850      	adds	r0, r2, r1
 8004e4e:	42a0      	cmp	r0, r4
 8004e50:	d10b      	bne.n	8004e6a <_free_r+0x6e>
 8004e52:	6820      	ldr	r0, [r4, #0]
 8004e54:	1809      	adds	r1, r1, r0
 8004e56:	1850      	adds	r0, r2, r1
 8004e58:	6011      	str	r1, [r2, #0]
 8004e5a:	4283      	cmp	r3, r0
 8004e5c:	d1e0      	bne.n	8004e20 <_free_r+0x24>
 8004e5e:	6818      	ldr	r0, [r3, #0]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	1841      	adds	r1, r0, r1
 8004e64:	6011      	str	r1, [r2, #0]
 8004e66:	6053      	str	r3, [r2, #4]
 8004e68:	e7da      	b.n	8004e20 <_free_r+0x24>
 8004e6a:	42a0      	cmp	r0, r4
 8004e6c:	d902      	bls.n	8004e74 <_free_r+0x78>
 8004e6e:	230c      	movs	r3, #12
 8004e70:	602b      	str	r3, [r5, #0]
 8004e72:	e7d5      	b.n	8004e20 <_free_r+0x24>
 8004e74:	6820      	ldr	r0, [r4, #0]
 8004e76:	1821      	adds	r1, r4, r0
 8004e78:	428b      	cmp	r3, r1
 8004e7a:	d103      	bne.n	8004e84 <_free_r+0x88>
 8004e7c:	6819      	ldr	r1, [r3, #0]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	1809      	adds	r1, r1, r0
 8004e82:	6021      	str	r1, [r4, #0]
 8004e84:	6063      	str	r3, [r4, #4]
 8004e86:	6054      	str	r4, [r2, #4]
 8004e88:	e7ca      	b.n	8004e20 <_free_r+0x24>
 8004e8a:	46c0      	nop			; (mov r8, r8)
 8004e8c:	200004b0 	.word	0x200004b0

08004e90 <sbrk_aligned>:
 8004e90:	b570      	push	{r4, r5, r6, lr}
 8004e92:	4e0f      	ldr	r6, [pc, #60]	; (8004ed0 <sbrk_aligned+0x40>)
 8004e94:	000d      	movs	r5, r1
 8004e96:	6831      	ldr	r1, [r6, #0]
 8004e98:	0004      	movs	r4, r0
 8004e9a:	2900      	cmp	r1, #0
 8004e9c:	d102      	bne.n	8004ea4 <sbrk_aligned+0x14>
 8004e9e:	f000 fba1 	bl	80055e4 <_sbrk_r>
 8004ea2:	6030      	str	r0, [r6, #0]
 8004ea4:	0029      	movs	r1, r5
 8004ea6:	0020      	movs	r0, r4
 8004ea8:	f000 fb9c 	bl	80055e4 <_sbrk_r>
 8004eac:	1c43      	adds	r3, r0, #1
 8004eae:	d00a      	beq.n	8004ec6 <sbrk_aligned+0x36>
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	1cc5      	adds	r5, r0, #3
 8004eb4:	439d      	bics	r5, r3
 8004eb6:	42a8      	cmp	r0, r5
 8004eb8:	d007      	beq.n	8004eca <sbrk_aligned+0x3a>
 8004eba:	1a29      	subs	r1, r5, r0
 8004ebc:	0020      	movs	r0, r4
 8004ebe:	f000 fb91 	bl	80055e4 <_sbrk_r>
 8004ec2:	3001      	adds	r0, #1
 8004ec4:	d101      	bne.n	8004eca <sbrk_aligned+0x3a>
 8004ec6:	2501      	movs	r5, #1
 8004ec8:	426d      	negs	r5, r5
 8004eca:	0028      	movs	r0, r5
 8004ecc:	bd70      	pop	{r4, r5, r6, pc}
 8004ece:	46c0      	nop			; (mov r8, r8)
 8004ed0:	200004b4 	.word	0x200004b4

08004ed4 <_malloc_r>:
 8004ed4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ed6:	2203      	movs	r2, #3
 8004ed8:	1ccb      	adds	r3, r1, #3
 8004eda:	4393      	bics	r3, r2
 8004edc:	3308      	adds	r3, #8
 8004ede:	0006      	movs	r6, r0
 8004ee0:	001f      	movs	r7, r3
 8004ee2:	2b0c      	cmp	r3, #12
 8004ee4:	d238      	bcs.n	8004f58 <_malloc_r+0x84>
 8004ee6:	270c      	movs	r7, #12
 8004ee8:	42b9      	cmp	r1, r7
 8004eea:	d837      	bhi.n	8004f5c <_malloc_r+0x88>
 8004eec:	0030      	movs	r0, r6
 8004eee:	f000 f873 	bl	8004fd8 <__malloc_lock>
 8004ef2:	4b38      	ldr	r3, [pc, #224]	; (8004fd4 <_malloc_r+0x100>)
 8004ef4:	9300      	str	r3, [sp, #0]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	001c      	movs	r4, r3
 8004efa:	2c00      	cmp	r4, #0
 8004efc:	d133      	bne.n	8004f66 <_malloc_r+0x92>
 8004efe:	0039      	movs	r1, r7
 8004f00:	0030      	movs	r0, r6
 8004f02:	f7ff ffc5 	bl	8004e90 <sbrk_aligned>
 8004f06:	0004      	movs	r4, r0
 8004f08:	1c43      	adds	r3, r0, #1
 8004f0a:	d15e      	bne.n	8004fca <_malloc_r+0xf6>
 8004f0c:	9b00      	ldr	r3, [sp, #0]
 8004f0e:	681c      	ldr	r4, [r3, #0]
 8004f10:	0025      	movs	r5, r4
 8004f12:	2d00      	cmp	r5, #0
 8004f14:	d14e      	bne.n	8004fb4 <_malloc_r+0xe0>
 8004f16:	2c00      	cmp	r4, #0
 8004f18:	d051      	beq.n	8004fbe <_malloc_r+0xea>
 8004f1a:	6823      	ldr	r3, [r4, #0]
 8004f1c:	0029      	movs	r1, r5
 8004f1e:	18e3      	adds	r3, r4, r3
 8004f20:	0030      	movs	r0, r6
 8004f22:	9301      	str	r3, [sp, #4]
 8004f24:	f000 fb5e 	bl	80055e4 <_sbrk_r>
 8004f28:	9b01      	ldr	r3, [sp, #4]
 8004f2a:	4283      	cmp	r3, r0
 8004f2c:	d147      	bne.n	8004fbe <_malloc_r+0xea>
 8004f2e:	6823      	ldr	r3, [r4, #0]
 8004f30:	0030      	movs	r0, r6
 8004f32:	1aff      	subs	r7, r7, r3
 8004f34:	0039      	movs	r1, r7
 8004f36:	f7ff ffab 	bl	8004e90 <sbrk_aligned>
 8004f3a:	3001      	adds	r0, #1
 8004f3c:	d03f      	beq.n	8004fbe <_malloc_r+0xea>
 8004f3e:	6823      	ldr	r3, [r4, #0]
 8004f40:	19db      	adds	r3, r3, r7
 8004f42:	6023      	str	r3, [r4, #0]
 8004f44:	9b00      	ldr	r3, [sp, #0]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d040      	beq.n	8004fce <_malloc_r+0xfa>
 8004f4c:	685a      	ldr	r2, [r3, #4]
 8004f4e:	42a2      	cmp	r2, r4
 8004f50:	d133      	bne.n	8004fba <_malloc_r+0xe6>
 8004f52:	2200      	movs	r2, #0
 8004f54:	605a      	str	r2, [r3, #4]
 8004f56:	e014      	b.n	8004f82 <_malloc_r+0xae>
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	dac5      	bge.n	8004ee8 <_malloc_r+0x14>
 8004f5c:	230c      	movs	r3, #12
 8004f5e:	2500      	movs	r5, #0
 8004f60:	6033      	str	r3, [r6, #0]
 8004f62:	0028      	movs	r0, r5
 8004f64:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004f66:	6821      	ldr	r1, [r4, #0]
 8004f68:	1bc9      	subs	r1, r1, r7
 8004f6a:	d420      	bmi.n	8004fae <_malloc_r+0xda>
 8004f6c:	290b      	cmp	r1, #11
 8004f6e:	d918      	bls.n	8004fa2 <_malloc_r+0xce>
 8004f70:	19e2      	adds	r2, r4, r7
 8004f72:	6027      	str	r7, [r4, #0]
 8004f74:	42a3      	cmp	r3, r4
 8004f76:	d112      	bne.n	8004f9e <_malloc_r+0xca>
 8004f78:	9b00      	ldr	r3, [sp, #0]
 8004f7a:	601a      	str	r2, [r3, #0]
 8004f7c:	6863      	ldr	r3, [r4, #4]
 8004f7e:	6011      	str	r1, [r2, #0]
 8004f80:	6053      	str	r3, [r2, #4]
 8004f82:	0030      	movs	r0, r6
 8004f84:	0025      	movs	r5, r4
 8004f86:	f000 f82f 	bl	8004fe8 <__malloc_unlock>
 8004f8a:	2207      	movs	r2, #7
 8004f8c:	350b      	adds	r5, #11
 8004f8e:	1d23      	adds	r3, r4, #4
 8004f90:	4395      	bics	r5, r2
 8004f92:	1aea      	subs	r2, r5, r3
 8004f94:	429d      	cmp	r5, r3
 8004f96:	d0e4      	beq.n	8004f62 <_malloc_r+0x8e>
 8004f98:	1b5b      	subs	r3, r3, r5
 8004f9a:	50a3      	str	r3, [r4, r2]
 8004f9c:	e7e1      	b.n	8004f62 <_malloc_r+0x8e>
 8004f9e:	605a      	str	r2, [r3, #4]
 8004fa0:	e7ec      	b.n	8004f7c <_malloc_r+0xa8>
 8004fa2:	6862      	ldr	r2, [r4, #4]
 8004fa4:	42a3      	cmp	r3, r4
 8004fa6:	d1d5      	bne.n	8004f54 <_malloc_r+0x80>
 8004fa8:	9b00      	ldr	r3, [sp, #0]
 8004faa:	601a      	str	r2, [r3, #0]
 8004fac:	e7e9      	b.n	8004f82 <_malloc_r+0xae>
 8004fae:	0023      	movs	r3, r4
 8004fb0:	6864      	ldr	r4, [r4, #4]
 8004fb2:	e7a2      	b.n	8004efa <_malloc_r+0x26>
 8004fb4:	002c      	movs	r4, r5
 8004fb6:	686d      	ldr	r5, [r5, #4]
 8004fb8:	e7ab      	b.n	8004f12 <_malloc_r+0x3e>
 8004fba:	0013      	movs	r3, r2
 8004fbc:	e7c4      	b.n	8004f48 <_malloc_r+0x74>
 8004fbe:	230c      	movs	r3, #12
 8004fc0:	0030      	movs	r0, r6
 8004fc2:	6033      	str	r3, [r6, #0]
 8004fc4:	f000 f810 	bl	8004fe8 <__malloc_unlock>
 8004fc8:	e7cb      	b.n	8004f62 <_malloc_r+0x8e>
 8004fca:	6027      	str	r7, [r4, #0]
 8004fcc:	e7d9      	b.n	8004f82 <_malloc_r+0xae>
 8004fce:	605b      	str	r3, [r3, #4]
 8004fd0:	deff      	udf	#255	; 0xff
 8004fd2:	46c0      	nop			; (mov r8, r8)
 8004fd4:	200004b0 	.word	0x200004b0

08004fd8 <__malloc_lock>:
 8004fd8:	b510      	push	{r4, lr}
 8004fda:	4802      	ldr	r0, [pc, #8]	; (8004fe4 <__malloc_lock+0xc>)
 8004fdc:	f7ff ff02 	bl	8004de4 <__retarget_lock_acquire_recursive>
 8004fe0:	bd10      	pop	{r4, pc}
 8004fe2:	46c0      	nop			; (mov r8, r8)
 8004fe4:	200004ac 	.word	0x200004ac

08004fe8 <__malloc_unlock>:
 8004fe8:	b510      	push	{r4, lr}
 8004fea:	4802      	ldr	r0, [pc, #8]	; (8004ff4 <__malloc_unlock+0xc>)
 8004fec:	f7ff fefb 	bl	8004de6 <__retarget_lock_release_recursive>
 8004ff0:	bd10      	pop	{r4, pc}
 8004ff2:	46c0      	nop			; (mov r8, r8)
 8004ff4:	200004ac 	.word	0x200004ac

08004ff8 <__ssputs_r>:
 8004ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ffa:	b085      	sub	sp, #20
 8004ffc:	9301      	str	r3, [sp, #4]
 8004ffe:	9203      	str	r2, [sp, #12]
 8005000:	688e      	ldr	r6, [r1, #8]
 8005002:	9a01      	ldr	r2, [sp, #4]
 8005004:	0007      	movs	r7, r0
 8005006:	000c      	movs	r4, r1
 8005008:	680b      	ldr	r3, [r1, #0]
 800500a:	4296      	cmp	r6, r2
 800500c:	d831      	bhi.n	8005072 <__ssputs_r+0x7a>
 800500e:	898a      	ldrh	r2, [r1, #12]
 8005010:	2190      	movs	r1, #144	; 0x90
 8005012:	00c9      	lsls	r1, r1, #3
 8005014:	420a      	tst	r2, r1
 8005016:	d029      	beq.n	800506c <__ssputs_r+0x74>
 8005018:	2003      	movs	r0, #3
 800501a:	6921      	ldr	r1, [r4, #16]
 800501c:	1a5b      	subs	r3, r3, r1
 800501e:	9302      	str	r3, [sp, #8]
 8005020:	6963      	ldr	r3, [r4, #20]
 8005022:	4343      	muls	r3, r0
 8005024:	0fdd      	lsrs	r5, r3, #31
 8005026:	18ed      	adds	r5, r5, r3
 8005028:	9b01      	ldr	r3, [sp, #4]
 800502a:	9802      	ldr	r0, [sp, #8]
 800502c:	3301      	adds	r3, #1
 800502e:	181b      	adds	r3, r3, r0
 8005030:	106d      	asrs	r5, r5, #1
 8005032:	42ab      	cmp	r3, r5
 8005034:	d900      	bls.n	8005038 <__ssputs_r+0x40>
 8005036:	001d      	movs	r5, r3
 8005038:	0552      	lsls	r2, r2, #21
 800503a:	d529      	bpl.n	8005090 <__ssputs_r+0x98>
 800503c:	0029      	movs	r1, r5
 800503e:	0038      	movs	r0, r7
 8005040:	f7ff ff48 	bl	8004ed4 <_malloc_r>
 8005044:	1e06      	subs	r6, r0, #0
 8005046:	d02d      	beq.n	80050a4 <__ssputs_r+0xac>
 8005048:	9a02      	ldr	r2, [sp, #8]
 800504a:	6921      	ldr	r1, [r4, #16]
 800504c:	f7ff fecc 	bl	8004de8 <memcpy>
 8005050:	89a2      	ldrh	r2, [r4, #12]
 8005052:	4b19      	ldr	r3, [pc, #100]	; (80050b8 <__ssputs_r+0xc0>)
 8005054:	401a      	ands	r2, r3
 8005056:	2380      	movs	r3, #128	; 0x80
 8005058:	4313      	orrs	r3, r2
 800505a:	81a3      	strh	r3, [r4, #12]
 800505c:	9b02      	ldr	r3, [sp, #8]
 800505e:	6126      	str	r6, [r4, #16]
 8005060:	18f6      	adds	r6, r6, r3
 8005062:	6026      	str	r6, [r4, #0]
 8005064:	6165      	str	r5, [r4, #20]
 8005066:	9e01      	ldr	r6, [sp, #4]
 8005068:	1aed      	subs	r5, r5, r3
 800506a:	60a5      	str	r5, [r4, #8]
 800506c:	9b01      	ldr	r3, [sp, #4]
 800506e:	429e      	cmp	r6, r3
 8005070:	d900      	bls.n	8005074 <__ssputs_r+0x7c>
 8005072:	9e01      	ldr	r6, [sp, #4]
 8005074:	0032      	movs	r2, r6
 8005076:	9903      	ldr	r1, [sp, #12]
 8005078:	6820      	ldr	r0, [r4, #0]
 800507a:	f000 fa9f 	bl	80055bc <memmove>
 800507e:	2000      	movs	r0, #0
 8005080:	68a3      	ldr	r3, [r4, #8]
 8005082:	1b9b      	subs	r3, r3, r6
 8005084:	60a3      	str	r3, [r4, #8]
 8005086:	6823      	ldr	r3, [r4, #0]
 8005088:	199b      	adds	r3, r3, r6
 800508a:	6023      	str	r3, [r4, #0]
 800508c:	b005      	add	sp, #20
 800508e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005090:	002a      	movs	r2, r5
 8005092:	0038      	movs	r0, r7
 8005094:	f000 fac3 	bl	800561e <_realloc_r>
 8005098:	1e06      	subs	r6, r0, #0
 800509a:	d1df      	bne.n	800505c <__ssputs_r+0x64>
 800509c:	0038      	movs	r0, r7
 800509e:	6921      	ldr	r1, [r4, #16]
 80050a0:	f7ff feac 	bl	8004dfc <_free_r>
 80050a4:	230c      	movs	r3, #12
 80050a6:	2001      	movs	r0, #1
 80050a8:	603b      	str	r3, [r7, #0]
 80050aa:	89a2      	ldrh	r2, [r4, #12]
 80050ac:	3334      	adds	r3, #52	; 0x34
 80050ae:	4313      	orrs	r3, r2
 80050b0:	81a3      	strh	r3, [r4, #12]
 80050b2:	4240      	negs	r0, r0
 80050b4:	e7ea      	b.n	800508c <__ssputs_r+0x94>
 80050b6:	46c0      	nop			; (mov r8, r8)
 80050b8:	fffffb7f 	.word	0xfffffb7f

080050bc <_svfiprintf_r>:
 80050bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050be:	b0a1      	sub	sp, #132	; 0x84
 80050c0:	9003      	str	r0, [sp, #12]
 80050c2:	001d      	movs	r5, r3
 80050c4:	898b      	ldrh	r3, [r1, #12]
 80050c6:	000f      	movs	r7, r1
 80050c8:	0016      	movs	r6, r2
 80050ca:	061b      	lsls	r3, r3, #24
 80050cc:	d511      	bpl.n	80050f2 <_svfiprintf_r+0x36>
 80050ce:	690b      	ldr	r3, [r1, #16]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d10e      	bne.n	80050f2 <_svfiprintf_r+0x36>
 80050d4:	2140      	movs	r1, #64	; 0x40
 80050d6:	f7ff fefd 	bl	8004ed4 <_malloc_r>
 80050da:	6038      	str	r0, [r7, #0]
 80050dc:	6138      	str	r0, [r7, #16]
 80050de:	2800      	cmp	r0, #0
 80050e0:	d105      	bne.n	80050ee <_svfiprintf_r+0x32>
 80050e2:	230c      	movs	r3, #12
 80050e4:	9a03      	ldr	r2, [sp, #12]
 80050e6:	3801      	subs	r0, #1
 80050e8:	6013      	str	r3, [r2, #0]
 80050ea:	b021      	add	sp, #132	; 0x84
 80050ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050ee:	2340      	movs	r3, #64	; 0x40
 80050f0:	617b      	str	r3, [r7, #20]
 80050f2:	2300      	movs	r3, #0
 80050f4:	ac08      	add	r4, sp, #32
 80050f6:	6163      	str	r3, [r4, #20]
 80050f8:	3320      	adds	r3, #32
 80050fa:	7663      	strb	r3, [r4, #25]
 80050fc:	3310      	adds	r3, #16
 80050fe:	76a3      	strb	r3, [r4, #26]
 8005100:	9507      	str	r5, [sp, #28]
 8005102:	0035      	movs	r5, r6
 8005104:	782b      	ldrb	r3, [r5, #0]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d001      	beq.n	800510e <_svfiprintf_r+0x52>
 800510a:	2b25      	cmp	r3, #37	; 0x25
 800510c:	d148      	bne.n	80051a0 <_svfiprintf_r+0xe4>
 800510e:	1bab      	subs	r3, r5, r6
 8005110:	9305      	str	r3, [sp, #20]
 8005112:	42b5      	cmp	r5, r6
 8005114:	d00b      	beq.n	800512e <_svfiprintf_r+0x72>
 8005116:	0032      	movs	r2, r6
 8005118:	0039      	movs	r1, r7
 800511a:	9803      	ldr	r0, [sp, #12]
 800511c:	f7ff ff6c 	bl	8004ff8 <__ssputs_r>
 8005120:	3001      	adds	r0, #1
 8005122:	d100      	bne.n	8005126 <_svfiprintf_r+0x6a>
 8005124:	e0af      	b.n	8005286 <_svfiprintf_r+0x1ca>
 8005126:	6963      	ldr	r3, [r4, #20]
 8005128:	9a05      	ldr	r2, [sp, #20]
 800512a:	189b      	adds	r3, r3, r2
 800512c:	6163      	str	r3, [r4, #20]
 800512e:	782b      	ldrb	r3, [r5, #0]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d100      	bne.n	8005136 <_svfiprintf_r+0x7a>
 8005134:	e0a7      	b.n	8005286 <_svfiprintf_r+0x1ca>
 8005136:	2201      	movs	r2, #1
 8005138:	2300      	movs	r3, #0
 800513a:	4252      	negs	r2, r2
 800513c:	6062      	str	r2, [r4, #4]
 800513e:	a904      	add	r1, sp, #16
 8005140:	3254      	adds	r2, #84	; 0x54
 8005142:	1852      	adds	r2, r2, r1
 8005144:	1c6e      	adds	r6, r5, #1
 8005146:	6023      	str	r3, [r4, #0]
 8005148:	60e3      	str	r3, [r4, #12]
 800514a:	60a3      	str	r3, [r4, #8]
 800514c:	7013      	strb	r3, [r2, #0]
 800514e:	65a3      	str	r3, [r4, #88]	; 0x58
 8005150:	4b55      	ldr	r3, [pc, #340]	; (80052a8 <_svfiprintf_r+0x1ec>)
 8005152:	2205      	movs	r2, #5
 8005154:	0018      	movs	r0, r3
 8005156:	7831      	ldrb	r1, [r6, #0]
 8005158:	9305      	str	r3, [sp, #20]
 800515a:	f000 fa55 	bl	8005608 <memchr>
 800515e:	1c75      	adds	r5, r6, #1
 8005160:	2800      	cmp	r0, #0
 8005162:	d11f      	bne.n	80051a4 <_svfiprintf_r+0xe8>
 8005164:	6822      	ldr	r2, [r4, #0]
 8005166:	06d3      	lsls	r3, r2, #27
 8005168:	d504      	bpl.n	8005174 <_svfiprintf_r+0xb8>
 800516a:	2353      	movs	r3, #83	; 0x53
 800516c:	a904      	add	r1, sp, #16
 800516e:	185b      	adds	r3, r3, r1
 8005170:	2120      	movs	r1, #32
 8005172:	7019      	strb	r1, [r3, #0]
 8005174:	0713      	lsls	r3, r2, #28
 8005176:	d504      	bpl.n	8005182 <_svfiprintf_r+0xc6>
 8005178:	2353      	movs	r3, #83	; 0x53
 800517a:	a904      	add	r1, sp, #16
 800517c:	185b      	adds	r3, r3, r1
 800517e:	212b      	movs	r1, #43	; 0x2b
 8005180:	7019      	strb	r1, [r3, #0]
 8005182:	7833      	ldrb	r3, [r6, #0]
 8005184:	2b2a      	cmp	r3, #42	; 0x2a
 8005186:	d016      	beq.n	80051b6 <_svfiprintf_r+0xfa>
 8005188:	0035      	movs	r5, r6
 800518a:	2100      	movs	r1, #0
 800518c:	200a      	movs	r0, #10
 800518e:	68e3      	ldr	r3, [r4, #12]
 8005190:	782a      	ldrb	r2, [r5, #0]
 8005192:	1c6e      	adds	r6, r5, #1
 8005194:	3a30      	subs	r2, #48	; 0x30
 8005196:	2a09      	cmp	r2, #9
 8005198:	d94e      	bls.n	8005238 <_svfiprintf_r+0x17c>
 800519a:	2900      	cmp	r1, #0
 800519c:	d111      	bne.n	80051c2 <_svfiprintf_r+0x106>
 800519e:	e017      	b.n	80051d0 <_svfiprintf_r+0x114>
 80051a0:	3501      	adds	r5, #1
 80051a2:	e7af      	b.n	8005104 <_svfiprintf_r+0x48>
 80051a4:	9b05      	ldr	r3, [sp, #20]
 80051a6:	6822      	ldr	r2, [r4, #0]
 80051a8:	1ac0      	subs	r0, r0, r3
 80051aa:	2301      	movs	r3, #1
 80051ac:	4083      	lsls	r3, r0
 80051ae:	4313      	orrs	r3, r2
 80051b0:	002e      	movs	r6, r5
 80051b2:	6023      	str	r3, [r4, #0]
 80051b4:	e7cc      	b.n	8005150 <_svfiprintf_r+0x94>
 80051b6:	9b07      	ldr	r3, [sp, #28]
 80051b8:	1d19      	adds	r1, r3, #4
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	9107      	str	r1, [sp, #28]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	db01      	blt.n	80051c6 <_svfiprintf_r+0x10a>
 80051c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80051c4:	e004      	b.n	80051d0 <_svfiprintf_r+0x114>
 80051c6:	425b      	negs	r3, r3
 80051c8:	60e3      	str	r3, [r4, #12]
 80051ca:	2302      	movs	r3, #2
 80051cc:	4313      	orrs	r3, r2
 80051ce:	6023      	str	r3, [r4, #0]
 80051d0:	782b      	ldrb	r3, [r5, #0]
 80051d2:	2b2e      	cmp	r3, #46	; 0x2e
 80051d4:	d10a      	bne.n	80051ec <_svfiprintf_r+0x130>
 80051d6:	786b      	ldrb	r3, [r5, #1]
 80051d8:	2b2a      	cmp	r3, #42	; 0x2a
 80051da:	d135      	bne.n	8005248 <_svfiprintf_r+0x18c>
 80051dc:	9b07      	ldr	r3, [sp, #28]
 80051de:	3502      	adds	r5, #2
 80051e0:	1d1a      	adds	r2, r3, #4
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	9207      	str	r2, [sp, #28]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	db2b      	blt.n	8005242 <_svfiprintf_r+0x186>
 80051ea:	9309      	str	r3, [sp, #36]	; 0x24
 80051ec:	4e2f      	ldr	r6, [pc, #188]	; (80052ac <_svfiprintf_r+0x1f0>)
 80051ee:	2203      	movs	r2, #3
 80051f0:	0030      	movs	r0, r6
 80051f2:	7829      	ldrb	r1, [r5, #0]
 80051f4:	f000 fa08 	bl	8005608 <memchr>
 80051f8:	2800      	cmp	r0, #0
 80051fa:	d006      	beq.n	800520a <_svfiprintf_r+0x14e>
 80051fc:	2340      	movs	r3, #64	; 0x40
 80051fe:	1b80      	subs	r0, r0, r6
 8005200:	4083      	lsls	r3, r0
 8005202:	6822      	ldr	r2, [r4, #0]
 8005204:	3501      	adds	r5, #1
 8005206:	4313      	orrs	r3, r2
 8005208:	6023      	str	r3, [r4, #0]
 800520a:	7829      	ldrb	r1, [r5, #0]
 800520c:	2206      	movs	r2, #6
 800520e:	4828      	ldr	r0, [pc, #160]	; (80052b0 <_svfiprintf_r+0x1f4>)
 8005210:	1c6e      	adds	r6, r5, #1
 8005212:	7621      	strb	r1, [r4, #24]
 8005214:	f000 f9f8 	bl	8005608 <memchr>
 8005218:	2800      	cmp	r0, #0
 800521a:	d03c      	beq.n	8005296 <_svfiprintf_r+0x1da>
 800521c:	4b25      	ldr	r3, [pc, #148]	; (80052b4 <_svfiprintf_r+0x1f8>)
 800521e:	2b00      	cmp	r3, #0
 8005220:	d125      	bne.n	800526e <_svfiprintf_r+0x1b2>
 8005222:	2207      	movs	r2, #7
 8005224:	9b07      	ldr	r3, [sp, #28]
 8005226:	3307      	adds	r3, #7
 8005228:	4393      	bics	r3, r2
 800522a:	3308      	adds	r3, #8
 800522c:	9307      	str	r3, [sp, #28]
 800522e:	6963      	ldr	r3, [r4, #20]
 8005230:	9a04      	ldr	r2, [sp, #16]
 8005232:	189b      	adds	r3, r3, r2
 8005234:	6163      	str	r3, [r4, #20]
 8005236:	e764      	b.n	8005102 <_svfiprintf_r+0x46>
 8005238:	4343      	muls	r3, r0
 800523a:	0035      	movs	r5, r6
 800523c:	2101      	movs	r1, #1
 800523e:	189b      	adds	r3, r3, r2
 8005240:	e7a6      	b.n	8005190 <_svfiprintf_r+0xd4>
 8005242:	2301      	movs	r3, #1
 8005244:	425b      	negs	r3, r3
 8005246:	e7d0      	b.n	80051ea <_svfiprintf_r+0x12e>
 8005248:	2300      	movs	r3, #0
 800524a:	200a      	movs	r0, #10
 800524c:	001a      	movs	r2, r3
 800524e:	3501      	adds	r5, #1
 8005250:	6063      	str	r3, [r4, #4]
 8005252:	7829      	ldrb	r1, [r5, #0]
 8005254:	1c6e      	adds	r6, r5, #1
 8005256:	3930      	subs	r1, #48	; 0x30
 8005258:	2909      	cmp	r1, #9
 800525a:	d903      	bls.n	8005264 <_svfiprintf_r+0x1a8>
 800525c:	2b00      	cmp	r3, #0
 800525e:	d0c5      	beq.n	80051ec <_svfiprintf_r+0x130>
 8005260:	9209      	str	r2, [sp, #36]	; 0x24
 8005262:	e7c3      	b.n	80051ec <_svfiprintf_r+0x130>
 8005264:	4342      	muls	r2, r0
 8005266:	0035      	movs	r5, r6
 8005268:	2301      	movs	r3, #1
 800526a:	1852      	adds	r2, r2, r1
 800526c:	e7f1      	b.n	8005252 <_svfiprintf_r+0x196>
 800526e:	aa07      	add	r2, sp, #28
 8005270:	9200      	str	r2, [sp, #0]
 8005272:	0021      	movs	r1, r4
 8005274:	003a      	movs	r2, r7
 8005276:	4b10      	ldr	r3, [pc, #64]	; (80052b8 <_svfiprintf_r+0x1fc>)
 8005278:	9803      	ldr	r0, [sp, #12]
 800527a:	e000      	b.n	800527e <_svfiprintf_r+0x1c2>
 800527c:	bf00      	nop
 800527e:	9004      	str	r0, [sp, #16]
 8005280:	9b04      	ldr	r3, [sp, #16]
 8005282:	3301      	adds	r3, #1
 8005284:	d1d3      	bne.n	800522e <_svfiprintf_r+0x172>
 8005286:	89bb      	ldrh	r3, [r7, #12]
 8005288:	980d      	ldr	r0, [sp, #52]	; 0x34
 800528a:	065b      	lsls	r3, r3, #25
 800528c:	d400      	bmi.n	8005290 <_svfiprintf_r+0x1d4>
 800528e:	e72c      	b.n	80050ea <_svfiprintf_r+0x2e>
 8005290:	2001      	movs	r0, #1
 8005292:	4240      	negs	r0, r0
 8005294:	e729      	b.n	80050ea <_svfiprintf_r+0x2e>
 8005296:	aa07      	add	r2, sp, #28
 8005298:	9200      	str	r2, [sp, #0]
 800529a:	0021      	movs	r1, r4
 800529c:	003a      	movs	r2, r7
 800529e:	4b06      	ldr	r3, [pc, #24]	; (80052b8 <_svfiprintf_r+0x1fc>)
 80052a0:	9803      	ldr	r0, [sp, #12]
 80052a2:	f000 f87b 	bl	800539c <_printf_i>
 80052a6:	e7ea      	b.n	800527e <_svfiprintf_r+0x1c2>
 80052a8:	080070fd 	.word	0x080070fd
 80052ac:	08007103 	.word	0x08007103
 80052b0:	08007107 	.word	0x08007107
 80052b4:	00000000 	.word	0x00000000
 80052b8:	08004ff9 	.word	0x08004ff9

080052bc <_printf_common>:
 80052bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80052be:	0016      	movs	r6, r2
 80052c0:	9301      	str	r3, [sp, #4]
 80052c2:	688a      	ldr	r2, [r1, #8]
 80052c4:	690b      	ldr	r3, [r1, #16]
 80052c6:	000c      	movs	r4, r1
 80052c8:	9000      	str	r0, [sp, #0]
 80052ca:	4293      	cmp	r3, r2
 80052cc:	da00      	bge.n	80052d0 <_printf_common+0x14>
 80052ce:	0013      	movs	r3, r2
 80052d0:	0022      	movs	r2, r4
 80052d2:	6033      	str	r3, [r6, #0]
 80052d4:	3243      	adds	r2, #67	; 0x43
 80052d6:	7812      	ldrb	r2, [r2, #0]
 80052d8:	2a00      	cmp	r2, #0
 80052da:	d001      	beq.n	80052e0 <_printf_common+0x24>
 80052dc:	3301      	adds	r3, #1
 80052de:	6033      	str	r3, [r6, #0]
 80052e0:	6823      	ldr	r3, [r4, #0]
 80052e2:	069b      	lsls	r3, r3, #26
 80052e4:	d502      	bpl.n	80052ec <_printf_common+0x30>
 80052e6:	6833      	ldr	r3, [r6, #0]
 80052e8:	3302      	adds	r3, #2
 80052ea:	6033      	str	r3, [r6, #0]
 80052ec:	6822      	ldr	r2, [r4, #0]
 80052ee:	2306      	movs	r3, #6
 80052f0:	0015      	movs	r5, r2
 80052f2:	401d      	ands	r5, r3
 80052f4:	421a      	tst	r2, r3
 80052f6:	d027      	beq.n	8005348 <_printf_common+0x8c>
 80052f8:	0023      	movs	r3, r4
 80052fa:	3343      	adds	r3, #67	; 0x43
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	1e5a      	subs	r2, r3, #1
 8005300:	4193      	sbcs	r3, r2
 8005302:	6822      	ldr	r2, [r4, #0]
 8005304:	0692      	lsls	r2, r2, #26
 8005306:	d430      	bmi.n	800536a <_printf_common+0xae>
 8005308:	0022      	movs	r2, r4
 800530a:	9901      	ldr	r1, [sp, #4]
 800530c:	9800      	ldr	r0, [sp, #0]
 800530e:	9d08      	ldr	r5, [sp, #32]
 8005310:	3243      	adds	r2, #67	; 0x43
 8005312:	47a8      	blx	r5
 8005314:	3001      	adds	r0, #1
 8005316:	d025      	beq.n	8005364 <_printf_common+0xa8>
 8005318:	2206      	movs	r2, #6
 800531a:	6823      	ldr	r3, [r4, #0]
 800531c:	2500      	movs	r5, #0
 800531e:	4013      	ands	r3, r2
 8005320:	2b04      	cmp	r3, #4
 8005322:	d105      	bne.n	8005330 <_printf_common+0x74>
 8005324:	6833      	ldr	r3, [r6, #0]
 8005326:	68e5      	ldr	r5, [r4, #12]
 8005328:	1aed      	subs	r5, r5, r3
 800532a:	43eb      	mvns	r3, r5
 800532c:	17db      	asrs	r3, r3, #31
 800532e:	401d      	ands	r5, r3
 8005330:	68a3      	ldr	r3, [r4, #8]
 8005332:	6922      	ldr	r2, [r4, #16]
 8005334:	4293      	cmp	r3, r2
 8005336:	dd01      	ble.n	800533c <_printf_common+0x80>
 8005338:	1a9b      	subs	r3, r3, r2
 800533a:	18ed      	adds	r5, r5, r3
 800533c:	2600      	movs	r6, #0
 800533e:	42b5      	cmp	r5, r6
 8005340:	d120      	bne.n	8005384 <_printf_common+0xc8>
 8005342:	2000      	movs	r0, #0
 8005344:	e010      	b.n	8005368 <_printf_common+0xac>
 8005346:	3501      	adds	r5, #1
 8005348:	68e3      	ldr	r3, [r4, #12]
 800534a:	6832      	ldr	r2, [r6, #0]
 800534c:	1a9b      	subs	r3, r3, r2
 800534e:	42ab      	cmp	r3, r5
 8005350:	ddd2      	ble.n	80052f8 <_printf_common+0x3c>
 8005352:	0022      	movs	r2, r4
 8005354:	2301      	movs	r3, #1
 8005356:	9901      	ldr	r1, [sp, #4]
 8005358:	9800      	ldr	r0, [sp, #0]
 800535a:	9f08      	ldr	r7, [sp, #32]
 800535c:	3219      	adds	r2, #25
 800535e:	47b8      	blx	r7
 8005360:	3001      	adds	r0, #1
 8005362:	d1f0      	bne.n	8005346 <_printf_common+0x8a>
 8005364:	2001      	movs	r0, #1
 8005366:	4240      	negs	r0, r0
 8005368:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800536a:	2030      	movs	r0, #48	; 0x30
 800536c:	18e1      	adds	r1, r4, r3
 800536e:	3143      	adds	r1, #67	; 0x43
 8005370:	7008      	strb	r0, [r1, #0]
 8005372:	0021      	movs	r1, r4
 8005374:	1c5a      	adds	r2, r3, #1
 8005376:	3145      	adds	r1, #69	; 0x45
 8005378:	7809      	ldrb	r1, [r1, #0]
 800537a:	18a2      	adds	r2, r4, r2
 800537c:	3243      	adds	r2, #67	; 0x43
 800537e:	3302      	adds	r3, #2
 8005380:	7011      	strb	r1, [r2, #0]
 8005382:	e7c1      	b.n	8005308 <_printf_common+0x4c>
 8005384:	0022      	movs	r2, r4
 8005386:	2301      	movs	r3, #1
 8005388:	9901      	ldr	r1, [sp, #4]
 800538a:	9800      	ldr	r0, [sp, #0]
 800538c:	9f08      	ldr	r7, [sp, #32]
 800538e:	321a      	adds	r2, #26
 8005390:	47b8      	blx	r7
 8005392:	3001      	adds	r0, #1
 8005394:	d0e6      	beq.n	8005364 <_printf_common+0xa8>
 8005396:	3601      	adds	r6, #1
 8005398:	e7d1      	b.n	800533e <_printf_common+0x82>
	...

0800539c <_printf_i>:
 800539c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800539e:	b08b      	sub	sp, #44	; 0x2c
 80053a0:	9206      	str	r2, [sp, #24]
 80053a2:	000a      	movs	r2, r1
 80053a4:	3243      	adds	r2, #67	; 0x43
 80053a6:	9307      	str	r3, [sp, #28]
 80053a8:	9005      	str	r0, [sp, #20]
 80053aa:	9204      	str	r2, [sp, #16]
 80053ac:	7e0a      	ldrb	r2, [r1, #24]
 80053ae:	000c      	movs	r4, r1
 80053b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80053b2:	2a78      	cmp	r2, #120	; 0x78
 80053b4:	d809      	bhi.n	80053ca <_printf_i+0x2e>
 80053b6:	2a62      	cmp	r2, #98	; 0x62
 80053b8:	d80b      	bhi.n	80053d2 <_printf_i+0x36>
 80053ba:	2a00      	cmp	r2, #0
 80053bc:	d100      	bne.n	80053c0 <_printf_i+0x24>
 80053be:	e0be      	b.n	800553e <_printf_i+0x1a2>
 80053c0:	497c      	ldr	r1, [pc, #496]	; (80055b4 <_printf_i+0x218>)
 80053c2:	9103      	str	r1, [sp, #12]
 80053c4:	2a58      	cmp	r2, #88	; 0x58
 80053c6:	d100      	bne.n	80053ca <_printf_i+0x2e>
 80053c8:	e093      	b.n	80054f2 <_printf_i+0x156>
 80053ca:	0026      	movs	r6, r4
 80053cc:	3642      	adds	r6, #66	; 0x42
 80053ce:	7032      	strb	r2, [r6, #0]
 80053d0:	e022      	b.n	8005418 <_printf_i+0x7c>
 80053d2:	0010      	movs	r0, r2
 80053d4:	3863      	subs	r0, #99	; 0x63
 80053d6:	2815      	cmp	r0, #21
 80053d8:	d8f7      	bhi.n	80053ca <_printf_i+0x2e>
 80053da:	f7fa fe9b 	bl	8000114 <__gnu_thumb1_case_shi>
 80053de:	0016      	.short	0x0016
 80053e0:	fff6001f 	.word	0xfff6001f
 80053e4:	fff6fff6 	.word	0xfff6fff6
 80053e8:	001ffff6 	.word	0x001ffff6
 80053ec:	fff6fff6 	.word	0xfff6fff6
 80053f0:	fff6fff6 	.word	0xfff6fff6
 80053f4:	003600a3 	.word	0x003600a3
 80053f8:	fff60083 	.word	0xfff60083
 80053fc:	00b4fff6 	.word	0x00b4fff6
 8005400:	0036fff6 	.word	0x0036fff6
 8005404:	fff6fff6 	.word	0xfff6fff6
 8005408:	0087      	.short	0x0087
 800540a:	0026      	movs	r6, r4
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	3642      	adds	r6, #66	; 0x42
 8005410:	1d11      	adds	r1, r2, #4
 8005412:	6019      	str	r1, [r3, #0]
 8005414:	6813      	ldr	r3, [r2, #0]
 8005416:	7033      	strb	r3, [r6, #0]
 8005418:	2301      	movs	r3, #1
 800541a:	e0a2      	b.n	8005562 <_printf_i+0x1c6>
 800541c:	6818      	ldr	r0, [r3, #0]
 800541e:	6809      	ldr	r1, [r1, #0]
 8005420:	1d02      	adds	r2, r0, #4
 8005422:	060d      	lsls	r5, r1, #24
 8005424:	d50b      	bpl.n	800543e <_printf_i+0xa2>
 8005426:	6805      	ldr	r5, [r0, #0]
 8005428:	601a      	str	r2, [r3, #0]
 800542a:	2d00      	cmp	r5, #0
 800542c:	da03      	bge.n	8005436 <_printf_i+0x9a>
 800542e:	232d      	movs	r3, #45	; 0x2d
 8005430:	9a04      	ldr	r2, [sp, #16]
 8005432:	426d      	negs	r5, r5
 8005434:	7013      	strb	r3, [r2, #0]
 8005436:	4b5f      	ldr	r3, [pc, #380]	; (80055b4 <_printf_i+0x218>)
 8005438:	270a      	movs	r7, #10
 800543a:	9303      	str	r3, [sp, #12]
 800543c:	e01b      	b.n	8005476 <_printf_i+0xda>
 800543e:	6805      	ldr	r5, [r0, #0]
 8005440:	601a      	str	r2, [r3, #0]
 8005442:	0649      	lsls	r1, r1, #25
 8005444:	d5f1      	bpl.n	800542a <_printf_i+0x8e>
 8005446:	b22d      	sxth	r5, r5
 8005448:	e7ef      	b.n	800542a <_printf_i+0x8e>
 800544a:	680d      	ldr	r5, [r1, #0]
 800544c:	6819      	ldr	r1, [r3, #0]
 800544e:	1d08      	adds	r0, r1, #4
 8005450:	6018      	str	r0, [r3, #0]
 8005452:	062e      	lsls	r6, r5, #24
 8005454:	d501      	bpl.n	800545a <_printf_i+0xbe>
 8005456:	680d      	ldr	r5, [r1, #0]
 8005458:	e003      	b.n	8005462 <_printf_i+0xc6>
 800545a:	066d      	lsls	r5, r5, #25
 800545c:	d5fb      	bpl.n	8005456 <_printf_i+0xba>
 800545e:	680d      	ldr	r5, [r1, #0]
 8005460:	b2ad      	uxth	r5, r5
 8005462:	4b54      	ldr	r3, [pc, #336]	; (80055b4 <_printf_i+0x218>)
 8005464:	2708      	movs	r7, #8
 8005466:	9303      	str	r3, [sp, #12]
 8005468:	2a6f      	cmp	r2, #111	; 0x6f
 800546a:	d000      	beq.n	800546e <_printf_i+0xd2>
 800546c:	3702      	adds	r7, #2
 800546e:	0023      	movs	r3, r4
 8005470:	2200      	movs	r2, #0
 8005472:	3343      	adds	r3, #67	; 0x43
 8005474:	701a      	strb	r2, [r3, #0]
 8005476:	6863      	ldr	r3, [r4, #4]
 8005478:	60a3      	str	r3, [r4, #8]
 800547a:	2b00      	cmp	r3, #0
 800547c:	db03      	blt.n	8005486 <_printf_i+0xea>
 800547e:	2104      	movs	r1, #4
 8005480:	6822      	ldr	r2, [r4, #0]
 8005482:	438a      	bics	r2, r1
 8005484:	6022      	str	r2, [r4, #0]
 8005486:	2d00      	cmp	r5, #0
 8005488:	d102      	bne.n	8005490 <_printf_i+0xf4>
 800548a:	9e04      	ldr	r6, [sp, #16]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d00c      	beq.n	80054aa <_printf_i+0x10e>
 8005490:	9e04      	ldr	r6, [sp, #16]
 8005492:	0028      	movs	r0, r5
 8005494:	0039      	movs	r1, r7
 8005496:	f7fa fecd 	bl	8000234 <__aeabi_uidivmod>
 800549a:	9b03      	ldr	r3, [sp, #12]
 800549c:	3e01      	subs	r6, #1
 800549e:	5c5b      	ldrb	r3, [r3, r1]
 80054a0:	7033      	strb	r3, [r6, #0]
 80054a2:	002b      	movs	r3, r5
 80054a4:	0005      	movs	r5, r0
 80054a6:	429f      	cmp	r7, r3
 80054a8:	d9f3      	bls.n	8005492 <_printf_i+0xf6>
 80054aa:	2f08      	cmp	r7, #8
 80054ac:	d109      	bne.n	80054c2 <_printf_i+0x126>
 80054ae:	6823      	ldr	r3, [r4, #0]
 80054b0:	07db      	lsls	r3, r3, #31
 80054b2:	d506      	bpl.n	80054c2 <_printf_i+0x126>
 80054b4:	6862      	ldr	r2, [r4, #4]
 80054b6:	6923      	ldr	r3, [r4, #16]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	dc02      	bgt.n	80054c2 <_printf_i+0x126>
 80054bc:	2330      	movs	r3, #48	; 0x30
 80054be:	3e01      	subs	r6, #1
 80054c0:	7033      	strb	r3, [r6, #0]
 80054c2:	9b04      	ldr	r3, [sp, #16]
 80054c4:	1b9b      	subs	r3, r3, r6
 80054c6:	6123      	str	r3, [r4, #16]
 80054c8:	9b07      	ldr	r3, [sp, #28]
 80054ca:	0021      	movs	r1, r4
 80054cc:	9300      	str	r3, [sp, #0]
 80054ce:	9805      	ldr	r0, [sp, #20]
 80054d0:	9b06      	ldr	r3, [sp, #24]
 80054d2:	aa09      	add	r2, sp, #36	; 0x24
 80054d4:	f7ff fef2 	bl	80052bc <_printf_common>
 80054d8:	3001      	adds	r0, #1
 80054da:	d147      	bne.n	800556c <_printf_i+0x1d0>
 80054dc:	2001      	movs	r0, #1
 80054de:	4240      	negs	r0, r0
 80054e0:	b00b      	add	sp, #44	; 0x2c
 80054e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054e4:	2220      	movs	r2, #32
 80054e6:	6809      	ldr	r1, [r1, #0]
 80054e8:	430a      	orrs	r2, r1
 80054ea:	6022      	str	r2, [r4, #0]
 80054ec:	2278      	movs	r2, #120	; 0x78
 80054ee:	4932      	ldr	r1, [pc, #200]	; (80055b8 <_printf_i+0x21c>)
 80054f0:	9103      	str	r1, [sp, #12]
 80054f2:	0021      	movs	r1, r4
 80054f4:	3145      	adds	r1, #69	; 0x45
 80054f6:	700a      	strb	r2, [r1, #0]
 80054f8:	6819      	ldr	r1, [r3, #0]
 80054fa:	6822      	ldr	r2, [r4, #0]
 80054fc:	c920      	ldmia	r1!, {r5}
 80054fe:	0610      	lsls	r0, r2, #24
 8005500:	d402      	bmi.n	8005508 <_printf_i+0x16c>
 8005502:	0650      	lsls	r0, r2, #25
 8005504:	d500      	bpl.n	8005508 <_printf_i+0x16c>
 8005506:	b2ad      	uxth	r5, r5
 8005508:	6019      	str	r1, [r3, #0]
 800550a:	07d3      	lsls	r3, r2, #31
 800550c:	d502      	bpl.n	8005514 <_printf_i+0x178>
 800550e:	2320      	movs	r3, #32
 8005510:	4313      	orrs	r3, r2
 8005512:	6023      	str	r3, [r4, #0]
 8005514:	2710      	movs	r7, #16
 8005516:	2d00      	cmp	r5, #0
 8005518:	d1a9      	bne.n	800546e <_printf_i+0xd2>
 800551a:	2220      	movs	r2, #32
 800551c:	6823      	ldr	r3, [r4, #0]
 800551e:	4393      	bics	r3, r2
 8005520:	6023      	str	r3, [r4, #0]
 8005522:	e7a4      	b.n	800546e <_printf_i+0xd2>
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	680d      	ldr	r5, [r1, #0]
 8005528:	1d10      	adds	r0, r2, #4
 800552a:	6949      	ldr	r1, [r1, #20]
 800552c:	6018      	str	r0, [r3, #0]
 800552e:	6813      	ldr	r3, [r2, #0]
 8005530:	062e      	lsls	r6, r5, #24
 8005532:	d501      	bpl.n	8005538 <_printf_i+0x19c>
 8005534:	6019      	str	r1, [r3, #0]
 8005536:	e002      	b.n	800553e <_printf_i+0x1a2>
 8005538:	066d      	lsls	r5, r5, #25
 800553a:	d5fb      	bpl.n	8005534 <_printf_i+0x198>
 800553c:	8019      	strh	r1, [r3, #0]
 800553e:	2300      	movs	r3, #0
 8005540:	9e04      	ldr	r6, [sp, #16]
 8005542:	6123      	str	r3, [r4, #16]
 8005544:	e7c0      	b.n	80054c8 <_printf_i+0x12c>
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	1d11      	adds	r1, r2, #4
 800554a:	6019      	str	r1, [r3, #0]
 800554c:	6816      	ldr	r6, [r2, #0]
 800554e:	2100      	movs	r1, #0
 8005550:	0030      	movs	r0, r6
 8005552:	6862      	ldr	r2, [r4, #4]
 8005554:	f000 f858 	bl	8005608 <memchr>
 8005558:	2800      	cmp	r0, #0
 800555a:	d001      	beq.n	8005560 <_printf_i+0x1c4>
 800555c:	1b80      	subs	r0, r0, r6
 800555e:	6060      	str	r0, [r4, #4]
 8005560:	6863      	ldr	r3, [r4, #4]
 8005562:	6123      	str	r3, [r4, #16]
 8005564:	2300      	movs	r3, #0
 8005566:	9a04      	ldr	r2, [sp, #16]
 8005568:	7013      	strb	r3, [r2, #0]
 800556a:	e7ad      	b.n	80054c8 <_printf_i+0x12c>
 800556c:	0032      	movs	r2, r6
 800556e:	6923      	ldr	r3, [r4, #16]
 8005570:	9906      	ldr	r1, [sp, #24]
 8005572:	9805      	ldr	r0, [sp, #20]
 8005574:	9d07      	ldr	r5, [sp, #28]
 8005576:	47a8      	blx	r5
 8005578:	3001      	adds	r0, #1
 800557a:	d0af      	beq.n	80054dc <_printf_i+0x140>
 800557c:	6823      	ldr	r3, [r4, #0]
 800557e:	079b      	lsls	r3, r3, #30
 8005580:	d415      	bmi.n	80055ae <_printf_i+0x212>
 8005582:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005584:	68e0      	ldr	r0, [r4, #12]
 8005586:	4298      	cmp	r0, r3
 8005588:	daaa      	bge.n	80054e0 <_printf_i+0x144>
 800558a:	0018      	movs	r0, r3
 800558c:	e7a8      	b.n	80054e0 <_printf_i+0x144>
 800558e:	0022      	movs	r2, r4
 8005590:	2301      	movs	r3, #1
 8005592:	9906      	ldr	r1, [sp, #24]
 8005594:	9805      	ldr	r0, [sp, #20]
 8005596:	9e07      	ldr	r6, [sp, #28]
 8005598:	3219      	adds	r2, #25
 800559a:	47b0      	blx	r6
 800559c:	3001      	adds	r0, #1
 800559e:	d09d      	beq.n	80054dc <_printf_i+0x140>
 80055a0:	3501      	adds	r5, #1
 80055a2:	68e3      	ldr	r3, [r4, #12]
 80055a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80055a6:	1a9b      	subs	r3, r3, r2
 80055a8:	42ab      	cmp	r3, r5
 80055aa:	dcf0      	bgt.n	800558e <_printf_i+0x1f2>
 80055ac:	e7e9      	b.n	8005582 <_printf_i+0x1e6>
 80055ae:	2500      	movs	r5, #0
 80055b0:	e7f7      	b.n	80055a2 <_printf_i+0x206>
 80055b2:	46c0      	nop			; (mov r8, r8)
 80055b4:	0800710e 	.word	0x0800710e
 80055b8:	0800711f 	.word	0x0800711f

080055bc <memmove>:
 80055bc:	b510      	push	{r4, lr}
 80055be:	4288      	cmp	r0, r1
 80055c0:	d902      	bls.n	80055c8 <memmove+0xc>
 80055c2:	188b      	adds	r3, r1, r2
 80055c4:	4298      	cmp	r0, r3
 80055c6:	d303      	bcc.n	80055d0 <memmove+0x14>
 80055c8:	2300      	movs	r3, #0
 80055ca:	e007      	b.n	80055dc <memmove+0x20>
 80055cc:	5c8b      	ldrb	r3, [r1, r2]
 80055ce:	5483      	strb	r3, [r0, r2]
 80055d0:	3a01      	subs	r2, #1
 80055d2:	d2fb      	bcs.n	80055cc <memmove+0x10>
 80055d4:	bd10      	pop	{r4, pc}
 80055d6:	5ccc      	ldrb	r4, [r1, r3]
 80055d8:	54c4      	strb	r4, [r0, r3]
 80055da:	3301      	adds	r3, #1
 80055dc:	429a      	cmp	r2, r3
 80055de:	d1fa      	bne.n	80055d6 <memmove+0x1a>
 80055e0:	e7f8      	b.n	80055d4 <memmove+0x18>
	...

080055e4 <_sbrk_r>:
 80055e4:	2300      	movs	r3, #0
 80055e6:	b570      	push	{r4, r5, r6, lr}
 80055e8:	4d06      	ldr	r5, [pc, #24]	; (8005604 <_sbrk_r+0x20>)
 80055ea:	0004      	movs	r4, r0
 80055ec:	0008      	movs	r0, r1
 80055ee:	602b      	str	r3, [r5, #0]
 80055f0:	f7fb fbfa 	bl	8000de8 <_sbrk>
 80055f4:	1c43      	adds	r3, r0, #1
 80055f6:	d103      	bne.n	8005600 <_sbrk_r+0x1c>
 80055f8:	682b      	ldr	r3, [r5, #0]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d000      	beq.n	8005600 <_sbrk_r+0x1c>
 80055fe:	6023      	str	r3, [r4, #0]
 8005600:	bd70      	pop	{r4, r5, r6, pc}
 8005602:	46c0      	nop			; (mov r8, r8)
 8005604:	200004a8 	.word	0x200004a8

08005608 <memchr>:
 8005608:	b2c9      	uxtb	r1, r1
 800560a:	1882      	adds	r2, r0, r2
 800560c:	4290      	cmp	r0, r2
 800560e:	d101      	bne.n	8005614 <memchr+0xc>
 8005610:	2000      	movs	r0, #0
 8005612:	4770      	bx	lr
 8005614:	7803      	ldrb	r3, [r0, #0]
 8005616:	428b      	cmp	r3, r1
 8005618:	d0fb      	beq.n	8005612 <memchr+0xa>
 800561a:	3001      	adds	r0, #1
 800561c:	e7f6      	b.n	800560c <memchr+0x4>

0800561e <_realloc_r>:
 800561e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005620:	0007      	movs	r7, r0
 8005622:	000e      	movs	r6, r1
 8005624:	0014      	movs	r4, r2
 8005626:	2900      	cmp	r1, #0
 8005628:	d105      	bne.n	8005636 <_realloc_r+0x18>
 800562a:	0011      	movs	r1, r2
 800562c:	f7ff fc52 	bl	8004ed4 <_malloc_r>
 8005630:	0005      	movs	r5, r0
 8005632:	0028      	movs	r0, r5
 8005634:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005636:	2a00      	cmp	r2, #0
 8005638:	d103      	bne.n	8005642 <_realloc_r+0x24>
 800563a:	f7ff fbdf 	bl	8004dfc <_free_r>
 800563e:	0025      	movs	r5, r4
 8005640:	e7f7      	b.n	8005632 <_realloc_r+0x14>
 8005642:	f000 f81b 	bl	800567c <_malloc_usable_size_r>
 8005646:	9001      	str	r0, [sp, #4]
 8005648:	4284      	cmp	r4, r0
 800564a:	d803      	bhi.n	8005654 <_realloc_r+0x36>
 800564c:	0035      	movs	r5, r6
 800564e:	0843      	lsrs	r3, r0, #1
 8005650:	42a3      	cmp	r3, r4
 8005652:	d3ee      	bcc.n	8005632 <_realloc_r+0x14>
 8005654:	0021      	movs	r1, r4
 8005656:	0038      	movs	r0, r7
 8005658:	f7ff fc3c 	bl	8004ed4 <_malloc_r>
 800565c:	1e05      	subs	r5, r0, #0
 800565e:	d0e8      	beq.n	8005632 <_realloc_r+0x14>
 8005660:	9b01      	ldr	r3, [sp, #4]
 8005662:	0022      	movs	r2, r4
 8005664:	429c      	cmp	r4, r3
 8005666:	d900      	bls.n	800566a <_realloc_r+0x4c>
 8005668:	001a      	movs	r2, r3
 800566a:	0031      	movs	r1, r6
 800566c:	0028      	movs	r0, r5
 800566e:	f7ff fbbb 	bl	8004de8 <memcpy>
 8005672:	0031      	movs	r1, r6
 8005674:	0038      	movs	r0, r7
 8005676:	f7ff fbc1 	bl	8004dfc <_free_r>
 800567a:	e7da      	b.n	8005632 <_realloc_r+0x14>

0800567c <_malloc_usable_size_r>:
 800567c:	1f0b      	subs	r3, r1, #4
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	1f18      	subs	r0, r3, #4
 8005682:	2b00      	cmp	r3, #0
 8005684:	da01      	bge.n	800568a <_malloc_usable_size_r+0xe>
 8005686:	580b      	ldr	r3, [r1, r0]
 8005688:	18c0      	adds	r0, r0, r3
 800568a:	4770      	bx	lr

0800568c <_init>:
 800568c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800568e:	46c0      	nop			; (mov r8, r8)
 8005690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005692:	bc08      	pop	{r3}
 8005694:	469e      	mov	lr, r3
 8005696:	4770      	bx	lr

08005698 <_fini>:
 8005698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800569a:	46c0      	nop			; (mov r8, r8)
 800569c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800569e:	bc08      	pop	{r3}
 80056a0:	469e      	mov	lr, r3
 80056a2:	4770      	bx	lr
