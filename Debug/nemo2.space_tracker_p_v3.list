
nemo2.space_tracker_p_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003040  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  080030fc  080030fc  000130fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031e4  080031e4  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080031e4  080031e4  000131e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080031ec  080031ec  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031ec  080031ec  000131ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080031f0  080031f0  000131f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080031f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001dc  20000010  08003204  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ec  08003204  000201ec  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b139  00000000  00000000  0002007b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a50  00000000  00000000  0002b1b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008d0  00000000  00000000  0002cc08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006ce  00000000  00000000  0002d4d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b61f  00000000  00000000  0002dba6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bbc8  00000000  00000000  000491c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b0c10  00000000  00000000  00054d8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001e9c  00000000  00000000  001059a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  0010783c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000010 	.word	0x20000010
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080030e4 	.word	0x080030e4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000014 	.word	0x20000014
 8000100:	080030e4 	.word	0x080030e4

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	; 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f8f0 	bl	80003fc <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__divsi3>:
 8000228:	4603      	mov	r3, r0
 800022a:	430b      	orrs	r3, r1
 800022c:	d47f      	bmi.n	800032e <__divsi3+0x106>
 800022e:	2200      	movs	r2, #0
 8000230:	0843      	lsrs	r3, r0, #1
 8000232:	428b      	cmp	r3, r1
 8000234:	d374      	bcc.n	8000320 <__divsi3+0xf8>
 8000236:	0903      	lsrs	r3, r0, #4
 8000238:	428b      	cmp	r3, r1
 800023a:	d35f      	bcc.n	80002fc <__divsi3+0xd4>
 800023c:	0a03      	lsrs	r3, r0, #8
 800023e:	428b      	cmp	r3, r1
 8000240:	d344      	bcc.n	80002cc <__divsi3+0xa4>
 8000242:	0b03      	lsrs	r3, r0, #12
 8000244:	428b      	cmp	r3, r1
 8000246:	d328      	bcc.n	800029a <__divsi3+0x72>
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d30d      	bcc.n	800026a <__divsi3+0x42>
 800024e:	22ff      	movs	r2, #255	; 0xff
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	ba12      	rev	r2, r2
 8000254:	0c03      	lsrs	r3, r0, #16
 8000256:	428b      	cmp	r3, r1
 8000258:	d302      	bcc.n	8000260 <__divsi3+0x38>
 800025a:	1212      	asrs	r2, r2, #8
 800025c:	0209      	lsls	r1, r1, #8
 800025e:	d065      	beq.n	800032c <__divsi3+0x104>
 8000260:	0b03      	lsrs	r3, r0, #12
 8000262:	428b      	cmp	r3, r1
 8000264:	d319      	bcc.n	800029a <__divsi3+0x72>
 8000266:	e000      	b.n	800026a <__divsi3+0x42>
 8000268:	0a09      	lsrs	r1, r1, #8
 800026a:	0bc3      	lsrs	r3, r0, #15
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x4c>
 8000270:	03cb      	lsls	r3, r1, #15
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b83      	lsrs	r3, r0, #14
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x58>
 800027c:	038b      	lsls	r3, r1, #14
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b43      	lsrs	r3, r0, #13
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x64>
 8000288:	034b      	lsls	r3, r1, #13
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b03      	lsrs	r3, r0, #12
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x70>
 8000294:	030b      	lsls	r3, r1, #12
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0ac3      	lsrs	r3, r0, #11
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x7c>
 80002a0:	02cb      	lsls	r3, r1, #11
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a83      	lsrs	r3, r0, #10
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x88>
 80002ac:	028b      	lsls	r3, r1, #10
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a43      	lsrs	r3, r0, #9
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x94>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a03      	lsrs	r3, r0, #8
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0xa0>
 80002c4:	020b      	lsls	r3, r1, #8
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	d2cd      	bcs.n	8000268 <__divsi3+0x40>
 80002cc:	09c3      	lsrs	r3, r0, #7
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xae>
 80002d2:	01cb      	lsls	r3, r1, #7
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0983      	lsrs	r3, r0, #6
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xba>
 80002de:	018b      	lsls	r3, r1, #6
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0943      	lsrs	r3, r0, #5
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xc6>
 80002ea:	014b      	lsls	r3, r1, #5
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0903      	lsrs	r3, r0, #4
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xd2>
 80002f6:	010b      	lsls	r3, r1, #4
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	08c3      	lsrs	r3, r0, #3
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xde>
 8000302:	00cb      	lsls	r3, r1, #3
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0883      	lsrs	r3, r0, #2
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xea>
 800030e:	008b      	lsls	r3, r1, #2
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0843      	lsrs	r3, r0, #1
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xf6>
 800031a:	004b      	lsls	r3, r1, #1
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	1a41      	subs	r1, r0, r1
 8000322:	d200      	bcs.n	8000326 <__divsi3+0xfe>
 8000324:	4601      	mov	r1, r0
 8000326:	4152      	adcs	r2, r2
 8000328:	4610      	mov	r0, r2
 800032a:	4770      	bx	lr
 800032c:	e05d      	b.n	80003ea <__divsi3+0x1c2>
 800032e:	0fca      	lsrs	r2, r1, #31
 8000330:	d000      	beq.n	8000334 <__divsi3+0x10c>
 8000332:	4249      	negs	r1, r1
 8000334:	1003      	asrs	r3, r0, #32
 8000336:	d300      	bcc.n	800033a <__divsi3+0x112>
 8000338:	4240      	negs	r0, r0
 800033a:	4053      	eors	r3, r2
 800033c:	2200      	movs	r2, #0
 800033e:	469c      	mov	ip, r3
 8000340:	0903      	lsrs	r3, r0, #4
 8000342:	428b      	cmp	r3, r1
 8000344:	d32d      	bcc.n	80003a2 <__divsi3+0x17a>
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d312      	bcc.n	8000372 <__divsi3+0x14a>
 800034c:	22fc      	movs	r2, #252	; 0xfc
 800034e:	0189      	lsls	r1, r1, #6
 8000350:	ba12      	rev	r2, r2
 8000352:	0a03      	lsrs	r3, r0, #8
 8000354:	428b      	cmp	r3, r1
 8000356:	d30c      	bcc.n	8000372 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	1192      	asrs	r2, r2, #6
 800035c:	428b      	cmp	r3, r1
 800035e:	d308      	bcc.n	8000372 <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d304      	bcc.n	8000372 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	d03a      	beq.n	80003e2 <__divsi3+0x1ba>
 800036c:	1192      	asrs	r2, r2, #6
 800036e:	e000      	b.n	8000372 <__divsi3+0x14a>
 8000370:	0989      	lsrs	r1, r1, #6
 8000372:	09c3      	lsrs	r3, r0, #7
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x154>
 8000378:	01cb      	lsls	r3, r1, #7
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0983      	lsrs	r3, r0, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x160>
 8000384:	018b      	lsls	r3, r1, #6
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0943      	lsrs	r3, r0, #5
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x16c>
 8000390:	014b      	lsls	r3, r1, #5
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0903      	lsrs	r3, r0, #4
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x178>
 800039c:	010b      	lsls	r3, r1, #4
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	08c3      	lsrs	r3, r0, #3
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x184>
 80003a8:	00cb      	lsls	r3, r1, #3
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0883      	lsrs	r3, r0, #2
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x190>
 80003b4:	008b      	lsls	r3, r1, #2
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	d2d9      	bcs.n	8000370 <__divsi3+0x148>
 80003bc:	0843      	lsrs	r3, r0, #1
 80003be:	428b      	cmp	r3, r1
 80003c0:	d301      	bcc.n	80003c6 <__divsi3+0x19e>
 80003c2:	004b      	lsls	r3, r1, #1
 80003c4:	1ac0      	subs	r0, r0, r3
 80003c6:	4152      	adcs	r2, r2
 80003c8:	1a41      	subs	r1, r0, r1
 80003ca:	d200      	bcs.n	80003ce <__divsi3+0x1a6>
 80003cc:	4601      	mov	r1, r0
 80003ce:	4663      	mov	r3, ip
 80003d0:	4152      	adcs	r2, r2
 80003d2:	105b      	asrs	r3, r3, #1
 80003d4:	4610      	mov	r0, r2
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x1b4>
 80003d8:	4240      	negs	r0, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d500      	bpl.n	80003e0 <__divsi3+0x1b8>
 80003de:	4249      	negs	r1, r1
 80003e0:	4770      	bx	lr
 80003e2:	4663      	mov	r3, ip
 80003e4:	105b      	asrs	r3, r3, #1
 80003e6:	d300      	bcc.n	80003ea <__divsi3+0x1c2>
 80003e8:	4240      	negs	r0, r0
 80003ea:	b501      	push	{r0, lr}
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 f805 	bl	80003fc <__aeabi_idiv0>
 80003f2:	bd02      	pop	{r1, pc}

080003f4 <__aeabi_idivmod>:
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d0f8      	beq.n	80003ea <__divsi3+0x1c2>
 80003f8:	e716      	b.n	8000228 <__divsi3>
 80003fa:	4770      	bx	lr

080003fc <__aeabi_idiv0>:
 80003fc:	4770      	bx	lr
 80003fe:	46c0      	nop			; (mov r8, r8)

08000400 <__aeabi_uldivmod>:
 8000400:	2b00      	cmp	r3, #0
 8000402:	d111      	bne.n	8000428 <__aeabi_uldivmod+0x28>
 8000404:	2a00      	cmp	r2, #0
 8000406:	d10f      	bne.n	8000428 <__aeabi_uldivmod+0x28>
 8000408:	2900      	cmp	r1, #0
 800040a:	d100      	bne.n	800040e <__aeabi_uldivmod+0xe>
 800040c:	2800      	cmp	r0, #0
 800040e:	d002      	beq.n	8000416 <__aeabi_uldivmod+0x16>
 8000410:	2100      	movs	r1, #0
 8000412:	43c9      	mvns	r1, r1
 8000414:	0008      	movs	r0, r1
 8000416:	b407      	push	{r0, r1, r2}
 8000418:	4802      	ldr	r0, [pc, #8]	; (8000424 <__aeabi_uldivmod+0x24>)
 800041a:	a102      	add	r1, pc, #8	; (adr r1, 8000424 <__aeabi_uldivmod+0x24>)
 800041c:	1840      	adds	r0, r0, r1
 800041e:	9002      	str	r0, [sp, #8]
 8000420:	bd03      	pop	{r0, r1, pc}
 8000422:	46c0      	nop			; (mov r8, r8)
 8000424:	ffffffd9 	.word	0xffffffd9
 8000428:	b403      	push	{r0, r1}
 800042a:	4668      	mov	r0, sp
 800042c:	b501      	push	{r0, lr}
 800042e:	9802      	ldr	r0, [sp, #8]
 8000430:	f000 f806 	bl	8000440 <__udivmoddi4>
 8000434:	9b01      	ldr	r3, [sp, #4]
 8000436:	469e      	mov	lr, r3
 8000438:	b002      	add	sp, #8
 800043a:	bc0c      	pop	{r2, r3}
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__udivmoddi4>:
 8000440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000442:	4657      	mov	r7, sl
 8000444:	464e      	mov	r6, r9
 8000446:	4645      	mov	r5, r8
 8000448:	46de      	mov	lr, fp
 800044a:	b5e0      	push	{r5, r6, r7, lr}
 800044c:	0004      	movs	r4, r0
 800044e:	000d      	movs	r5, r1
 8000450:	4692      	mov	sl, r2
 8000452:	4699      	mov	r9, r3
 8000454:	b083      	sub	sp, #12
 8000456:	428b      	cmp	r3, r1
 8000458:	d830      	bhi.n	80004bc <__udivmoddi4+0x7c>
 800045a:	d02d      	beq.n	80004b8 <__udivmoddi4+0x78>
 800045c:	4649      	mov	r1, r9
 800045e:	4650      	mov	r0, sl
 8000460:	f000 f8ba 	bl	80005d8 <__clzdi2>
 8000464:	0029      	movs	r1, r5
 8000466:	0006      	movs	r6, r0
 8000468:	0020      	movs	r0, r4
 800046a:	f000 f8b5 	bl	80005d8 <__clzdi2>
 800046e:	1a33      	subs	r3, r6, r0
 8000470:	4698      	mov	r8, r3
 8000472:	3b20      	subs	r3, #32
 8000474:	d434      	bmi.n	80004e0 <__udivmoddi4+0xa0>
 8000476:	469b      	mov	fp, r3
 8000478:	4653      	mov	r3, sl
 800047a:	465a      	mov	r2, fp
 800047c:	4093      	lsls	r3, r2
 800047e:	4642      	mov	r2, r8
 8000480:	001f      	movs	r7, r3
 8000482:	4653      	mov	r3, sl
 8000484:	4093      	lsls	r3, r2
 8000486:	001e      	movs	r6, r3
 8000488:	42af      	cmp	r7, r5
 800048a:	d83b      	bhi.n	8000504 <__udivmoddi4+0xc4>
 800048c:	42af      	cmp	r7, r5
 800048e:	d100      	bne.n	8000492 <__udivmoddi4+0x52>
 8000490:	e079      	b.n	8000586 <__udivmoddi4+0x146>
 8000492:	465b      	mov	r3, fp
 8000494:	1ba4      	subs	r4, r4, r6
 8000496:	41bd      	sbcs	r5, r7
 8000498:	2b00      	cmp	r3, #0
 800049a:	da00      	bge.n	800049e <__udivmoddi4+0x5e>
 800049c:	e076      	b.n	800058c <__udivmoddi4+0x14c>
 800049e:	2200      	movs	r2, #0
 80004a0:	2300      	movs	r3, #0
 80004a2:	9200      	str	r2, [sp, #0]
 80004a4:	9301      	str	r3, [sp, #4]
 80004a6:	2301      	movs	r3, #1
 80004a8:	465a      	mov	r2, fp
 80004aa:	4093      	lsls	r3, r2
 80004ac:	9301      	str	r3, [sp, #4]
 80004ae:	2301      	movs	r3, #1
 80004b0:	4642      	mov	r2, r8
 80004b2:	4093      	lsls	r3, r2
 80004b4:	9300      	str	r3, [sp, #0]
 80004b6:	e029      	b.n	800050c <__udivmoddi4+0xcc>
 80004b8:	4282      	cmp	r2, r0
 80004ba:	d9cf      	bls.n	800045c <__udivmoddi4+0x1c>
 80004bc:	2200      	movs	r2, #0
 80004be:	2300      	movs	r3, #0
 80004c0:	9200      	str	r2, [sp, #0]
 80004c2:	9301      	str	r3, [sp, #4]
 80004c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d001      	beq.n	80004ce <__udivmoddi4+0x8e>
 80004ca:	601c      	str	r4, [r3, #0]
 80004cc:	605d      	str	r5, [r3, #4]
 80004ce:	9800      	ldr	r0, [sp, #0]
 80004d0:	9901      	ldr	r1, [sp, #4]
 80004d2:	b003      	add	sp, #12
 80004d4:	bcf0      	pop	{r4, r5, r6, r7}
 80004d6:	46bb      	mov	fp, r7
 80004d8:	46b2      	mov	sl, r6
 80004da:	46a9      	mov	r9, r5
 80004dc:	46a0      	mov	r8, r4
 80004de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004e0:	4642      	mov	r2, r8
 80004e2:	469b      	mov	fp, r3
 80004e4:	2320      	movs	r3, #32
 80004e6:	1a9b      	subs	r3, r3, r2
 80004e8:	4652      	mov	r2, sl
 80004ea:	40da      	lsrs	r2, r3
 80004ec:	4641      	mov	r1, r8
 80004ee:	0013      	movs	r3, r2
 80004f0:	464a      	mov	r2, r9
 80004f2:	408a      	lsls	r2, r1
 80004f4:	0017      	movs	r7, r2
 80004f6:	4642      	mov	r2, r8
 80004f8:	431f      	orrs	r7, r3
 80004fa:	4653      	mov	r3, sl
 80004fc:	4093      	lsls	r3, r2
 80004fe:	001e      	movs	r6, r3
 8000500:	42af      	cmp	r7, r5
 8000502:	d9c3      	bls.n	800048c <__udivmoddi4+0x4c>
 8000504:	2200      	movs	r2, #0
 8000506:	2300      	movs	r3, #0
 8000508:	9200      	str	r2, [sp, #0]
 800050a:	9301      	str	r3, [sp, #4]
 800050c:	4643      	mov	r3, r8
 800050e:	2b00      	cmp	r3, #0
 8000510:	d0d8      	beq.n	80004c4 <__udivmoddi4+0x84>
 8000512:	07fb      	lsls	r3, r7, #31
 8000514:	0872      	lsrs	r2, r6, #1
 8000516:	431a      	orrs	r2, r3
 8000518:	4646      	mov	r6, r8
 800051a:	087b      	lsrs	r3, r7, #1
 800051c:	e00e      	b.n	800053c <__udivmoddi4+0xfc>
 800051e:	42ab      	cmp	r3, r5
 8000520:	d101      	bne.n	8000526 <__udivmoddi4+0xe6>
 8000522:	42a2      	cmp	r2, r4
 8000524:	d80c      	bhi.n	8000540 <__udivmoddi4+0x100>
 8000526:	1aa4      	subs	r4, r4, r2
 8000528:	419d      	sbcs	r5, r3
 800052a:	2001      	movs	r0, #1
 800052c:	1924      	adds	r4, r4, r4
 800052e:	416d      	adcs	r5, r5
 8000530:	2100      	movs	r1, #0
 8000532:	3e01      	subs	r6, #1
 8000534:	1824      	adds	r4, r4, r0
 8000536:	414d      	adcs	r5, r1
 8000538:	2e00      	cmp	r6, #0
 800053a:	d006      	beq.n	800054a <__udivmoddi4+0x10a>
 800053c:	42ab      	cmp	r3, r5
 800053e:	d9ee      	bls.n	800051e <__udivmoddi4+0xde>
 8000540:	3e01      	subs	r6, #1
 8000542:	1924      	adds	r4, r4, r4
 8000544:	416d      	adcs	r5, r5
 8000546:	2e00      	cmp	r6, #0
 8000548:	d1f8      	bne.n	800053c <__udivmoddi4+0xfc>
 800054a:	9800      	ldr	r0, [sp, #0]
 800054c:	9901      	ldr	r1, [sp, #4]
 800054e:	465b      	mov	r3, fp
 8000550:	1900      	adds	r0, r0, r4
 8000552:	4169      	adcs	r1, r5
 8000554:	2b00      	cmp	r3, #0
 8000556:	db24      	blt.n	80005a2 <__udivmoddi4+0x162>
 8000558:	002b      	movs	r3, r5
 800055a:	465a      	mov	r2, fp
 800055c:	4644      	mov	r4, r8
 800055e:	40d3      	lsrs	r3, r2
 8000560:	002a      	movs	r2, r5
 8000562:	40e2      	lsrs	r2, r4
 8000564:	001c      	movs	r4, r3
 8000566:	465b      	mov	r3, fp
 8000568:	0015      	movs	r5, r2
 800056a:	2b00      	cmp	r3, #0
 800056c:	db2a      	blt.n	80005c4 <__udivmoddi4+0x184>
 800056e:	0026      	movs	r6, r4
 8000570:	409e      	lsls	r6, r3
 8000572:	0033      	movs	r3, r6
 8000574:	0026      	movs	r6, r4
 8000576:	4647      	mov	r7, r8
 8000578:	40be      	lsls	r6, r7
 800057a:	0032      	movs	r2, r6
 800057c:	1a80      	subs	r0, r0, r2
 800057e:	4199      	sbcs	r1, r3
 8000580:	9000      	str	r0, [sp, #0]
 8000582:	9101      	str	r1, [sp, #4]
 8000584:	e79e      	b.n	80004c4 <__udivmoddi4+0x84>
 8000586:	42a3      	cmp	r3, r4
 8000588:	d8bc      	bhi.n	8000504 <__udivmoddi4+0xc4>
 800058a:	e782      	b.n	8000492 <__udivmoddi4+0x52>
 800058c:	4642      	mov	r2, r8
 800058e:	2320      	movs	r3, #32
 8000590:	2100      	movs	r1, #0
 8000592:	1a9b      	subs	r3, r3, r2
 8000594:	2200      	movs	r2, #0
 8000596:	9100      	str	r1, [sp, #0]
 8000598:	9201      	str	r2, [sp, #4]
 800059a:	2201      	movs	r2, #1
 800059c:	40da      	lsrs	r2, r3
 800059e:	9201      	str	r2, [sp, #4]
 80005a0:	e785      	b.n	80004ae <__udivmoddi4+0x6e>
 80005a2:	4642      	mov	r2, r8
 80005a4:	2320      	movs	r3, #32
 80005a6:	1a9b      	subs	r3, r3, r2
 80005a8:	002a      	movs	r2, r5
 80005aa:	4646      	mov	r6, r8
 80005ac:	409a      	lsls	r2, r3
 80005ae:	0023      	movs	r3, r4
 80005b0:	40f3      	lsrs	r3, r6
 80005b2:	4644      	mov	r4, r8
 80005b4:	4313      	orrs	r3, r2
 80005b6:	002a      	movs	r2, r5
 80005b8:	40e2      	lsrs	r2, r4
 80005ba:	001c      	movs	r4, r3
 80005bc:	465b      	mov	r3, fp
 80005be:	0015      	movs	r5, r2
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	dad4      	bge.n	800056e <__udivmoddi4+0x12e>
 80005c4:	4642      	mov	r2, r8
 80005c6:	002f      	movs	r7, r5
 80005c8:	2320      	movs	r3, #32
 80005ca:	0026      	movs	r6, r4
 80005cc:	4097      	lsls	r7, r2
 80005ce:	1a9b      	subs	r3, r3, r2
 80005d0:	40de      	lsrs	r6, r3
 80005d2:	003b      	movs	r3, r7
 80005d4:	4333      	orrs	r3, r6
 80005d6:	e7cd      	b.n	8000574 <__udivmoddi4+0x134>

080005d8 <__clzdi2>:
 80005d8:	b510      	push	{r4, lr}
 80005da:	2900      	cmp	r1, #0
 80005dc:	d103      	bne.n	80005e6 <__clzdi2+0xe>
 80005de:	f000 f807 	bl	80005f0 <__clzsi2>
 80005e2:	3020      	adds	r0, #32
 80005e4:	e002      	b.n	80005ec <__clzdi2+0x14>
 80005e6:	0008      	movs	r0, r1
 80005e8:	f000 f802 	bl	80005f0 <__clzsi2>
 80005ec:	bd10      	pop	{r4, pc}
 80005ee:	46c0      	nop			; (mov r8, r8)

080005f0 <__clzsi2>:
 80005f0:	211c      	movs	r1, #28
 80005f2:	2301      	movs	r3, #1
 80005f4:	041b      	lsls	r3, r3, #16
 80005f6:	4298      	cmp	r0, r3
 80005f8:	d301      	bcc.n	80005fe <__clzsi2+0xe>
 80005fa:	0c00      	lsrs	r0, r0, #16
 80005fc:	3910      	subs	r1, #16
 80005fe:	0a1b      	lsrs	r3, r3, #8
 8000600:	4298      	cmp	r0, r3
 8000602:	d301      	bcc.n	8000608 <__clzsi2+0x18>
 8000604:	0a00      	lsrs	r0, r0, #8
 8000606:	3908      	subs	r1, #8
 8000608:	091b      	lsrs	r3, r3, #4
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0x22>
 800060e:	0900      	lsrs	r0, r0, #4
 8000610:	3904      	subs	r1, #4
 8000612:	a202      	add	r2, pc, #8	; (adr r2, 800061c <__clzsi2+0x2c>)
 8000614:	5c10      	ldrb	r0, [r2, r0]
 8000616:	1840      	adds	r0, r0, r1
 8000618:	4770      	bx	lr
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	02020304 	.word	0x02020304
 8000620:	01010101 	.word	0x01010101
	...

0800062c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000630:	f000 fb22 	bl	8000c78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000634:	f000 f810 	bl	8000658 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000638:	f000 f926 	bl	8000888 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800063c:	f000 f8a2 	bl	8000784 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8000640:	f000 f852 	bl	80006e8 <MX_USART2_UART_Init>
  MX_USART5_UART_Init();
 8000644:	f000 f8ec 	bl	8000820 <MX_USART5_UART_Init>
  /* USER CODE BEGIN 2 */
  send_debug_logs ( hello ) ;
 8000648:	4b02      	ldr	r3, [pc, #8]	; (8000654 <main+0x28>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	0018      	movs	r0, r3
 800064e:	f000 f98d 	bl	800096c <send_debug_logs>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000652:	e7fe      	b.n	8000652 <main+0x26>
 8000654:	20000000 	.word	0x20000000

08000658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000658:	b590      	push	{r4, r7, lr}
 800065a:	b095      	sub	sp, #84	; 0x54
 800065c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065e:	2414      	movs	r4, #20
 8000660:	193b      	adds	r3, r7, r4
 8000662:	0018      	movs	r0, r3
 8000664:	233c      	movs	r3, #60	; 0x3c
 8000666:	001a      	movs	r2, r3
 8000668:	2100      	movs	r1, #0
 800066a:	f002 fd0f 	bl	800308c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800066e:	1d3b      	adds	r3, r7, #4
 8000670:	0018      	movs	r0, r3
 8000672:	2310      	movs	r3, #16
 8000674:	001a      	movs	r2, r3
 8000676:	2100      	movs	r1, #0
 8000678:	f002 fd08 	bl	800308c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800067c:	2380      	movs	r3, #128	; 0x80
 800067e:	009b      	lsls	r3, r3, #2
 8000680:	0018      	movs	r0, r3
 8000682:	f000 fdd3 	bl	800122c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000686:	193b      	adds	r3, r7, r4
 8000688:	2202      	movs	r2, #2
 800068a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800068c:	193b      	adds	r3, r7, r4
 800068e:	2280      	movs	r2, #128	; 0x80
 8000690:	0052      	lsls	r2, r2, #1
 8000692:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000694:	193b      	adds	r3, r7, r4
 8000696:	2200      	movs	r2, #0
 8000698:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800069a:	193b      	adds	r3, r7, r4
 800069c:	2240      	movs	r2, #64	; 0x40
 800069e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006a0:	193b      	adds	r3, r7, r4
 80006a2:	2200      	movs	r2, #0
 80006a4:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a6:	193b      	adds	r3, r7, r4
 80006a8:	0018      	movs	r0, r3
 80006aa:	f000 fe0b 	bl	80012c4 <HAL_RCC_OscConfig>
 80006ae:	1e03      	subs	r3, r0, #0
 80006b0:	d001      	beq.n	80006b6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80006b2:	f000 f98b 	bl	80009cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b6:	1d3b      	adds	r3, r7, #4
 80006b8:	2207      	movs	r2, #7
 80006ba:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006bc:	1d3b      	adds	r3, r7, #4
 80006be:	2200      	movs	r2, #0
 80006c0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c2:	1d3b      	adds	r3, r7, #4
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006c8:	1d3b      	adds	r3, r7, #4
 80006ca:	2200      	movs	r2, #0
 80006cc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006ce:	1d3b      	adds	r3, r7, #4
 80006d0:	2100      	movs	r1, #0
 80006d2:	0018      	movs	r0, r3
 80006d4:	f001 f956 	bl	8001984 <HAL_RCC_ClockConfig>
 80006d8:	1e03      	subs	r3, r0, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80006dc:	f000 f976 	bl	80009cc <Error_Handler>
  }
}
 80006e0:	46c0      	nop			; (mov r8, r8)
 80006e2:	46bd      	mov	sp, r7
 80006e4:	b015      	add	sp, #84	; 0x54
 80006e6:	bd90      	pop	{r4, r7, pc}

080006e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006ec:	4b23      	ldr	r3, [pc, #140]	; (800077c <MX_USART2_UART_Init+0x94>)
 80006ee:	4a24      	ldr	r2, [pc, #144]	; (8000780 <MX_USART2_UART_Init+0x98>)
 80006f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006f2:	4b22      	ldr	r3, [pc, #136]	; (800077c <MX_USART2_UART_Init+0x94>)
 80006f4:	22e1      	movs	r2, #225	; 0xe1
 80006f6:	0252      	lsls	r2, r2, #9
 80006f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006fa:	4b20      	ldr	r3, [pc, #128]	; (800077c <MX_USART2_UART_Init+0x94>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000700:	4b1e      	ldr	r3, [pc, #120]	; (800077c <MX_USART2_UART_Init+0x94>)
 8000702:	2200      	movs	r2, #0
 8000704:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000706:	4b1d      	ldr	r3, [pc, #116]	; (800077c <MX_USART2_UART_Init+0x94>)
 8000708:	2200      	movs	r2, #0
 800070a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800070c:	4b1b      	ldr	r3, [pc, #108]	; (800077c <MX_USART2_UART_Init+0x94>)
 800070e:	220c      	movs	r2, #12
 8000710:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000712:	4b1a      	ldr	r3, [pc, #104]	; (800077c <MX_USART2_UART_Init+0x94>)
 8000714:	2200      	movs	r2, #0
 8000716:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000718:	4b18      	ldr	r3, [pc, #96]	; (800077c <MX_USART2_UART_Init+0x94>)
 800071a:	2200      	movs	r2, #0
 800071c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800071e:	4b17      	ldr	r3, [pc, #92]	; (800077c <MX_USART2_UART_Init+0x94>)
 8000720:	2200      	movs	r2, #0
 8000722:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000724:	4b15      	ldr	r3, [pc, #84]	; (800077c <MX_USART2_UART_Init+0x94>)
 8000726:	2200      	movs	r2, #0
 8000728:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800072a:	4b14      	ldr	r3, [pc, #80]	; (800077c <MX_USART2_UART_Init+0x94>)
 800072c:	2200      	movs	r2, #0
 800072e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000730:	4b12      	ldr	r3, [pc, #72]	; (800077c <MX_USART2_UART_Init+0x94>)
 8000732:	0018      	movs	r0, r3
 8000734:	f001 fd0c 	bl	8002150 <HAL_UART_Init>
 8000738:	1e03      	subs	r3, r0, #0
 800073a:	d001      	beq.n	8000740 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800073c:	f000 f946 	bl	80009cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000740:	4b0e      	ldr	r3, [pc, #56]	; (800077c <MX_USART2_UART_Init+0x94>)
 8000742:	2100      	movs	r1, #0
 8000744:	0018      	movs	r0, r3
 8000746:	f002 fbc1 	bl	8002ecc <HAL_UARTEx_SetTxFifoThreshold>
 800074a:	1e03      	subs	r3, r0, #0
 800074c:	d001      	beq.n	8000752 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800074e:	f000 f93d 	bl	80009cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000752:	4b0a      	ldr	r3, [pc, #40]	; (800077c <MX_USART2_UART_Init+0x94>)
 8000754:	2100      	movs	r1, #0
 8000756:	0018      	movs	r0, r3
 8000758:	f002 fbf8 	bl	8002f4c <HAL_UARTEx_SetRxFifoThreshold>
 800075c:	1e03      	subs	r3, r0, #0
 800075e:	d001      	beq.n	8000764 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000760:	f000 f934 	bl	80009cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000764:	4b05      	ldr	r3, [pc, #20]	; (800077c <MX_USART2_UART_Init+0x94>)
 8000766:	0018      	movs	r0, r3
 8000768:	f002 fb76 	bl	8002e58 <HAL_UARTEx_DisableFifoMode>
 800076c:	1e03      	subs	r3, r0, #0
 800076e:	d001      	beq.n	8000774 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000770:	f000 f92c 	bl	80009cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000774:	46c0      	nop			; (mov r8, r8)
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	46c0      	nop			; (mov r8, r8)
 800077c:	2000002c 	.word	0x2000002c
 8000780:	40004400 	.word	0x40004400

08000784 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000788:	4b23      	ldr	r3, [pc, #140]	; (8000818 <MX_USART3_UART_Init+0x94>)
 800078a:	4a24      	ldr	r2, [pc, #144]	; (800081c <MX_USART3_UART_Init+0x98>)
 800078c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800078e:	4b22      	ldr	r3, [pc, #136]	; (8000818 <MX_USART3_UART_Init+0x94>)
 8000790:	2296      	movs	r2, #150	; 0x96
 8000792:	0192      	lsls	r2, r2, #6
 8000794:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000796:	4b20      	ldr	r3, [pc, #128]	; (8000818 <MX_USART3_UART_Init+0x94>)
 8000798:	2200      	movs	r2, #0
 800079a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800079c:	4b1e      	ldr	r3, [pc, #120]	; (8000818 <MX_USART3_UART_Init+0x94>)
 800079e:	2200      	movs	r2, #0
 80007a0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007a2:	4b1d      	ldr	r3, [pc, #116]	; (8000818 <MX_USART3_UART_Init+0x94>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007a8:	4b1b      	ldr	r3, [pc, #108]	; (8000818 <MX_USART3_UART_Init+0x94>)
 80007aa:	220c      	movs	r2, #12
 80007ac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ae:	4b1a      	ldr	r3, [pc, #104]	; (8000818 <MX_USART3_UART_Init+0x94>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b4:	4b18      	ldr	r3, [pc, #96]	; (8000818 <MX_USART3_UART_Init+0x94>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ba:	4b17      	ldr	r3, [pc, #92]	; (8000818 <MX_USART3_UART_Init+0x94>)
 80007bc:	2200      	movs	r2, #0
 80007be:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007c0:	4b15      	ldr	r3, [pc, #84]	; (8000818 <MX_USART3_UART_Init+0x94>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007c6:	4b14      	ldr	r3, [pc, #80]	; (8000818 <MX_USART3_UART_Init+0x94>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007cc:	4b12      	ldr	r3, [pc, #72]	; (8000818 <MX_USART3_UART_Init+0x94>)
 80007ce:	0018      	movs	r0, r3
 80007d0:	f001 fcbe 	bl	8002150 <HAL_UART_Init>
 80007d4:	1e03      	subs	r3, r0, #0
 80007d6:	d001      	beq.n	80007dc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80007d8:	f000 f8f8 	bl	80009cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007dc:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <MX_USART3_UART_Init+0x94>)
 80007de:	2100      	movs	r1, #0
 80007e0:	0018      	movs	r0, r3
 80007e2:	f002 fb73 	bl	8002ecc <HAL_UARTEx_SetTxFifoThreshold>
 80007e6:	1e03      	subs	r3, r0, #0
 80007e8:	d001      	beq.n	80007ee <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80007ea:	f000 f8ef 	bl	80009cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007ee:	4b0a      	ldr	r3, [pc, #40]	; (8000818 <MX_USART3_UART_Init+0x94>)
 80007f0:	2100      	movs	r1, #0
 80007f2:	0018      	movs	r0, r3
 80007f4:	f002 fbaa 	bl	8002f4c <HAL_UARTEx_SetRxFifoThreshold>
 80007f8:	1e03      	subs	r3, r0, #0
 80007fa:	d001      	beq.n	8000800 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80007fc:	f000 f8e6 	bl	80009cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000800:	4b05      	ldr	r3, [pc, #20]	; (8000818 <MX_USART3_UART_Init+0x94>)
 8000802:	0018      	movs	r0, r3
 8000804:	f002 fb28 	bl	8002e58 <HAL_UARTEx_DisableFifoMode>
 8000808:	1e03      	subs	r3, r0, #0
 800080a:	d001      	beq.n	8000810 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800080c:	f000 f8de 	bl	80009cc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000810:	46c0      	nop			; (mov r8, r8)
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	46c0      	nop			; (mov r8, r8)
 8000818:	200000c0 	.word	0x200000c0
 800081c:	40004800 	.word	0x40004800

08000820 <MX_USART5_UART_Init>:
  * @brief USART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART5_UART_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END USART5_Init 0 */

  /* USER CODE BEGIN USART5_Init 1 */

  /* USER CODE END USART5_Init 1 */
  huart5.Instance = USART5;
 8000824:	4b16      	ldr	r3, [pc, #88]	; (8000880 <MX_USART5_UART_Init+0x60>)
 8000826:	4a17      	ldr	r2, [pc, #92]	; (8000884 <MX_USART5_UART_Init+0x64>)
 8000828:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 800082a:	4b15      	ldr	r3, [pc, #84]	; (8000880 <MX_USART5_UART_Init+0x60>)
 800082c:	2296      	movs	r2, #150	; 0x96
 800082e:	0192      	lsls	r2, r2, #6
 8000830:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000832:	4b13      	ldr	r3, [pc, #76]	; (8000880 <MX_USART5_UART_Init+0x60>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000838:	4b11      	ldr	r3, [pc, #68]	; (8000880 <MX_USART5_UART_Init+0x60>)
 800083a:	2200      	movs	r2, #0
 800083c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800083e:	4b10      	ldr	r3, [pc, #64]	; (8000880 <MX_USART5_UART_Init+0x60>)
 8000840:	2200      	movs	r2, #0
 8000842:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000844:	4b0e      	ldr	r3, [pc, #56]	; (8000880 <MX_USART5_UART_Init+0x60>)
 8000846:	220c      	movs	r2, #12
 8000848:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800084a:	4b0d      	ldr	r3, [pc, #52]	; (8000880 <MX_USART5_UART_Init+0x60>)
 800084c:	2200      	movs	r2, #0
 800084e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000850:	4b0b      	ldr	r3, [pc, #44]	; (8000880 <MX_USART5_UART_Init+0x60>)
 8000852:	2200      	movs	r2, #0
 8000854:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000856:	4b0a      	ldr	r3, [pc, #40]	; (8000880 <MX_USART5_UART_Init+0x60>)
 8000858:	2200      	movs	r2, #0
 800085a:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800085c:	4b08      	ldr	r3, [pc, #32]	; (8000880 <MX_USART5_UART_Init+0x60>)
 800085e:	2200      	movs	r2, #0
 8000860:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000862:	4b07      	ldr	r3, [pc, #28]	; (8000880 <MX_USART5_UART_Init+0x60>)
 8000864:	2200      	movs	r2, #0
 8000866:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000868:	4b05      	ldr	r3, [pc, #20]	; (8000880 <MX_USART5_UART_Init+0x60>)
 800086a:	0018      	movs	r0, r3
 800086c:	f001 fc70 	bl	8002150 <HAL_UART_Init>
 8000870:	1e03      	subs	r3, r0, #0
 8000872:	d001      	beq.n	8000878 <MX_USART5_UART_Init+0x58>
  {
    Error_Handler();
 8000874:	f000 f8aa 	bl	80009cc <Error_Handler>
  }
  /* USER CODE BEGIN USART5_Init 2 */

  /* USER CODE END USART5_Init 2 */

}
 8000878:	46c0      	nop			; (mov r8, r8)
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	46c0      	nop			; (mov r8, r8)
 8000880:	20000154 	.word	0x20000154
 8000884:	40005000 	.word	0x40005000

08000888 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000888:	b590      	push	{r4, r7, lr}
 800088a:	b089      	sub	sp, #36	; 0x24
 800088c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088e:	240c      	movs	r4, #12
 8000890:	193b      	adds	r3, r7, r4
 8000892:	0018      	movs	r0, r3
 8000894:	2314      	movs	r3, #20
 8000896:	001a      	movs	r2, r3
 8000898:	2100      	movs	r1, #0
 800089a:	f002 fbf7 	bl	800308c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800089e:	4b2f      	ldr	r3, [pc, #188]	; (800095c <MX_GPIO_Init+0xd4>)
 80008a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008a2:	4b2e      	ldr	r3, [pc, #184]	; (800095c <MX_GPIO_Init+0xd4>)
 80008a4:	2101      	movs	r1, #1
 80008a6:	430a      	orrs	r2, r1
 80008a8:	635a      	str	r2, [r3, #52]	; 0x34
 80008aa:	4b2c      	ldr	r3, [pc, #176]	; (800095c <MX_GPIO_Init+0xd4>)
 80008ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008ae:	2201      	movs	r2, #1
 80008b0:	4013      	ands	r3, r2
 80008b2:	60bb      	str	r3, [r7, #8]
 80008b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b6:	4b29      	ldr	r3, [pc, #164]	; (800095c <MX_GPIO_Init+0xd4>)
 80008b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008ba:	4b28      	ldr	r3, [pc, #160]	; (800095c <MX_GPIO_Init+0xd4>)
 80008bc:	2102      	movs	r1, #2
 80008be:	430a      	orrs	r2, r1
 80008c0:	635a      	str	r2, [r3, #52]	; 0x34
 80008c2:	4b26      	ldr	r3, [pc, #152]	; (800095c <MX_GPIO_Init+0xd4>)
 80008c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008c6:	2202      	movs	r2, #2
 80008c8:	4013      	ands	r3, r2
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ASTRO_WKUP_Pin|ASTRO_RST_Pin|RF_SW_CTL2_Pin|GNSS_RST_Pin
 80008ce:	4924      	ldr	r1, [pc, #144]	; (8000960 <MX_GPIO_Init+0xd8>)
 80008d0:	4b24      	ldr	r3, [pc, #144]	; (8000964 <MX_GPIO_Init+0xdc>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	0018      	movs	r0, r3
 80008d6:	f000 fc8b 	bl	80011f0 <HAL_GPIO_WritePin>
                          |GNSS_PWR_SW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF_SW_CTL1_GPIO_Port, RF_SW_CTL1_Pin, GPIO_PIN_SET);
 80008da:	2380      	movs	r3, #128	; 0x80
 80008dc:	00db      	lsls	r3, r3, #3
 80008de:	4821      	ldr	r0, [pc, #132]	; (8000964 <MX_GPIO_Init+0xdc>)
 80008e0:	2201      	movs	r2, #1
 80008e2:	0019      	movs	r1, r3
 80008e4:	f000 fc84 	bl	80011f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ASTRO_WKUP_Pin ASTRO_RST_Pin RF_SW_CTL1_Pin RF_SW_CTL2_Pin
                           GNSS_PWR_SW_Pin */
  GPIO_InitStruct.Pin = ASTRO_WKUP_Pin|ASTRO_RST_Pin|RF_SW_CTL1_Pin|RF_SW_CTL2_Pin
 80008e8:	193b      	adds	r3, r7, r4
 80008ea:	4a1f      	ldr	r2, [pc, #124]	; (8000968 <MX_GPIO_Init+0xe0>)
 80008ec:	601a      	str	r2, [r3, #0]
                          |GNSS_PWR_SW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ee:	193b      	adds	r3, r7, r4
 80008f0:	2201      	movs	r2, #1
 80008f2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	193b      	adds	r3, r7, r4
 80008f6:	2200      	movs	r2, #0
 80008f8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fa:	193b      	adds	r3, r7, r4
 80008fc:	2200      	movs	r2, #0
 80008fe:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000900:	193b      	adds	r3, r7, r4
 8000902:	4a18      	ldr	r2, [pc, #96]	; (8000964 <MX_GPIO_Init+0xdc>)
 8000904:	0019      	movs	r1, r3
 8000906:	0010      	movs	r0, r2
 8000908:	f000 fb06 	bl	8000f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : ASTRO_EVT_Pin */
  GPIO_InitStruct.Pin = ASTRO_EVT_Pin;
 800090c:	193b      	adds	r3, r7, r4
 800090e:	2204      	movs	r2, #4
 8000910:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000912:	193b      	adds	r3, r7, r4
 8000914:	2200      	movs	r2, #0
 8000916:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	193b      	adds	r3, r7, r4
 800091a:	2200      	movs	r2, #0
 800091c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ASTRO_EVT_GPIO_Port, &GPIO_InitStruct);
 800091e:	193b      	adds	r3, r7, r4
 8000920:	4a10      	ldr	r2, [pc, #64]	; (8000964 <MX_GPIO_Init+0xdc>)
 8000922:	0019      	movs	r1, r3
 8000924:	0010      	movs	r0, r2
 8000926:	f000 faf7 	bl	8000f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : GNSS_RST_Pin */
  GPIO_InitStruct.Pin = GNSS_RST_Pin;
 800092a:	0021      	movs	r1, r4
 800092c:	187b      	adds	r3, r7, r1
 800092e:	2280      	movs	r2, #128	; 0x80
 8000930:	0192      	lsls	r2, r2, #6
 8000932:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000934:	187b      	adds	r3, r7, r1
 8000936:	2211      	movs	r2, #17
 8000938:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	187b      	adds	r3, r7, r1
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000940:	187b      	adds	r3, r7, r1
 8000942:	2200      	movs	r2, #0
 8000944:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GNSS_RST_GPIO_Port, &GPIO_InitStruct);
 8000946:	187b      	adds	r3, r7, r1
 8000948:	4a06      	ldr	r2, [pc, #24]	; (8000964 <MX_GPIO_Init+0xdc>)
 800094a:	0019      	movs	r1, r3
 800094c:	0010      	movs	r0, r2
 800094e:	f000 fae3 	bl	8000f18 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000952:	46c0      	nop			; (mov r8, r8)
 8000954:	46bd      	mov	sp, r7
 8000956:	b009      	add	sp, #36	; 0x24
 8000958:	bd90      	pop	{r4, r7, pc}
 800095a:	46c0      	nop			; (mov r8, r8)
 800095c:	40021000 	.word	0x40021000
 8000960:	0000a803 	.word	0x0000a803
 8000964:	50000400 	.word	0x50000400
 8000968:	00008c03 	.word	0x00008c03

0800096c <send_debug_logs>:

/* USER CODE BEGIN 4 */

//ASTRO
void send_debug_logs ( const char* p_tx_buffer )
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b084      	sub	sp, #16
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
    uint32_t length = strlen ( p_tx_buffer ) ;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	0018      	movs	r0, r3
 8000978:	f7ff fbc4 	bl	8000104 <strlen>
 800097c:	0003      	movs	r3, r0
 800097e:	60fb      	str	r3, [r7, #12]
    if ( length > UART_TX_MAX_BUFF_SIZE )
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	2bfa      	cmp	r3, #250	; 0xfa
 8000984:	d908      	bls.n	8000998 <send_debug_logs+0x2c>
    {
        HAL_UART_Transmit ( &HUART_DBG , ( uint8_t* ) "[ERROR] UART buffer reached max length.\n" , 42 , 1000 ) ;
 8000986:	23fa      	movs	r3, #250	; 0xfa
 8000988:	009b      	lsls	r3, r3, #2
 800098a:	490d      	ldr	r1, [pc, #52]	; (80009c0 <send_debug_logs+0x54>)
 800098c:	480d      	ldr	r0, [pc, #52]	; (80009c4 <send_debug_logs+0x58>)
 800098e:	222a      	movs	r2, #42	; 0x2a
 8000990:	f001 fc34 	bl	80021fc <HAL_UART_Transmit>
        length = UART_TX_MAX_BUFF_SIZE;
 8000994:	23fa      	movs	r3, #250	; 0xfa
 8000996:	60fb      	str	r3, [r7, #12]
    }
    HAL_UART_Transmit ( &HUART_DBG , ( uint8_t* ) p_tx_buffer , length , 1000 ) ;
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	b29a      	uxth	r2, r3
 800099c:	23fa      	movs	r3, #250	; 0xfa
 800099e:	009b      	lsls	r3, r3, #2
 80009a0:	6879      	ldr	r1, [r7, #4]
 80009a2:	4808      	ldr	r0, [pc, #32]	; (80009c4 <send_debug_logs+0x58>)
 80009a4:	f001 fc2a 	bl	80021fc <HAL_UART_Transmit>
    HAL_UART_Transmit ( &HUART_DBG , ( uint8_t* ) "\n" , 1 , 1000 ) ;
 80009a8:	23fa      	movs	r3, #250	; 0xfa
 80009aa:	009b      	lsls	r3, r3, #2
 80009ac:	4906      	ldr	r1, [pc, #24]	; (80009c8 <send_debug_logs+0x5c>)
 80009ae:	4805      	ldr	r0, [pc, #20]	; (80009c4 <send_debug_logs+0x58>)
 80009b0:	2201      	movs	r2, #1
 80009b2:	f001 fc23 	bl	80021fc <HAL_UART_Transmit>
}
 80009b6:	46c0      	nop			; (mov r8, r8)
 80009b8:	46bd      	mov	sp, r7
 80009ba:	b004      	add	sp, #16
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	46c0      	nop			; (mov r8, r8)
 80009c0:	0800312c 	.word	0x0800312c
 80009c4:	2000002c 	.word	0x2000002c
 80009c8:	08003158 	.word	0x08003158

080009cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d0:	b672      	cpsid	i
}
 80009d2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009d4:	e7fe      	b.n	80009d4 <Error_Handler+0x8>
	...

080009d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009de:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <HAL_MspInit+0x4c>)
 80009e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009e2:	4b10      	ldr	r3, [pc, #64]	; (8000a24 <HAL_MspInit+0x4c>)
 80009e4:	2101      	movs	r1, #1
 80009e6:	430a      	orrs	r2, r1
 80009e8:	641a      	str	r2, [r3, #64]	; 0x40
 80009ea:	4b0e      	ldr	r3, [pc, #56]	; (8000a24 <HAL_MspInit+0x4c>)
 80009ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ee:	2201      	movs	r2, #1
 80009f0:	4013      	ands	r3, r2
 80009f2:	607b      	str	r3, [r7, #4]
 80009f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f6:	4b0b      	ldr	r3, [pc, #44]	; (8000a24 <HAL_MspInit+0x4c>)
 80009f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009fa:	4b0a      	ldr	r3, [pc, #40]	; (8000a24 <HAL_MspInit+0x4c>)
 80009fc:	2180      	movs	r1, #128	; 0x80
 80009fe:	0549      	lsls	r1, r1, #21
 8000a00:	430a      	orrs	r2, r1
 8000a02:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a04:	4b07      	ldr	r3, [pc, #28]	; (8000a24 <HAL_MspInit+0x4c>)
 8000a06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a08:	2380      	movs	r3, #128	; 0x80
 8000a0a:	055b      	lsls	r3, r3, #21
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	603b      	str	r3, [r7, #0]
 8000a10:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000a12:	23c0      	movs	r3, #192	; 0xc0
 8000a14:	00db      	lsls	r3, r3, #3
 8000a16:	0018      	movs	r0, r3
 8000a18:	f000 f9b4 	bl	8000d84 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a1c:	46c0      	nop			; (mov r8, r8)
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	b002      	add	sp, #8
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	40021000 	.word	0x40021000

08000a28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a28:	b590      	push	{r4, r7, lr}
 8000a2a:	b0a1      	sub	sp, #132	; 0x84
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a30:	236c      	movs	r3, #108	; 0x6c
 8000a32:	18fb      	adds	r3, r7, r3
 8000a34:	0018      	movs	r0, r3
 8000a36:	2314      	movs	r3, #20
 8000a38:	001a      	movs	r2, r3
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	f002 fb26 	bl	800308c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a40:	2420      	movs	r4, #32
 8000a42:	193b      	adds	r3, r7, r4
 8000a44:	0018      	movs	r0, r3
 8000a46:	234c      	movs	r3, #76	; 0x4c
 8000a48:	001a      	movs	r2, r3
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	f002 fb1e 	bl	800308c <memset>
  if(huart->Instance==USART2)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a60      	ldr	r2, [pc, #384]	; (8000bd8 <HAL_UART_MspInit+0x1b0>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d13f      	bne.n	8000ada <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a5a:	193b      	adds	r3, r7, r4
 8000a5c:	2202      	movs	r2, #2
 8000a5e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a60:	193b      	adds	r3, r7, r4
 8000a62:	2200      	movs	r2, #0
 8000a64:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a66:	193b      	adds	r3, r7, r4
 8000a68:	0018      	movs	r0, r3
 8000a6a:	f001 f935 	bl	8001cd8 <HAL_RCCEx_PeriphCLKConfig>
 8000a6e:	1e03      	subs	r3, r0, #0
 8000a70:	d001      	beq.n	8000a76 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000a72:	f7ff ffab 	bl	80009cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a76:	4b59      	ldr	r3, [pc, #356]	; (8000bdc <HAL_UART_MspInit+0x1b4>)
 8000a78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a7a:	4b58      	ldr	r3, [pc, #352]	; (8000bdc <HAL_UART_MspInit+0x1b4>)
 8000a7c:	2180      	movs	r1, #128	; 0x80
 8000a7e:	0289      	lsls	r1, r1, #10
 8000a80:	430a      	orrs	r2, r1
 8000a82:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a84:	4b55      	ldr	r3, [pc, #340]	; (8000bdc <HAL_UART_MspInit+0x1b4>)
 8000a86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a88:	2380      	movs	r3, #128	; 0x80
 8000a8a:	029b      	lsls	r3, r3, #10
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	61fb      	str	r3, [r7, #28]
 8000a90:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a92:	4b52      	ldr	r3, [pc, #328]	; (8000bdc <HAL_UART_MspInit+0x1b4>)
 8000a94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a96:	4b51      	ldr	r3, [pc, #324]	; (8000bdc <HAL_UART_MspInit+0x1b4>)
 8000a98:	2101      	movs	r1, #1
 8000a9a:	430a      	orrs	r2, r1
 8000a9c:	635a      	str	r2, [r3, #52]	; 0x34
 8000a9e:	4b4f      	ldr	r3, [pc, #316]	; (8000bdc <HAL_UART_MspInit+0x1b4>)
 8000aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	61bb      	str	r3, [r7, #24]
 8000aa8:	69bb      	ldr	r3, [r7, #24]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = DBG_TX_Pin|DBG_RX_Pin;
 8000aaa:	216c      	movs	r1, #108	; 0x6c
 8000aac:	187b      	adds	r3, r7, r1
 8000aae:	220c      	movs	r2, #12
 8000ab0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab2:	187b      	adds	r3, r7, r1
 8000ab4:	2202      	movs	r2, #2
 8000ab6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	187b      	adds	r3, r7, r1
 8000aba:	2200      	movs	r2, #0
 8000abc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abe:	187b      	adds	r3, r7, r1
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000ac4:	187b      	adds	r3, r7, r1
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aca:	187a      	adds	r2, r7, r1
 8000acc:	23a0      	movs	r3, #160	; 0xa0
 8000ace:	05db      	lsls	r3, r3, #23
 8000ad0:	0011      	movs	r1, r2
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	f000 fa20 	bl	8000f18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART5_MspInit 1 */

  /* USER CODE END USART5_MspInit 1 */
  }

}
 8000ad8:	e07a      	b.n	8000bd0 <HAL_UART_MspInit+0x1a8>
  else if(huart->Instance==USART3)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4a40      	ldr	r2, [pc, #256]	; (8000be0 <HAL_UART_MspInit+0x1b8>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d140      	bne.n	8000b66 <HAL_UART_MspInit+0x13e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ae4:	2120      	movs	r1, #32
 8000ae6:	187b      	adds	r3, r7, r1
 8000ae8:	2204      	movs	r2, #4
 8000aea:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000aec:	187b      	adds	r3, r7, r1
 8000aee:	2200      	movs	r2, #0
 8000af0:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000af2:	187b      	adds	r3, r7, r1
 8000af4:	0018      	movs	r0, r3
 8000af6:	f001 f8ef 	bl	8001cd8 <HAL_RCCEx_PeriphCLKConfig>
 8000afa:	1e03      	subs	r3, r0, #0
 8000afc:	d001      	beq.n	8000b02 <HAL_UART_MspInit+0xda>
      Error_Handler();
 8000afe:	f7ff ff65 	bl	80009cc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b02:	4b36      	ldr	r3, [pc, #216]	; (8000bdc <HAL_UART_MspInit+0x1b4>)
 8000b04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b06:	4b35      	ldr	r3, [pc, #212]	; (8000bdc <HAL_UART_MspInit+0x1b4>)
 8000b08:	2180      	movs	r1, #128	; 0x80
 8000b0a:	02c9      	lsls	r1, r1, #11
 8000b0c:	430a      	orrs	r2, r1
 8000b0e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b10:	4b32      	ldr	r3, [pc, #200]	; (8000bdc <HAL_UART_MspInit+0x1b4>)
 8000b12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b14:	2380      	movs	r3, #128	; 0x80
 8000b16:	02db      	lsls	r3, r3, #11
 8000b18:	4013      	ands	r3, r2
 8000b1a:	617b      	str	r3, [r7, #20]
 8000b1c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b1e:	4b2f      	ldr	r3, [pc, #188]	; (8000bdc <HAL_UART_MspInit+0x1b4>)
 8000b20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b22:	4b2e      	ldr	r3, [pc, #184]	; (8000bdc <HAL_UART_MspInit+0x1b4>)
 8000b24:	2102      	movs	r1, #2
 8000b26:	430a      	orrs	r2, r1
 8000b28:	635a      	str	r2, [r3, #52]	; 0x34
 8000b2a:	4b2c      	ldr	r3, [pc, #176]	; (8000bdc <HAL_UART_MspInit+0x1b4>)
 8000b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b2e:	2202      	movs	r2, #2
 8000b30:	4013      	ands	r3, r2
 8000b32:	613b      	str	r3, [r7, #16]
 8000b34:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ASTRO_TX_Pin|ASTRO_RX_Pin;
 8000b36:	216c      	movs	r1, #108	; 0x6c
 8000b38:	187b      	adds	r3, r7, r1
 8000b3a:	22c0      	movs	r2, #192	; 0xc0
 8000b3c:	0092      	lsls	r2, r2, #2
 8000b3e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b40:	187b      	adds	r3, r7, r1
 8000b42:	2202      	movs	r2, #2
 8000b44:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	187b      	adds	r3, r7, r1
 8000b48:	2200      	movs	r2, #0
 8000b4a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4c:	187b      	adds	r3, r7, r1
 8000b4e:	2200      	movs	r2, #0
 8000b50:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8000b52:	187b      	adds	r3, r7, r1
 8000b54:	2204      	movs	r2, #4
 8000b56:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b58:	187b      	adds	r3, r7, r1
 8000b5a:	4a22      	ldr	r2, [pc, #136]	; (8000be4 <HAL_UART_MspInit+0x1bc>)
 8000b5c:	0019      	movs	r1, r3
 8000b5e:	0010      	movs	r0, r2
 8000b60:	f000 f9da 	bl	8000f18 <HAL_GPIO_Init>
}
 8000b64:	e034      	b.n	8000bd0 <HAL_UART_MspInit+0x1a8>
  else if(huart->Instance==USART5)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4a1f      	ldr	r2, [pc, #124]	; (8000be8 <HAL_UART_MspInit+0x1c0>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d12f      	bne.n	8000bd0 <HAL_UART_MspInit+0x1a8>
    __HAL_RCC_USART5_CLK_ENABLE();
 8000b70:	4b1a      	ldr	r3, [pc, #104]	; (8000bdc <HAL_UART_MspInit+0x1b4>)
 8000b72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b74:	4b19      	ldr	r3, [pc, #100]	; (8000bdc <HAL_UART_MspInit+0x1b4>)
 8000b76:	2180      	movs	r1, #128	; 0x80
 8000b78:	0049      	lsls	r1, r1, #1
 8000b7a:	430a      	orrs	r2, r1
 8000b7c:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b7e:	4b17      	ldr	r3, [pc, #92]	; (8000bdc <HAL_UART_MspInit+0x1b4>)
 8000b80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b82:	2380      	movs	r3, #128	; 0x80
 8000b84:	005b      	lsls	r3, r3, #1
 8000b86:	4013      	ands	r3, r2
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b8c:	4b13      	ldr	r3, [pc, #76]	; (8000bdc <HAL_UART_MspInit+0x1b4>)
 8000b8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b90:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <HAL_UART_MspInit+0x1b4>)
 8000b92:	2102      	movs	r1, #2
 8000b94:	430a      	orrs	r2, r1
 8000b96:	635a      	str	r2, [r3, #52]	; 0x34
 8000b98:	4b10      	ldr	r3, [pc, #64]	; (8000bdc <HAL_UART_MspInit+0x1b4>)
 8000b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b9c:	2202      	movs	r2, #2
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	60bb      	str	r3, [r7, #8]
 8000ba2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GNSS_TX_Pin|GNSS_RX_Pin;
 8000ba4:	216c      	movs	r1, #108	; 0x6c
 8000ba6:	187b      	adds	r3, r7, r1
 8000ba8:	2218      	movs	r2, #24
 8000baa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bac:	187b      	adds	r3, r7, r1
 8000bae:	2202      	movs	r2, #2
 8000bb0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	187b      	adds	r3, r7, r1
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb8:	187b      	adds	r3, r7, r1
 8000bba:	2200      	movs	r2, #0
 8000bbc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART5;
 8000bbe:	187b      	adds	r3, r7, r1
 8000bc0:	2203      	movs	r2, #3
 8000bc2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc4:	187b      	adds	r3, r7, r1
 8000bc6:	4a07      	ldr	r2, [pc, #28]	; (8000be4 <HAL_UART_MspInit+0x1bc>)
 8000bc8:	0019      	movs	r1, r3
 8000bca:	0010      	movs	r0, r2
 8000bcc:	f000 f9a4 	bl	8000f18 <HAL_GPIO_Init>
}
 8000bd0:	46c0      	nop			; (mov r8, r8)
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	b021      	add	sp, #132	; 0x84
 8000bd6:	bd90      	pop	{r4, r7, pc}
 8000bd8:	40004400 	.word	0x40004400
 8000bdc:	40021000 	.word	0x40021000
 8000be0:	40004800 	.word	0x40004800
 8000be4:	50000400 	.word	0x50000400
 8000be8:	40005000 	.word	0x40005000

08000bec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bf0:	e7fe      	b.n	8000bf0 <NMI_Handler+0x4>

08000bf2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bf6:	e7fe      	b.n	8000bf6 <HardFault_Handler+0x4>

08000bf8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000bfc:	46c0      	nop			; (mov r8, r8)
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c02:	b580      	push	{r7, lr}
 8000c04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c06:	46c0      	nop			; (mov r8, r8)
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c10:	f000 f89c 	bl	8000d4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c14:	46c0      	nop			; (mov r8, r8)
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}

08000c1a <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c1e:	46c0      	nop			; (mov r8, r8)
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c24:	480d      	ldr	r0, [pc, #52]	; (8000c5c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c26:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c28:	f7ff fff7 	bl	8000c1a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c2c:	480c      	ldr	r0, [pc, #48]	; (8000c60 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c2e:	490d      	ldr	r1, [pc, #52]	; (8000c64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c30:	4a0d      	ldr	r2, [pc, #52]	; (8000c68 <LoopForever+0xe>)
  movs r3, #0
 8000c32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c34:	e002      	b.n	8000c3c <LoopCopyDataInit>

08000c36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c3a:	3304      	adds	r3, #4

08000c3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c40:	d3f9      	bcc.n	8000c36 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c42:	4a0a      	ldr	r2, [pc, #40]	; (8000c6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c44:	4c0a      	ldr	r4, [pc, #40]	; (8000c70 <LoopForever+0x16>)
  movs r3, #0
 8000c46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c48:	e001      	b.n	8000c4e <LoopFillZerobss>

08000c4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c4c:	3204      	adds	r2, #4

08000c4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c50:	d3fb      	bcc.n	8000c4a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c52:	f002 fa23 	bl	800309c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000c56:	f7ff fce9 	bl	800062c <main>

08000c5a <LoopForever>:

LoopForever:
  b LoopForever
 8000c5a:	e7fe      	b.n	8000c5a <LoopForever>
  ldr   r0, =_estack
 8000c5c:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000c60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c64:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000c68:	080031f4 	.word	0x080031f4
  ldr r2, =_sbss
 8000c6c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000c70:	200001ec 	.word	0x200001ec

08000c74 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c74:	e7fe      	b.n	8000c74 <ADC1_COMP_IRQHandler>
	...

08000c78 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c7e:	1dfb      	adds	r3, r7, #7
 8000c80:	2200      	movs	r2, #0
 8000c82:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c84:	4b0b      	ldr	r3, [pc, #44]	; (8000cb4 <HAL_Init+0x3c>)
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	4b0a      	ldr	r3, [pc, #40]	; (8000cb4 <HAL_Init+0x3c>)
 8000c8a:	2180      	movs	r1, #128	; 0x80
 8000c8c:	0049      	lsls	r1, r1, #1
 8000c8e:	430a      	orrs	r2, r1
 8000c90:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c92:	2003      	movs	r0, #3
 8000c94:	f000 f810 	bl	8000cb8 <HAL_InitTick>
 8000c98:	1e03      	subs	r3, r0, #0
 8000c9a:	d003      	beq.n	8000ca4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000c9c:	1dfb      	adds	r3, r7, #7
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	701a      	strb	r2, [r3, #0]
 8000ca2:	e001      	b.n	8000ca8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000ca4:	f7ff fe98 	bl	80009d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ca8:	1dfb      	adds	r3, r7, #7
 8000caa:	781b      	ldrb	r3, [r3, #0]
}
 8000cac:	0018      	movs	r0, r3
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	b002      	add	sp, #8
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	40022000 	.word	0x40022000

08000cb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cb8:	b590      	push	{r4, r7, lr}
 8000cba:	b085      	sub	sp, #20
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cc0:	230f      	movs	r3, #15
 8000cc2:	18fb      	adds	r3, r7, r3
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000cc8:	4b1d      	ldr	r3, [pc, #116]	; (8000d40 <HAL_InitTick+0x88>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d02b      	beq.n	8000d28 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000cd0:	4b1c      	ldr	r3, [pc, #112]	; (8000d44 <HAL_InitTick+0x8c>)
 8000cd2:	681c      	ldr	r4, [r3, #0]
 8000cd4:	4b1a      	ldr	r3, [pc, #104]	; (8000d40 <HAL_InitTick+0x88>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	0019      	movs	r1, r3
 8000cda:	23fa      	movs	r3, #250	; 0xfa
 8000cdc:	0098      	lsls	r0, r3, #2
 8000cde:	f7ff fa19 	bl	8000114 <__udivsi3>
 8000ce2:	0003      	movs	r3, r0
 8000ce4:	0019      	movs	r1, r3
 8000ce6:	0020      	movs	r0, r4
 8000ce8:	f7ff fa14 	bl	8000114 <__udivsi3>
 8000cec:	0003      	movs	r3, r0
 8000cee:	0018      	movs	r0, r3
 8000cf0:	f000 f905 	bl	8000efe <HAL_SYSTICK_Config>
 8000cf4:	1e03      	subs	r3, r0, #0
 8000cf6:	d112      	bne.n	8000d1e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2b03      	cmp	r3, #3
 8000cfc:	d80a      	bhi.n	8000d14 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cfe:	6879      	ldr	r1, [r7, #4]
 8000d00:	2301      	movs	r3, #1
 8000d02:	425b      	negs	r3, r3
 8000d04:	2200      	movs	r2, #0
 8000d06:	0018      	movs	r0, r3
 8000d08:	f000 f8e4 	bl	8000ed4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d0c:	4b0e      	ldr	r3, [pc, #56]	; (8000d48 <HAL_InitTick+0x90>)
 8000d0e:	687a      	ldr	r2, [r7, #4]
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	e00d      	b.n	8000d30 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000d14:	230f      	movs	r3, #15
 8000d16:	18fb      	adds	r3, r7, r3
 8000d18:	2201      	movs	r2, #1
 8000d1a:	701a      	strb	r2, [r3, #0]
 8000d1c:	e008      	b.n	8000d30 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d1e:	230f      	movs	r3, #15
 8000d20:	18fb      	adds	r3, r7, r3
 8000d22:	2201      	movs	r2, #1
 8000d24:	701a      	strb	r2, [r3, #0]
 8000d26:	e003      	b.n	8000d30 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d28:	230f      	movs	r3, #15
 8000d2a:	18fb      	adds	r3, r7, r3
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000d30:	230f      	movs	r3, #15
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	781b      	ldrb	r3, [r3, #0]
}
 8000d36:	0018      	movs	r0, r3
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	b005      	add	sp, #20
 8000d3c:	bd90      	pop	{r4, r7, pc}
 8000d3e:	46c0      	nop			; (mov r8, r8)
 8000d40:	2000000c 	.word	0x2000000c
 8000d44:	20000004 	.word	0x20000004
 8000d48:	20000008 	.word	0x20000008

08000d4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d50:	4b05      	ldr	r3, [pc, #20]	; (8000d68 <HAL_IncTick+0x1c>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	001a      	movs	r2, r3
 8000d56:	4b05      	ldr	r3, [pc, #20]	; (8000d6c <HAL_IncTick+0x20>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	18d2      	adds	r2, r2, r3
 8000d5c:	4b03      	ldr	r3, [pc, #12]	; (8000d6c <HAL_IncTick+0x20>)
 8000d5e:	601a      	str	r2, [r3, #0]
}
 8000d60:	46c0      	nop			; (mov r8, r8)
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	46c0      	nop			; (mov r8, r8)
 8000d68:	2000000c 	.word	0x2000000c
 8000d6c:	200001e8 	.word	0x200001e8

08000d70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  return uwTick;
 8000d74:	4b02      	ldr	r3, [pc, #8]	; (8000d80 <HAL_GetTick+0x10>)
 8000d76:	681b      	ldr	r3, [r3, #0]
}
 8000d78:	0018      	movs	r0, r3
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	46c0      	nop			; (mov r8, r8)
 8000d80:	200001e8 	.word	0x200001e8

08000d84 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000d8c:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a06      	ldr	r2, [pc, #24]	; (8000dac <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000d92:	4013      	ands	r3, r2
 8000d94:	0019      	movs	r1, r3
 8000d96:	4b04      	ldr	r3, [pc, #16]	; (8000da8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000d98:	687a      	ldr	r2, [r7, #4]
 8000d9a:	430a      	orrs	r2, r1
 8000d9c:	601a      	str	r2, [r3, #0]
}
 8000d9e:	46c0      	nop			; (mov r8, r8)
 8000da0:	46bd      	mov	sp, r7
 8000da2:	b002      	add	sp, #8
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	46c0      	nop			; (mov r8, r8)
 8000da8:	40010000 	.word	0x40010000
 8000dac:	fffff9ff 	.word	0xfffff9ff

08000db0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000db0:	b590      	push	{r4, r7, lr}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	0002      	movs	r2, r0
 8000db8:	6039      	str	r1, [r7, #0]
 8000dba:	1dfb      	adds	r3, r7, #7
 8000dbc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000dbe:	1dfb      	adds	r3, r7, #7
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	2b7f      	cmp	r3, #127	; 0x7f
 8000dc4:	d828      	bhi.n	8000e18 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dc6:	4a2f      	ldr	r2, [pc, #188]	; (8000e84 <__NVIC_SetPriority+0xd4>)
 8000dc8:	1dfb      	adds	r3, r7, #7
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	b25b      	sxtb	r3, r3
 8000dce:	089b      	lsrs	r3, r3, #2
 8000dd0:	33c0      	adds	r3, #192	; 0xc0
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	589b      	ldr	r3, [r3, r2]
 8000dd6:	1dfa      	adds	r2, r7, #7
 8000dd8:	7812      	ldrb	r2, [r2, #0]
 8000dda:	0011      	movs	r1, r2
 8000ddc:	2203      	movs	r2, #3
 8000dde:	400a      	ands	r2, r1
 8000de0:	00d2      	lsls	r2, r2, #3
 8000de2:	21ff      	movs	r1, #255	; 0xff
 8000de4:	4091      	lsls	r1, r2
 8000de6:	000a      	movs	r2, r1
 8000de8:	43d2      	mvns	r2, r2
 8000dea:	401a      	ands	r2, r3
 8000dec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	019b      	lsls	r3, r3, #6
 8000df2:	22ff      	movs	r2, #255	; 0xff
 8000df4:	401a      	ands	r2, r3
 8000df6:	1dfb      	adds	r3, r7, #7
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	0018      	movs	r0, r3
 8000dfc:	2303      	movs	r3, #3
 8000dfe:	4003      	ands	r3, r0
 8000e00:	00db      	lsls	r3, r3, #3
 8000e02:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e04:	481f      	ldr	r0, [pc, #124]	; (8000e84 <__NVIC_SetPriority+0xd4>)
 8000e06:	1dfb      	adds	r3, r7, #7
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	b25b      	sxtb	r3, r3
 8000e0c:	089b      	lsrs	r3, r3, #2
 8000e0e:	430a      	orrs	r2, r1
 8000e10:	33c0      	adds	r3, #192	; 0xc0
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000e16:	e031      	b.n	8000e7c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e18:	4a1b      	ldr	r2, [pc, #108]	; (8000e88 <__NVIC_SetPriority+0xd8>)
 8000e1a:	1dfb      	adds	r3, r7, #7
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	0019      	movs	r1, r3
 8000e20:	230f      	movs	r3, #15
 8000e22:	400b      	ands	r3, r1
 8000e24:	3b08      	subs	r3, #8
 8000e26:	089b      	lsrs	r3, r3, #2
 8000e28:	3306      	adds	r3, #6
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	18d3      	adds	r3, r2, r3
 8000e2e:	3304      	adds	r3, #4
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	1dfa      	adds	r2, r7, #7
 8000e34:	7812      	ldrb	r2, [r2, #0]
 8000e36:	0011      	movs	r1, r2
 8000e38:	2203      	movs	r2, #3
 8000e3a:	400a      	ands	r2, r1
 8000e3c:	00d2      	lsls	r2, r2, #3
 8000e3e:	21ff      	movs	r1, #255	; 0xff
 8000e40:	4091      	lsls	r1, r2
 8000e42:	000a      	movs	r2, r1
 8000e44:	43d2      	mvns	r2, r2
 8000e46:	401a      	ands	r2, r3
 8000e48:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	019b      	lsls	r3, r3, #6
 8000e4e:	22ff      	movs	r2, #255	; 0xff
 8000e50:	401a      	ands	r2, r3
 8000e52:	1dfb      	adds	r3, r7, #7
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	0018      	movs	r0, r3
 8000e58:	2303      	movs	r3, #3
 8000e5a:	4003      	ands	r3, r0
 8000e5c:	00db      	lsls	r3, r3, #3
 8000e5e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e60:	4809      	ldr	r0, [pc, #36]	; (8000e88 <__NVIC_SetPriority+0xd8>)
 8000e62:	1dfb      	adds	r3, r7, #7
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	001c      	movs	r4, r3
 8000e68:	230f      	movs	r3, #15
 8000e6a:	4023      	ands	r3, r4
 8000e6c:	3b08      	subs	r3, #8
 8000e6e:	089b      	lsrs	r3, r3, #2
 8000e70:	430a      	orrs	r2, r1
 8000e72:	3306      	adds	r3, #6
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	18c3      	adds	r3, r0, r3
 8000e78:	3304      	adds	r3, #4
 8000e7a:	601a      	str	r2, [r3, #0]
}
 8000e7c:	46c0      	nop			; (mov r8, r8)
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	b003      	add	sp, #12
 8000e82:	bd90      	pop	{r4, r7, pc}
 8000e84:	e000e100 	.word	0xe000e100
 8000e88:	e000ed00 	.word	0xe000ed00

08000e8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	1e5a      	subs	r2, r3, #1
 8000e98:	2380      	movs	r3, #128	; 0x80
 8000e9a:	045b      	lsls	r3, r3, #17
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	d301      	bcc.n	8000ea4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	e010      	b.n	8000ec6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ea4:	4b0a      	ldr	r3, [pc, #40]	; (8000ed0 <SysTick_Config+0x44>)
 8000ea6:	687a      	ldr	r2, [r7, #4]
 8000ea8:	3a01      	subs	r2, #1
 8000eaa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eac:	2301      	movs	r3, #1
 8000eae:	425b      	negs	r3, r3
 8000eb0:	2103      	movs	r1, #3
 8000eb2:	0018      	movs	r0, r3
 8000eb4:	f7ff ff7c 	bl	8000db0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eb8:	4b05      	ldr	r3, [pc, #20]	; (8000ed0 <SysTick_Config+0x44>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ebe:	4b04      	ldr	r3, [pc, #16]	; (8000ed0 <SysTick_Config+0x44>)
 8000ec0:	2207      	movs	r2, #7
 8000ec2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ec4:	2300      	movs	r3, #0
}
 8000ec6:	0018      	movs	r0, r3
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	b002      	add	sp, #8
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	46c0      	nop			; (mov r8, r8)
 8000ed0:	e000e010 	.word	0xe000e010

08000ed4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	60b9      	str	r1, [r7, #8]
 8000edc:	607a      	str	r2, [r7, #4]
 8000ede:	210f      	movs	r1, #15
 8000ee0:	187b      	adds	r3, r7, r1
 8000ee2:	1c02      	adds	r2, r0, #0
 8000ee4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000ee6:	68ba      	ldr	r2, [r7, #8]
 8000ee8:	187b      	adds	r3, r7, r1
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	b25b      	sxtb	r3, r3
 8000eee:	0011      	movs	r1, r2
 8000ef0:	0018      	movs	r0, r3
 8000ef2:	f7ff ff5d 	bl	8000db0 <__NVIC_SetPriority>
}
 8000ef6:	46c0      	nop			; (mov r8, r8)
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	b004      	add	sp, #16
 8000efc:	bd80      	pop	{r7, pc}

08000efe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b082      	sub	sp, #8
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	0018      	movs	r0, r3
 8000f0a:	f7ff ffbf 	bl	8000e8c <SysTick_Config>
 8000f0e:	0003      	movs	r3, r0
}
 8000f10:	0018      	movs	r0, r3
 8000f12:	46bd      	mov	sp, r7
 8000f14:	b002      	add	sp, #8
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b086      	sub	sp, #24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f22:	2300      	movs	r3, #0
 8000f24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f26:	e14d      	b.n	80011c4 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	2101      	movs	r1, #1
 8000f2e:	697a      	ldr	r2, [r7, #20]
 8000f30:	4091      	lsls	r1, r2
 8000f32:	000a      	movs	r2, r1
 8000f34:	4013      	ands	r3, r2
 8000f36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d100      	bne.n	8000f40 <HAL_GPIO_Init+0x28>
 8000f3e:	e13e      	b.n	80011be <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	2203      	movs	r2, #3
 8000f46:	4013      	ands	r3, r2
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d005      	beq.n	8000f58 <HAL_GPIO_Init+0x40>
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	2203      	movs	r2, #3
 8000f52:	4013      	ands	r3, r2
 8000f54:	2b02      	cmp	r3, #2
 8000f56:	d130      	bne.n	8000fba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	689b      	ldr	r3, [r3, #8]
 8000f5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	2203      	movs	r2, #3
 8000f64:	409a      	lsls	r2, r3
 8000f66:	0013      	movs	r3, r2
 8000f68:	43da      	mvns	r2, r3
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	68da      	ldr	r2, [r3, #12]
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	409a      	lsls	r2, r3
 8000f7a:	0013      	movs	r3, r2
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f8e:	2201      	movs	r2, #1
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	409a      	lsls	r2, r3
 8000f94:	0013      	movs	r3, r2
 8000f96:	43da      	mvns	r2, r3
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	091b      	lsrs	r3, r3, #4
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	401a      	ands	r2, r3
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	409a      	lsls	r2, r3
 8000fac:	0013      	movs	r3, r2
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	2203      	movs	r2, #3
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	2b03      	cmp	r3, #3
 8000fc4:	d017      	beq.n	8000ff6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	68db      	ldr	r3, [r3, #12]
 8000fca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	2203      	movs	r2, #3
 8000fd2:	409a      	lsls	r2, r3
 8000fd4:	0013      	movs	r3, r2
 8000fd6:	43da      	mvns	r2, r3
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	689a      	ldr	r2, [r3, #8]
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	409a      	lsls	r2, r3
 8000fe8:	0013      	movs	r3, r2
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	2203      	movs	r2, #3
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	2b02      	cmp	r3, #2
 8001000:	d123      	bne.n	800104a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	08da      	lsrs	r2, r3, #3
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	3208      	adds	r2, #8
 800100a:	0092      	lsls	r2, r2, #2
 800100c:	58d3      	ldr	r3, [r2, r3]
 800100e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	2207      	movs	r2, #7
 8001014:	4013      	ands	r3, r2
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	220f      	movs	r2, #15
 800101a:	409a      	lsls	r2, r3
 800101c:	0013      	movs	r3, r2
 800101e:	43da      	mvns	r2, r3
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	4013      	ands	r3, r2
 8001024:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	691a      	ldr	r2, [r3, #16]
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	2107      	movs	r1, #7
 800102e:	400b      	ands	r3, r1
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	409a      	lsls	r2, r3
 8001034:	0013      	movs	r3, r2
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	4313      	orrs	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	08da      	lsrs	r2, r3, #3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	3208      	adds	r2, #8
 8001044:	0092      	lsls	r2, r2, #2
 8001046:	6939      	ldr	r1, [r7, #16]
 8001048:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	2203      	movs	r2, #3
 8001056:	409a      	lsls	r2, r3
 8001058:	0013      	movs	r3, r2
 800105a:	43da      	mvns	r2, r3
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	4013      	ands	r3, r2
 8001060:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	2203      	movs	r2, #3
 8001068:	401a      	ands	r2, r3
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	409a      	lsls	r2, r3
 8001070:	0013      	movs	r3, r2
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	4313      	orrs	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685a      	ldr	r2, [r3, #4]
 8001082:	23c0      	movs	r3, #192	; 0xc0
 8001084:	029b      	lsls	r3, r3, #10
 8001086:	4013      	ands	r3, r2
 8001088:	d100      	bne.n	800108c <HAL_GPIO_Init+0x174>
 800108a:	e098      	b.n	80011be <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800108c:	4a53      	ldr	r2, [pc, #332]	; (80011dc <HAL_GPIO_Init+0x2c4>)
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	089b      	lsrs	r3, r3, #2
 8001092:	3318      	adds	r3, #24
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	589b      	ldr	r3, [r3, r2]
 8001098:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	2203      	movs	r2, #3
 800109e:	4013      	ands	r3, r2
 80010a0:	00db      	lsls	r3, r3, #3
 80010a2:	220f      	movs	r2, #15
 80010a4:	409a      	lsls	r2, r3
 80010a6:	0013      	movs	r3, r2
 80010a8:	43da      	mvns	r2, r3
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	4013      	ands	r3, r2
 80010ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80010b0:	687a      	ldr	r2, [r7, #4]
 80010b2:	23a0      	movs	r3, #160	; 0xa0
 80010b4:	05db      	lsls	r3, r3, #23
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d019      	beq.n	80010ee <HAL_GPIO_Init+0x1d6>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a48      	ldr	r2, [pc, #288]	; (80011e0 <HAL_GPIO_Init+0x2c8>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d013      	beq.n	80010ea <HAL_GPIO_Init+0x1d2>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a47      	ldr	r2, [pc, #284]	; (80011e4 <HAL_GPIO_Init+0x2cc>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d00d      	beq.n	80010e6 <HAL_GPIO_Init+0x1ce>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a46      	ldr	r2, [pc, #280]	; (80011e8 <HAL_GPIO_Init+0x2d0>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d007      	beq.n	80010e2 <HAL_GPIO_Init+0x1ca>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a45      	ldr	r2, [pc, #276]	; (80011ec <HAL_GPIO_Init+0x2d4>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d101      	bne.n	80010de <HAL_GPIO_Init+0x1c6>
 80010da:	2304      	movs	r3, #4
 80010dc:	e008      	b.n	80010f0 <HAL_GPIO_Init+0x1d8>
 80010de:	2305      	movs	r3, #5
 80010e0:	e006      	b.n	80010f0 <HAL_GPIO_Init+0x1d8>
 80010e2:	2303      	movs	r3, #3
 80010e4:	e004      	b.n	80010f0 <HAL_GPIO_Init+0x1d8>
 80010e6:	2302      	movs	r3, #2
 80010e8:	e002      	b.n	80010f0 <HAL_GPIO_Init+0x1d8>
 80010ea:	2301      	movs	r3, #1
 80010ec:	e000      	b.n	80010f0 <HAL_GPIO_Init+0x1d8>
 80010ee:	2300      	movs	r3, #0
 80010f0:	697a      	ldr	r2, [r7, #20]
 80010f2:	2103      	movs	r1, #3
 80010f4:	400a      	ands	r2, r1
 80010f6:	00d2      	lsls	r2, r2, #3
 80010f8:	4093      	lsls	r3, r2
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001100:	4936      	ldr	r1, [pc, #216]	; (80011dc <HAL_GPIO_Init+0x2c4>)
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	089b      	lsrs	r3, r3, #2
 8001106:	3318      	adds	r3, #24
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800110e:	4b33      	ldr	r3, [pc, #204]	; (80011dc <HAL_GPIO_Init+0x2c4>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	43da      	mvns	r2, r3
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	4013      	ands	r3, r2
 800111c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685a      	ldr	r2, [r3, #4]
 8001122:	2380      	movs	r3, #128	; 0x80
 8001124:	035b      	lsls	r3, r3, #13
 8001126:	4013      	ands	r3, r2
 8001128:	d003      	beq.n	8001132 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	4313      	orrs	r3, r2
 8001130:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001132:	4b2a      	ldr	r3, [pc, #168]	; (80011dc <HAL_GPIO_Init+0x2c4>)
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001138:	4b28      	ldr	r3, [pc, #160]	; (80011dc <HAL_GPIO_Init+0x2c4>)
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	43da      	mvns	r2, r3
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	4013      	ands	r3, r2
 8001146:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685a      	ldr	r2, [r3, #4]
 800114c:	2380      	movs	r3, #128	; 0x80
 800114e:	039b      	lsls	r3, r3, #14
 8001150:	4013      	ands	r3, r2
 8001152:	d003      	beq.n	800115c <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001154:	693a      	ldr	r2, [r7, #16]
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	4313      	orrs	r3, r2
 800115a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800115c:	4b1f      	ldr	r3, [pc, #124]	; (80011dc <HAL_GPIO_Init+0x2c4>)
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001162:	4a1e      	ldr	r2, [pc, #120]	; (80011dc <HAL_GPIO_Init+0x2c4>)
 8001164:	2384      	movs	r3, #132	; 0x84
 8001166:	58d3      	ldr	r3, [r2, r3]
 8001168:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	43da      	mvns	r2, r3
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	4013      	ands	r3, r2
 8001172:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685a      	ldr	r2, [r3, #4]
 8001178:	2380      	movs	r3, #128	; 0x80
 800117a:	029b      	lsls	r3, r3, #10
 800117c:	4013      	ands	r3, r2
 800117e:	d003      	beq.n	8001188 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001180:	693a      	ldr	r2, [r7, #16]
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	4313      	orrs	r3, r2
 8001186:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001188:	4914      	ldr	r1, [pc, #80]	; (80011dc <HAL_GPIO_Init+0x2c4>)
 800118a:	2284      	movs	r2, #132	; 0x84
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001190:	4a12      	ldr	r2, [pc, #72]	; (80011dc <HAL_GPIO_Init+0x2c4>)
 8001192:	2380      	movs	r3, #128	; 0x80
 8001194:	58d3      	ldr	r3, [r2, r3]
 8001196:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	43da      	mvns	r2, r3
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	4013      	ands	r3, r2
 80011a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685a      	ldr	r2, [r3, #4]
 80011a6:	2380      	movs	r3, #128	; 0x80
 80011a8:	025b      	lsls	r3, r3, #9
 80011aa:	4013      	ands	r3, r2
 80011ac:	d003      	beq.n	80011b6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011b6:	4909      	ldr	r1, [pc, #36]	; (80011dc <HAL_GPIO_Init+0x2c4>)
 80011b8:	2280      	movs	r2, #128	; 0x80
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	3301      	adds	r3, #1
 80011c2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	40da      	lsrs	r2, r3
 80011cc:	1e13      	subs	r3, r2, #0
 80011ce:	d000      	beq.n	80011d2 <HAL_GPIO_Init+0x2ba>
 80011d0:	e6aa      	b.n	8000f28 <HAL_GPIO_Init+0x10>
  }
}
 80011d2:	46c0      	nop			; (mov r8, r8)
 80011d4:	46c0      	nop			; (mov r8, r8)
 80011d6:	46bd      	mov	sp, r7
 80011d8:	b006      	add	sp, #24
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	40021800 	.word	0x40021800
 80011e0:	50000400 	.word	0x50000400
 80011e4:	50000800 	.word	0x50000800
 80011e8:	50000c00 	.word	0x50000c00
 80011ec:	50001000 	.word	0x50001000

080011f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	0008      	movs	r0, r1
 80011fa:	0011      	movs	r1, r2
 80011fc:	1cbb      	adds	r3, r7, #2
 80011fe:	1c02      	adds	r2, r0, #0
 8001200:	801a      	strh	r2, [r3, #0]
 8001202:	1c7b      	adds	r3, r7, #1
 8001204:	1c0a      	adds	r2, r1, #0
 8001206:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001208:	1c7b      	adds	r3, r7, #1
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d004      	beq.n	800121a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001210:	1cbb      	adds	r3, r7, #2
 8001212:	881a      	ldrh	r2, [r3, #0]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001218:	e003      	b.n	8001222 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800121a:	1cbb      	adds	r3, r7, #2
 800121c:	881a      	ldrh	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001222:	46c0      	nop			; (mov r8, r8)
 8001224:	46bd      	mov	sp, r7
 8001226:	b002      	add	sp, #8
 8001228:	bd80      	pop	{r7, pc}
	...

0800122c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001234:	4b19      	ldr	r3, [pc, #100]	; (800129c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a19      	ldr	r2, [pc, #100]	; (80012a0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800123a:	4013      	ands	r3, r2
 800123c:	0019      	movs	r1, r3
 800123e:	4b17      	ldr	r3, [pc, #92]	; (800129c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001240:	687a      	ldr	r2, [r7, #4]
 8001242:	430a      	orrs	r2, r1
 8001244:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	2380      	movs	r3, #128	; 0x80
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	429a      	cmp	r2, r3
 800124e:	d11f      	bne.n	8001290 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001250:	4b14      	ldr	r3, [pc, #80]	; (80012a4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	0013      	movs	r3, r2
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	189b      	adds	r3, r3, r2
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	4912      	ldr	r1, [pc, #72]	; (80012a8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800125e:	0018      	movs	r0, r3
 8001260:	f7fe ff58 	bl	8000114 <__udivsi3>
 8001264:	0003      	movs	r3, r0
 8001266:	3301      	adds	r3, #1
 8001268:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800126a:	e008      	b.n	800127e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d003      	beq.n	800127a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	3b01      	subs	r3, #1
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	e001      	b.n	800127e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800127a:	2303      	movs	r3, #3
 800127c:	e009      	b.n	8001292 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800127e:	4b07      	ldr	r3, [pc, #28]	; (800129c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001280:	695a      	ldr	r2, [r3, #20]
 8001282:	2380      	movs	r3, #128	; 0x80
 8001284:	00db      	lsls	r3, r3, #3
 8001286:	401a      	ands	r2, r3
 8001288:	2380      	movs	r3, #128	; 0x80
 800128a:	00db      	lsls	r3, r3, #3
 800128c:	429a      	cmp	r2, r3
 800128e:	d0ed      	beq.n	800126c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001290:	2300      	movs	r3, #0
}
 8001292:	0018      	movs	r0, r3
 8001294:	46bd      	mov	sp, r7
 8001296:	b004      	add	sp, #16
 8001298:	bd80      	pop	{r7, pc}
 800129a:	46c0      	nop			; (mov r8, r8)
 800129c:	40007000 	.word	0x40007000
 80012a0:	fffff9ff 	.word	0xfffff9ff
 80012a4:	20000004 	.word	0x20000004
 80012a8:	000f4240 	.word	0x000f4240

080012ac <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80012b0:	4b03      	ldr	r3, [pc, #12]	; (80012c0 <LL_RCC_GetAPB1Prescaler+0x14>)
 80012b2:	689a      	ldr	r2, [r3, #8]
 80012b4:	23e0      	movs	r3, #224	; 0xe0
 80012b6:	01db      	lsls	r3, r3, #7
 80012b8:	4013      	ands	r3, r2
}
 80012ba:	0018      	movs	r0, r3
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	40021000 	.word	0x40021000

080012c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b088      	sub	sp, #32
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d102      	bne.n	80012d8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	f000 fb50 	bl	8001978 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2201      	movs	r2, #1
 80012de:	4013      	ands	r3, r2
 80012e0:	d100      	bne.n	80012e4 <HAL_RCC_OscConfig+0x20>
 80012e2:	e07c      	b.n	80013de <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012e4:	4bc3      	ldr	r3, [pc, #780]	; (80015f4 <HAL_RCC_OscConfig+0x330>)
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	2238      	movs	r2, #56	; 0x38
 80012ea:	4013      	ands	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012ee:	4bc1      	ldr	r3, [pc, #772]	; (80015f4 <HAL_RCC_OscConfig+0x330>)
 80012f0:	68db      	ldr	r3, [r3, #12]
 80012f2:	2203      	movs	r2, #3
 80012f4:	4013      	ands	r3, r2
 80012f6:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	2b10      	cmp	r3, #16
 80012fc:	d102      	bne.n	8001304 <HAL_RCC_OscConfig+0x40>
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	2b03      	cmp	r3, #3
 8001302:	d002      	beq.n	800130a <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	2b08      	cmp	r3, #8
 8001308:	d10b      	bne.n	8001322 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800130a:	4bba      	ldr	r3, [pc, #744]	; (80015f4 <HAL_RCC_OscConfig+0x330>)
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	2380      	movs	r3, #128	; 0x80
 8001310:	029b      	lsls	r3, r3, #10
 8001312:	4013      	ands	r3, r2
 8001314:	d062      	beq.n	80013dc <HAL_RCC_OscConfig+0x118>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d15e      	bne.n	80013dc <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e32a      	b.n	8001978 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	685a      	ldr	r2, [r3, #4]
 8001326:	2380      	movs	r3, #128	; 0x80
 8001328:	025b      	lsls	r3, r3, #9
 800132a:	429a      	cmp	r2, r3
 800132c:	d107      	bne.n	800133e <HAL_RCC_OscConfig+0x7a>
 800132e:	4bb1      	ldr	r3, [pc, #708]	; (80015f4 <HAL_RCC_OscConfig+0x330>)
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	4bb0      	ldr	r3, [pc, #704]	; (80015f4 <HAL_RCC_OscConfig+0x330>)
 8001334:	2180      	movs	r1, #128	; 0x80
 8001336:	0249      	lsls	r1, r1, #9
 8001338:	430a      	orrs	r2, r1
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	e020      	b.n	8001380 <HAL_RCC_OscConfig+0xbc>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	685a      	ldr	r2, [r3, #4]
 8001342:	23a0      	movs	r3, #160	; 0xa0
 8001344:	02db      	lsls	r3, r3, #11
 8001346:	429a      	cmp	r2, r3
 8001348:	d10e      	bne.n	8001368 <HAL_RCC_OscConfig+0xa4>
 800134a:	4baa      	ldr	r3, [pc, #680]	; (80015f4 <HAL_RCC_OscConfig+0x330>)
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	4ba9      	ldr	r3, [pc, #676]	; (80015f4 <HAL_RCC_OscConfig+0x330>)
 8001350:	2180      	movs	r1, #128	; 0x80
 8001352:	02c9      	lsls	r1, r1, #11
 8001354:	430a      	orrs	r2, r1
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	4ba6      	ldr	r3, [pc, #664]	; (80015f4 <HAL_RCC_OscConfig+0x330>)
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	4ba5      	ldr	r3, [pc, #660]	; (80015f4 <HAL_RCC_OscConfig+0x330>)
 800135e:	2180      	movs	r1, #128	; 0x80
 8001360:	0249      	lsls	r1, r1, #9
 8001362:	430a      	orrs	r2, r1
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	e00b      	b.n	8001380 <HAL_RCC_OscConfig+0xbc>
 8001368:	4ba2      	ldr	r3, [pc, #648]	; (80015f4 <HAL_RCC_OscConfig+0x330>)
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	4ba1      	ldr	r3, [pc, #644]	; (80015f4 <HAL_RCC_OscConfig+0x330>)
 800136e:	49a2      	ldr	r1, [pc, #648]	; (80015f8 <HAL_RCC_OscConfig+0x334>)
 8001370:	400a      	ands	r2, r1
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	4b9f      	ldr	r3, [pc, #636]	; (80015f4 <HAL_RCC_OscConfig+0x330>)
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	4b9e      	ldr	r3, [pc, #632]	; (80015f4 <HAL_RCC_OscConfig+0x330>)
 800137a:	49a0      	ldr	r1, [pc, #640]	; (80015fc <HAL_RCC_OscConfig+0x338>)
 800137c:	400a      	ands	r2, r1
 800137e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d014      	beq.n	80013b2 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001388:	f7ff fcf2 	bl	8000d70 <HAL_GetTick>
 800138c:	0003      	movs	r3, r0
 800138e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001390:	e008      	b.n	80013a4 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001392:	f7ff fced 	bl	8000d70 <HAL_GetTick>
 8001396:	0002      	movs	r2, r0
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	2b64      	cmp	r3, #100	; 0x64
 800139e:	d901      	bls.n	80013a4 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80013a0:	2303      	movs	r3, #3
 80013a2:	e2e9      	b.n	8001978 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013a4:	4b93      	ldr	r3, [pc, #588]	; (80015f4 <HAL_RCC_OscConfig+0x330>)
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	2380      	movs	r3, #128	; 0x80
 80013aa:	029b      	lsls	r3, r3, #10
 80013ac:	4013      	ands	r3, r2
 80013ae:	d0f0      	beq.n	8001392 <HAL_RCC_OscConfig+0xce>
 80013b0:	e015      	b.n	80013de <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013b2:	f7ff fcdd 	bl	8000d70 <HAL_GetTick>
 80013b6:	0003      	movs	r3, r0
 80013b8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013ba:	e008      	b.n	80013ce <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013bc:	f7ff fcd8 	bl	8000d70 <HAL_GetTick>
 80013c0:	0002      	movs	r2, r0
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	2b64      	cmp	r3, #100	; 0x64
 80013c8:	d901      	bls.n	80013ce <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80013ca:	2303      	movs	r3, #3
 80013cc:	e2d4      	b.n	8001978 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013ce:	4b89      	ldr	r3, [pc, #548]	; (80015f4 <HAL_RCC_OscConfig+0x330>)
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	2380      	movs	r3, #128	; 0x80
 80013d4:	029b      	lsls	r3, r3, #10
 80013d6:	4013      	ands	r3, r2
 80013d8:	d1f0      	bne.n	80013bc <HAL_RCC_OscConfig+0xf8>
 80013da:	e000      	b.n	80013de <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013dc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2202      	movs	r2, #2
 80013e4:	4013      	ands	r3, r2
 80013e6:	d100      	bne.n	80013ea <HAL_RCC_OscConfig+0x126>
 80013e8:	e099      	b.n	800151e <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013ea:	4b82      	ldr	r3, [pc, #520]	; (80015f4 <HAL_RCC_OscConfig+0x330>)
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	2238      	movs	r2, #56	; 0x38
 80013f0:	4013      	ands	r3, r2
 80013f2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013f4:	4b7f      	ldr	r3, [pc, #508]	; (80015f4 <HAL_RCC_OscConfig+0x330>)
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	2203      	movs	r2, #3
 80013fa:	4013      	ands	r3, r2
 80013fc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	2b10      	cmp	r3, #16
 8001402:	d102      	bne.n	800140a <HAL_RCC_OscConfig+0x146>
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	2b02      	cmp	r3, #2
 8001408:	d002      	beq.n	8001410 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800140a:	69bb      	ldr	r3, [r7, #24]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d135      	bne.n	800147c <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001410:	4b78      	ldr	r3, [pc, #480]	; (80015f4 <HAL_RCC_OscConfig+0x330>)
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	2380      	movs	r3, #128	; 0x80
 8001416:	00db      	lsls	r3, r3, #3
 8001418:	4013      	ands	r3, r2
 800141a:	d005      	beq.n	8001428 <HAL_RCC_OscConfig+0x164>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d101      	bne.n	8001428 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8001424:	2301      	movs	r3, #1
 8001426:	e2a7      	b.n	8001978 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001428:	4b72      	ldr	r3, [pc, #456]	; (80015f4 <HAL_RCC_OscConfig+0x330>)
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	4a74      	ldr	r2, [pc, #464]	; (8001600 <HAL_RCC_OscConfig+0x33c>)
 800142e:	4013      	ands	r3, r2
 8001430:	0019      	movs	r1, r3
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	695b      	ldr	r3, [r3, #20]
 8001436:	021a      	lsls	r2, r3, #8
 8001438:	4b6e      	ldr	r3, [pc, #440]	; (80015f4 <HAL_RCC_OscConfig+0x330>)
 800143a:	430a      	orrs	r2, r1
 800143c:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d112      	bne.n	800146a <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001444:	4b6b      	ldr	r3, [pc, #428]	; (80015f4 <HAL_RCC_OscConfig+0x330>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a6e      	ldr	r2, [pc, #440]	; (8001604 <HAL_RCC_OscConfig+0x340>)
 800144a:	4013      	ands	r3, r2
 800144c:	0019      	movs	r1, r3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	691a      	ldr	r2, [r3, #16]
 8001452:	4b68      	ldr	r3, [pc, #416]	; (80015f4 <HAL_RCC_OscConfig+0x330>)
 8001454:	430a      	orrs	r2, r1
 8001456:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001458:	4b66      	ldr	r3, [pc, #408]	; (80015f4 <HAL_RCC_OscConfig+0x330>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	0adb      	lsrs	r3, r3, #11
 800145e:	2207      	movs	r2, #7
 8001460:	4013      	ands	r3, r2
 8001462:	4a69      	ldr	r2, [pc, #420]	; (8001608 <HAL_RCC_OscConfig+0x344>)
 8001464:	40da      	lsrs	r2, r3
 8001466:	4b69      	ldr	r3, [pc, #420]	; (800160c <HAL_RCC_OscConfig+0x348>)
 8001468:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800146a:	4b69      	ldr	r3, [pc, #420]	; (8001610 <HAL_RCC_OscConfig+0x34c>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	0018      	movs	r0, r3
 8001470:	f7ff fc22 	bl	8000cb8 <HAL_InitTick>
 8001474:	1e03      	subs	r3, r0, #0
 8001476:	d051      	beq.n	800151c <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	e27d      	b.n	8001978 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d030      	beq.n	80014e6 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001484:	4b5b      	ldr	r3, [pc, #364]	; (80015f4 <HAL_RCC_OscConfig+0x330>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a5e      	ldr	r2, [pc, #376]	; (8001604 <HAL_RCC_OscConfig+0x340>)
 800148a:	4013      	ands	r3, r2
 800148c:	0019      	movs	r1, r3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	691a      	ldr	r2, [r3, #16]
 8001492:	4b58      	ldr	r3, [pc, #352]	; (80015f4 <HAL_RCC_OscConfig+0x330>)
 8001494:	430a      	orrs	r2, r1
 8001496:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001498:	4b56      	ldr	r3, [pc, #344]	; (80015f4 <HAL_RCC_OscConfig+0x330>)
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	4b55      	ldr	r3, [pc, #340]	; (80015f4 <HAL_RCC_OscConfig+0x330>)
 800149e:	2180      	movs	r1, #128	; 0x80
 80014a0:	0049      	lsls	r1, r1, #1
 80014a2:	430a      	orrs	r2, r1
 80014a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014a6:	f7ff fc63 	bl	8000d70 <HAL_GetTick>
 80014aa:	0003      	movs	r3, r0
 80014ac:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014ae:	e008      	b.n	80014c2 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014b0:	f7ff fc5e 	bl	8000d70 <HAL_GetTick>
 80014b4:	0002      	movs	r2, r0
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d901      	bls.n	80014c2 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	e25a      	b.n	8001978 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014c2:	4b4c      	ldr	r3, [pc, #304]	; (80015f4 <HAL_RCC_OscConfig+0x330>)
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	2380      	movs	r3, #128	; 0x80
 80014c8:	00db      	lsls	r3, r3, #3
 80014ca:	4013      	ands	r3, r2
 80014cc:	d0f0      	beq.n	80014b0 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ce:	4b49      	ldr	r3, [pc, #292]	; (80015f4 <HAL_RCC_OscConfig+0x330>)
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	4a4b      	ldr	r2, [pc, #300]	; (8001600 <HAL_RCC_OscConfig+0x33c>)
 80014d4:	4013      	ands	r3, r2
 80014d6:	0019      	movs	r1, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	695b      	ldr	r3, [r3, #20]
 80014dc:	021a      	lsls	r2, r3, #8
 80014de:	4b45      	ldr	r3, [pc, #276]	; (80015f4 <HAL_RCC_OscConfig+0x330>)
 80014e0:	430a      	orrs	r2, r1
 80014e2:	605a      	str	r2, [r3, #4]
 80014e4:	e01b      	b.n	800151e <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80014e6:	4b43      	ldr	r3, [pc, #268]	; (80015f4 <HAL_RCC_OscConfig+0x330>)
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	4b42      	ldr	r3, [pc, #264]	; (80015f4 <HAL_RCC_OscConfig+0x330>)
 80014ec:	4949      	ldr	r1, [pc, #292]	; (8001614 <HAL_RCC_OscConfig+0x350>)
 80014ee:	400a      	ands	r2, r1
 80014f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f2:	f7ff fc3d 	bl	8000d70 <HAL_GetTick>
 80014f6:	0003      	movs	r3, r0
 80014f8:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014fa:	e008      	b.n	800150e <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014fc:	f7ff fc38 	bl	8000d70 <HAL_GetTick>
 8001500:	0002      	movs	r2, r0
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	2b02      	cmp	r3, #2
 8001508:	d901      	bls.n	800150e <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e234      	b.n	8001978 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800150e:	4b39      	ldr	r3, [pc, #228]	; (80015f4 <HAL_RCC_OscConfig+0x330>)
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	2380      	movs	r3, #128	; 0x80
 8001514:	00db      	lsls	r3, r3, #3
 8001516:	4013      	ands	r3, r2
 8001518:	d1f0      	bne.n	80014fc <HAL_RCC_OscConfig+0x238>
 800151a:	e000      	b.n	800151e <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800151c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2208      	movs	r2, #8
 8001524:	4013      	ands	r3, r2
 8001526:	d047      	beq.n	80015b8 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001528:	4b32      	ldr	r3, [pc, #200]	; (80015f4 <HAL_RCC_OscConfig+0x330>)
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	2238      	movs	r2, #56	; 0x38
 800152e:	4013      	ands	r3, r2
 8001530:	2b18      	cmp	r3, #24
 8001532:	d10a      	bne.n	800154a <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001534:	4b2f      	ldr	r3, [pc, #188]	; (80015f4 <HAL_RCC_OscConfig+0x330>)
 8001536:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001538:	2202      	movs	r2, #2
 800153a:	4013      	ands	r3, r2
 800153c:	d03c      	beq.n	80015b8 <HAL_RCC_OscConfig+0x2f4>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	699b      	ldr	r3, [r3, #24]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d138      	bne.n	80015b8 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e216      	b.n	8001978 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	699b      	ldr	r3, [r3, #24]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d019      	beq.n	8001586 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001552:	4b28      	ldr	r3, [pc, #160]	; (80015f4 <HAL_RCC_OscConfig+0x330>)
 8001554:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001556:	4b27      	ldr	r3, [pc, #156]	; (80015f4 <HAL_RCC_OscConfig+0x330>)
 8001558:	2101      	movs	r1, #1
 800155a:	430a      	orrs	r2, r1
 800155c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800155e:	f7ff fc07 	bl	8000d70 <HAL_GetTick>
 8001562:	0003      	movs	r3, r0
 8001564:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001566:	e008      	b.n	800157a <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001568:	f7ff fc02 	bl	8000d70 <HAL_GetTick>
 800156c:	0002      	movs	r2, r0
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	2b02      	cmp	r3, #2
 8001574:	d901      	bls.n	800157a <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e1fe      	b.n	8001978 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800157a:	4b1e      	ldr	r3, [pc, #120]	; (80015f4 <HAL_RCC_OscConfig+0x330>)
 800157c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800157e:	2202      	movs	r2, #2
 8001580:	4013      	ands	r3, r2
 8001582:	d0f1      	beq.n	8001568 <HAL_RCC_OscConfig+0x2a4>
 8001584:	e018      	b.n	80015b8 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001586:	4b1b      	ldr	r3, [pc, #108]	; (80015f4 <HAL_RCC_OscConfig+0x330>)
 8001588:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800158a:	4b1a      	ldr	r3, [pc, #104]	; (80015f4 <HAL_RCC_OscConfig+0x330>)
 800158c:	2101      	movs	r1, #1
 800158e:	438a      	bics	r2, r1
 8001590:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001592:	f7ff fbed 	bl	8000d70 <HAL_GetTick>
 8001596:	0003      	movs	r3, r0
 8001598:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800159a:	e008      	b.n	80015ae <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800159c:	f7ff fbe8 	bl	8000d70 <HAL_GetTick>
 80015a0:	0002      	movs	r2, r0
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e1e4      	b.n	8001978 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015ae:	4b11      	ldr	r3, [pc, #68]	; (80015f4 <HAL_RCC_OscConfig+0x330>)
 80015b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015b2:	2202      	movs	r2, #2
 80015b4:	4013      	ands	r3, r2
 80015b6:	d1f1      	bne.n	800159c <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2204      	movs	r2, #4
 80015be:	4013      	ands	r3, r2
 80015c0:	d100      	bne.n	80015c4 <HAL_RCC_OscConfig+0x300>
 80015c2:	e0c7      	b.n	8001754 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015c4:	231f      	movs	r3, #31
 80015c6:	18fb      	adds	r3, r7, r3
 80015c8:	2200      	movs	r2, #0
 80015ca:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80015cc:	4b09      	ldr	r3, [pc, #36]	; (80015f4 <HAL_RCC_OscConfig+0x330>)
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	2238      	movs	r2, #56	; 0x38
 80015d2:	4013      	ands	r3, r2
 80015d4:	2b20      	cmp	r3, #32
 80015d6:	d11f      	bne.n	8001618 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80015d8:	4b06      	ldr	r3, [pc, #24]	; (80015f4 <HAL_RCC_OscConfig+0x330>)
 80015da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015dc:	2202      	movs	r2, #2
 80015de:	4013      	ands	r3, r2
 80015e0:	d100      	bne.n	80015e4 <HAL_RCC_OscConfig+0x320>
 80015e2:	e0b7      	b.n	8001754 <HAL_RCC_OscConfig+0x490>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d000      	beq.n	80015ee <HAL_RCC_OscConfig+0x32a>
 80015ec:	e0b2      	b.n	8001754 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e1c2      	b.n	8001978 <HAL_RCC_OscConfig+0x6b4>
 80015f2:	46c0      	nop			; (mov r8, r8)
 80015f4:	40021000 	.word	0x40021000
 80015f8:	fffeffff 	.word	0xfffeffff
 80015fc:	fffbffff 	.word	0xfffbffff
 8001600:	ffff80ff 	.word	0xffff80ff
 8001604:	ffffc7ff 	.word	0xffffc7ff
 8001608:	00f42400 	.word	0x00f42400
 800160c:	20000004 	.word	0x20000004
 8001610:	20000008 	.word	0x20000008
 8001614:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001618:	4bb5      	ldr	r3, [pc, #724]	; (80018f0 <HAL_RCC_OscConfig+0x62c>)
 800161a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800161c:	2380      	movs	r3, #128	; 0x80
 800161e:	055b      	lsls	r3, r3, #21
 8001620:	4013      	ands	r3, r2
 8001622:	d101      	bne.n	8001628 <HAL_RCC_OscConfig+0x364>
 8001624:	2301      	movs	r3, #1
 8001626:	e000      	b.n	800162a <HAL_RCC_OscConfig+0x366>
 8001628:	2300      	movs	r3, #0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d011      	beq.n	8001652 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800162e:	4bb0      	ldr	r3, [pc, #704]	; (80018f0 <HAL_RCC_OscConfig+0x62c>)
 8001630:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001632:	4baf      	ldr	r3, [pc, #700]	; (80018f0 <HAL_RCC_OscConfig+0x62c>)
 8001634:	2180      	movs	r1, #128	; 0x80
 8001636:	0549      	lsls	r1, r1, #21
 8001638:	430a      	orrs	r2, r1
 800163a:	63da      	str	r2, [r3, #60]	; 0x3c
 800163c:	4bac      	ldr	r3, [pc, #688]	; (80018f0 <HAL_RCC_OscConfig+0x62c>)
 800163e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001640:	2380      	movs	r3, #128	; 0x80
 8001642:	055b      	lsls	r3, r3, #21
 8001644:	4013      	ands	r3, r2
 8001646:	60fb      	str	r3, [r7, #12]
 8001648:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800164a:	231f      	movs	r3, #31
 800164c:	18fb      	adds	r3, r7, r3
 800164e:	2201      	movs	r2, #1
 8001650:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001652:	4ba8      	ldr	r3, [pc, #672]	; (80018f4 <HAL_RCC_OscConfig+0x630>)
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	2380      	movs	r3, #128	; 0x80
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	4013      	ands	r3, r2
 800165c:	d11a      	bne.n	8001694 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800165e:	4ba5      	ldr	r3, [pc, #660]	; (80018f4 <HAL_RCC_OscConfig+0x630>)
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	4ba4      	ldr	r3, [pc, #656]	; (80018f4 <HAL_RCC_OscConfig+0x630>)
 8001664:	2180      	movs	r1, #128	; 0x80
 8001666:	0049      	lsls	r1, r1, #1
 8001668:	430a      	orrs	r2, r1
 800166a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800166c:	f7ff fb80 	bl	8000d70 <HAL_GetTick>
 8001670:	0003      	movs	r3, r0
 8001672:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001674:	e008      	b.n	8001688 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001676:	f7ff fb7b 	bl	8000d70 <HAL_GetTick>
 800167a:	0002      	movs	r2, r0
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	2b02      	cmp	r3, #2
 8001682:	d901      	bls.n	8001688 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	e177      	b.n	8001978 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001688:	4b9a      	ldr	r3, [pc, #616]	; (80018f4 <HAL_RCC_OscConfig+0x630>)
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	2380      	movs	r3, #128	; 0x80
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	4013      	ands	r3, r2
 8001692:	d0f0      	beq.n	8001676 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	2b01      	cmp	r3, #1
 800169a:	d106      	bne.n	80016aa <HAL_RCC_OscConfig+0x3e6>
 800169c:	4b94      	ldr	r3, [pc, #592]	; (80018f0 <HAL_RCC_OscConfig+0x62c>)
 800169e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016a0:	4b93      	ldr	r3, [pc, #588]	; (80018f0 <HAL_RCC_OscConfig+0x62c>)
 80016a2:	2101      	movs	r1, #1
 80016a4:	430a      	orrs	r2, r1
 80016a6:	65da      	str	r2, [r3, #92]	; 0x5c
 80016a8:	e01c      	b.n	80016e4 <HAL_RCC_OscConfig+0x420>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	2b05      	cmp	r3, #5
 80016b0:	d10c      	bne.n	80016cc <HAL_RCC_OscConfig+0x408>
 80016b2:	4b8f      	ldr	r3, [pc, #572]	; (80018f0 <HAL_RCC_OscConfig+0x62c>)
 80016b4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016b6:	4b8e      	ldr	r3, [pc, #568]	; (80018f0 <HAL_RCC_OscConfig+0x62c>)
 80016b8:	2104      	movs	r1, #4
 80016ba:	430a      	orrs	r2, r1
 80016bc:	65da      	str	r2, [r3, #92]	; 0x5c
 80016be:	4b8c      	ldr	r3, [pc, #560]	; (80018f0 <HAL_RCC_OscConfig+0x62c>)
 80016c0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016c2:	4b8b      	ldr	r3, [pc, #556]	; (80018f0 <HAL_RCC_OscConfig+0x62c>)
 80016c4:	2101      	movs	r1, #1
 80016c6:	430a      	orrs	r2, r1
 80016c8:	65da      	str	r2, [r3, #92]	; 0x5c
 80016ca:	e00b      	b.n	80016e4 <HAL_RCC_OscConfig+0x420>
 80016cc:	4b88      	ldr	r3, [pc, #544]	; (80018f0 <HAL_RCC_OscConfig+0x62c>)
 80016ce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016d0:	4b87      	ldr	r3, [pc, #540]	; (80018f0 <HAL_RCC_OscConfig+0x62c>)
 80016d2:	2101      	movs	r1, #1
 80016d4:	438a      	bics	r2, r1
 80016d6:	65da      	str	r2, [r3, #92]	; 0x5c
 80016d8:	4b85      	ldr	r3, [pc, #532]	; (80018f0 <HAL_RCC_OscConfig+0x62c>)
 80016da:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016dc:	4b84      	ldr	r3, [pc, #528]	; (80018f0 <HAL_RCC_OscConfig+0x62c>)
 80016de:	2104      	movs	r1, #4
 80016e0:	438a      	bics	r2, r1
 80016e2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d014      	beq.n	8001716 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ec:	f7ff fb40 	bl	8000d70 <HAL_GetTick>
 80016f0:	0003      	movs	r3, r0
 80016f2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016f4:	e009      	b.n	800170a <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016f6:	f7ff fb3b 	bl	8000d70 <HAL_GetTick>
 80016fa:	0002      	movs	r2, r0
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	4a7d      	ldr	r2, [pc, #500]	; (80018f8 <HAL_RCC_OscConfig+0x634>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d901      	bls.n	800170a <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e136      	b.n	8001978 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800170a:	4b79      	ldr	r3, [pc, #484]	; (80018f0 <HAL_RCC_OscConfig+0x62c>)
 800170c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800170e:	2202      	movs	r2, #2
 8001710:	4013      	ands	r3, r2
 8001712:	d0f0      	beq.n	80016f6 <HAL_RCC_OscConfig+0x432>
 8001714:	e013      	b.n	800173e <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001716:	f7ff fb2b 	bl	8000d70 <HAL_GetTick>
 800171a:	0003      	movs	r3, r0
 800171c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800171e:	e009      	b.n	8001734 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001720:	f7ff fb26 	bl	8000d70 <HAL_GetTick>
 8001724:	0002      	movs	r2, r0
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	4a73      	ldr	r2, [pc, #460]	; (80018f8 <HAL_RCC_OscConfig+0x634>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d901      	bls.n	8001734 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	e121      	b.n	8001978 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001734:	4b6e      	ldr	r3, [pc, #440]	; (80018f0 <HAL_RCC_OscConfig+0x62c>)
 8001736:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001738:	2202      	movs	r2, #2
 800173a:	4013      	ands	r3, r2
 800173c:	d1f0      	bne.n	8001720 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800173e:	231f      	movs	r3, #31
 8001740:	18fb      	adds	r3, r7, r3
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	2b01      	cmp	r3, #1
 8001746:	d105      	bne.n	8001754 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001748:	4b69      	ldr	r3, [pc, #420]	; (80018f0 <HAL_RCC_OscConfig+0x62c>)
 800174a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800174c:	4b68      	ldr	r3, [pc, #416]	; (80018f0 <HAL_RCC_OscConfig+0x62c>)
 800174e:	496b      	ldr	r1, [pc, #428]	; (80018fc <HAL_RCC_OscConfig+0x638>)
 8001750:	400a      	ands	r2, r1
 8001752:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2220      	movs	r2, #32
 800175a:	4013      	ands	r3, r2
 800175c:	d039      	beq.n	80017d2 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	69db      	ldr	r3, [r3, #28]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d01b      	beq.n	800179e <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001766:	4b62      	ldr	r3, [pc, #392]	; (80018f0 <HAL_RCC_OscConfig+0x62c>)
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	4b61      	ldr	r3, [pc, #388]	; (80018f0 <HAL_RCC_OscConfig+0x62c>)
 800176c:	2180      	movs	r1, #128	; 0x80
 800176e:	03c9      	lsls	r1, r1, #15
 8001770:	430a      	orrs	r2, r1
 8001772:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001774:	f7ff fafc 	bl	8000d70 <HAL_GetTick>
 8001778:	0003      	movs	r3, r0
 800177a:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800177c:	e008      	b.n	8001790 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800177e:	f7ff faf7 	bl	8000d70 <HAL_GetTick>
 8001782:	0002      	movs	r2, r0
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	2b02      	cmp	r3, #2
 800178a:	d901      	bls.n	8001790 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 800178c:	2303      	movs	r3, #3
 800178e:	e0f3      	b.n	8001978 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001790:	4b57      	ldr	r3, [pc, #348]	; (80018f0 <HAL_RCC_OscConfig+0x62c>)
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	2380      	movs	r3, #128	; 0x80
 8001796:	041b      	lsls	r3, r3, #16
 8001798:	4013      	ands	r3, r2
 800179a:	d0f0      	beq.n	800177e <HAL_RCC_OscConfig+0x4ba>
 800179c:	e019      	b.n	80017d2 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800179e:	4b54      	ldr	r3, [pc, #336]	; (80018f0 <HAL_RCC_OscConfig+0x62c>)
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	4b53      	ldr	r3, [pc, #332]	; (80018f0 <HAL_RCC_OscConfig+0x62c>)
 80017a4:	4956      	ldr	r1, [pc, #344]	; (8001900 <HAL_RCC_OscConfig+0x63c>)
 80017a6:	400a      	ands	r2, r1
 80017a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017aa:	f7ff fae1 	bl	8000d70 <HAL_GetTick>
 80017ae:	0003      	movs	r3, r0
 80017b0:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80017b2:	e008      	b.n	80017c6 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017b4:	f7ff fadc 	bl	8000d70 <HAL_GetTick>
 80017b8:	0002      	movs	r2, r0
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e0d8      	b.n	8001978 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80017c6:	4b4a      	ldr	r3, [pc, #296]	; (80018f0 <HAL_RCC_OscConfig+0x62c>)
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	2380      	movs	r3, #128	; 0x80
 80017cc:	041b      	lsls	r3, r3, #16
 80017ce:	4013      	ands	r3, r2
 80017d0:	d1f0      	bne.n	80017b4 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6a1b      	ldr	r3, [r3, #32]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d100      	bne.n	80017dc <HAL_RCC_OscConfig+0x518>
 80017da:	e0cc      	b.n	8001976 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017dc:	4b44      	ldr	r3, [pc, #272]	; (80018f0 <HAL_RCC_OscConfig+0x62c>)
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	2238      	movs	r2, #56	; 0x38
 80017e2:	4013      	ands	r3, r2
 80017e4:	2b10      	cmp	r3, #16
 80017e6:	d100      	bne.n	80017ea <HAL_RCC_OscConfig+0x526>
 80017e8:	e07b      	b.n	80018e2 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6a1b      	ldr	r3, [r3, #32]
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d156      	bne.n	80018a0 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017f2:	4b3f      	ldr	r3, [pc, #252]	; (80018f0 <HAL_RCC_OscConfig+0x62c>)
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	4b3e      	ldr	r3, [pc, #248]	; (80018f0 <HAL_RCC_OscConfig+0x62c>)
 80017f8:	4942      	ldr	r1, [pc, #264]	; (8001904 <HAL_RCC_OscConfig+0x640>)
 80017fa:	400a      	ands	r2, r1
 80017fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017fe:	f7ff fab7 	bl	8000d70 <HAL_GetTick>
 8001802:	0003      	movs	r3, r0
 8001804:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001806:	e008      	b.n	800181a <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001808:	f7ff fab2 	bl	8000d70 <HAL_GetTick>
 800180c:	0002      	movs	r2, r0
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b02      	cmp	r3, #2
 8001814:	d901      	bls.n	800181a <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e0ae      	b.n	8001978 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800181a:	4b35      	ldr	r3, [pc, #212]	; (80018f0 <HAL_RCC_OscConfig+0x62c>)
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	2380      	movs	r3, #128	; 0x80
 8001820:	049b      	lsls	r3, r3, #18
 8001822:	4013      	ands	r3, r2
 8001824:	d1f0      	bne.n	8001808 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001826:	4b32      	ldr	r3, [pc, #200]	; (80018f0 <HAL_RCC_OscConfig+0x62c>)
 8001828:	68db      	ldr	r3, [r3, #12]
 800182a:	4a37      	ldr	r2, [pc, #220]	; (8001908 <HAL_RCC_OscConfig+0x644>)
 800182c:	4013      	ands	r3, r2
 800182e:	0019      	movs	r1, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001838:	431a      	orrs	r2, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800183e:	021b      	lsls	r3, r3, #8
 8001840:	431a      	orrs	r2, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	431a      	orrs	r2, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800184c:	431a      	orrs	r2, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001852:	431a      	orrs	r2, r3
 8001854:	4b26      	ldr	r3, [pc, #152]	; (80018f0 <HAL_RCC_OscConfig+0x62c>)
 8001856:	430a      	orrs	r2, r1
 8001858:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800185a:	4b25      	ldr	r3, [pc, #148]	; (80018f0 <HAL_RCC_OscConfig+0x62c>)
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	4b24      	ldr	r3, [pc, #144]	; (80018f0 <HAL_RCC_OscConfig+0x62c>)
 8001860:	2180      	movs	r1, #128	; 0x80
 8001862:	0449      	lsls	r1, r1, #17
 8001864:	430a      	orrs	r2, r1
 8001866:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001868:	4b21      	ldr	r3, [pc, #132]	; (80018f0 <HAL_RCC_OscConfig+0x62c>)
 800186a:	68da      	ldr	r2, [r3, #12]
 800186c:	4b20      	ldr	r3, [pc, #128]	; (80018f0 <HAL_RCC_OscConfig+0x62c>)
 800186e:	2180      	movs	r1, #128	; 0x80
 8001870:	0549      	lsls	r1, r1, #21
 8001872:	430a      	orrs	r2, r1
 8001874:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001876:	f7ff fa7b 	bl	8000d70 <HAL_GetTick>
 800187a:	0003      	movs	r3, r0
 800187c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800187e:	e008      	b.n	8001892 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001880:	f7ff fa76 	bl	8000d70 <HAL_GetTick>
 8001884:	0002      	movs	r2, r0
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b02      	cmp	r3, #2
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e072      	b.n	8001978 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001892:	4b17      	ldr	r3, [pc, #92]	; (80018f0 <HAL_RCC_OscConfig+0x62c>)
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	2380      	movs	r3, #128	; 0x80
 8001898:	049b      	lsls	r3, r3, #18
 800189a:	4013      	ands	r3, r2
 800189c:	d0f0      	beq.n	8001880 <HAL_RCC_OscConfig+0x5bc>
 800189e:	e06a      	b.n	8001976 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018a0:	4b13      	ldr	r3, [pc, #76]	; (80018f0 <HAL_RCC_OscConfig+0x62c>)
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	4b12      	ldr	r3, [pc, #72]	; (80018f0 <HAL_RCC_OscConfig+0x62c>)
 80018a6:	4917      	ldr	r1, [pc, #92]	; (8001904 <HAL_RCC_OscConfig+0x640>)
 80018a8:	400a      	ands	r2, r1
 80018aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ac:	f7ff fa60 	bl	8000d70 <HAL_GetTick>
 80018b0:	0003      	movs	r3, r0
 80018b2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018b4:	e008      	b.n	80018c8 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018b6:	f7ff fa5b 	bl	8000d70 <HAL_GetTick>
 80018ba:	0002      	movs	r2, r0
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d901      	bls.n	80018c8 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 80018c4:	2303      	movs	r3, #3
 80018c6:	e057      	b.n	8001978 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018c8:	4b09      	ldr	r3, [pc, #36]	; (80018f0 <HAL_RCC_OscConfig+0x62c>)
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	2380      	movs	r3, #128	; 0x80
 80018ce:	049b      	lsls	r3, r3, #18
 80018d0:	4013      	ands	r3, r2
 80018d2:	d1f0      	bne.n	80018b6 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80018d4:	4b06      	ldr	r3, [pc, #24]	; (80018f0 <HAL_RCC_OscConfig+0x62c>)
 80018d6:	68da      	ldr	r2, [r3, #12]
 80018d8:	4b05      	ldr	r3, [pc, #20]	; (80018f0 <HAL_RCC_OscConfig+0x62c>)
 80018da:	490c      	ldr	r1, [pc, #48]	; (800190c <HAL_RCC_OscConfig+0x648>)
 80018dc:	400a      	ands	r2, r1
 80018de:	60da      	str	r2, [r3, #12]
 80018e0:	e049      	b.n	8001976 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a1b      	ldr	r3, [r3, #32]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d112      	bne.n	8001910 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e044      	b.n	8001978 <HAL_RCC_OscConfig+0x6b4>
 80018ee:	46c0      	nop			; (mov r8, r8)
 80018f0:	40021000 	.word	0x40021000
 80018f4:	40007000 	.word	0x40007000
 80018f8:	00001388 	.word	0x00001388
 80018fc:	efffffff 	.word	0xefffffff
 8001900:	ffbfffff 	.word	0xffbfffff
 8001904:	feffffff 	.word	0xfeffffff
 8001908:	11c1808c 	.word	0x11c1808c
 800190c:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001910:	4b1b      	ldr	r3, [pc, #108]	; (8001980 <HAL_RCC_OscConfig+0x6bc>)
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	2203      	movs	r2, #3
 800191a:	401a      	ands	r2, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001920:	429a      	cmp	r2, r3
 8001922:	d126      	bne.n	8001972 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	2270      	movs	r2, #112	; 0x70
 8001928:	401a      	ands	r2, r3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800192e:	429a      	cmp	r2, r3
 8001930:	d11f      	bne.n	8001972 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001932:	697a      	ldr	r2, [r7, #20]
 8001934:	23fe      	movs	r3, #254	; 0xfe
 8001936:	01db      	lsls	r3, r3, #7
 8001938:	401a      	ands	r2, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800193e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001940:	429a      	cmp	r2, r3
 8001942:	d116      	bne.n	8001972 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001944:	697a      	ldr	r2, [r7, #20]
 8001946:	23f8      	movs	r3, #248	; 0xf8
 8001948:	039b      	lsls	r3, r3, #14
 800194a:	401a      	ands	r2, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001950:	429a      	cmp	r2, r3
 8001952:	d10e      	bne.n	8001972 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001954:	697a      	ldr	r2, [r7, #20]
 8001956:	23e0      	movs	r3, #224	; 0xe0
 8001958:	051b      	lsls	r3, r3, #20
 800195a:	401a      	ands	r2, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001960:	429a      	cmp	r2, r3
 8001962:	d106      	bne.n	8001972 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	0f5b      	lsrs	r3, r3, #29
 8001968:	075a      	lsls	r2, r3, #29
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800196e:	429a      	cmp	r2, r3
 8001970:	d001      	beq.n	8001976 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e000      	b.n	8001978 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8001976:	2300      	movs	r3, #0
}
 8001978:	0018      	movs	r0, r3
 800197a:	46bd      	mov	sp, r7
 800197c:	b008      	add	sp, #32
 800197e:	bd80      	pop	{r7, pc}
 8001980:	40021000 	.word	0x40021000

08001984 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d101      	bne.n	8001998 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e0e9      	b.n	8001b6c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001998:	4b76      	ldr	r3, [pc, #472]	; (8001b74 <HAL_RCC_ClockConfig+0x1f0>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2207      	movs	r2, #7
 800199e:	4013      	ands	r3, r2
 80019a0:	683a      	ldr	r2, [r7, #0]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d91e      	bls.n	80019e4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019a6:	4b73      	ldr	r3, [pc, #460]	; (8001b74 <HAL_RCC_ClockConfig+0x1f0>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	2207      	movs	r2, #7
 80019ac:	4393      	bics	r3, r2
 80019ae:	0019      	movs	r1, r3
 80019b0:	4b70      	ldr	r3, [pc, #448]	; (8001b74 <HAL_RCC_ClockConfig+0x1f0>)
 80019b2:	683a      	ldr	r2, [r7, #0]
 80019b4:	430a      	orrs	r2, r1
 80019b6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80019b8:	f7ff f9da 	bl	8000d70 <HAL_GetTick>
 80019bc:	0003      	movs	r3, r0
 80019be:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80019c0:	e009      	b.n	80019d6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019c2:	f7ff f9d5 	bl	8000d70 <HAL_GetTick>
 80019c6:	0002      	movs	r2, r0
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	4a6a      	ldr	r2, [pc, #424]	; (8001b78 <HAL_RCC_ClockConfig+0x1f4>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e0ca      	b.n	8001b6c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80019d6:	4b67      	ldr	r3, [pc, #412]	; (8001b74 <HAL_RCC_ClockConfig+0x1f0>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	2207      	movs	r2, #7
 80019dc:	4013      	ands	r3, r2
 80019de:	683a      	ldr	r2, [r7, #0]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d1ee      	bne.n	80019c2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2202      	movs	r2, #2
 80019ea:	4013      	ands	r3, r2
 80019ec:	d015      	beq.n	8001a1a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2204      	movs	r2, #4
 80019f4:	4013      	ands	r3, r2
 80019f6:	d006      	beq.n	8001a06 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80019f8:	4b60      	ldr	r3, [pc, #384]	; (8001b7c <HAL_RCC_ClockConfig+0x1f8>)
 80019fa:	689a      	ldr	r2, [r3, #8]
 80019fc:	4b5f      	ldr	r3, [pc, #380]	; (8001b7c <HAL_RCC_ClockConfig+0x1f8>)
 80019fe:	21e0      	movs	r1, #224	; 0xe0
 8001a00:	01c9      	lsls	r1, r1, #7
 8001a02:	430a      	orrs	r2, r1
 8001a04:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a06:	4b5d      	ldr	r3, [pc, #372]	; (8001b7c <HAL_RCC_ClockConfig+0x1f8>)
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	4a5d      	ldr	r2, [pc, #372]	; (8001b80 <HAL_RCC_ClockConfig+0x1fc>)
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	0019      	movs	r1, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	689a      	ldr	r2, [r3, #8]
 8001a14:	4b59      	ldr	r3, [pc, #356]	; (8001b7c <HAL_RCC_ClockConfig+0x1f8>)
 8001a16:	430a      	orrs	r2, r1
 8001a18:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2201      	movs	r2, #1
 8001a20:	4013      	ands	r3, r2
 8001a22:	d057      	beq.n	8001ad4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d107      	bne.n	8001a3c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a2c:	4b53      	ldr	r3, [pc, #332]	; (8001b7c <HAL_RCC_ClockConfig+0x1f8>)
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	2380      	movs	r3, #128	; 0x80
 8001a32:	029b      	lsls	r3, r3, #10
 8001a34:	4013      	ands	r3, r2
 8001a36:	d12b      	bne.n	8001a90 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e097      	b.n	8001b6c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d107      	bne.n	8001a54 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a44:	4b4d      	ldr	r3, [pc, #308]	; (8001b7c <HAL_RCC_ClockConfig+0x1f8>)
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	2380      	movs	r3, #128	; 0x80
 8001a4a:	049b      	lsls	r3, r3, #18
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	d11f      	bne.n	8001a90 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e08b      	b.n	8001b6c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d107      	bne.n	8001a6c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a5c:	4b47      	ldr	r3, [pc, #284]	; (8001b7c <HAL_RCC_ClockConfig+0x1f8>)
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	2380      	movs	r3, #128	; 0x80
 8001a62:	00db      	lsls	r3, r3, #3
 8001a64:	4013      	ands	r3, r2
 8001a66:	d113      	bne.n	8001a90 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e07f      	b.n	8001b6c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	2b03      	cmp	r3, #3
 8001a72:	d106      	bne.n	8001a82 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a74:	4b41      	ldr	r3, [pc, #260]	; (8001b7c <HAL_RCC_ClockConfig+0x1f8>)
 8001a76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a78:	2202      	movs	r2, #2
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	d108      	bne.n	8001a90 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e074      	b.n	8001b6c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a82:	4b3e      	ldr	r3, [pc, #248]	; (8001b7c <HAL_RCC_ClockConfig+0x1f8>)
 8001a84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a86:	2202      	movs	r2, #2
 8001a88:	4013      	ands	r3, r2
 8001a8a:	d101      	bne.n	8001a90 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e06d      	b.n	8001b6c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a90:	4b3a      	ldr	r3, [pc, #232]	; (8001b7c <HAL_RCC_ClockConfig+0x1f8>)
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	2207      	movs	r2, #7
 8001a96:	4393      	bics	r3, r2
 8001a98:	0019      	movs	r1, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685a      	ldr	r2, [r3, #4]
 8001a9e:	4b37      	ldr	r3, [pc, #220]	; (8001b7c <HAL_RCC_ClockConfig+0x1f8>)
 8001aa0:	430a      	orrs	r2, r1
 8001aa2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001aa4:	f7ff f964 	bl	8000d70 <HAL_GetTick>
 8001aa8:	0003      	movs	r3, r0
 8001aaa:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aac:	e009      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aae:	f7ff f95f 	bl	8000d70 <HAL_GetTick>
 8001ab2:	0002      	movs	r2, r0
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	4a2f      	ldr	r2, [pc, #188]	; (8001b78 <HAL_RCC_ClockConfig+0x1f4>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e054      	b.n	8001b6c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ac2:	4b2e      	ldr	r3, [pc, #184]	; (8001b7c <HAL_RCC_ClockConfig+0x1f8>)
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	2238      	movs	r2, #56	; 0x38
 8001ac8:	401a      	ands	r2, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	00db      	lsls	r3, r3, #3
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d1ec      	bne.n	8001aae <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ad4:	4b27      	ldr	r3, [pc, #156]	; (8001b74 <HAL_RCC_ClockConfig+0x1f0>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2207      	movs	r2, #7
 8001ada:	4013      	ands	r3, r2
 8001adc:	683a      	ldr	r2, [r7, #0]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d21e      	bcs.n	8001b20 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ae2:	4b24      	ldr	r3, [pc, #144]	; (8001b74 <HAL_RCC_ClockConfig+0x1f0>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2207      	movs	r2, #7
 8001ae8:	4393      	bics	r3, r2
 8001aea:	0019      	movs	r1, r3
 8001aec:	4b21      	ldr	r3, [pc, #132]	; (8001b74 <HAL_RCC_ClockConfig+0x1f0>)
 8001aee:	683a      	ldr	r2, [r7, #0]
 8001af0:	430a      	orrs	r2, r1
 8001af2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001af4:	f7ff f93c 	bl	8000d70 <HAL_GetTick>
 8001af8:	0003      	movs	r3, r0
 8001afa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001afc:	e009      	b.n	8001b12 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001afe:	f7ff f937 	bl	8000d70 <HAL_GetTick>
 8001b02:	0002      	movs	r2, r0
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	4a1b      	ldr	r2, [pc, #108]	; (8001b78 <HAL_RCC_ClockConfig+0x1f4>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e02c      	b.n	8001b6c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b12:	4b18      	ldr	r3, [pc, #96]	; (8001b74 <HAL_RCC_ClockConfig+0x1f0>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	2207      	movs	r2, #7
 8001b18:	4013      	ands	r3, r2
 8001b1a:	683a      	ldr	r2, [r7, #0]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d1ee      	bne.n	8001afe <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2204      	movs	r2, #4
 8001b26:	4013      	ands	r3, r2
 8001b28:	d009      	beq.n	8001b3e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001b2a:	4b14      	ldr	r3, [pc, #80]	; (8001b7c <HAL_RCC_ClockConfig+0x1f8>)
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	4a15      	ldr	r2, [pc, #84]	; (8001b84 <HAL_RCC_ClockConfig+0x200>)
 8001b30:	4013      	ands	r3, r2
 8001b32:	0019      	movs	r1, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	68da      	ldr	r2, [r3, #12]
 8001b38:	4b10      	ldr	r3, [pc, #64]	; (8001b7c <HAL_RCC_ClockConfig+0x1f8>)
 8001b3a:	430a      	orrs	r2, r1
 8001b3c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001b3e:	f000 f829 	bl	8001b94 <HAL_RCC_GetSysClockFreq>
 8001b42:	0001      	movs	r1, r0
 8001b44:	4b0d      	ldr	r3, [pc, #52]	; (8001b7c <HAL_RCC_ClockConfig+0x1f8>)
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	0a1b      	lsrs	r3, r3, #8
 8001b4a:	220f      	movs	r2, #15
 8001b4c:	401a      	ands	r2, r3
 8001b4e:	4b0e      	ldr	r3, [pc, #56]	; (8001b88 <HAL_RCC_ClockConfig+0x204>)
 8001b50:	0092      	lsls	r2, r2, #2
 8001b52:	58d3      	ldr	r3, [r2, r3]
 8001b54:	221f      	movs	r2, #31
 8001b56:	4013      	ands	r3, r2
 8001b58:	000a      	movs	r2, r1
 8001b5a:	40da      	lsrs	r2, r3
 8001b5c:	4b0b      	ldr	r3, [pc, #44]	; (8001b8c <HAL_RCC_ClockConfig+0x208>)
 8001b5e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001b60:	4b0b      	ldr	r3, [pc, #44]	; (8001b90 <HAL_RCC_ClockConfig+0x20c>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	0018      	movs	r0, r3
 8001b66:	f7ff f8a7 	bl	8000cb8 <HAL_InitTick>
 8001b6a:	0003      	movs	r3, r0
}
 8001b6c:	0018      	movs	r0, r3
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	b004      	add	sp, #16
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	40022000 	.word	0x40022000
 8001b78:	00001388 	.word	0x00001388
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	fffff0ff 	.word	0xfffff0ff
 8001b84:	ffff8fff 	.word	0xffff8fff
 8001b88:	0800315c 	.word	0x0800315c
 8001b8c:	20000004 	.word	0x20000004
 8001b90:	20000008 	.word	0x20000008

08001b94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b086      	sub	sp, #24
 8001b98:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b9a:	4b3c      	ldr	r3, [pc, #240]	; (8001c8c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	2238      	movs	r2, #56	; 0x38
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	d10f      	bne.n	8001bc4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001ba4:	4b39      	ldr	r3, [pc, #228]	; (8001c8c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	0adb      	lsrs	r3, r3, #11
 8001baa:	2207      	movs	r2, #7
 8001bac:	4013      	ands	r3, r2
 8001bae:	2201      	movs	r2, #1
 8001bb0:	409a      	lsls	r2, r3
 8001bb2:	0013      	movs	r3, r2
 8001bb4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001bb6:	6839      	ldr	r1, [r7, #0]
 8001bb8:	4835      	ldr	r0, [pc, #212]	; (8001c90 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001bba:	f7fe faab 	bl	8000114 <__udivsi3>
 8001bbe:	0003      	movs	r3, r0
 8001bc0:	613b      	str	r3, [r7, #16]
 8001bc2:	e05d      	b.n	8001c80 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bc4:	4b31      	ldr	r3, [pc, #196]	; (8001c8c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	2238      	movs	r2, #56	; 0x38
 8001bca:	4013      	ands	r3, r2
 8001bcc:	2b08      	cmp	r3, #8
 8001bce:	d102      	bne.n	8001bd6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001bd0:	4b30      	ldr	r3, [pc, #192]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x100>)
 8001bd2:	613b      	str	r3, [r7, #16]
 8001bd4:	e054      	b.n	8001c80 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bd6:	4b2d      	ldr	r3, [pc, #180]	; (8001c8c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	2238      	movs	r2, #56	; 0x38
 8001bdc:	4013      	ands	r3, r2
 8001bde:	2b10      	cmp	r3, #16
 8001be0:	d138      	bne.n	8001c54 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001be2:	4b2a      	ldr	r3, [pc, #168]	; (8001c8c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001be4:	68db      	ldr	r3, [r3, #12]
 8001be6:	2203      	movs	r2, #3
 8001be8:	4013      	ands	r3, r2
 8001bea:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001bec:	4b27      	ldr	r3, [pc, #156]	; (8001c8c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	091b      	lsrs	r3, r3, #4
 8001bf2:	2207      	movs	r2, #7
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2b03      	cmp	r3, #3
 8001bfe:	d10d      	bne.n	8001c1c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c00:	68b9      	ldr	r1, [r7, #8]
 8001c02:	4824      	ldr	r0, [pc, #144]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x100>)
 8001c04:	f7fe fa86 	bl	8000114 <__udivsi3>
 8001c08:	0003      	movs	r3, r0
 8001c0a:	0019      	movs	r1, r3
 8001c0c:	4b1f      	ldr	r3, [pc, #124]	; (8001c8c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	0a1b      	lsrs	r3, r3, #8
 8001c12:	227f      	movs	r2, #127	; 0x7f
 8001c14:	4013      	ands	r3, r2
 8001c16:	434b      	muls	r3, r1
 8001c18:	617b      	str	r3, [r7, #20]
        break;
 8001c1a:	e00d      	b.n	8001c38 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001c1c:	68b9      	ldr	r1, [r7, #8]
 8001c1e:	481c      	ldr	r0, [pc, #112]	; (8001c90 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001c20:	f7fe fa78 	bl	8000114 <__udivsi3>
 8001c24:	0003      	movs	r3, r0
 8001c26:	0019      	movs	r1, r3
 8001c28:	4b18      	ldr	r3, [pc, #96]	; (8001c8c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	0a1b      	lsrs	r3, r3, #8
 8001c2e:	227f      	movs	r2, #127	; 0x7f
 8001c30:	4013      	ands	r3, r2
 8001c32:	434b      	muls	r3, r1
 8001c34:	617b      	str	r3, [r7, #20]
        break;
 8001c36:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001c38:	4b14      	ldr	r3, [pc, #80]	; (8001c8c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	0f5b      	lsrs	r3, r3, #29
 8001c3e:	2207      	movs	r2, #7
 8001c40:	4013      	ands	r3, r2
 8001c42:	3301      	adds	r3, #1
 8001c44:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001c46:	6879      	ldr	r1, [r7, #4]
 8001c48:	6978      	ldr	r0, [r7, #20]
 8001c4a:	f7fe fa63 	bl	8000114 <__udivsi3>
 8001c4e:	0003      	movs	r3, r0
 8001c50:	613b      	str	r3, [r7, #16]
 8001c52:	e015      	b.n	8001c80 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001c54:	4b0d      	ldr	r3, [pc, #52]	; (8001c8c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	2238      	movs	r2, #56	; 0x38
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	2b20      	cmp	r3, #32
 8001c5e:	d103      	bne.n	8001c68 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001c60:	2380      	movs	r3, #128	; 0x80
 8001c62:	021b      	lsls	r3, r3, #8
 8001c64:	613b      	str	r3, [r7, #16]
 8001c66:	e00b      	b.n	8001c80 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001c68:	4b08      	ldr	r3, [pc, #32]	; (8001c8c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	2238      	movs	r2, #56	; 0x38
 8001c6e:	4013      	ands	r3, r2
 8001c70:	2b18      	cmp	r3, #24
 8001c72:	d103      	bne.n	8001c7c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001c74:	23fa      	movs	r3, #250	; 0xfa
 8001c76:	01db      	lsls	r3, r3, #7
 8001c78:	613b      	str	r3, [r7, #16]
 8001c7a:	e001      	b.n	8001c80 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001c80:	693b      	ldr	r3, [r7, #16]
}
 8001c82:	0018      	movs	r0, r3
 8001c84:	46bd      	mov	sp, r7
 8001c86:	b006      	add	sp, #24
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	46c0      	nop			; (mov r8, r8)
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	00f42400 	.word	0x00f42400
 8001c94:	007a1200 	.word	0x007a1200

08001c98 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c9c:	4b02      	ldr	r3, [pc, #8]	; (8001ca8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
}
 8001ca0:	0018      	movs	r0, r3
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	46c0      	nop			; (mov r8, r8)
 8001ca8:	20000004 	.word	0x20000004

08001cac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cac:	b5b0      	push	{r4, r5, r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001cb0:	f7ff fff2 	bl	8001c98 <HAL_RCC_GetHCLKFreq>
 8001cb4:	0004      	movs	r4, r0
 8001cb6:	f7ff faf9 	bl	80012ac <LL_RCC_GetAPB1Prescaler>
 8001cba:	0003      	movs	r3, r0
 8001cbc:	0b1a      	lsrs	r2, r3, #12
 8001cbe:	4b05      	ldr	r3, [pc, #20]	; (8001cd4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001cc0:	0092      	lsls	r2, r2, #2
 8001cc2:	58d3      	ldr	r3, [r2, r3]
 8001cc4:	221f      	movs	r2, #31
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	40dc      	lsrs	r4, r3
 8001cca:	0023      	movs	r3, r4
}
 8001ccc:	0018      	movs	r0, r3
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bdb0      	pop	{r4, r5, r7, pc}
 8001cd2:	46c0      	nop			; (mov r8, r8)
 8001cd4:	0800319c 	.word	0x0800319c

08001cd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b086      	sub	sp, #24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001ce0:	2313      	movs	r3, #19
 8001ce2:	18fb      	adds	r3, r7, r3
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001ce8:	2312      	movs	r3, #18
 8001cea:	18fb      	adds	r3, r7, r3
 8001cec:	2200      	movs	r2, #0
 8001cee:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	2380      	movs	r3, #128	; 0x80
 8001cf6:	029b      	lsls	r3, r3, #10
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	d100      	bne.n	8001cfe <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001cfc:	e0ad      	b.n	8001e5a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cfe:	2011      	movs	r0, #17
 8001d00:	183b      	adds	r3, r7, r0
 8001d02:	2200      	movs	r2, #0
 8001d04:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d06:	4b47      	ldr	r3, [pc, #284]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d0a:	2380      	movs	r3, #128	; 0x80
 8001d0c:	055b      	lsls	r3, r3, #21
 8001d0e:	4013      	ands	r3, r2
 8001d10:	d110      	bne.n	8001d34 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d12:	4b44      	ldr	r3, [pc, #272]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d16:	4b43      	ldr	r3, [pc, #268]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d18:	2180      	movs	r1, #128	; 0x80
 8001d1a:	0549      	lsls	r1, r1, #21
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001d20:	4b40      	ldr	r3, [pc, #256]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d24:	2380      	movs	r3, #128	; 0x80
 8001d26:	055b      	lsls	r3, r3, #21
 8001d28:	4013      	ands	r3, r2
 8001d2a:	60bb      	str	r3, [r7, #8]
 8001d2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d2e:	183b      	adds	r3, r7, r0
 8001d30:	2201      	movs	r2, #1
 8001d32:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d34:	4b3c      	ldr	r3, [pc, #240]	; (8001e28 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	4b3b      	ldr	r3, [pc, #236]	; (8001e28 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001d3a:	2180      	movs	r1, #128	; 0x80
 8001d3c:	0049      	lsls	r1, r1, #1
 8001d3e:	430a      	orrs	r2, r1
 8001d40:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001d42:	f7ff f815 	bl	8000d70 <HAL_GetTick>
 8001d46:	0003      	movs	r3, r0
 8001d48:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d4a:	e00b      	b.n	8001d64 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d4c:	f7ff f810 	bl	8000d70 <HAL_GetTick>
 8001d50:	0002      	movs	r2, r0
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d904      	bls.n	8001d64 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001d5a:	2313      	movs	r3, #19
 8001d5c:	18fb      	adds	r3, r7, r3
 8001d5e:	2203      	movs	r2, #3
 8001d60:	701a      	strb	r2, [r3, #0]
        break;
 8001d62:	e005      	b.n	8001d70 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d64:	4b30      	ldr	r3, [pc, #192]	; (8001e28 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	2380      	movs	r3, #128	; 0x80
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	d0ed      	beq.n	8001d4c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001d70:	2313      	movs	r3, #19
 8001d72:	18fb      	adds	r3, r7, r3
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d15e      	bne.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001d7a:	4b2a      	ldr	r3, [pc, #168]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d7c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d7e:	23c0      	movs	r3, #192	; 0xc0
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	4013      	ands	r3, r2
 8001d84:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d019      	beq.n	8001dc0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d90:	697a      	ldr	r2, [r7, #20]
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d014      	beq.n	8001dc0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001d96:	4b23      	ldr	r3, [pc, #140]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d9a:	4a24      	ldr	r2, [pc, #144]	; (8001e2c <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001da0:	4b20      	ldr	r3, [pc, #128]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001da2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001da4:	4b1f      	ldr	r3, [pc, #124]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001da6:	2180      	movs	r1, #128	; 0x80
 8001da8:	0249      	lsls	r1, r1, #9
 8001daa:	430a      	orrs	r2, r1
 8001dac:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001dae:	4b1d      	ldr	r3, [pc, #116]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001db0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001db2:	4b1c      	ldr	r3, [pc, #112]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001db4:	491e      	ldr	r1, [pc, #120]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8001db6:	400a      	ands	r2, r1
 8001db8:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001dba:	4b1a      	ldr	r3, [pc, #104]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001dbc:	697a      	ldr	r2, [r7, #20]
 8001dbe:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	d016      	beq.n	8001df6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc8:	f7fe ffd2 	bl	8000d70 <HAL_GetTick>
 8001dcc:	0003      	movs	r3, r0
 8001dce:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dd0:	e00c      	b.n	8001dec <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dd2:	f7fe ffcd 	bl	8000d70 <HAL_GetTick>
 8001dd6:	0002      	movs	r2, r0
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	4a15      	ldr	r2, [pc, #84]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d904      	bls.n	8001dec <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001de2:	2313      	movs	r3, #19
 8001de4:	18fb      	adds	r3, r7, r3
 8001de6:	2203      	movs	r2, #3
 8001de8:	701a      	strb	r2, [r3, #0]
            break;
 8001dea:	e004      	b.n	8001df6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dec:	4b0d      	ldr	r3, [pc, #52]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001dee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df0:	2202      	movs	r2, #2
 8001df2:	4013      	ands	r3, r2
 8001df4:	d0ed      	beq.n	8001dd2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001df6:	2313      	movs	r3, #19
 8001df8:	18fb      	adds	r3, r7, r3
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d10a      	bne.n	8001e16 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e00:	4b08      	ldr	r3, [pc, #32]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001e02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e04:	4a09      	ldr	r2, [pc, #36]	; (8001e2c <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001e06:	4013      	ands	r3, r2
 8001e08:	0019      	movs	r1, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e0e:	4b05      	ldr	r3, [pc, #20]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001e10:	430a      	orrs	r2, r1
 8001e12:	65da      	str	r2, [r3, #92]	; 0x5c
 8001e14:	e016      	b.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001e16:	2312      	movs	r3, #18
 8001e18:	18fb      	adds	r3, r7, r3
 8001e1a:	2213      	movs	r2, #19
 8001e1c:	18ba      	adds	r2, r7, r2
 8001e1e:	7812      	ldrb	r2, [r2, #0]
 8001e20:	701a      	strb	r2, [r3, #0]
 8001e22:	e00f      	b.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8001e24:	40021000 	.word	0x40021000
 8001e28:	40007000 	.word	0x40007000
 8001e2c:	fffffcff 	.word	0xfffffcff
 8001e30:	fffeffff 	.word	0xfffeffff
 8001e34:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e38:	2312      	movs	r3, #18
 8001e3a:	18fb      	adds	r3, r7, r3
 8001e3c:	2213      	movs	r2, #19
 8001e3e:	18ba      	adds	r2, r7, r2
 8001e40:	7812      	ldrb	r2, [r2, #0]
 8001e42:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e44:	2311      	movs	r3, #17
 8001e46:	18fb      	adds	r3, r7, r3
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d105      	bne.n	8001e5a <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e4e:	4bb6      	ldr	r3, [pc, #728]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e52:	4bb5      	ldr	r3, [pc, #724]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e54:	49b5      	ldr	r1, [pc, #724]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001e56:	400a      	ands	r2, r1
 8001e58:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	4013      	ands	r3, r2
 8001e62:	d009      	beq.n	8001e78 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e64:	4bb0      	ldr	r3, [pc, #704]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e68:	2203      	movs	r2, #3
 8001e6a:	4393      	bics	r3, r2
 8001e6c:	0019      	movs	r1, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685a      	ldr	r2, [r3, #4]
 8001e72:	4bad      	ldr	r3, [pc, #692]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e74:	430a      	orrs	r2, r1
 8001e76:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2202      	movs	r2, #2
 8001e7e:	4013      	ands	r3, r2
 8001e80:	d009      	beq.n	8001e96 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001e82:	4ba9      	ldr	r3, [pc, #676]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e86:	220c      	movs	r2, #12
 8001e88:	4393      	bics	r3, r2
 8001e8a:	0019      	movs	r1, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	689a      	ldr	r2, [r3, #8]
 8001e90:	4ba5      	ldr	r3, [pc, #660]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e92:	430a      	orrs	r2, r1
 8001e94:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	2204      	movs	r2, #4
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	d009      	beq.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001ea0:	4ba1      	ldr	r3, [pc, #644]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ea4:	2230      	movs	r2, #48	; 0x30
 8001ea6:	4393      	bics	r3, r2
 8001ea8:	0019      	movs	r1, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	68da      	ldr	r2, [r3, #12]
 8001eae:	4b9e      	ldr	r3, [pc, #632]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001eb0:	430a      	orrs	r2, r1
 8001eb2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2210      	movs	r2, #16
 8001eba:	4013      	ands	r3, r2
 8001ebc:	d009      	beq.n	8001ed2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001ebe:	4b9a      	ldr	r3, [pc, #616]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ec2:	4a9b      	ldr	r2, [pc, #620]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	0019      	movs	r1, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	691a      	ldr	r2, [r3, #16]
 8001ecc:	4b96      	ldr	r3, [pc, #600]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	2380      	movs	r3, #128	; 0x80
 8001ed8:	015b      	lsls	r3, r3, #5
 8001eda:	4013      	ands	r3, r2
 8001edc:	d009      	beq.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8001ede:	4b92      	ldr	r3, [pc, #584]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ee2:	4a94      	ldr	r2, [pc, #592]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	0019      	movs	r1, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	695a      	ldr	r2, [r3, #20]
 8001eec:	4b8e      	ldr	r3, [pc, #568]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	2380      	movs	r3, #128	; 0x80
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	4013      	ands	r3, r2
 8001efc:	d009      	beq.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001efe:	4b8a      	ldr	r3, [pc, #552]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f02:	4a8d      	ldr	r2, [pc, #564]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8001f04:	4013      	ands	r3, r2
 8001f06:	0019      	movs	r1, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f0c:	4b86      	ldr	r3, [pc, #536]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	2380      	movs	r3, #128	; 0x80
 8001f18:	00db      	lsls	r3, r3, #3
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	d009      	beq.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001f1e:	4b82      	ldr	r3, [pc, #520]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f22:	4a86      	ldr	r2, [pc, #536]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8001f24:	4013      	ands	r3, r2
 8001f26:	0019      	movs	r1, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f2c:	4b7e      	ldr	r3, [pc, #504]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f2e:	430a      	orrs	r2, r1
 8001f30:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2220      	movs	r2, #32
 8001f38:	4013      	ands	r3, r2
 8001f3a:	d009      	beq.n	8001f50 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f3c:	4b7a      	ldr	r3, [pc, #488]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f40:	4a7f      	ldr	r2, [pc, #508]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8001f42:	4013      	ands	r3, r2
 8001f44:	0019      	movs	r1, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	699a      	ldr	r2, [r3, #24]
 8001f4a:	4b77      	ldr	r3, [pc, #476]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2240      	movs	r2, #64	; 0x40
 8001f56:	4013      	ands	r3, r2
 8001f58:	d009      	beq.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001f5a:	4b73      	ldr	r3, [pc, #460]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f5e:	4a79      	ldr	r2, [pc, #484]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8001f60:	4013      	ands	r3, r2
 8001f62:	0019      	movs	r1, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	69da      	ldr	r2, [r3, #28]
 8001f68:	4b6f      	ldr	r3, [pc, #444]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	2380      	movs	r3, #128	; 0x80
 8001f74:	01db      	lsls	r3, r3, #7
 8001f76:	4013      	ands	r3, r2
 8001f78:	d015      	beq.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001f7a:	4b6b      	ldr	r3, [pc, #428]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	0899      	lsrs	r1, r3, #2
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f86:	4b68      	ldr	r3, [pc, #416]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f90:	2380      	movs	r3, #128	; 0x80
 8001f92:	05db      	lsls	r3, r3, #23
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d106      	bne.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001f98:	4b63      	ldr	r3, [pc, #396]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f9a:	68da      	ldr	r2, [r3, #12]
 8001f9c:	4b62      	ldr	r3, [pc, #392]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f9e:	2180      	movs	r1, #128	; 0x80
 8001fa0:	0249      	lsls	r1, r1, #9
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	2380      	movs	r3, #128	; 0x80
 8001fac:	031b      	lsls	r3, r3, #12
 8001fae:	4013      	ands	r3, r2
 8001fb0:	d009      	beq.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001fb2:	4b5d      	ldr	r3, [pc, #372]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fb6:	2240      	movs	r2, #64	; 0x40
 8001fb8:	4393      	bics	r3, r2
 8001fba:	0019      	movs	r1, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fc0:	4b59      	ldr	r3, [pc, #356]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	2380      	movs	r3, #128	; 0x80
 8001fcc:	039b      	lsls	r3, r3, #14
 8001fce:	4013      	ands	r3, r2
 8001fd0:	d016      	beq.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001fd2:	4b55      	ldr	r3, [pc, #340]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fd6:	4a5c      	ldr	r2, [pc, #368]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8001fd8:	4013      	ands	r3, r2
 8001fda:	0019      	movs	r1, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001fe0:	4b51      	ldr	r3, [pc, #324]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001fea:	2380      	movs	r3, #128	; 0x80
 8001fec:	03db      	lsls	r3, r3, #15
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d106      	bne.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001ff2:	4b4d      	ldr	r3, [pc, #308]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ff4:	68da      	ldr	r2, [r3, #12]
 8001ff6:	4b4c      	ldr	r3, [pc, #304]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ff8:	2180      	movs	r1, #128	; 0x80
 8001ffa:	0449      	lsls	r1, r1, #17
 8001ffc:	430a      	orrs	r2, r1
 8001ffe:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	2380      	movs	r3, #128	; 0x80
 8002006:	03db      	lsls	r3, r3, #15
 8002008:	4013      	ands	r3, r2
 800200a:	d016      	beq.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800200c:	4b46      	ldr	r3, [pc, #280]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800200e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002010:	4a4e      	ldr	r2, [pc, #312]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002012:	4013      	ands	r3, r2
 8002014:	0019      	movs	r1, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800201a:	4b43      	ldr	r3, [pc, #268]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800201c:	430a      	orrs	r2, r1
 800201e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002024:	2380      	movs	r3, #128	; 0x80
 8002026:	045b      	lsls	r3, r3, #17
 8002028:	429a      	cmp	r2, r3
 800202a:	d106      	bne.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800202c:	4b3e      	ldr	r3, [pc, #248]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800202e:	68da      	ldr	r2, [r3, #12]
 8002030:	4b3d      	ldr	r3, [pc, #244]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002032:	2180      	movs	r1, #128	; 0x80
 8002034:	0449      	lsls	r1, r1, #17
 8002036:	430a      	orrs	r2, r1
 8002038:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	2380      	movs	r3, #128	; 0x80
 8002040:	011b      	lsls	r3, r3, #4
 8002042:	4013      	ands	r3, r2
 8002044:	d014      	beq.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002046:	4b38      	ldr	r3, [pc, #224]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800204a:	2203      	movs	r2, #3
 800204c:	4393      	bics	r3, r2
 800204e:	0019      	movs	r1, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a1a      	ldr	r2, [r3, #32]
 8002054:	4b34      	ldr	r3, [pc, #208]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002056:	430a      	orrs	r2, r1
 8002058:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6a1b      	ldr	r3, [r3, #32]
 800205e:	2b01      	cmp	r3, #1
 8002060:	d106      	bne.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002062:	4b31      	ldr	r3, [pc, #196]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002064:	68da      	ldr	r2, [r3, #12]
 8002066:	4b30      	ldr	r3, [pc, #192]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002068:	2180      	movs	r1, #128	; 0x80
 800206a:	0249      	lsls	r1, r1, #9
 800206c:	430a      	orrs	r2, r1
 800206e:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	2380      	movs	r3, #128	; 0x80
 8002076:	019b      	lsls	r3, r3, #6
 8002078:	4013      	ands	r3, r2
 800207a:	d014      	beq.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800207c:	4b2a      	ldr	r3, [pc, #168]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800207e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002080:	220c      	movs	r2, #12
 8002082:	4393      	bics	r3, r2
 8002084:	0019      	movs	r1, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800208a:	4b27      	ldr	r3, [pc, #156]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800208c:	430a      	orrs	r2, r1
 800208e:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002094:	2b04      	cmp	r3, #4
 8002096:	d106      	bne.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002098:	4b23      	ldr	r3, [pc, #140]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800209a:	68da      	ldr	r2, [r3, #12]
 800209c:	4b22      	ldr	r3, [pc, #136]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800209e:	2180      	movs	r1, #128	; 0x80
 80020a0:	0249      	lsls	r1, r1, #9
 80020a2:	430a      	orrs	r2, r1
 80020a4:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	2380      	movs	r3, #128	; 0x80
 80020ac:	045b      	lsls	r3, r3, #17
 80020ae:	4013      	ands	r3, r2
 80020b0:	d016      	beq.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80020b2:	4b1d      	ldr	r3, [pc, #116]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b6:	4a22      	ldr	r2, [pc, #136]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80020b8:	4013      	ands	r3, r2
 80020ba:	0019      	movs	r1, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020c0:	4b19      	ldr	r3, [pc, #100]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020c2:	430a      	orrs	r2, r1
 80020c4:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020ca:	2380      	movs	r3, #128	; 0x80
 80020cc:	019b      	lsls	r3, r3, #6
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d106      	bne.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80020d2:	4b15      	ldr	r3, [pc, #84]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020d4:	68da      	ldr	r2, [r3, #12]
 80020d6:	4b14      	ldr	r3, [pc, #80]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020d8:	2180      	movs	r1, #128	; 0x80
 80020da:	0449      	lsls	r1, r1, #17
 80020dc:	430a      	orrs	r2, r1
 80020de:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	2380      	movs	r3, #128	; 0x80
 80020e6:	049b      	lsls	r3, r3, #18
 80020e8:	4013      	ands	r3, r2
 80020ea:	d016      	beq.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80020ec:	4b0e      	ldr	r3, [pc, #56]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f0:	4a10      	ldr	r2, [pc, #64]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80020f2:	4013      	ands	r3, r2
 80020f4:	0019      	movs	r1, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80020fa:	4b0b      	ldr	r3, [pc, #44]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020fc:	430a      	orrs	r2, r1
 80020fe:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002104:	2380      	movs	r3, #128	; 0x80
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	429a      	cmp	r2, r3
 800210a:	d106      	bne.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800210c:	4b06      	ldr	r3, [pc, #24]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800210e:	68da      	ldr	r2, [r3, #12]
 8002110:	4b05      	ldr	r3, [pc, #20]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002112:	2180      	movs	r1, #128	; 0x80
 8002114:	0449      	lsls	r1, r1, #17
 8002116:	430a      	orrs	r2, r1
 8002118:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800211a:	2312      	movs	r3, #18
 800211c:	18fb      	adds	r3, r7, r3
 800211e:	781b      	ldrb	r3, [r3, #0]
}
 8002120:	0018      	movs	r0, r3
 8002122:	46bd      	mov	sp, r7
 8002124:	b006      	add	sp, #24
 8002126:	bd80      	pop	{r7, pc}
 8002128:	40021000 	.word	0x40021000
 800212c:	efffffff 	.word	0xefffffff
 8002130:	fffff3ff 	.word	0xfffff3ff
 8002134:	fffffcff 	.word	0xfffffcff
 8002138:	fff3ffff 	.word	0xfff3ffff
 800213c:	ffcfffff 	.word	0xffcfffff
 8002140:	ffffcfff 	.word	0xffffcfff
 8002144:	ffff3fff 	.word	0xffff3fff
 8002148:	ffbfffff 	.word	0xffbfffff
 800214c:	feffffff 	.word	0xfeffffff

08002150 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d101      	bne.n	8002162 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e046      	b.n	80021f0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2288      	movs	r2, #136	; 0x88
 8002166:	589b      	ldr	r3, [r3, r2]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d107      	bne.n	800217c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2284      	movs	r2, #132	; 0x84
 8002170:	2100      	movs	r1, #0
 8002172:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	0018      	movs	r0, r3
 8002178:	f7fe fc56 	bl	8000a28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2288      	movs	r2, #136	; 0x88
 8002180:	2124      	movs	r1, #36	; 0x24
 8002182:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2101      	movs	r1, #1
 8002190:	438a      	bics	r2, r1
 8002192:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002198:	2b00      	cmp	r3, #0
 800219a:	d003      	beq.n	80021a4 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	0018      	movs	r0, r3
 80021a0:	f000 fc26 	bl	80029f0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	0018      	movs	r0, r3
 80021a8:	f000 f8cc 	bl	8002344 <UART_SetConfig>
 80021ac:	0003      	movs	r3, r0
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d101      	bne.n	80021b6 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e01c      	b.n	80021f0 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	685a      	ldr	r2, [r3, #4]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	490d      	ldr	r1, [pc, #52]	; (80021f8 <HAL_UART_Init+0xa8>)
 80021c2:	400a      	ands	r2, r1
 80021c4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	689a      	ldr	r2, [r3, #8]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	212a      	movs	r1, #42	; 0x2a
 80021d2:	438a      	bics	r2, r1
 80021d4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2101      	movs	r1, #1
 80021e2:	430a      	orrs	r2, r1
 80021e4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	0018      	movs	r0, r3
 80021ea:	f000 fcb5 	bl	8002b58 <UART_CheckIdleState>
 80021ee:	0003      	movs	r3, r0
}
 80021f0:	0018      	movs	r0, r3
 80021f2:	46bd      	mov	sp, r7
 80021f4:	b002      	add	sp, #8
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	ffffb7ff 	.word	0xffffb7ff

080021fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b08a      	sub	sp, #40	; 0x28
 8002200:	af02      	add	r7, sp, #8
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	603b      	str	r3, [r7, #0]
 8002208:	1dbb      	adds	r3, r7, #6
 800220a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2288      	movs	r2, #136	; 0x88
 8002210:	589b      	ldr	r3, [r3, r2]
 8002212:	2b20      	cmp	r3, #32
 8002214:	d000      	beq.n	8002218 <HAL_UART_Transmit+0x1c>
 8002216:	e090      	b.n	800233a <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d003      	beq.n	8002226 <HAL_UART_Transmit+0x2a>
 800221e:	1dbb      	adds	r3, r7, #6
 8002220:	881b      	ldrh	r3, [r3, #0]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d101      	bne.n	800222a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e088      	b.n	800233c <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	689a      	ldr	r2, [r3, #8]
 800222e:	2380      	movs	r3, #128	; 0x80
 8002230:	015b      	lsls	r3, r3, #5
 8002232:	429a      	cmp	r2, r3
 8002234:	d109      	bne.n	800224a <HAL_UART_Transmit+0x4e>
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d105      	bne.n	800224a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	2201      	movs	r2, #1
 8002242:	4013      	ands	r3, r2
 8002244:	d001      	beq.n	800224a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e078      	b.n	800233c <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2290      	movs	r2, #144	; 0x90
 800224e:	2100      	movs	r1, #0
 8002250:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2288      	movs	r2, #136	; 0x88
 8002256:	2121      	movs	r1, #33	; 0x21
 8002258:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800225a:	f7fe fd89 	bl	8000d70 <HAL_GetTick>
 800225e:	0003      	movs	r3, r0
 8002260:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	1dba      	adds	r2, r7, #6
 8002266:	2154      	movs	r1, #84	; 0x54
 8002268:	8812      	ldrh	r2, [r2, #0]
 800226a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	1dba      	adds	r2, r7, #6
 8002270:	2156      	movs	r1, #86	; 0x56
 8002272:	8812      	ldrh	r2, [r2, #0]
 8002274:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	689a      	ldr	r2, [r3, #8]
 800227a:	2380      	movs	r3, #128	; 0x80
 800227c:	015b      	lsls	r3, r3, #5
 800227e:	429a      	cmp	r2, r3
 8002280:	d108      	bne.n	8002294 <HAL_UART_Transmit+0x98>
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d104      	bne.n	8002294 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800228a:	2300      	movs	r3, #0
 800228c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	61bb      	str	r3, [r7, #24]
 8002292:	e003      	b.n	800229c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002298:	2300      	movs	r3, #0
 800229a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800229c:	e030      	b.n	8002300 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800229e:	697a      	ldr	r2, [r7, #20]
 80022a0:	68f8      	ldr	r0, [r7, #12]
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	9300      	str	r3, [sp, #0]
 80022a6:	0013      	movs	r3, r2
 80022a8:	2200      	movs	r2, #0
 80022aa:	2180      	movs	r1, #128	; 0x80
 80022ac:	f000 fcfe 	bl	8002cac <UART_WaitOnFlagUntilTimeout>
 80022b0:	1e03      	subs	r3, r0, #0
 80022b2:	d005      	beq.n	80022c0 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2288      	movs	r2, #136	; 0x88
 80022b8:	2120      	movs	r1, #32
 80022ba:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e03d      	b.n	800233c <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d10b      	bne.n	80022de <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	881b      	ldrh	r3, [r3, #0]
 80022ca:	001a      	movs	r2, r3
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	05d2      	lsls	r2, r2, #23
 80022d2:	0dd2      	lsrs	r2, r2, #23
 80022d4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	3302      	adds	r3, #2
 80022da:	61bb      	str	r3, [r7, #24]
 80022dc:	e007      	b.n	80022ee <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	781a      	ldrb	r2, [r3, #0]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	3301      	adds	r3, #1
 80022ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2256      	movs	r2, #86	; 0x56
 80022f2:	5a9b      	ldrh	r3, [r3, r2]
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	3b01      	subs	r3, #1
 80022f8:	b299      	uxth	r1, r3
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2256      	movs	r2, #86	; 0x56
 80022fe:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2256      	movs	r2, #86	; 0x56
 8002304:	5a9b      	ldrh	r3, [r3, r2]
 8002306:	b29b      	uxth	r3, r3
 8002308:	2b00      	cmp	r3, #0
 800230a:	d1c8      	bne.n	800229e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800230c:	697a      	ldr	r2, [r7, #20]
 800230e:	68f8      	ldr	r0, [r7, #12]
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	9300      	str	r3, [sp, #0]
 8002314:	0013      	movs	r3, r2
 8002316:	2200      	movs	r2, #0
 8002318:	2140      	movs	r1, #64	; 0x40
 800231a:	f000 fcc7 	bl	8002cac <UART_WaitOnFlagUntilTimeout>
 800231e:	1e03      	subs	r3, r0, #0
 8002320:	d005      	beq.n	800232e <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2288      	movs	r2, #136	; 0x88
 8002326:	2120      	movs	r1, #32
 8002328:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e006      	b.n	800233c <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2288      	movs	r2, #136	; 0x88
 8002332:	2120      	movs	r1, #32
 8002334:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002336:	2300      	movs	r3, #0
 8002338:	e000      	b.n	800233c <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 800233a:	2302      	movs	r3, #2
  }
}
 800233c:	0018      	movs	r0, r3
 800233e:	46bd      	mov	sp, r7
 8002340:	b008      	add	sp, #32
 8002342:	bd80      	pop	{r7, pc}

08002344 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002344:	b5b0      	push	{r4, r5, r7, lr}
 8002346:	b090      	sub	sp, #64	; 0x40
 8002348:	af00      	add	r7, sp, #0
 800234a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800234c:	231a      	movs	r3, #26
 800234e:	2220      	movs	r2, #32
 8002350:	189b      	adds	r3, r3, r2
 8002352:	19db      	adds	r3, r3, r7
 8002354:	2200      	movs	r2, #0
 8002356:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235a:	689a      	ldr	r2, [r3, #8]
 800235c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235e:	691b      	ldr	r3, [r3, #16]
 8002360:	431a      	orrs	r2, r3
 8002362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002364:	695b      	ldr	r3, [r3, #20]
 8002366:	431a      	orrs	r2, r3
 8002368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236a:	69db      	ldr	r3, [r3, #28]
 800236c:	4313      	orrs	r3, r2
 800236e:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4ac1      	ldr	r2, [pc, #772]	; (800267c <UART_SetConfig+0x338>)
 8002378:	4013      	ands	r3, r2
 800237a:	0019      	movs	r1, r3
 800237c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002382:	430b      	orrs	r3, r1
 8002384:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	4abc      	ldr	r2, [pc, #752]	; (8002680 <UART_SetConfig+0x33c>)
 800238e:	4013      	ands	r3, r2
 8002390:	0018      	movs	r0, r3
 8002392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002394:	68d9      	ldr	r1, [r3, #12]
 8002396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	0003      	movs	r3, r0
 800239c:	430b      	orrs	r3, r1
 800239e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80023a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80023a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4ab6      	ldr	r2, [pc, #728]	; (8002684 <UART_SetConfig+0x340>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d009      	beq.n	80023c4 <UART_SetConfig+0x80>
 80023b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4ab4      	ldr	r2, [pc, #720]	; (8002688 <UART_SetConfig+0x344>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d004      	beq.n	80023c4 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80023ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023bc:	6a1b      	ldr	r3, [r3, #32]
 80023be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80023c0:	4313      	orrs	r3, r2
 80023c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80023c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	4ab0      	ldr	r2, [pc, #704]	; (800268c <UART_SetConfig+0x348>)
 80023cc:	4013      	ands	r3, r2
 80023ce:	0019      	movs	r1, r3
 80023d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023d6:	430b      	orrs	r3, r1
 80023d8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80023da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e0:	220f      	movs	r2, #15
 80023e2:	4393      	bics	r3, r2
 80023e4:	0018      	movs	r0, r3
 80023e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80023ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	0003      	movs	r3, r0
 80023f0:	430b      	orrs	r3, r1
 80023f2:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80023f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4aa5      	ldr	r2, [pc, #660]	; (8002690 <UART_SetConfig+0x34c>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d131      	bne.n	8002462 <UART_SetConfig+0x11e>
 80023fe:	4ba5      	ldr	r3, [pc, #660]	; (8002694 <UART_SetConfig+0x350>)
 8002400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002402:	2203      	movs	r2, #3
 8002404:	4013      	ands	r3, r2
 8002406:	2b03      	cmp	r3, #3
 8002408:	d01d      	beq.n	8002446 <UART_SetConfig+0x102>
 800240a:	d823      	bhi.n	8002454 <UART_SetConfig+0x110>
 800240c:	2b02      	cmp	r3, #2
 800240e:	d00c      	beq.n	800242a <UART_SetConfig+0xe6>
 8002410:	d820      	bhi.n	8002454 <UART_SetConfig+0x110>
 8002412:	2b00      	cmp	r3, #0
 8002414:	d002      	beq.n	800241c <UART_SetConfig+0xd8>
 8002416:	2b01      	cmp	r3, #1
 8002418:	d00e      	beq.n	8002438 <UART_SetConfig+0xf4>
 800241a:	e01b      	b.n	8002454 <UART_SetConfig+0x110>
 800241c:	231b      	movs	r3, #27
 800241e:	2220      	movs	r2, #32
 8002420:	189b      	adds	r3, r3, r2
 8002422:	19db      	adds	r3, r3, r7
 8002424:	2200      	movs	r2, #0
 8002426:	701a      	strb	r2, [r3, #0]
 8002428:	e154      	b.n	80026d4 <UART_SetConfig+0x390>
 800242a:	231b      	movs	r3, #27
 800242c:	2220      	movs	r2, #32
 800242e:	189b      	adds	r3, r3, r2
 8002430:	19db      	adds	r3, r3, r7
 8002432:	2202      	movs	r2, #2
 8002434:	701a      	strb	r2, [r3, #0]
 8002436:	e14d      	b.n	80026d4 <UART_SetConfig+0x390>
 8002438:	231b      	movs	r3, #27
 800243a:	2220      	movs	r2, #32
 800243c:	189b      	adds	r3, r3, r2
 800243e:	19db      	adds	r3, r3, r7
 8002440:	2204      	movs	r2, #4
 8002442:	701a      	strb	r2, [r3, #0]
 8002444:	e146      	b.n	80026d4 <UART_SetConfig+0x390>
 8002446:	231b      	movs	r3, #27
 8002448:	2220      	movs	r2, #32
 800244a:	189b      	adds	r3, r3, r2
 800244c:	19db      	adds	r3, r3, r7
 800244e:	2208      	movs	r2, #8
 8002450:	701a      	strb	r2, [r3, #0]
 8002452:	e13f      	b.n	80026d4 <UART_SetConfig+0x390>
 8002454:	231b      	movs	r3, #27
 8002456:	2220      	movs	r2, #32
 8002458:	189b      	adds	r3, r3, r2
 800245a:	19db      	adds	r3, r3, r7
 800245c:	2210      	movs	r2, #16
 800245e:	701a      	strb	r2, [r3, #0]
 8002460:	e138      	b.n	80026d4 <UART_SetConfig+0x390>
 8002462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a8c      	ldr	r2, [pc, #560]	; (8002698 <UART_SetConfig+0x354>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d131      	bne.n	80024d0 <UART_SetConfig+0x18c>
 800246c:	4b89      	ldr	r3, [pc, #548]	; (8002694 <UART_SetConfig+0x350>)
 800246e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002470:	220c      	movs	r2, #12
 8002472:	4013      	ands	r3, r2
 8002474:	2b0c      	cmp	r3, #12
 8002476:	d01d      	beq.n	80024b4 <UART_SetConfig+0x170>
 8002478:	d823      	bhi.n	80024c2 <UART_SetConfig+0x17e>
 800247a:	2b08      	cmp	r3, #8
 800247c:	d00c      	beq.n	8002498 <UART_SetConfig+0x154>
 800247e:	d820      	bhi.n	80024c2 <UART_SetConfig+0x17e>
 8002480:	2b00      	cmp	r3, #0
 8002482:	d002      	beq.n	800248a <UART_SetConfig+0x146>
 8002484:	2b04      	cmp	r3, #4
 8002486:	d00e      	beq.n	80024a6 <UART_SetConfig+0x162>
 8002488:	e01b      	b.n	80024c2 <UART_SetConfig+0x17e>
 800248a:	231b      	movs	r3, #27
 800248c:	2220      	movs	r2, #32
 800248e:	189b      	adds	r3, r3, r2
 8002490:	19db      	adds	r3, r3, r7
 8002492:	2200      	movs	r2, #0
 8002494:	701a      	strb	r2, [r3, #0]
 8002496:	e11d      	b.n	80026d4 <UART_SetConfig+0x390>
 8002498:	231b      	movs	r3, #27
 800249a:	2220      	movs	r2, #32
 800249c:	189b      	adds	r3, r3, r2
 800249e:	19db      	adds	r3, r3, r7
 80024a0:	2202      	movs	r2, #2
 80024a2:	701a      	strb	r2, [r3, #0]
 80024a4:	e116      	b.n	80026d4 <UART_SetConfig+0x390>
 80024a6:	231b      	movs	r3, #27
 80024a8:	2220      	movs	r2, #32
 80024aa:	189b      	adds	r3, r3, r2
 80024ac:	19db      	adds	r3, r3, r7
 80024ae:	2204      	movs	r2, #4
 80024b0:	701a      	strb	r2, [r3, #0]
 80024b2:	e10f      	b.n	80026d4 <UART_SetConfig+0x390>
 80024b4:	231b      	movs	r3, #27
 80024b6:	2220      	movs	r2, #32
 80024b8:	189b      	adds	r3, r3, r2
 80024ba:	19db      	adds	r3, r3, r7
 80024bc:	2208      	movs	r2, #8
 80024be:	701a      	strb	r2, [r3, #0]
 80024c0:	e108      	b.n	80026d4 <UART_SetConfig+0x390>
 80024c2:	231b      	movs	r3, #27
 80024c4:	2220      	movs	r2, #32
 80024c6:	189b      	adds	r3, r3, r2
 80024c8:	19db      	adds	r3, r3, r7
 80024ca:	2210      	movs	r2, #16
 80024cc:	701a      	strb	r2, [r3, #0]
 80024ce:	e101      	b.n	80026d4 <UART_SetConfig+0x390>
 80024d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a71      	ldr	r2, [pc, #452]	; (800269c <UART_SetConfig+0x358>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d131      	bne.n	800253e <UART_SetConfig+0x1fa>
 80024da:	4b6e      	ldr	r3, [pc, #440]	; (8002694 <UART_SetConfig+0x350>)
 80024dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024de:	2230      	movs	r2, #48	; 0x30
 80024e0:	4013      	ands	r3, r2
 80024e2:	2b30      	cmp	r3, #48	; 0x30
 80024e4:	d01d      	beq.n	8002522 <UART_SetConfig+0x1de>
 80024e6:	d823      	bhi.n	8002530 <UART_SetConfig+0x1ec>
 80024e8:	2b20      	cmp	r3, #32
 80024ea:	d00c      	beq.n	8002506 <UART_SetConfig+0x1c2>
 80024ec:	d820      	bhi.n	8002530 <UART_SetConfig+0x1ec>
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d002      	beq.n	80024f8 <UART_SetConfig+0x1b4>
 80024f2:	2b10      	cmp	r3, #16
 80024f4:	d00e      	beq.n	8002514 <UART_SetConfig+0x1d0>
 80024f6:	e01b      	b.n	8002530 <UART_SetConfig+0x1ec>
 80024f8:	231b      	movs	r3, #27
 80024fa:	2220      	movs	r2, #32
 80024fc:	189b      	adds	r3, r3, r2
 80024fe:	19db      	adds	r3, r3, r7
 8002500:	2200      	movs	r2, #0
 8002502:	701a      	strb	r2, [r3, #0]
 8002504:	e0e6      	b.n	80026d4 <UART_SetConfig+0x390>
 8002506:	231b      	movs	r3, #27
 8002508:	2220      	movs	r2, #32
 800250a:	189b      	adds	r3, r3, r2
 800250c:	19db      	adds	r3, r3, r7
 800250e:	2202      	movs	r2, #2
 8002510:	701a      	strb	r2, [r3, #0]
 8002512:	e0df      	b.n	80026d4 <UART_SetConfig+0x390>
 8002514:	231b      	movs	r3, #27
 8002516:	2220      	movs	r2, #32
 8002518:	189b      	adds	r3, r3, r2
 800251a:	19db      	adds	r3, r3, r7
 800251c:	2204      	movs	r2, #4
 800251e:	701a      	strb	r2, [r3, #0]
 8002520:	e0d8      	b.n	80026d4 <UART_SetConfig+0x390>
 8002522:	231b      	movs	r3, #27
 8002524:	2220      	movs	r2, #32
 8002526:	189b      	adds	r3, r3, r2
 8002528:	19db      	adds	r3, r3, r7
 800252a:	2208      	movs	r2, #8
 800252c:	701a      	strb	r2, [r3, #0]
 800252e:	e0d1      	b.n	80026d4 <UART_SetConfig+0x390>
 8002530:	231b      	movs	r3, #27
 8002532:	2220      	movs	r2, #32
 8002534:	189b      	adds	r3, r3, r2
 8002536:	19db      	adds	r3, r3, r7
 8002538:	2210      	movs	r2, #16
 800253a:	701a      	strb	r2, [r3, #0]
 800253c:	e0ca      	b.n	80026d4 <UART_SetConfig+0x390>
 800253e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a57      	ldr	r2, [pc, #348]	; (80026a0 <UART_SetConfig+0x35c>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d106      	bne.n	8002556 <UART_SetConfig+0x212>
 8002548:	231b      	movs	r3, #27
 800254a:	2220      	movs	r2, #32
 800254c:	189b      	adds	r3, r3, r2
 800254e:	19db      	adds	r3, r3, r7
 8002550:	2200      	movs	r2, #0
 8002552:	701a      	strb	r2, [r3, #0]
 8002554:	e0be      	b.n	80026d4 <UART_SetConfig+0x390>
 8002556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a52      	ldr	r2, [pc, #328]	; (80026a4 <UART_SetConfig+0x360>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d106      	bne.n	800256e <UART_SetConfig+0x22a>
 8002560:	231b      	movs	r3, #27
 8002562:	2220      	movs	r2, #32
 8002564:	189b      	adds	r3, r3, r2
 8002566:	19db      	adds	r3, r3, r7
 8002568:	2200      	movs	r2, #0
 800256a:	701a      	strb	r2, [r3, #0]
 800256c:	e0b2      	b.n	80026d4 <UART_SetConfig+0x390>
 800256e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a4d      	ldr	r2, [pc, #308]	; (80026a8 <UART_SetConfig+0x364>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d106      	bne.n	8002586 <UART_SetConfig+0x242>
 8002578:	231b      	movs	r3, #27
 800257a:	2220      	movs	r2, #32
 800257c:	189b      	adds	r3, r3, r2
 800257e:	19db      	adds	r3, r3, r7
 8002580:	2200      	movs	r2, #0
 8002582:	701a      	strb	r2, [r3, #0]
 8002584:	e0a6      	b.n	80026d4 <UART_SetConfig+0x390>
 8002586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a3e      	ldr	r2, [pc, #248]	; (8002684 <UART_SetConfig+0x340>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d13e      	bne.n	800260e <UART_SetConfig+0x2ca>
 8002590:	4b40      	ldr	r3, [pc, #256]	; (8002694 <UART_SetConfig+0x350>)
 8002592:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002594:	23c0      	movs	r3, #192	; 0xc0
 8002596:	011b      	lsls	r3, r3, #4
 8002598:	4013      	ands	r3, r2
 800259a:	22c0      	movs	r2, #192	; 0xc0
 800259c:	0112      	lsls	r2, r2, #4
 800259e:	4293      	cmp	r3, r2
 80025a0:	d027      	beq.n	80025f2 <UART_SetConfig+0x2ae>
 80025a2:	22c0      	movs	r2, #192	; 0xc0
 80025a4:	0112      	lsls	r2, r2, #4
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d82a      	bhi.n	8002600 <UART_SetConfig+0x2bc>
 80025aa:	2280      	movs	r2, #128	; 0x80
 80025ac:	0112      	lsls	r2, r2, #4
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d011      	beq.n	80025d6 <UART_SetConfig+0x292>
 80025b2:	2280      	movs	r2, #128	; 0x80
 80025b4:	0112      	lsls	r2, r2, #4
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d822      	bhi.n	8002600 <UART_SetConfig+0x2bc>
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d004      	beq.n	80025c8 <UART_SetConfig+0x284>
 80025be:	2280      	movs	r2, #128	; 0x80
 80025c0:	00d2      	lsls	r2, r2, #3
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d00e      	beq.n	80025e4 <UART_SetConfig+0x2a0>
 80025c6:	e01b      	b.n	8002600 <UART_SetConfig+0x2bc>
 80025c8:	231b      	movs	r3, #27
 80025ca:	2220      	movs	r2, #32
 80025cc:	189b      	adds	r3, r3, r2
 80025ce:	19db      	adds	r3, r3, r7
 80025d0:	2200      	movs	r2, #0
 80025d2:	701a      	strb	r2, [r3, #0]
 80025d4:	e07e      	b.n	80026d4 <UART_SetConfig+0x390>
 80025d6:	231b      	movs	r3, #27
 80025d8:	2220      	movs	r2, #32
 80025da:	189b      	adds	r3, r3, r2
 80025dc:	19db      	adds	r3, r3, r7
 80025de:	2202      	movs	r2, #2
 80025e0:	701a      	strb	r2, [r3, #0]
 80025e2:	e077      	b.n	80026d4 <UART_SetConfig+0x390>
 80025e4:	231b      	movs	r3, #27
 80025e6:	2220      	movs	r2, #32
 80025e8:	189b      	adds	r3, r3, r2
 80025ea:	19db      	adds	r3, r3, r7
 80025ec:	2204      	movs	r2, #4
 80025ee:	701a      	strb	r2, [r3, #0]
 80025f0:	e070      	b.n	80026d4 <UART_SetConfig+0x390>
 80025f2:	231b      	movs	r3, #27
 80025f4:	2220      	movs	r2, #32
 80025f6:	189b      	adds	r3, r3, r2
 80025f8:	19db      	adds	r3, r3, r7
 80025fa:	2208      	movs	r2, #8
 80025fc:	701a      	strb	r2, [r3, #0]
 80025fe:	e069      	b.n	80026d4 <UART_SetConfig+0x390>
 8002600:	231b      	movs	r3, #27
 8002602:	2220      	movs	r2, #32
 8002604:	189b      	adds	r3, r3, r2
 8002606:	19db      	adds	r3, r3, r7
 8002608:	2210      	movs	r2, #16
 800260a:	701a      	strb	r2, [r3, #0]
 800260c:	e062      	b.n	80026d4 <UART_SetConfig+0x390>
 800260e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a1d      	ldr	r2, [pc, #116]	; (8002688 <UART_SetConfig+0x344>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d157      	bne.n	80026c8 <UART_SetConfig+0x384>
 8002618:	4b1e      	ldr	r3, [pc, #120]	; (8002694 <UART_SetConfig+0x350>)
 800261a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800261c:	23c0      	movs	r3, #192	; 0xc0
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	4013      	ands	r3, r2
 8002622:	22c0      	movs	r2, #192	; 0xc0
 8002624:	0092      	lsls	r2, r2, #2
 8002626:	4293      	cmp	r3, r2
 8002628:	d040      	beq.n	80026ac <UART_SetConfig+0x368>
 800262a:	22c0      	movs	r2, #192	; 0xc0
 800262c:	0092      	lsls	r2, r2, #2
 800262e:	4293      	cmp	r3, r2
 8002630:	d843      	bhi.n	80026ba <UART_SetConfig+0x376>
 8002632:	2280      	movs	r2, #128	; 0x80
 8002634:	0092      	lsls	r2, r2, #2
 8002636:	4293      	cmp	r3, r2
 8002638:	d011      	beq.n	800265e <UART_SetConfig+0x31a>
 800263a:	2280      	movs	r2, #128	; 0x80
 800263c:	0092      	lsls	r2, r2, #2
 800263e:	4293      	cmp	r3, r2
 8002640:	d83b      	bhi.n	80026ba <UART_SetConfig+0x376>
 8002642:	2b00      	cmp	r3, #0
 8002644:	d004      	beq.n	8002650 <UART_SetConfig+0x30c>
 8002646:	2280      	movs	r2, #128	; 0x80
 8002648:	0052      	lsls	r2, r2, #1
 800264a:	4293      	cmp	r3, r2
 800264c:	d00e      	beq.n	800266c <UART_SetConfig+0x328>
 800264e:	e034      	b.n	80026ba <UART_SetConfig+0x376>
 8002650:	231b      	movs	r3, #27
 8002652:	2220      	movs	r2, #32
 8002654:	189b      	adds	r3, r3, r2
 8002656:	19db      	adds	r3, r3, r7
 8002658:	2200      	movs	r2, #0
 800265a:	701a      	strb	r2, [r3, #0]
 800265c:	e03a      	b.n	80026d4 <UART_SetConfig+0x390>
 800265e:	231b      	movs	r3, #27
 8002660:	2220      	movs	r2, #32
 8002662:	189b      	adds	r3, r3, r2
 8002664:	19db      	adds	r3, r3, r7
 8002666:	2202      	movs	r2, #2
 8002668:	701a      	strb	r2, [r3, #0]
 800266a:	e033      	b.n	80026d4 <UART_SetConfig+0x390>
 800266c:	231b      	movs	r3, #27
 800266e:	2220      	movs	r2, #32
 8002670:	189b      	adds	r3, r3, r2
 8002672:	19db      	adds	r3, r3, r7
 8002674:	2204      	movs	r2, #4
 8002676:	701a      	strb	r2, [r3, #0]
 8002678:	e02c      	b.n	80026d4 <UART_SetConfig+0x390>
 800267a:	46c0      	nop			; (mov r8, r8)
 800267c:	cfff69f3 	.word	0xcfff69f3
 8002680:	ffffcfff 	.word	0xffffcfff
 8002684:	40008000 	.word	0x40008000
 8002688:	40008400 	.word	0x40008400
 800268c:	11fff4ff 	.word	0x11fff4ff
 8002690:	40013800 	.word	0x40013800
 8002694:	40021000 	.word	0x40021000
 8002698:	40004400 	.word	0x40004400
 800269c:	40004800 	.word	0x40004800
 80026a0:	40004c00 	.word	0x40004c00
 80026a4:	40005000 	.word	0x40005000
 80026a8:	40013c00 	.word	0x40013c00
 80026ac:	231b      	movs	r3, #27
 80026ae:	2220      	movs	r2, #32
 80026b0:	189b      	adds	r3, r3, r2
 80026b2:	19db      	adds	r3, r3, r7
 80026b4:	2208      	movs	r2, #8
 80026b6:	701a      	strb	r2, [r3, #0]
 80026b8:	e00c      	b.n	80026d4 <UART_SetConfig+0x390>
 80026ba:	231b      	movs	r3, #27
 80026bc:	2220      	movs	r2, #32
 80026be:	189b      	adds	r3, r3, r2
 80026c0:	19db      	adds	r3, r3, r7
 80026c2:	2210      	movs	r2, #16
 80026c4:	701a      	strb	r2, [r3, #0]
 80026c6:	e005      	b.n	80026d4 <UART_SetConfig+0x390>
 80026c8:	231b      	movs	r3, #27
 80026ca:	2220      	movs	r2, #32
 80026cc:	189b      	adds	r3, r3, r2
 80026ce:	19db      	adds	r3, r3, r7
 80026d0:	2210      	movs	r2, #16
 80026d2:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80026d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4ac1      	ldr	r2, [pc, #772]	; (80029e0 <UART_SetConfig+0x69c>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d005      	beq.n	80026ea <UART_SetConfig+0x3a6>
 80026de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4ac0      	ldr	r2, [pc, #768]	; (80029e4 <UART_SetConfig+0x6a0>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d000      	beq.n	80026ea <UART_SetConfig+0x3a6>
 80026e8:	e093      	b.n	8002812 <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80026ea:	231b      	movs	r3, #27
 80026ec:	2220      	movs	r2, #32
 80026ee:	189b      	adds	r3, r3, r2
 80026f0:	19db      	adds	r3, r3, r7
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	2b08      	cmp	r3, #8
 80026f6:	d015      	beq.n	8002724 <UART_SetConfig+0x3e0>
 80026f8:	dc18      	bgt.n	800272c <UART_SetConfig+0x3e8>
 80026fa:	2b04      	cmp	r3, #4
 80026fc:	d00d      	beq.n	800271a <UART_SetConfig+0x3d6>
 80026fe:	dc15      	bgt.n	800272c <UART_SetConfig+0x3e8>
 8002700:	2b00      	cmp	r3, #0
 8002702:	d002      	beq.n	800270a <UART_SetConfig+0x3c6>
 8002704:	2b02      	cmp	r3, #2
 8002706:	d005      	beq.n	8002714 <UART_SetConfig+0x3d0>
 8002708:	e010      	b.n	800272c <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800270a:	f7ff facf 	bl	8001cac <HAL_RCC_GetPCLK1Freq>
 800270e:	0003      	movs	r3, r0
 8002710:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002712:	e014      	b.n	800273e <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002714:	4bb4      	ldr	r3, [pc, #720]	; (80029e8 <UART_SetConfig+0x6a4>)
 8002716:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002718:	e011      	b.n	800273e <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800271a:	f7ff fa3b 	bl	8001b94 <HAL_RCC_GetSysClockFreq>
 800271e:	0003      	movs	r3, r0
 8002720:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002722:	e00c      	b.n	800273e <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002724:	2380      	movs	r3, #128	; 0x80
 8002726:	021b      	lsls	r3, r3, #8
 8002728:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800272a:	e008      	b.n	800273e <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 800272c:	2300      	movs	r3, #0
 800272e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002730:	231a      	movs	r3, #26
 8002732:	2220      	movs	r2, #32
 8002734:	189b      	adds	r3, r3, r2
 8002736:	19db      	adds	r3, r3, r7
 8002738:	2201      	movs	r2, #1
 800273a:	701a      	strb	r2, [r3, #0]
        break;
 800273c:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800273e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002740:	2b00      	cmp	r3, #0
 8002742:	d100      	bne.n	8002746 <UART_SetConfig+0x402>
 8002744:	e135      	b.n	80029b2 <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002748:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800274a:	4ba8      	ldr	r3, [pc, #672]	; (80029ec <UART_SetConfig+0x6a8>)
 800274c:	0052      	lsls	r2, r2, #1
 800274e:	5ad3      	ldrh	r3, [r2, r3]
 8002750:	0019      	movs	r1, r3
 8002752:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002754:	f7fd fcde 	bl	8000114 <__udivsi3>
 8002758:	0003      	movs	r3, r0
 800275a:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800275c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275e:	685a      	ldr	r2, [r3, #4]
 8002760:	0013      	movs	r3, r2
 8002762:	005b      	lsls	r3, r3, #1
 8002764:	189b      	adds	r3, r3, r2
 8002766:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002768:	429a      	cmp	r2, r3
 800276a:	d305      	bcc.n	8002778 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800276c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002772:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002774:	429a      	cmp	r2, r3
 8002776:	d906      	bls.n	8002786 <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8002778:	231a      	movs	r3, #26
 800277a:	2220      	movs	r2, #32
 800277c:	189b      	adds	r3, r3, r2
 800277e:	19db      	adds	r3, r3, r7
 8002780:	2201      	movs	r2, #1
 8002782:	701a      	strb	r2, [r3, #0]
 8002784:	e044      	b.n	8002810 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002788:	61bb      	str	r3, [r7, #24]
 800278a:	2300      	movs	r3, #0
 800278c:	61fb      	str	r3, [r7, #28]
 800278e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002790:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002792:	4b96      	ldr	r3, [pc, #600]	; (80029ec <UART_SetConfig+0x6a8>)
 8002794:	0052      	lsls	r2, r2, #1
 8002796:	5ad3      	ldrh	r3, [r2, r3]
 8002798:	613b      	str	r3, [r7, #16]
 800279a:	2300      	movs	r3, #0
 800279c:	617b      	str	r3, [r7, #20]
 800279e:	693a      	ldr	r2, [r7, #16]
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	69b8      	ldr	r0, [r7, #24]
 80027a4:	69f9      	ldr	r1, [r7, #28]
 80027a6:	f7fd fe2b 	bl	8000400 <__aeabi_uldivmod>
 80027aa:	0002      	movs	r2, r0
 80027ac:	000b      	movs	r3, r1
 80027ae:	0e11      	lsrs	r1, r2, #24
 80027b0:	021d      	lsls	r5, r3, #8
 80027b2:	430d      	orrs	r5, r1
 80027b4:	0214      	lsls	r4, r2, #8
 80027b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	085b      	lsrs	r3, r3, #1
 80027bc:	60bb      	str	r3, [r7, #8]
 80027be:	2300      	movs	r3, #0
 80027c0:	60fb      	str	r3, [r7, #12]
 80027c2:	68b8      	ldr	r0, [r7, #8]
 80027c4:	68f9      	ldr	r1, [r7, #12]
 80027c6:	1900      	adds	r0, r0, r4
 80027c8:	4169      	adcs	r1, r5
 80027ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	603b      	str	r3, [r7, #0]
 80027d0:	2300      	movs	r3, #0
 80027d2:	607b      	str	r3, [r7, #4]
 80027d4:	683a      	ldr	r2, [r7, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f7fd fe12 	bl	8000400 <__aeabi_uldivmod>
 80027dc:	0002      	movs	r2, r0
 80027de:	000b      	movs	r3, r1
 80027e0:	0013      	movs	r3, r2
 80027e2:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80027e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027e6:	23c0      	movs	r3, #192	; 0xc0
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d309      	bcc.n	8002802 <UART_SetConfig+0x4be>
 80027ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027f0:	2380      	movs	r3, #128	; 0x80
 80027f2:	035b      	lsls	r3, r3, #13
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d204      	bcs.n	8002802 <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 80027f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027fe:	60da      	str	r2, [r3, #12]
 8002800:	e006      	b.n	8002810 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 8002802:	231a      	movs	r3, #26
 8002804:	2220      	movs	r2, #32
 8002806:	189b      	adds	r3, r3, r2
 8002808:	19db      	adds	r3, r3, r7
 800280a:	2201      	movs	r2, #1
 800280c:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 800280e:	e0d0      	b.n	80029b2 <UART_SetConfig+0x66e>
 8002810:	e0cf      	b.n	80029b2 <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002814:	69da      	ldr	r2, [r3, #28]
 8002816:	2380      	movs	r3, #128	; 0x80
 8002818:	021b      	lsls	r3, r3, #8
 800281a:	429a      	cmp	r2, r3
 800281c:	d000      	beq.n	8002820 <UART_SetConfig+0x4dc>
 800281e:	e070      	b.n	8002902 <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8002820:	231b      	movs	r3, #27
 8002822:	2220      	movs	r2, #32
 8002824:	189b      	adds	r3, r3, r2
 8002826:	19db      	adds	r3, r3, r7
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	2b08      	cmp	r3, #8
 800282c:	d015      	beq.n	800285a <UART_SetConfig+0x516>
 800282e:	dc18      	bgt.n	8002862 <UART_SetConfig+0x51e>
 8002830:	2b04      	cmp	r3, #4
 8002832:	d00d      	beq.n	8002850 <UART_SetConfig+0x50c>
 8002834:	dc15      	bgt.n	8002862 <UART_SetConfig+0x51e>
 8002836:	2b00      	cmp	r3, #0
 8002838:	d002      	beq.n	8002840 <UART_SetConfig+0x4fc>
 800283a:	2b02      	cmp	r3, #2
 800283c:	d005      	beq.n	800284a <UART_SetConfig+0x506>
 800283e:	e010      	b.n	8002862 <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002840:	f7ff fa34 	bl	8001cac <HAL_RCC_GetPCLK1Freq>
 8002844:	0003      	movs	r3, r0
 8002846:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002848:	e014      	b.n	8002874 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800284a:	4b67      	ldr	r3, [pc, #412]	; (80029e8 <UART_SetConfig+0x6a4>)
 800284c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800284e:	e011      	b.n	8002874 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002850:	f7ff f9a0 	bl	8001b94 <HAL_RCC_GetSysClockFreq>
 8002854:	0003      	movs	r3, r0
 8002856:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002858:	e00c      	b.n	8002874 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800285a:	2380      	movs	r3, #128	; 0x80
 800285c:	021b      	lsls	r3, r3, #8
 800285e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002860:	e008      	b.n	8002874 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 8002862:	2300      	movs	r3, #0
 8002864:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002866:	231a      	movs	r3, #26
 8002868:	2220      	movs	r2, #32
 800286a:	189b      	adds	r3, r3, r2
 800286c:	19db      	adds	r3, r3, r7
 800286e:	2201      	movs	r2, #1
 8002870:	701a      	strb	r2, [r3, #0]
        break;
 8002872:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002876:	2b00      	cmp	r3, #0
 8002878:	d100      	bne.n	800287c <UART_SetConfig+0x538>
 800287a:	e09a      	b.n	80029b2 <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800287c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002880:	4b5a      	ldr	r3, [pc, #360]	; (80029ec <UART_SetConfig+0x6a8>)
 8002882:	0052      	lsls	r2, r2, #1
 8002884:	5ad3      	ldrh	r3, [r2, r3]
 8002886:	0019      	movs	r1, r3
 8002888:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800288a:	f7fd fc43 	bl	8000114 <__udivsi3>
 800288e:	0003      	movs	r3, r0
 8002890:	005a      	lsls	r2, r3, #1
 8002892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	085b      	lsrs	r3, r3, #1
 8002898:	18d2      	adds	r2, r2, r3
 800289a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	0019      	movs	r1, r3
 80028a0:	0010      	movs	r0, r2
 80028a2:	f7fd fc37 	bl	8000114 <__udivsi3>
 80028a6:	0003      	movs	r3, r0
 80028a8:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80028aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ac:	2b0f      	cmp	r3, #15
 80028ae:	d921      	bls.n	80028f4 <UART_SetConfig+0x5b0>
 80028b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028b2:	2380      	movs	r3, #128	; 0x80
 80028b4:	025b      	lsls	r3, r3, #9
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d21c      	bcs.n	80028f4 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80028ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028bc:	b29a      	uxth	r2, r3
 80028be:	200e      	movs	r0, #14
 80028c0:	2420      	movs	r4, #32
 80028c2:	1903      	adds	r3, r0, r4
 80028c4:	19db      	adds	r3, r3, r7
 80028c6:	210f      	movs	r1, #15
 80028c8:	438a      	bics	r2, r1
 80028ca:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80028cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ce:	085b      	lsrs	r3, r3, #1
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	2207      	movs	r2, #7
 80028d4:	4013      	ands	r3, r2
 80028d6:	b299      	uxth	r1, r3
 80028d8:	1903      	adds	r3, r0, r4
 80028da:	19db      	adds	r3, r3, r7
 80028dc:	1902      	adds	r2, r0, r4
 80028de:	19d2      	adds	r2, r2, r7
 80028e0:	8812      	ldrh	r2, [r2, #0]
 80028e2:	430a      	orrs	r2, r1
 80028e4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80028e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	1902      	adds	r2, r0, r4
 80028ec:	19d2      	adds	r2, r2, r7
 80028ee:	8812      	ldrh	r2, [r2, #0]
 80028f0:	60da      	str	r2, [r3, #12]
 80028f2:	e05e      	b.n	80029b2 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 80028f4:	231a      	movs	r3, #26
 80028f6:	2220      	movs	r2, #32
 80028f8:	189b      	adds	r3, r3, r2
 80028fa:	19db      	adds	r3, r3, r7
 80028fc:	2201      	movs	r2, #1
 80028fe:	701a      	strb	r2, [r3, #0]
 8002900:	e057      	b.n	80029b2 <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002902:	231b      	movs	r3, #27
 8002904:	2220      	movs	r2, #32
 8002906:	189b      	adds	r3, r3, r2
 8002908:	19db      	adds	r3, r3, r7
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	2b08      	cmp	r3, #8
 800290e:	d015      	beq.n	800293c <UART_SetConfig+0x5f8>
 8002910:	dc18      	bgt.n	8002944 <UART_SetConfig+0x600>
 8002912:	2b04      	cmp	r3, #4
 8002914:	d00d      	beq.n	8002932 <UART_SetConfig+0x5ee>
 8002916:	dc15      	bgt.n	8002944 <UART_SetConfig+0x600>
 8002918:	2b00      	cmp	r3, #0
 800291a:	d002      	beq.n	8002922 <UART_SetConfig+0x5de>
 800291c:	2b02      	cmp	r3, #2
 800291e:	d005      	beq.n	800292c <UART_SetConfig+0x5e8>
 8002920:	e010      	b.n	8002944 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002922:	f7ff f9c3 	bl	8001cac <HAL_RCC_GetPCLK1Freq>
 8002926:	0003      	movs	r3, r0
 8002928:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800292a:	e014      	b.n	8002956 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800292c:	4b2e      	ldr	r3, [pc, #184]	; (80029e8 <UART_SetConfig+0x6a4>)
 800292e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002930:	e011      	b.n	8002956 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002932:	f7ff f92f 	bl	8001b94 <HAL_RCC_GetSysClockFreq>
 8002936:	0003      	movs	r3, r0
 8002938:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800293a:	e00c      	b.n	8002956 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800293c:	2380      	movs	r3, #128	; 0x80
 800293e:	021b      	lsls	r3, r3, #8
 8002940:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002942:	e008      	b.n	8002956 <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8002944:	2300      	movs	r3, #0
 8002946:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002948:	231a      	movs	r3, #26
 800294a:	2220      	movs	r2, #32
 800294c:	189b      	adds	r3, r3, r2
 800294e:	19db      	adds	r3, r3, r7
 8002950:	2201      	movs	r2, #1
 8002952:	701a      	strb	r2, [r3, #0]
        break;
 8002954:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002958:	2b00      	cmp	r3, #0
 800295a:	d02a      	beq.n	80029b2 <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800295c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002960:	4b22      	ldr	r3, [pc, #136]	; (80029ec <UART_SetConfig+0x6a8>)
 8002962:	0052      	lsls	r2, r2, #1
 8002964:	5ad3      	ldrh	r3, [r2, r3]
 8002966:	0019      	movs	r1, r3
 8002968:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800296a:	f7fd fbd3 	bl	8000114 <__udivsi3>
 800296e:	0003      	movs	r3, r0
 8002970:	001a      	movs	r2, r3
 8002972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	085b      	lsrs	r3, r3, #1
 8002978:	18d2      	adds	r2, r2, r3
 800297a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	0019      	movs	r1, r3
 8002980:	0010      	movs	r0, r2
 8002982:	f7fd fbc7 	bl	8000114 <__udivsi3>
 8002986:	0003      	movs	r3, r0
 8002988:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800298a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800298c:	2b0f      	cmp	r3, #15
 800298e:	d90a      	bls.n	80029a6 <UART_SetConfig+0x662>
 8002990:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002992:	2380      	movs	r3, #128	; 0x80
 8002994:	025b      	lsls	r3, r3, #9
 8002996:	429a      	cmp	r2, r3
 8002998:	d205      	bcs.n	80029a6 <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800299a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800299c:	b29a      	uxth	r2, r3
 800299e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	60da      	str	r2, [r3, #12]
 80029a4:	e005      	b.n	80029b2 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 80029a6:	231a      	movs	r3, #26
 80029a8:	2220      	movs	r2, #32
 80029aa:	189b      	adds	r3, r3, r2
 80029ac:	19db      	adds	r3, r3, r7
 80029ae:	2201      	movs	r2, #1
 80029b0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80029b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b4:	226a      	movs	r2, #106	; 0x6a
 80029b6:	2101      	movs	r1, #1
 80029b8:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80029ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029bc:	2268      	movs	r2, #104	; 0x68
 80029be:	2101      	movs	r1, #1
 80029c0:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80029c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c4:	2200      	movs	r2, #0
 80029c6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80029c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ca:	2200      	movs	r2, #0
 80029cc:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80029ce:	231a      	movs	r3, #26
 80029d0:	2220      	movs	r2, #32
 80029d2:	189b      	adds	r3, r3, r2
 80029d4:	19db      	adds	r3, r3, r7
 80029d6:	781b      	ldrb	r3, [r3, #0]
}
 80029d8:	0018      	movs	r0, r3
 80029da:	46bd      	mov	sp, r7
 80029dc:	b010      	add	sp, #64	; 0x40
 80029de:	bdb0      	pop	{r4, r5, r7, pc}
 80029e0:	40008000 	.word	0x40008000
 80029e4:	40008400 	.word	0x40008400
 80029e8:	00f42400 	.word	0x00f42400
 80029ec:	080031bc 	.word	0x080031bc

080029f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029fc:	2208      	movs	r2, #8
 80029fe:	4013      	ands	r3, r2
 8002a00:	d00b      	beq.n	8002a1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	4a4a      	ldr	r2, [pc, #296]	; (8002b34 <UART_AdvFeatureConfig+0x144>)
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	0019      	movs	r1, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	430a      	orrs	r2, r1
 8002a18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a1e:	2201      	movs	r2, #1
 8002a20:	4013      	ands	r3, r2
 8002a22:	d00b      	beq.n	8002a3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	4a43      	ldr	r2, [pc, #268]	; (8002b38 <UART_AdvFeatureConfig+0x148>)
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	0019      	movs	r1, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a40:	2202      	movs	r2, #2
 8002a42:	4013      	ands	r3, r2
 8002a44:	d00b      	beq.n	8002a5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	4a3b      	ldr	r2, [pc, #236]	; (8002b3c <UART_AdvFeatureConfig+0x14c>)
 8002a4e:	4013      	ands	r3, r2
 8002a50:	0019      	movs	r1, r3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	430a      	orrs	r2, r1
 8002a5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a62:	2204      	movs	r2, #4
 8002a64:	4013      	ands	r3, r2
 8002a66:	d00b      	beq.n	8002a80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	4a34      	ldr	r2, [pc, #208]	; (8002b40 <UART_AdvFeatureConfig+0x150>)
 8002a70:	4013      	ands	r3, r2
 8002a72:	0019      	movs	r1, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	430a      	orrs	r2, r1
 8002a7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a84:	2210      	movs	r2, #16
 8002a86:	4013      	ands	r3, r2
 8002a88:	d00b      	beq.n	8002aa2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	4a2c      	ldr	r2, [pc, #176]	; (8002b44 <UART_AdvFeatureConfig+0x154>)
 8002a92:	4013      	ands	r3, r2
 8002a94:	0019      	movs	r1, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa6:	2220      	movs	r2, #32
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	d00b      	beq.n	8002ac4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	4a25      	ldr	r2, [pc, #148]	; (8002b48 <UART_AdvFeatureConfig+0x158>)
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	0019      	movs	r1, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	430a      	orrs	r2, r1
 8002ac2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac8:	2240      	movs	r2, #64	; 0x40
 8002aca:	4013      	ands	r3, r2
 8002acc:	d01d      	beq.n	8002b0a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	4a1d      	ldr	r2, [pc, #116]	; (8002b4c <UART_AdvFeatureConfig+0x15c>)
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	0019      	movs	r1, r3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	430a      	orrs	r2, r1
 8002ae4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002aea:	2380      	movs	r3, #128	; 0x80
 8002aec:	035b      	lsls	r3, r3, #13
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d10b      	bne.n	8002b0a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	4a15      	ldr	r2, [pc, #84]	; (8002b50 <UART_AdvFeatureConfig+0x160>)
 8002afa:	4013      	ands	r3, r2
 8002afc:	0019      	movs	r1, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	430a      	orrs	r2, r1
 8002b08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b0e:	2280      	movs	r2, #128	; 0x80
 8002b10:	4013      	ands	r3, r2
 8002b12:	d00b      	beq.n	8002b2c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	4a0e      	ldr	r2, [pc, #56]	; (8002b54 <UART_AdvFeatureConfig+0x164>)
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	0019      	movs	r1, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	605a      	str	r2, [r3, #4]
  }
}
 8002b2c:	46c0      	nop			; (mov r8, r8)
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	b002      	add	sp, #8
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	ffff7fff 	.word	0xffff7fff
 8002b38:	fffdffff 	.word	0xfffdffff
 8002b3c:	fffeffff 	.word	0xfffeffff
 8002b40:	fffbffff 	.word	0xfffbffff
 8002b44:	ffffefff 	.word	0xffffefff
 8002b48:	ffffdfff 	.word	0xffffdfff
 8002b4c:	ffefffff 	.word	0xffefffff
 8002b50:	ff9fffff 	.word	0xff9fffff
 8002b54:	fff7ffff 	.word	0xfff7ffff

08002b58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b092      	sub	sp, #72	; 0x48
 8002b5c:	af02      	add	r7, sp, #8
 8002b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2290      	movs	r2, #144	; 0x90
 8002b64:	2100      	movs	r1, #0
 8002b66:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002b68:	f7fe f902 	bl	8000d70 <HAL_GetTick>
 8002b6c:	0003      	movs	r3, r0
 8002b6e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2208      	movs	r2, #8
 8002b78:	4013      	ands	r3, r2
 8002b7a:	2b08      	cmp	r3, #8
 8002b7c:	d12d      	bne.n	8002bda <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b80:	2280      	movs	r2, #128	; 0x80
 8002b82:	0391      	lsls	r1, r2, #14
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	4a47      	ldr	r2, [pc, #284]	; (8002ca4 <UART_CheckIdleState+0x14c>)
 8002b88:	9200      	str	r2, [sp, #0]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f000 f88e 	bl	8002cac <UART_WaitOnFlagUntilTimeout>
 8002b90:	1e03      	subs	r3, r0, #0
 8002b92:	d022      	beq.n	8002bda <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b94:	f3ef 8310 	mrs	r3, PRIMASK
 8002b98:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002b9c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba4:	f383 8810 	msr	PRIMASK, r3
}
 8002ba8:	46c0      	nop			; (mov r8, r8)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2180      	movs	r1, #128	; 0x80
 8002bb6:	438a      	bics	r2, r1
 8002bb8:	601a      	str	r2, [r3, #0]
 8002bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bc0:	f383 8810 	msr	PRIMASK, r3
}
 8002bc4:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2288      	movs	r2, #136	; 0x88
 8002bca:	2120      	movs	r1, #32
 8002bcc:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2284      	movs	r2, #132	; 0x84
 8002bd2:	2100      	movs	r1, #0
 8002bd4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e060      	b.n	8002c9c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2204      	movs	r2, #4
 8002be2:	4013      	ands	r3, r2
 8002be4:	2b04      	cmp	r3, #4
 8002be6:	d146      	bne.n	8002c76 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002be8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bea:	2280      	movs	r2, #128	; 0x80
 8002bec:	03d1      	lsls	r1, r2, #15
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	4a2c      	ldr	r2, [pc, #176]	; (8002ca4 <UART_CheckIdleState+0x14c>)
 8002bf2:	9200      	str	r2, [sp, #0]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f000 f859 	bl	8002cac <UART_WaitOnFlagUntilTimeout>
 8002bfa:	1e03      	subs	r3, r0, #0
 8002bfc:	d03b      	beq.n	8002c76 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bfe:	f3ef 8310 	mrs	r3, PRIMASK
 8002c02:	60fb      	str	r3, [r7, #12]
  return(result);
 8002c04:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002c06:	637b      	str	r3, [r7, #52]	; 0x34
 8002c08:	2301      	movs	r3, #1
 8002c0a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	f383 8810 	msr	PRIMASK, r3
}
 8002c12:	46c0      	nop			; (mov r8, r8)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4922      	ldr	r1, [pc, #136]	; (8002ca8 <UART_CheckIdleState+0x150>)
 8002c20:	400a      	ands	r2, r1
 8002c22:	601a      	str	r2, [r3, #0]
 8002c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c26:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	f383 8810 	msr	PRIMASK, r3
}
 8002c2e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c30:	f3ef 8310 	mrs	r3, PRIMASK
 8002c34:	61bb      	str	r3, [r7, #24]
  return(result);
 8002c36:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c38:	633b      	str	r3, [r7, #48]	; 0x30
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	f383 8810 	msr	PRIMASK, r3
}
 8002c44:	46c0      	nop			; (mov r8, r8)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	689a      	ldr	r2, [r3, #8]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2101      	movs	r1, #1
 8002c52:	438a      	bics	r2, r1
 8002c54:	609a      	str	r2, [r3, #8]
 8002c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c58:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c5a:	6a3b      	ldr	r3, [r7, #32]
 8002c5c:	f383 8810 	msr	PRIMASK, r3
}
 8002c60:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	228c      	movs	r2, #140	; 0x8c
 8002c66:	2120      	movs	r1, #32
 8002c68:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2284      	movs	r2, #132	; 0x84
 8002c6e:	2100      	movs	r1, #0
 8002c70:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e012      	b.n	8002c9c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2288      	movs	r2, #136	; 0x88
 8002c7a:	2120      	movs	r1, #32
 8002c7c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	228c      	movs	r2, #140	; 0x8c
 8002c82:	2120      	movs	r1, #32
 8002c84:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2284      	movs	r2, #132	; 0x84
 8002c96:	2100      	movs	r1, #0
 8002c98:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c9a:	2300      	movs	r3, #0
}
 8002c9c:	0018      	movs	r0, r3
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	b010      	add	sp, #64	; 0x40
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	01ffffff 	.word	0x01ffffff
 8002ca8:	fffffedf 	.word	0xfffffedf

08002cac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	603b      	str	r3, [r7, #0]
 8002cb8:	1dfb      	adds	r3, r7, #7
 8002cba:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cbc:	e051      	b.n	8002d62 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	d04e      	beq.n	8002d62 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cc4:	f7fe f854 	bl	8000d70 <HAL_GetTick>
 8002cc8:	0002      	movs	r2, r0
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	69ba      	ldr	r2, [r7, #24]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d302      	bcc.n	8002cda <UART_WaitOnFlagUntilTimeout+0x2e>
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d101      	bne.n	8002cde <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e051      	b.n	8002d82 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2204      	movs	r2, #4
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	d03b      	beq.n	8002d62 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	2b80      	cmp	r3, #128	; 0x80
 8002cee:	d038      	beq.n	8002d62 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	2b40      	cmp	r3, #64	; 0x40
 8002cf4:	d035      	beq.n	8002d62 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	69db      	ldr	r3, [r3, #28]
 8002cfc:	2208      	movs	r2, #8
 8002cfe:	4013      	ands	r3, r2
 8002d00:	2b08      	cmp	r3, #8
 8002d02:	d111      	bne.n	8002d28 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2208      	movs	r2, #8
 8002d0a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	0018      	movs	r0, r3
 8002d10:	f000 f83c 	bl	8002d8c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2290      	movs	r2, #144	; 0x90
 8002d18:	2108      	movs	r1, #8
 8002d1a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2284      	movs	r2, #132	; 0x84
 8002d20:	2100      	movs	r1, #0
 8002d22:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e02c      	b.n	8002d82 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	69da      	ldr	r2, [r3, #28]
 8002d2e:	2380      	movs	r3, #128	; 0x80
 8002d30:	011b      	lsls	r3, r3, #4
 8002d32:	401a      	ands	r2, r3
 8002d34:	2380      	movs	r3, #128	; 0x80
 8002d36:	011b      	lsls	r3, r3, #4
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d112      	bne.n	8002d62 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2280      	movs	r2, #128	; 0x80
 8002d42:	0112      	lsls	r2, r2, #4
 8002d44:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	0018      	movs	r0, r3
 8002d4a:	f000 f81f 	bl	8002d8c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2290      	movs	r2, #144	; 0x90
 8002d52:	2120      	movs	r1, #32
 8002d54:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2284      	movs	r2, #132	; 0x84
 8002d5a:	2100      	movs	r1, #0
 8002d5c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e00f      	b.n	8002d82 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	69db      	ldr	r3, [r3, #28]
 8002d68:	68ba      	ldr	r2, [r7, #8]
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	68ba      	ldr	r2, [r7, #8]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	425a      	negs	r2, r3
 8002d72:	4153      	adcs	r3, r2
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	001a      	movs	r2, r3
 8002d78:	1dfb      	adds	r3, r7, #7
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d09e      	beq.n	8002cbe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	0018      	movs	r0, r3
 8002d84:	46bd      	mov	sp, r7
 8002d86:	b004      	add	sp, #16
 8002d88:	bd80      	pop	{r7, pc}
	...

08002d8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b08e      	sub	sp, #56	; 0x38
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d94:	f3ef 8310 	mrs	r3, PRIMASK
 8002d98:	617b      	str	r3, [r7, #20]
  return(result);
 8002d9a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002d9c:	637b      	str	r3, [r7, #52]	; 0x34
 8002d9e:	2301      	movs	r3, #1
 8002da0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	f383 8810 	msr	PRIMASK, r3
}
 8002da8:	46c0      	nop			; (mov r8, r8)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4926      	ldr	r1, [pc, #152]	; (8002e50 <UART_EndRxTransfer+0xc4>)
 8002db6:	400a      	ands	r2, r1
 8002db8:	601a      	str	r2, [r3, #0]
 8002dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dbc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	f383 8810 	msr	PRIMASK, r3
}
 8002dc4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002dc6:	f3ef 8310 	mrs	r3, PRIMASK
 8002dca:	623b      	str	r3, [r7, #32]
  return(result);
 8002dcc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002dce:	633b      	str	r3, [r7, #48]	; 0x30
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd6:	f383 8810 	msr	PRIMASK, r3
}
 8002dda:	46c0      	nop			; (mov r8, r8)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	689a      	ldr	r2, [r3, #8]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	491b      	ldr	r1, [pc, #108]	; (8002e54 <UART_EndRxTransfer+0xc8>)
 8002de8:	400a      	ands	r2, r1
 8002dea:	609a      	str	r2, [r3, #8]
 8002dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dee:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002df2:	f383 8810 	msr	PRIMASK, r3
}
 8002df6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d118      	bne.n	8002e32 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e00:	f3ef 8310 	mrs	r3, PRIMASK
 8002e04:	60bb      	str	r3, [r7, #8]
  return(result);
 8002e06:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	f383 8810 	msr	PRIMASK, r3
}
 8002e14:	46c0      	nop			; (mov r8, r8)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2110      	movs	r1, #16
 8002e22:	438a      	bics	r2, r1
 8002e24:	601a      	str	r2, [r3, #0]
 8002e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e28:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	f383 8810 	msr	PRIMASK, r3
}
 8002e30:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	228c      	movs	r2, #140	; 0x8c
 8002e36:	2120      	movs	r1, #32
 8002e38:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	675a      	str	r2, [r3, #116]	; 0x74
}
 8002e46:	46c0      	nop			; (mov r8, r8)
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	b00e      	add	sp, #56	; 0x38
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	46c0      	nop			; (mov r8, r8)
 8002e50:	fffffedf 	.word	0xfffffedf
 8002e54:	effffffe 	.word	0xeffffffe

08002e58 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2284      	movs	r2, #132	; 0x84
 8002e64:	5c9b      	ldrb	r3, [r3, r2]
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d101      	bne.n	8002e6e <HAL_UARTEx_DisableFifoMode+0x16>
 8002e6a:	2302      	movs	r3, #2
 8002e6c:	e027      	b.n	8002ebe <HAL_UARTEx_DisableFifoMode+0x66>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2284      	movs	r2, #132	; 0x84
 8002e72:	2101      	movs	r1, #1
 8002e74:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2288      	movs	r2, #136	; 0x88
 8002e7a:	2124      	movs	r1, #36	; 0x24
 8002e7c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2101      	movs	r1, #1
 8002e92:	438a      	bics	r2, r1
 8002e94:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	4a0b      	ldr	r2, [pc, #44]	; (8002ec8 <HAL_UARTEx_DisableFifoMode+0x70>)
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	68fa      	ldr	r2, [r7, #12]
 8002eaa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2288      	movs	r2, #136	; 0x88
 8002eb0:	2120      	movs	r1, #32
 8002eb2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2284      	movs	r2, #132	; 0x84
 8002eb8:	2100      	movs	r1, #0
 8002eba:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	0018      	movs	r0, r3
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	b004      	add	sp, #16
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	46c0      	nop			; (mov r8, r8)
 8002ec8:	dfffffff 	.word	0xdfffffff

08002ecc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2284      	movs	r2, #132	; 0x84
 8002eda:	5c9b      	ldrb	r3, [r3, r2]
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d101      	bne.n	8002ee4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002ee0:	2302      	movs	r3, #2
 8002ee2:	e02e      	b.n	8002f42 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2284      	movs	r2, #132	; 0x84
 8002ee8:	2101      	movs	r1, #1
 8002eea:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2288      	movs	r2, #136	; 0x88
 8002ef0:	2124      	movs	r1, #36	; 0x24
 8002ef2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	2101      	movs	r1, #1
 8002f08:	438a      	bics	r2, r1
 8002f0a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	00db      	lsls	r3, r3, #3
 8002f14:	08d9      	lsrs	r1, r3, #3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	683a      	ldr	r2, [r7, #0]
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	0018      	movs	r0, r3
 8002f24:	f000 f854 	bl	8002fd0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	68fa      	ldr	r2, [r7, #12]
 8002f2e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2288      	movs	r2, #136	; 0x88
 8002f34:	2120      	movs	r1, #32
 8002f36:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2284      	movs	r2, #132	; 0x84
 8002f3c:	2100      	movs	r1, #0
 8002f3e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	0018      	movs	r0, r3
 8002f44:	46bd      	mov	sp, r7
 8002f46:	b004      	add	sp, #16
 8002f48:	bd80      	pop	{r7, pc}
	...

08002f4c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2284      	movs	r2, #132	; 0x84
 8002f5a:	5c9b      	ldrb	r3, [r3, r2]
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d101      	bne.n	8002f64 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002f60:	2302      	movs	r3, #2
 8002f62:	e02f      	b.n	8002fc4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2284      	movs	r2, #132	; 0x84
 8002f68:	2101      	movs	r1, #1
 8002f6a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2288      	movs	r2, #136	; 0x88
 8002f70:	2124      	movs	r1, #36	; 0x24
 8002f72:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2101      	movs	r1, #1
 8002f88:	438a      	bics	r2, r1
 8002f8a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	4a0e      	ldr	r2, [pc, #56]	; (8002fcc <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8002f94:	4013      	ands	r3, r2
 8002f96:	0019      	movs	r1, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	683a      	ldr	r2, [r7, #0]
 8002f9e:	430a      	orrs	r2, r1
 8002fa0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	0018      	movs	r0, r3
 8002fa6:	f000 f813 	bl	8002fd0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	68fa      	ldr	r2, [r7, #12]
 8002fb0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2288      	movs	r2, #136	; 0x88
 8002fb6:	2120      	movs	r1, #32
 8002fb8:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2284      	movs	r2, #132	; 0x84
 8002fbe:	2100      	movs	r1, #0
 8002fc0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002fc2:	2300      	movs	r3, #0
}
 8002fc4:	0018      	movs	r0, r3
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	b004      	add	sp, #16
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	f1ffffff 	.word	0xf1ffffff

08002fd0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fd2:	b085      	sub	sp, #20
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d108      	bne.n	8002ff2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	226a      	movs	r2, #106	; 0x6a
 8002fe4:	2101      	movs	r1, #1
 8002fe6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2268      	movs	r2, #104	; 0x68
 8002fec:	2101      	movs	r1, #1
 8002fee:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002ff0:	e043      	b.n	800307a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002ff2:	260f      	movs	r6, #15
 8002ff4:	19bb      	adds	r3, r7, r6
 8002ff6:	2208      	movs	r2, #8
 8002ff8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8002ffa:	200e      	movs	r0, #14
 8002ffc:	183b      	adds	r3, r7, r0
 8002ffe:	2208      	movs	r2, #8
 8003000:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	0e5b      	lsrs	r3, r3, #25
 800300a:	b2da      	uxtb	r2, r3
 800300c:	240d      	movs	r4, #13
 800300e:	193b      	adds	r3, r7, r4
 8003010:	2107      	movs	r1, #7
 8003012:	400a      	ands	r2, r1
 8003014:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	0f5b      	lsrs	r3, r3, #29
 800301e:	b2da      	uxtb	r2, r3
 8003020:	250c      	movs	r5, #12
 8003022:	197b      	adds	r3, r7, r5
 8003024:	2107      	movs	r1, #7
 8003026:	400a      	ands	r2, r1
 8003028:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800302a:	183b      	adds	r3, r7, r0
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	197a      	adds	r2, r7, r5
 8003030:	7812      	ldrb	r2, [r2, #0]
 8003032:	4914      	ldr	r1, [pc, #80]	; (8003084 <UARTEx_SetNbDataToProcess+0xb4>)
 8003034:	5c8a      	ldrb	r2, [r1, r2]
 8003036:	435a      	muls	r2, r3
 8003038:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800303a:	197b      	adds	r3, r7, r5
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	4a12      	ldr	r2, [pc, #72]	; (8003088 <UARTEx_SetNbDataToProcess+0xb8>)
 8003040:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003042:	0019      	movs	r1, r3
 8003044:	f7fd f8f0 	bl	8000228 <__divsi3>
 8003048:	0003      	movs	r3, r0
 800304a:	b299      	uxth	r1, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	226a      	movs	r2, #106	; 0x6a
 8003050:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003052:	19bb      	adds	r3, r7, r6
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	193a      	adds	r2, r7, r4
 8003058:	7812      	ldrb	r2, [r2, #0]
 800305a:	490a      	ldr	r1, [pc, #40]	; (8003084 <UARTEx_SetNbDataToProcess+0xb4>)
 800305c:	5c8a      	ldrb	r2, [r1, r2]
 800305e:	435a      	muls	r2, r3
 8003060:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003062:	193b      	adds	r3, r7, r4
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	4a08      	ldr	r2, [pc, #32]	; (8003088 <UARTEx_SetNbDataToProcess+0xb8>)
 8003068:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800306a:	0019      	movs	r1, r3
 800306c:	f7fd f8dc 	bl	8000228 <__divsi3>
 8003070:	0003      	movs	r3, r0
 8003072:	b299      	uxth	r1, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2268      	movs	r2, #104	; 0x68
 8003078:	5299      	strh	r1, [r3, r2]
}
 800307a:	46c0      	nop			; (mov r8, r8)
 800307c:	46bd      	mov	sp, r7
 800307e:	b005      	add	sp, #20
 8003080:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003082:	46c0      	nop			; (mov r8, r8)
 8003084:	080031d4 	.word	0x080031d4
 8003088:	080031dc 	.word	0x080031dc

0800308c <memset>:
 800308c:	0003      	movs	r3, r0
 800308e:	1882      	adds	r2, r0, r2
 8003090:	4293      	cmp	r3, r2
 8003092:	d100      	bne.n	8003096 <memset+0xa>
 8003094:	4770      	bx	lr
 8003096:	7019      	strb	r1, [r3, #0]
 8003098:	3301      	adds	r3, #1
 800309a:	e7f9      	b.n	8003090 <memset+0x4>

0800309c <__libc_init_array>:
 800309c:	b570      	push	{r4, r5, r6, lr}
 800309e:	2600      	movs	r6, #0
 80030a0:	4c0c      	ldr	r4, [pc, #48]	; (80030d4 <__libc_init_array+0x38>)
 80030a2:	4d0d      	ldr	r5, [pc, #52]	; (80030d8 <__libc_init_array+0x3c>)
 80030a4:	1b64      	subs	r4, r4, r5
 80030a6:	10a4      	asrs	r4, r4, #2
 80030a8:	42a6      	cmp	r6, r4
 80030aa:	d109      	bne.n	80030c0 <__libc_init_array+0x24>
 80030ac:	2600      	movs	r6, #0
 80030ae:	f000 f819 	bl	80030e4 <_init>
 80030b2:	4c0a      	ldr	r4, [pc, #40]	; (80030dc <__libc_init_array+0x40>)
 80030b4:	4d0a      	ldr	r5, [pc, #40]	; (80030e0 <__libc_init_array+0x44>)
 80030b6:	1b64      	subs	r4, r4, r5
 80030b8:	10a4      	asrs	r4, r4, #2
 80030ba:	42a6      	cmp	r6, r4
 80030bc:	d105      	bne.n	80030ca <__libc_init_array+0x2e>
 80030be:	bd70      	pop	{r4, r5, r6, pc}
 80030c0:	00b3      	lsls	r3, r6, #2
 80030c2:	58eb      	ldr	r3, [r5, r3]
 80030c4:	4798      	blx	r3
 80030c6:	3601      	adds	r6, #1
 80030c8:	e7ee      	b.n	80030a8 <__libc_init_array+0xc>
 80030ca:	00b3      	lsls	r3, r6, #2
 80030cc:	58eb      	ldr	r3, [r5, r3]
 80030ce:	4798      	blx	r3
 80030d0:	3601      	adds	r6, #1
 80030d2:	e7f2      	b.n	80030ba <__libc_init_array+0x1e>
 80030d4:	080031ec 	.word	0x080031ec
 80030d8:	080031ec 	.word	0x080031ec
 80030dc:	080031f0 	.word	0x080031f0
 80030e0:	080031ec 	.word	0x080031ec

080030e4 <_init>:
 80030e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030e6:	46c0      	nop			; (mov r8, r8)
 80030e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030ea:	bc08      	pop	{r3}
 80030ec:	469e      	mov	lr, r3
 80030ee:	4770      	bx	lr

080030f0 <_fini>:
 80030f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030f2:	46c0      	nop			; (mov r8, r8)
 80030f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030f6:	bc08      	pop	{r3}
 80030f8:	469e      	mov	lr, r3
 80030fa:	4770      	bx	lr
