
nemo2.space_tracker_p_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f64  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08003020  08003020  00013020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003108  08003108  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08003108  08003108  00013108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003110  08003110  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003110  08003110  00013110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003114  08003114  00013114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003118  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000148  20000010  08003128  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000158  08003128  00020158  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b0de  00000000  00000000  0002007b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a4f  00000000  00000000  0002b159  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008c8  00000000  00000000  0002cba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006c7  00000000  00000000  0002d470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b5fb  00000000  00000000  0002db37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bb55  00000000  00000000  00049132  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b0b80  00000000  00000000  00054c87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001e80  00000000  00000000  00105808  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00107688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000010 	.word	0x20000010
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003008 	.word	0x08003008

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000014 	.word	0x20000014
 8000100:	08003008 	.word	0x08003008

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	; 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f8f0 	bl	80003fc <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__divsi3>:
 8000228:	4603      	mov	r3, r0
 800022a:	430b      	orrs	r3, r1
 800022c:	d47f      	bmi.n	800032e <__divsi3+0x106>
 800022e:	2200      	movs	r2, #0
 8000230:	0843      	lsrs	r3, r0, #1
 8000232:	428b      	cmp	r3, r1
 8000234:	d374      	bcc.n	8000320 <__divsi3+0xf8>
 8000236:	0903      	lsrs	r3, r0, #4
 8000238:	428b      	cmp	r3, r1
 800023a:	d35f      	bcc.n	80002fc <__divsi3+0xd4>
 800023c:	0a03      	lsrs	r3, r0, #8
 800023e:	428b      	cmp	r3, r1
 8000240:	d344      	bcc.n	80002cc <__divsi3+0xa4>
 8000242:	0b03      	lsrs	r3, r0, #12
 8000244:	428b      	cmp	r3, r1
 8000246:	d328      	bcc.n	800029a <__divsi3+0x72>
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d30d      	bcc.n	800026a <__divsi3+0x42>
 800024e:	22ff      	movs	r2, #255	; 0xff
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	ba12      	rev	r2, r2
 8000254:	0c03      	lsrs	r3, r0, #16
 8000256:	428b      	cmp	r3, r1
 8000258:	d302      	bcc.n	8000260 <__divsi3+0x38>
 800025a:	1212      	asrs	r2, r2, #8
 800025c:	0209      	lsls	r1, r1, #8
 800025e:	d065      	beq.n	800032c <__divsi3+0x104>
 8000260:	0b03      	lsrs	r3, r0, #12
 8000262:	428b      	cmp	r3, r1
 8000264:	d319      	bcc.n	800029a <__divsi3+0x72>
 8000266:	e000      	b.n	800026a <__divsi3+0x42>
 8000268:	0a09      	lsrs	r1, r1, #8
 800026a:	0bc3      	lsrs	r3, r0, #15
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x4c>
 8000270:	03cb      	lsls	r3, r1, #15
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b83      	lsrs	r3, r0, #14
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x58>
 800027c:	038b      	lsls	r3, r1, #14
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b43      	lsrs	r3, r0, #13
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x64>
 8000288:	034b      	lsls	r3, r1, #13
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b03      	lsrs	r3, r0, #12
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x70>
 8000294:	030b      	lsls	r3, r1, #12
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0ac3      	lsrs	r3, r0, #11
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x7c>
 80002a0:	02cb      	lsls	r3, r1, #11
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a83      	lsrs	r3, r0, #10
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x88>
 80002ac:	028b      	lsls	r3, r1, #10
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a43      	lsrs	r3, r0, #9
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x94>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a03      	lsrs	r3, r0, #8
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0xa0>
 80002c4:	020b      	lsls	r3, r1, #8
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	d2cd      	bcs.n	8000268 <__divsi3+0x40>
 80002cc:	09c3      	lsrs	r3, r0, #7
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xae>
 80002d2:	01cb      	lsls	r3, r1, #7
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0983      	lsrs	r3, r0, #6
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xba>
 80002de:	018b      	lsls	r3, r1, #6
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0943      	lsrs	r3, r0, #5
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xc6>
 80002ea:	014b      	lsls	r3, r1, #5
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0903      	lsrs	r3, r0, #4
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xd2>
 80002f6:	010b      	lsls	r3, r1, #4
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	08c3      	lsrs	r3, r0, #3
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xde>
 8000302:	00cb      	lsls	r3, r1, #3
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0883      	lsrs	r3, r0, #2
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xea>
 800030e:	008b      	lsls	r3, r1, #2
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0843      	lsrs	r3, r0, #1
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xf6>
 800031a:	004b      	lsls	r3, r1, #1
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	1a41      	subs	r1, r0, r1
 8000322:	d200      	bcs.n	8000326 <__divsi3+0xfe>
 8000324:	4601      	mov	r1, r0
 8000326:	4152      	adcs	r2, r2
 8000328:	4610      	mov	r0, r2
 800032a:	4770      	bx	lr
 800032c:	e05d      	b.n	80003ea <__divsi3+0x1c2>
 800032e:	0fca      	lsrs	r2, r1, #31
 8000330:	d000      	beq.n	8000334 <__divsi3+0x10c>
 8000332:	4249      	negs	r1, r1
 8000334:	1003      	asrs	r3, r0, #32
 8000336:	d300      	bcc.n	800033a <__divsi3+0x112>
 8000338:	4240      	negs	r0, r0
 800033a:	4053      	eors	r3, r2
 800033c:	2200      	movs	r2, #0
 800033e:	469c      	mov	ip, r3
 8000340:	0903      	lsrs	r3, r0, #4
 8000342:	428b      	cmp	r3, r1
 8000344:	d32d      	bcc.n	80003a2 <__divsi3+0x17a>
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d312      	bcc.n	8000372 <__divsi3+0x14a>
 800034c:	22fc      	movs	r2, #252	; 0xfc
 800034e:	0189      	lsls	r1, r1, #6
 8000350:	ba12      	rev	r2, r2
 8000352:	0a03      	lsrs	r3, r0, #8
 8000354:	428b      	cmp	r3, r1
 8000356:	d30c      	bcc.n	8000372 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	1192      	asrs	r2, r2, #6
 800035c:	428b      	cmp	r3, r1
 800035e:	d308      	bcc.n	8000372 <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d304      	bcc.n	8000372 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	d03a      	beq.n	80003e2 <__divsi3+0x1ba>
 800036c:	1192      	asrs	r2, r2, #6
 800036e:	e000      	b.n	8000372 <__divsi3+0x14a>
 8000370:	0989      	lsrs	r1, r1, #6
 8000372:	09c3      	lsrs	r3, r0, #7
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x154>
 8000378:	01cb      	lsls	r3, r1, #7
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0983      	lsrs	r3, r0, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x160>
 8000384:	018b      	lsls	r3, r1, #6
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0943      	lsrs	r3, r0, #5
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x16c>
 8000390:	014b      	lsls	r3, r1, #5
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0903      	lsrs	r3, r0, #4
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x178>
 800039c:	010b      	lsls	r3, r1, #4
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	08c3      	lsrs	r3, r0, #3
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x184>
 80003a8:	00cb      	lsls	r3, r1, #3
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0883      	lsrs	r3, r0, #2
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x190>
 80003b4:	008b      	lsls	r3, r1, #2
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	d2d9      	bcs.n	8000370 <__divsi3+0x148>
 80003bc:	0843      	lsrs	r3, r0, #1
 80003be:	428b      	cmp	r3, r1
 80003c0:	d301      	bcc.n	80003c6 <__divsi3+0x19e>
 80003c2:	004b      	lsls	r3, r1, #1
 80003c4:	1ac0      	subs	r0, r0, r3
 80003c6:	4152      	adcs	r2, r2
 80003c8:	1a41      	subs	r1, r0, r1
 80003ca:	d200      	bcs.n	80003ce <__divsi3+0x1a6>
 80003cc:	4601      	mov	r1, r0
 80003ce:	4663      	mov	r3, ip
 80003d0:	4152      	adcs	r2, r2
 80003d2:	105b      	asrs	r3, r3, #1
 80003d4:	4610      	mov	r0, r2
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x1b4>
 80003d8:	4240      	negs	r0, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d500      	bpl.n	80003e0 <__divsi3+0x1b8>
 80003de:	4249      	negs	r1, r1
 80003e0:	4770      	bx	lr
 80003e2:	4663      	mov	r3, ip
 80003e4:	105b      	asrs	r3, r3, #1
 80003e6:	d300      	bcc.n	80003ea <__divsi3+0x1c2>
 80003e8:	4240      	negs	r0, r0
 80003ea:	b501      	push	{r0, lr}
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 f805 	bl	80003fc <__aeabi_idiv0>
 80003f2:	bd02      	pop	{r1, pc}

080003f4 <__aeabi_idivmod>:
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d0f8      	beq.n	80003ea <__divsi3+0x1c2>
 80003f8:	e716      	b.n	8000228 <__divsi3>
 80003fa:	4770      	bx	lr

080003fc <__aeabi_idiv0>:
 80003fc:	4770      	bx	lr
 80003fe:	46c0      	nop			; (mov r8, r8)

08000400 <__aeabi_uldivmod>:
 8000400:	2b00      	cmp	r3, #0
 8000402:	d111      	bne.n	8000428 <__aeabi_uldivmod+0x28>
 8000404:	2a00      	cmp	r2, #0
 8000406:	d10f      	bne.n	8000428 <__aeabi_uldivmod+0x28>
 8000408:	2900      	cmp	r1, #0
 800040a:	d100      	bne.n	800040e <__aeabi_uldivmod+0xe>
 800040c:	2800      	cmp	r0, #0
 800040e:	d002      	beq.n	8000416 <__aeabi_uldivmod+0x16>
 8000410:	2100      	movs	r1, #0
 8000412:	43c9      	mvns	r1, r1
 8000414:	0008      	movs	r0, r1
 8000416:	b407      	push	{r0, r1, r2}
 8000418:	4802      	ldr	r0, [pc, #8]	; (8000424 <__aeabi_uldivmod+0x24>)
 800041a:	a102      	add	r1, pc, #8	; (adr r1, 8000424 <__aeabi_uldivmod+0x24>)
 800041c:	1840      	adds	r0, r0, r1
 800041e:	9002      	str	r0, [sp, #8]
 8000420:	bd03      	pop	{r0, r1, pc}
 8000422:	46c0      	nop			; (mov r8, r8)
 8000424:	ffffffd9 	.word	0xffffffd9
 8000428:	b403      	push	{r0, r1}
 800042a:	4668      	mov	r0, sp
 800042c:	b501      	push	{r0, lr}
 800042e:	9802      	ldr	r0, [sp, #8]
 8000430:	f000 f806 	bl	8000440 <__udivmoddi4>
 8000434:	9b01      	ldr	r3, [sp, #4]
 8000436:	469e      	mov	lr, r3
 8000438:	b002      	add	sp, #8
 800043a:	bc0c      	pop	{r2, r3}
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__udivmoddi4>:
 8000440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000442:	4657      	mov	r7, sl
 8000444:	464e      	mov	r6, r9
 8000446:	4645      	mov	r5, r8
 8000448:	46de      	mov	lr, fp
 800044a:	b5e0      	push	{r5, r6, r7, lr}
 800044c:	0004      	movs	r4, r0
 800044e:	000d      	movs	r5, r1
 8000450:	4692      	mov	sl, r2
 8000452:	4699      	mov	r9, r3
 8000454:	b083      	sub	sp, #12
 8000456:	428b      	cmp	r3, r1
 8000458:	d830      	bhi.n	80004bc <__udivmoddi4+0x7c>
 800045a:	d02d      	beq.n	80004b8 <__udivmoddi4+0x78>
 800045c:	4649      	mov	r1, r9
 800045e:	4650      	mov	r0, sl
 8000460:	f000 f8ba 	bl	80005d8 <__clzdi2>
 8000464:	0029      	movs	r1, r5
 8000466:	0006      	movs	r6, r0
 8000468:	0020      	movs	r0, r4
 800046a:	f000 f8b5 	bl	80005d8 <__clzdi2>
 800046e:	1a33      	subs	r3, r6, r0
 8000470:	4698      	mov	r8, r3
 8000472:	3b20      	subs	r3, #32
 8000474:	d434      	bmi.n	80004e0 <__udivmoddi4+0xa0>
 8000476:	469b      	mov	fp, r3
 8000478:	4653      	mov	r3, sl
 800047a:	465a      	mov	r2, fp
 800047c:	4093      	lsls	r3, r2
 800047e:	4642      	mov	r2, r8
 8000480:	001f      	movs	r7, r3
 8000482:	4653      	mov	r3, sl
 8000484:	4093      	lsls	r3, r2
 8000486:	001e      	movs	r6, r3
 8000488:	42af      	cmp	r7, r5
 800048a:	d83b      	bhi.n	8000504 <__udivmoddi4+0xc4>
 800048c:	42af      	cmp	r7, r5
 800048e:	d100      	bne.n	8000492 <__udivmoddi4+0x52>
 8000490:	e079      	b.n	8000586 <__udivmoddi4+0x146>
 8000492:	465b      	mov	r3, fp
 8000494:	1ba4      	subs	r4, r4, r6
 8000496:	41bd      	sbcs	r5, r7
 8000498:	2b00      	cmp	r3, #0
 800049a:	da00      	bge.n	800049e <__udivmoddi4+0x5e>
 800049c:	e076      	b.n	800058c <__udivmoddi4+0x14c>
 800049e:	2200      	movs	r2, #0
 80004a0:	2300      	movs	r3, #0
 80004a2:	9200      	str	r2, [sp, #0]
 80004a4:	9301      	str	r3, [sp, #4]
 80004a6:	2301      	movs	r3, #1
 80004a8:	465a      	mov	r2, fp
 80004aa:	4093      	lsls	r3, r2
 80004ac:	9301      	str	r3, [sp, #4]
 80004ae:	2301      	movs	r3, #1
 80004b0:	4642      	mov	r2, r8
 80004b2:	4093      	lsls	r3, r2
 80004b4:	9300      	str	r3, [sp, #0]
 80004b6:	e029      	b.n	800050c <__udivmoddi4+0xcc>
 80004b8:	4282      	cmp	r2, r0
 80004ba:	d9cf      	bls.n	800045c <__udivmoddi4+0x1c>
 80004bc:	2200      	movs	r2, #0
 80004be:	2300      	movs	r3, #0
 80004c0:	9200      	str	r2, [sp, #0]
 80004c2:	9301      	str	r3, [sp, #4]
 80004c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d001      	beq.n	80004ce <__udivmoddi4+0x8e>
 80004ca:	601c      	str	r4, [r3, #0]
 80004cc:	605d      	str	r5, [r3, #4]
 80004ce:	9800      	ldr	r0, [sp, #0]
 80004d0:	9901      	ldr	r1, [sp, #4]
 80004d2:	b003      	add	sp, #12
 80004d4:	bcf0      	pop	{r4, r5, r6, r7}
 80004d6:	46bb      	mov	fp, r7
 80004d8:	46b2      	mov	sl, r6
 80004da:	46a9      	mov	r9, r5
 80004dc:	46a0      	mov	r8, r4
 80004de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004e0:	4642      	mov	r2, r8
 80004e2:	469b      	mov	fp, r3
 80004e4:	2320      	movs	r3, #32
 80004e6:	1a9b      	subs	r3, r3, r2
 80004e8:	4652      	mov	r2, sl
 80004ea:	40da      	lsrs	r2, r3
 80004ec:	4641      	mov	r1, r8
 80004ee:	0013      	movs	r3, r2
 80004f0:	464a      	mov	r2, r9
 80004f2:	408a      	lsls	r2, r1
 80004f4:	0017      	movs	r7, r2
 80004f6:	4642      	mov	r2, r8
 80004f8:	431f      	orrs	r7, r3
 80004fa:	4653      	mov	r3, sl
 80004fc:	4093      	lsls	r3, r2
 80004fe:	001e      	movs	r6, r3
 8000500:	42af      	cmp	r7, r5
 8000502:	d9c3      	bls.n	800048c <__udivmoddi4+0x4c>
 8000504:	2200      	movs	r2, #0
 8000506:	2300      	movs	r3, #0
 8000508:	9200      	str	r2, [sp, #0]
 800050a:	9301      	str	r3, [sp, #4]
 800050c:	4643      	mov	r3, r8
 800050e:	2b00      	cmp	r3, #0
 8000510:	d0d8      	beq.n	80004c4 <__udivmoddi4+0x84>
 8000512:	07fb      	lsls	r3, r7, #31
 8000514:	0872      	lsrs	r2, r6, #1
 8000516:	431a      	orrs	r2, r3
 8000518:	4646      	mov	r6, r8
 800051a:	087b      	lsrs	r3, r7, #1
 800051c:	e00e      	b.n	800053c <__udivmoddi4+0xfc>
 800051e:	42ab      	cmp	r3, r5
 8000520:	d101      	bne.n	8000526 <__udivmoddi4+0xe6>
 8000522:	42a2      	cmp	r2, r4
 8000524:	d80c      	bhi.n	8000540 <__udivmoddi4+0x100>
 8000526:	1aa4      	subs	r4, r4, r2
 8000528:	419d      	sbcs	r5, r3
 800052a:	2001      	movs	r0, #1
 800052c:	1924      	adds	r4, r4, r4
 800052e:	416d      	adcs	r5, r5
 8000530:	2100      	movs	r1, #0
 8000532:	3e01      	subs	r6, #1
 8000534:	1824      	adds	r4, r4, r0
 8000536:	414d      	adcs	r5, r1
 8000538:	2e00      	cmp	r6, #0
 800053a:	d006      	beq.n	800054a <__udivmoddi4+0x10a>
 800053c:	42ab      	cmp	r3, r5
 800053e:	d9ee      	bls.n	800051e <__udivmoddi4+0xde>
 8000540:	3e01      	subs	r6, #1
 8000542:	1924      	adds	r4, r4, r4
 8000544:	416d      	adcs	r5, r5
 8000546:	2e00      	cmp	r6, #0
 8000548:	d1f8      	bne.n	800053c <__udivmoddi4+0xfc>
 800054a:	9800      	ldr	r0, [sp, #0]
 800054c:	9901      	ldr	r1, [sp, #4]
 800054e:	465b      	mov	r3, fp
 8000550:	1900      	adds	r0, r0, r4
 8000552:	4169      	adcs	r1, r5
 8000554:	2b00      	cmp	r3, #0
 8000556:	db24      	blt.n	80005a2 <__udivmoddi4+0x162>
 8000558:	002b      	movs	r3, r5
 800055a:	465a      	mov	r2, fp
 800055c:	4644      	mov	r4, r8
 800055e:	40d3      	lsrs	r3, r2
 8000560:	002a      	movs	r2, r5
 8000562:	40e2      	lsrs	r2, r4
 8000564:	001c      	movs	r4, r3
 8000566:	465b      	mov	r3, fp
 8000568:	0015      	movs	r5, r2
 800056a:	2b00      	cmp	r3, #0
 800056c:	db2a      	blt.n	80005c4 <__udivmoddi4+0x184>
 800056e:	0026      	movs	r6, r4
 8000570:	409e      	lsls	r6, r3
 8000572:	0033      	movs	r3, r6
 8000574:	0026      	movs	r6, r4
 8000576:	4647      	mov	r7, r8
 8000578:	40be      	lsls	r6, r7
 800057a:	0032      	movs	r2, r6
 800057c:	1a80      	subs	r0, r0, r2
 800057e:	4199      	sbcs	r1, r3
 8000580:	9000      	str	r0, [sp, #0]
 8000582:	9101      	str	r1, [sp, #4]
 8000584:	e79e      	b.n	80004c4 <__udivmoddi4+0x84>
 8000586:	42a3      	cmp	r3, r4
 8000588:	d8bc      	bhi.n	8000504 <__udivmoddi4+0xc4>
 800058a:	e782      	b.n	8000492 <__udivmoddi4+0x52>
 800058c:	4642      	mov	r2, r8
 800058e:	2320      	movs	r3, #32
 8000590:	2100      	movs	r1, #0
 8000592:	1a9b      	subs	r3, r3, r2
 8000594:	2200      	movs	r2, #0
 8000596:	9100      	str	r1, [sp, #0]
 8000598:	9201      	str	r2, [sp, #4]
 800059a:	2201      	movs	r2, #1
 800059c:	40da      	lsrs	r2, r3
 800059e:	9201      	str	r2, [sp, #4]
 80005a0:	e785      	b.n	80004ae <__udivmoddi4+0x6e>
 80005a2:	4642      	mov	r2, r8
 80005a4:	2320      	movs	r3, #32
 80005a6:	1a9b      	subs	r3, r3, r2
 80005a8:	002a      	movs	r2, r5
 80005aa:	4646      	mov	r6, r8
 80005ac:	409a      	lsls	r2, r3
 80005ae:	0023      	movs	r3, r4
 80005b0:	40f3      	lsrs	r3, r6
 80005b2:	4644      	mov	r4, r8
 80005b4:	4313      	orrs	r3, r2
 80005b6:	002a      	movs	r2, r5
 80005b8:	40e2      	lsrs	r2, r4
 80005ba:	001c      	movs	r4, r3
 80005bc:	465b      	mov	r3, fp
 80005be:	0015      	movs	r5, r2
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	dad4      	bge.n	800056e <__udivmoddi4+0x12e>
 80005c4:	4642      	mov	r2, r8
 80005c6:	002f      	movs	r7, r5
 80005c8:	2320      	movs	r3, #32
 80005ca:	0026      	movs	r6, r4
 80005cc:	4097      	lsls	r7, r2
 80005ce:	1a9b      	subs	r3, r3, r2
 80005d0:	40de      	lsrs	r6, r3
 80005d2:	003b      	movs	r3, r7
 80005d4:	4333      	orrs	r3, r6
 80005d6:	e7cd      	b.n	8000574 <__udivmoddi4+0x134>

080005d8 <__clzdi2>:
 80005d8:	b510      	push	{r4, lr}
 80005da:	2900      	cmp	r1, #0
 80005dc:	d103      	bne.n	80005e6 <__clzdi2+0xe>
 80005de:	f000 f807 	bl	80005f0 <__clzsi2>
 80005e2:	3020      	adds	r0, #32
 80005e4:	e002      	b.n	80005ec <__clzdi2+0x14>
 80005e6:	0008      	movs	r0, r1
 80005e8:	f000 f802 	bl	80005f0 <__clzsi2>
 80005ec:	bd10      	pop	{r4, pc}
 80005ee:	46c0      	nop			; (mov r8, r8)

080005f0 <__clzsi2>:
 80005f0:	211c      	movs	r1, #28
 80005f2:	2301      	movs	r3, #1
 80005f4:	041b      	lsls	r3, r3, #16
 80005f6:	4298      	cmp	r0, r3
 80005f8:	d301      	bcc.n	80005fe <__clzsi2+0xe>
 80005fa:	0c00      	lsrs	r0, r0, #16
 80005fc:	3910      	subs	r1, #16
 80005fe:	0a1b      	lsrs	r3, r3, #8
 8000600:	4298      	cmp	r0, r3
 8000602:	d301      	bcc.n	8000608 <__clzsi2+0x18>
 8000604:	0a00      	lsrs	r0, r0, #8
 8000606:	3908      	subs	r1, #8
 8000608:	091b      	lsrs	r3, r3, #4
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0x22>
 800060e:	0900      	lsrs	r0, r0, #4
 8000610:	3904      	subs	r1, #4
 8000612:	a202      	add	r2, pc, #8	; (adr r2, 800061c <__clzsi2+0x2c>)
 8000614:	5c10      	ldrb	r0, [r2, r0]
 8000616:	1840      	adds	r0, r0, r1
 8000618:	4770      	bx	lr
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	02020304 	.word	0x02020304
 8000620:	01010101 	.word	0x01010101
	...

0800062c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000630:	f000 fab4 	bl	8000b9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000634:	f000 f80e 	bl	8000654 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000638:	f000 f8f0 	bl	800081c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800063c:	f000 f8a0 	bl	8000780 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8000640:	f000 f850 	bl	80006e4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  send_debug_logs ( hello ) ;
 8000644:	4b02      	ldr	r3, [pc, #8]	; (8000650 <main+0x24>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	0018      	movs	r0, r3
 800064a:	f000 f959 	bl	8000900 <send_debug_logs>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800064e:	e7fe      	b.n	800064e <main+0x22>
 8000650:	20000000 	.word	0x20000000

08000654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000654:	b590      	push	{r4, r7, lr}
 8000656:	b095      	sub	sp, #84	; 0x54
 8000658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065a:	2414      	movs	r4, #20
 800065c:	193b      	adds	r3, r7, r4
 800065e:	0018      	movs	r0, r3
 8000660:	233c      	movs	r3, #60	; 0x3c
 8000662:	001a      	movs	r2, r3
 8000664:	2100      	movs	r1, #0
 8000666:	f002 fca3 	bl	8002fb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800066a:	1d3b      	adds	r3, r7, #4
 800066c:	0018      	movs	r0, r3
 800066e:	2310      	movs	r3, #16
 8000670:	001a      	movs	r2, r3
 8000672:	2100      	movs	r1, #0
 8000674:	f002 fc9c 	bl	8002fb0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000678:	2380      	movs	r3, #128	; 0x80
 800067a:	009b      	lsls	r3, r3, #2
 800067c:	0018      	movs	r0, r3
 800067e:	f000 fd67 	bl	8001150 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000682:	193b      	adds	r3, r7, r4
 8000684:	2202      	movs	r2, #2
 8000686:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000688:	193b      	adds	r3, r7, r4
 800068a:	2280      	movs	r2, #128	; 0x80
 800068c:	0052      	lsls	r2, r2, #1
 800068e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000690:	193b      	adds	r3, r7, r4
 8000692:	2200      	movs	r2, #0
 8000694:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000696:	193b      	adds	r3, r7, r4
 8000698:	2240      	movs	r2, #64	; 0x40
 800069a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800069c:	193b      	adds	r3, r7, r4
 800069e:	2200      	movs	r2, #0
 80006a0:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a2:	193b      	adds	r3, r7, r4
 80006a4:	0018      	movs	r0, r3
 80006a6:	f000 fd9f 	bl	80011e8 <HAL_RCC_OscConfig>
 80006aa:	1e03      	subs	r3, r0, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80006ae:	f000 f957 	bl	8000960 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b2:	1d3b      	adds	r3, r7, #4
 80006b4:	2207      	movs	r2, #7
 80006b6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006b8:	1d3b      	adds	r3, r7, #4
 80006ba:	2200      	movs	r2, #0
 80006bc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006be:	1d3b      	adds	r3, r7, #4
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006c4:	1d3b      	adds	r3, r7, #4
 80006c6:	2200      	movs	r2, #0
 80006c8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006ca:	1d3b      	adds	r3, r7, #4
 80006cc:	2100      	movs	r1, #0
 80006ce:	0018      	movs	r0, r3
 80006d0:	f001 f8ea 	bl	80018a8 <HAL_RCC_ClockConfig>
 80006d4:	1e03      	subs	r3, r0, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0x88>
  {
    Error_Handler();
 80006d8:	f000 f942 	bl	8000960 <Error_Handler>
  }
}
 80006dc:	46c0      	nop			; (mov r8, r8)
 80006de:	46bd      	mov	sp, r7
 80006e0:	b015      	add	sp, #84	; 0x54
 80006e2:	bd90      	pop	{r4, r7, pc}

080006e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006e8:	4b23      	ldr	r3, [pc, #140]	; (8000778 <MX_USART2_UART_Init+0x94>)
 80006ea:	4a24      	ldr	r2, [pc, #144]	; (800077c <MX_USART2_UART_Init+0x98>)
 80006ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006ee:	4b22      	ldr	r3, [pc, #136]	; (8000778 <MX_USART2_UART_Init+0x94>)
 80006f0:	22e1      	movs	r2, #225	; 0xe1
 80006f2:	0252      	lsls	r2, r2, #9
 80006f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006f6:	4b20      	ldr	r3, [pc, #128]	; (8000778 <MX_USART2_UART_Init+0x94>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006fc:	4b1e      	ldr	r3, [pc, #120]	; (8000778 <MX_USART2_UART_Init+0x94>)
 80006fe:	2200      	movs	r2, #0
 8000700:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000702:	4b1d      	ldr	r3, [pc, #116]	; (8000778 <MX_USART2_UART_Init+0x94>)
 8000704:	2200      	movs	r2, #0
 8000706:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000708:	4b1b      	ldr	r3, [pc, #108]	; (8000778 <MX_USART2_UART_Init+0x94>)
 800070a:	220c      	movs	r2, #12
 800070c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800070e:	4b1a      	ldr	r3, [pc, #104]	; (8000778 <MX_USART2_UART_Init+0x94>)
 8000710:	2200      	movs	r2, #0
 8000712:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000714:	4b18      	ldr	r3, [pc, #96]	; (8000778 <MX_USART2_UART_Init+0x94>)
 8000716:	2200      	movs	r2, #0
 8000718:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800071a:	4b17      	ldr	r3, [pc, #92]	; (8000778 <MX_USART2_UART_Init+0x94>)
 800071c:	2200      	movs	r2, #0
 800071e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000720:	4b15      	ldr	r3, [pc, #84]	; (8000778 <MX_USART2_UART_Init+0x94>)
 8000722:	2200      	movs	r2, #0
 8000724:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000726:	4b14      	ldr	r3, [pc, #80]	; (8000778 <MX_USART2_UART_Init+0x94>)
 8000728:	2200      	movs	r2, #0
 800072a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800072c:	4b12      	ldr	r3, [pc, #72]	; (8000778 <MX_USART2_UART_Init+0x94>)
 800072e:	0018      	movs	r0, r3
 8000730:	f001 fca0 	bl	8002074 <HAL_UART_Init>
 8000734:	1e03      	subs	r3, r0, #0
 8000736:	d001      	beq.n	800073c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000738:	f000 f912 	bl	8000960 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800073c:	4b0e      	ldr	r3, [pc, #56]	; (8000778 <MX_USART2_UART_Init+0x94>)
 800073e:	2100      	movs	r1, #0
 8000740:	0018      	movs	r0, r3
 8000742:	f002 fb55 	bl	8002df0 <HAL_UARTEx_SetTxFifoThreshold>
 8000746:	1e03      	subs	r3, r0, #0
 8000748:	d001      	beq.n	800074e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800074a:	f000 f909 	bl	8000960 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800074e:	4b0a      	ldr	r3, [pc, #40]	; (8000778 <MX_USART2_UART_Init+0x94>)
 8000750:	2100      	movs	r1, #0
 8000752:	0018      	movs	r0, r3
 8000754:	f002 fb8c 	bl	8002e70 <HAL_UARTEx_SetRxFifoThreshold>
 8000758:	1e03      	subs	r3, r0, #0
 800075a:	d001      	beq.n	8000760 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800075c:	f000 f900 	bl	8000960 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000760:	4b05      	ldr	r3, [pc, #20]	; (8000778 <MX_USART2_UART_Init+0x94>)
 8000762:	0018      	movs	r0, r3
 8000764:	f002 fb0a 	bl	8002d7c <HAL_UARTEx_DisableFifoMode>
 8000768:	1e03      	subs	r3, r0, #0
 800076a:	d001      	beq.n	8000770 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800076c:	f000 f8f8 	bl	8000960 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000770:	46c0      	nop			; (mov r8, r8)
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	46c0      	nop			; (mov r8, r8)
 8000778:	2000002c 	.word	0x2000002c
 800077c:	40004400 	.word	0x40004400

08000780 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000784:	4b23      	ldr	r3, [pc, #140]	; (8000814 <MX_USART3_UART_Init+0x94>)
 8000786:	4a24      	ldr	r2, [pc, #144]	; (8000818 <MX_USART3_UART_Init+0x98>)
 8000788:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800078a:	4b22      	ldr	r3, [pc, #136]	; (8000814 <MX_USART3_UART_Init+0x94>)
 800078c:	2296      	movs	r2, #150	; 0x96
 800078e:	0192      	lsls	r2, r2, #6
 8000790:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000792:	4b20      	ldr	r3, [pc, #128]	; (8000814 <MX_USART3_UART_Init+0x94>)
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000798:	4b1e      	ldr	r3, [pc, #120]	; (8000814 <MX_USART3_UART_Init+0x94>)
 800079a:	2200      	movs	r2, #0
 800079c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800079e:	4b1d      	ldr	r3, [pc, #116]	; (8000814 <MX_USART3_UART_Init+0x94>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007a4:	4b1b      	ldr	r3, [pc, #108]	; (8000814 <MX_USART3_UART_Init+0x94>)
 80007a6:	220c      	movs	r2, #12
 80007a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007aa:	4b1a      	ldr	r3, [pc, #104]	; (8000814 <MX_USART3_UART_Init+0x94>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b0:	4b18      	ldr	r3, [pc, #96]	; (8000814 <MX_USART3_UART_Init+0x94>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007b6:	4b17      	ldr	r3, [pc, #92]	; (8000814 <MX_USART3_UART_Init+0x94>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007bc:	4b15      	ldr	r3, [pc, #84]	; (8000814 <MX_USART3_UART_Init+0x94>)
 80007be:	2200      	movs	r2, #0
 80007c0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007c2:	4b14      	ldr	r3, [pc, #80]	; (8000814 <MX_USART3_UART_Init+0x94>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007c8:	4b12      	ldr	r3, [pc, #72]	; (8000814 <MX_USART3_UART_Init+0x94>)
 80007ca:	0018      	movs	r0, r3
 80007cc:	f001 fc52 	bl	8002074 <HAL_UART_Init>
 80007d0:	1e03      	subs	r3, r0, #0
 80007d2:	d001      	beq.n	80007d8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80007d4:	f000 f8c4 	bl	8000960 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007d8:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <MX_USART3_UART_Init+0x94>)
 80007da:	2100      	movs	r1, #0
 80007dc:	0018      	movs	r0, r3
 80007de:	f002 fb07 	bl	8002df0 <HAL_UARTEx_SetTxFifoThreshold>
 80007e2:	1e03      	subs	r3, r0, #0
 80007e4:	d001      	beq.n	80007ea <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80007e6:	f000 f8bb 	bl	8000960 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007ea:	4b0a      	ldr	r3, [pc, #40]	; (8000814 <MX_USART3_UART_Init+0x94>)
 80007ec:	2100      	movs	r1, #0
 80007ee:	0018      	movs	r0, r3
 80007f0:	f002 fb3e 	bl	8002e70 <HAL_UARTEx_SetRxFifoThreshold>
 80007f4:	1e03      	subs	r3, r0, #0
 80007f6:	d001      	beq.n	80007fc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80007f8:	f000 f8b2 	bl	8000960 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80007fc:	4b05      	ldr	r3, [pc, #20]	; (8000814 <MX_USART3_UART_Init+0x94>)
 80007fe:	0018      	movs	r0, r3
 8000800:	f002 fabc 	bl	8002d7c <HAL_UARTEx_DisableFifoMode>
 8000804:	1e03      	subs	r3, r0, #0
 8000806:	d001      	beq.n	800080c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000808:	f000 f8aa 	bl	8000960 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800080c:	46c0      	nop			; (mov r8, r8)
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	46c0      	nop			; (mov r8, r8)
 8000814:	200000c0 	.word	0x200000c0
 8000818:	40004800 	.word	0x40004800

0800081c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800081c:	b590      	push	{r4, r7, lr}
 800081e:	b089      	sub	sp, #36	; 0x24
 8000820:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000822:	240c      	movs	r4, #12
 8000824:	193b      	adds	r3, r7, r4
 8000826:	0018      	movs	r0, r3
 8000828:	2314      	movs	r3, #20
 800082a:	001a      	movs	r2, r3
 800082c:	2100      	movs	r1, #0
 800082e:	f002 fbbf 	bl	8002fb0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000832:	4b2f      	ldr	r3, [pc, #188]	; (80008f0 <MX_GPIO_Init+0xd4>)
 8000834:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000836:	4b2e      	ldr	r3, [pc, #184]	; (80008f0 <MX_GPIO_Init+0xd4>)
 8000838:	2101      	movs	r1, #1
 800083a:	430a      	orrs	r2, r1
 800083c:	635a      	str	r2, [r3, #52]	; 0x34
 800083e:	4b2c      	ldr	r3, [pc, #176]	; (80008f0 <MX_GPIO_Init+0xd4>)
 8000840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000842:	2201      	movs	r2, #1
 8000844:	4013      	ands	r3, r2
 8000846:	60bb      	str	r3, [r7, #8]
 8000848:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800084a:	4b29      	ldr	r3, [pc, #164]	; (80008f0 <MX_GPIO_Init+0xd4>)
 800084c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800084e:	4b28      	ldr	r3, [pc, #160]	; (80008f0 <MX_GPIO_Init+0xd4>)
 8000850:	2102      	movs	r1, #2
 8000852:	430a      	orrs	r2, r1
 8000854:	635a      	str	r2, [r3, #52]	; 0x34
 8000856:	4b26      	ldr	r3, [pc, #152]	; (80008f0 <MX_GPIO_Init+0xd4>)
 8000858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800085a:	2202      	movs	r2, #2
 800085c:	4013      	ands	r3, r2
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ASTRO_WKUP_Pin|ASTRO_RST_Pin|RF_SW_CTL2_Pin|GNSS_RST_Pin
 8000862:	4924      	ldr	r1, [pc, #144]	; (80008f4 <MX_GPIO_Init+0xd8>)
 8000864:	4b24      	ldr	r3, [pc, #144]	; (80008f8 <MX_GPIO_Init+0xdc>)
 8000866:	2200      	movs	r2, #0
 8000868:	0018      	movs	r0, r3
 800086a:	f000 fc53 	bl	8001114 <HAL_GPIO_WritePin>
                          |GNSS_PWR_SW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF_SW_CTL1_GPIO_Port, RF_SW_CTL1_Pin, GPIO_PIN_SET);
 800086e:	2380      	movs	r3, #128	; 0x80
 8000870:	00db      	lsls	r3, r3, #3
 8000872:	4821      	ldr	r0, [pc, #132]	; (80008f8 <MX_GPIO_Init+0xdc>)
 8000874:	2201      	movs	r2, #1
 8000876:	0019      	movs	r1, r3
 8000878:	f000 fc4c 	bl	8001114 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ASTRO_WKUP_Pin ASTRO_RST_Pin RF_SW_CTL1_Pin RF_SW_CTL2_Pin
                           GNSS_PWR_SW_Pin */
  GPIO_InitStruct.Pin = ASTRO_WKUP_Pin|ASTRO_RST_Pin|RF_SW_CTL1_Pin|RF_SW_CTL2_Pin
 800087c:	193b      	adds	r3, r7, r4
 800087e:	4a1f      	ldr	r2, [pc, #124]	; (80008fc <MX_GPIO_Init+0xe0>)
 8000880:	601a      	str	r2, [r3, #0]
                          |GNSS_PWR_SW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000882:	193b      	adds	r3, r7, r4
 8000884:	2201      	movs	r2, #1
 8000886:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	193b      	adds	r3, r7, r4
 800088a:	2200      	movs	r2, #0
 800088c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088e:	193b      	adds	r3, r7, r4
 8000890:	2200      	movs	r2, #0
 8000892:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000894:	193b      	adds	r3, r7, r4
 8000896:	4a18      	ldr	r2, [pc, #96]	; (80008f8 <MX_GPIO_Init+0xdc>)
 8000898:	0019      	movs	r1, r3
 800089a:	0010      	movs	r0, r2
 800089c:	f000 face 	bl	8000e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : ASTRO_EVT_Pin */
  GPIO_InitStruct.Pin = ASTRO_EVT_Pin;
 80008a0:	193b      	adds	r3, r7, r4
 80008a2:	2204      	movs	r2, #4
 80008a4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008a6:	193b      	adds	r3, r7, r4
 80008a8:	2200      	movs	r2, #0
 80008aa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	193b      	adds	r3, r7, r4
 80008ae:	2200      	movs	r2, #0
 80008b0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ASTRO_EVT_GPIO_Port, &GPIO_InitStruct);
 80008b2:	193b      	adds	r3, r7, r4
 80008b4:	4a10      	ldr	r2, [pc, #64]	; (80008f8 <MX_GPIO_Init+0xdc>)
 80008b6:	0019      	movs	r1, r3
 80008b8:	0010      	movs	r0, r2
 80008ba:	f000 fabf 	bl	8000e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : GNSS_RST_Pin */
  GPIO_InitStruct.Pin = GNSS_RST_Pin;
 80008be:	0021      	movs	r1, r4
 80008c0:	187b      	adds	r3, r7, r1
 80008c2:	2280      	movs	r2, #128	; 0x80
 80008c4:	0192      	lsls	r2, r2, #6
 80008c6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80008c8:	187b      	adds	r3, r7, r1
 80008ca:	2211      	movs	r2, #17
 80008cc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	187b      	adds	r3, r7, r1
 80008d0:	2200      	movs	r2, #0
 80008d2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d4:	187b      	adds	r3, r7, r1
 80008d6:	2200      	movs	r2, #0
 80008d8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GNSS_RST_GPIO_Port, &GPIO_InitStruct);
 80008da:	187b      	adds	r3, r7, r1
 80008dc:	4a06      	ldr	r2, [pc, #24]	; (80008f8 <MX_GPIO_Init+0xdc>)
 80008de:	0019      	movs	r1, r3
 80008e0:	0010      	movs	r0, r2
 80008e2:	f000 faab 	bl	8000e3c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008e6:	46c0      	nop			; (mov r8, r8)
 80008e8:	46bd      	mov	sp, r7
 80008ea:	b009      	add	sp, #36	; 0x24
 80008ec:	bd90      	pop	{r4, r7, pc}
 80008ee:	46c0      	nop			; (mov r8, r8)
 80008f0:	40021000 	.word	0x40021000
 80008f4:	0000a803 	.word	0x0000a803
 80008f8:	50000400 	.word	0x50000400
 80008fc:	00008c03 	.word	0x00008c03

08000900 <send_debug_logs>:

/* USER CODE BEGIN 4 */

//ASTRO
void send_debug_logs ( const char* p_tx_buffer )
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
    uint32_t length = strlen ( p_tx_buffer ) ;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	0018      	movs	r0, r3
 800090c:	f7ff fbfa 	bl	8000104 <strlen>
 8000910:	0003      	movs	r3, r0
 8000912:	60fb      	str	r3, [r7, #12]
    if ( length > UART_TX_MAX_BUFF_SIZE )
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	2bfa      	cmp	r3, #250	; 0xfa
 8000918:	d908      	bls.n	800092c <send_debug_logs+0x2c>
    {
        HAL_UART_Transmit ( &HUART_DBG , ( uint8_t* ) "[ERROR] UART buffer reached max length.\n" , 42 , 1000 ) ;
 800091a:	23fa      	movs	r3, #250	; 0xfa
 800091c:	009b      	lsls	r3, r3, #2
 800091e:	490d      	ldr	r1, [pc, #52]	; (8000954 <send_debug_logs+0x54>)
 8000920:	480d      	ldr	r0, [pc, #52]	; (8000958 <send_debug_logs+0x58>)
 8000922:	222a      	movs	r2, #42	; 0x2a
 8000924:	f001 fbfc 	bl	8002120 <HAL_UART_Transmit>
        length = UART_TX_MAX_BUFF_SIZE;
 8000928:	23fa      	movs	r3, #250	; 0xfa
 800092a:	60fb      	str	r3, [r7, #12]
    }
    HAL_UART_Transmit ( &HUART_DBG , ( uint8_t* ) p_tx_buffer , length , 1000 ) ;
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	b29a      	uxth	r2, r3
 8000930:	23fa      	movs	r3, #250	; 0xfa
 8000932:	009b      	lsls	r3, r3, #2
 8000934:	6879      	ldr	r1, [r7, #4]
 8000936:	4808      	ldr	r0, [pc, #32]	; (8000958 <send_debug_logs+0x58>)
 8000938:	f001 fbf2 	bl	8002120 <HAL_UART_Transmit>
    HAL_UART_Transmit ( &HUART_DBG , ( uint8_t* ) "\n" , 1 , 1000 ) ;
 800093c:	23fa      	movs	r3, #250	; 0xfa
 800093e:	009b      	lsls	r3, r3, #2
 8000940:	4906      	ldr	r1, [pc, #24]	; (800095c <send_debug_logs+0x5c>)
 8000942:	4805      	ldr	r0, [pc, #20]	; (8000958 <send_debug_logs+0x58>)
 8000944:	2201      	movs	r2, #1
 8000946:	f001 fbeb 	bl	8002120 <HAL_UART_Transmit>
}
 800094a:	46c0      	nop			; (mov r8, r8)
 800094c:	46bd      	mov	sp, r7
 800094e:	b004      	add	sp, #16
 8000950:	bd80      	pop	{r7, pc}
 8000952:	46c0      	nop			; (mov r8, r8)
 8000954:	08003050 	.word	0x08003050
 8000958:	2000002c 	.word	0x2000002c
 800095c:	0800307c 	.word	0x0800307c

08000960 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000964:	b672      	cpsid	i
}
 8000966:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000968:	e7fe      	b.n	8000968 <Error_Handler+0x8>
	...

0800096c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000972:	4b11      	ldr	r3, [pc, #68]	; (80009b8 <HAL_MspInit+0x4c>)
 8000974:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000976:	4b10      	ldr	r3, [pc, #64]	; (80009b8 <HAL_MspInit+0x4c>)
 8000978:	2101      	movs	r1, #1
 800097a:	430a      	orrs	r2, r1
 800097c:	641a      	str	r2, [r3, #64]	; 0x40
 800097e:	4b0e      	ldr	r3, [pc, #56]	; (80009b8 <HAL_MspInit+0x4c>)
 8000980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000982:	2201      	movs	r2, #1
 8000984:	4013      	ands	r3, r2
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800098a:	4b0b      	ldr	r3, [pc, #44]	; (80009b8 <HAL_MspInit+0x4c>)
 800098c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800098e:	4b0a      	ldr	r3, [pc, #40]	; (80009b8 <HAL_MspInit+0x4c>)
 8000990:	2180      	movs	r1, #128	; 0x80
 8000992:	0549      	lsls	r1, r1, #21
 8000994:	430a      	orrs	r2, r1
 8000996:	63da      	str	r2, [r3, #60]	; 0x3c
 8000998:	4b07      	ldr	r3, [pc, #28]	; (80009b8 <HAL_MspInit+0x4c>)
 800099a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800099c:	2380      	movs	r3, #128	; 0x80
 800099e:	055b      	lsls	r3, r3, #21
 80009a0:	4013      	ands	r3, r2
 80009a2:	603b      	str	r3, [r7, #0]
 80009a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80009a6:	23c0      	movs	r3, #192	; 0xc0
 80009a8:	00db      	lsls	r3, r3, #3
 80009aa:	0018      	movs	r0, r3
 80009ac:	f000 f97c 	bl	8000ca8 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009b0:	46c0      	nop			; (mov r8, r8)
 80009b2:	46bd      	mov	sp, r7
 80009b4:	b002      	add	sp, #8
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	40021000 	.word	0x40021000

080009bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009bc:	b590      	push	{r4, r7, lr}
 80009be:	b09f      	sub	sp, #124	; 0x7c
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c4:	2364      	movs	r3, #100	; 0x64
 80009c6:	18fb      	adds	r3, r7, r3
 80009c8:	0018      	movs	r0, r3
 80009ca:	2314      	movs	r3, #20
 80009cc:	001a      	movs	r2, r3
 80009ce:	2100      	movs	r1, #0
 80009d0:	f002 faee 	bl	8002fb0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009d4:	2418      	movs	r4, #24
 80009d6:	193b      	adds	r3, r7, r4
 80009d8:	0018      	movs	r0, r3
 80009da:	234c      	movs	r3, #76	; 0x4c
 80009dc:	001a      	movs	r2, r3
 80009de:	2100      	movs	r1, #0
 80009e0:	f002 fae6 	bl	8002fb0 <memset>
  if(huart->Instance==USART2)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a45      	ldr	r2, [pc, #276]	; (8000b00 <HAL_UART_MspInit+0x144>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d13f      	bne.n	8000a6e <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80009ee:	193b      	adds	r3, r7, r4
 80009f0:	2202      	movs	r2, #2
 80009f2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009f4:	193b      	adds	r3, r7, r4
 80009f6:	2200      	movs	r2, #0
 80009f8:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009fa:	193b      	adds	r3, r7, r4
 80009fc:	0018      	movs	r0, r3
 80009fe:	f001 f8fd 	bl	8001bfc <HAL_RCCEx_PeriphCLKConfig>
 8000a02:	1e03      	subs	r3, r0, #0
 8000a04:	d001      	beq.n	8000a0a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000a06:	f7ff ffab 	bl	8000960 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a0a:	4b3e      	ldr	r3, [pc, #248]	; (8000b04 <HAL_UART_MspInit+0x148>)
 8000a0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a0e:	4b3d      	ldr	r3, [pc, #244]	; (8000b04 <HAL_UART_MspInit+0x148>)
 8000a10:	2180      	movs	r1, #128	; 0x80
 8000a12:	0289      	lsls	r1, r1, #10
 8000a14:	430a      	orrs	r2, r1
 8000a16:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a18:	4b3a      	ldr	r3, [pc, #232]	; (8000b04 <HAL_UART_MspInit+0x148>)
 8000a1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a1c:	2380      	movs	r3, #128	; 0x80
 8000a1e:	029b      	lsls	r3, r3, #10
 8000a20:	4013      	ands	r3, r2
 8000a22:	617b      	str	r3, [r7, #20]
 8000a24:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a26:	4b37      	ldr	r3, [pc, #220]	; (8000b04 <HAL_UART_MspInit+0x148>)
 8000a28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a2a:	4b36      	ldr	r3, [pc, #216]	; (8000b04 <HAL_UART_MspInit+0x148>)
 8000a2c:	2101      	movs	r1, #1
 8000a2e:	430a      	orrs	r2, r1
 8000a30:	635a      	str	r2, [r3, #52]	; 0x34
 8000a32:	4b34      	ldr	r3, [pc, #208]	; (8000b04 <HAL_UART_MspInit+0x148>)
 8000a34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a36:	2201      	movs	r2, #1
 8000a38:	4013      	ands	r3, r2
 8000a3a:	613b      	str	r3, [r7, #16]
 8000a3c:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = DBG_TX_Pin|DBG_RX_Pin;
 8000a3e:	2164      	movs	r1, #100	; 0x64
 8000a40:	187b      	adds	r3, r7, r1
 8000a42:	220c      	movs	r2, #12
 8000a44:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a46:	187b      	adds	r3, r7, r1
 8000a48:	2202      	movs	r2, #2
 8000a4a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	187b      	adds	r3, r7, r1
 8000a4e:	2200      	movs	r2, #0
 8000a50:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a52:	187b      	adds	r3, r7, r1
 8000a54:	2200      	movs	r2, #0
 8000a56:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000a58:	187b      	adds	r3, r7, r1
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5e:	187a      	adds	r2, r7, r1
 8000a60:	23a0      	movs	r3, #160	; 0xa0
 8000a62:	05db      	lsls	r3, r3, #23
 8000a64:	0011      	movs	r1, r2
 8000a66:	0018      	movs	r0, r3
 8000a68:	f000 f9e8 	bl	8000e3c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a6c:	e044      	b.n	8000af8 <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART3)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4a25      	ldr	r2, [pc, #148]	; (8000b08 <HAL_UART_MspInit+0x14c>)
 8000a74:	4293      	cmp	r3, r2
 8000a76:	d13f      	bne.n	8000af8 <HAL_UART_MspInit+0x13c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000a78:	2118      	movs	r1, #24
 8000a7a:	187b      	adds	r3, r7, r1
 8000a7c:	2204      	movs	r2, #4
 8000a7e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000a80:	187b      	adds	r3, r7, r1
 8000a82:	2200      	movs	r2, #0
 8000a84:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a86:	187b      	adds	r3, r7, r1
 8000a88:	0018      	movs	r0, r3
 8000a8a:	f001 f8b7 	bl	8001bfc <HAL_RCCEx_PeriphCLKConfig>
 8000a8e:	1e03      	subs	r3, r0, #0
 8000a90:	d001      	beq.n	8000a96 <HAL_UART_MspInit+0xda>
      Error_Handler();
 8000a92:	f7ff ff65 	bl	8000960 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a96:	4b1b      	ldr	r3, [pc, #108]	; (8000b04 <HAL_UART_MspInit+0x148>)
 8000a98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a9a:	4b1a      	ldr	r3, [pc, #104]	; (8000b04 <HAL_UART_MspInit+0x148>)
 8000a9c:	2180      	movs	r1, #128	; 0x80
 8000a9e:	02c9      	lsls	r1, r1, #11
 8000aa0:	430a      	orrs	r2, r1
 8000aa2:	63da      	str	r2, [r3, #60]	; 0x3c
 8000aa4:	4b17      	ldr	r3, [pc, #92]	; (8000b04 <HAL_UART_MspInit+0x148>)
 8000aa6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000aa8:	2380      	movs	r3, #128	; 0x80
 8000aaa:	02db      	lsls	r3, r3, #11
 8000aac:	4013      	ands	r3, r2
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab2:	4b14      	ldr	r3, [pc, #80]	; (8000b04 <HAL_UART_MspInit+0x148>)
 8000ab4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ab6:	4b13      	ldr	r3, [pc, #76]	; (8000b04 <HAL_UART_MspInit+0x148>)
 8000ab8:	2102      	movs	r1, #2
 8000aba:	430a      	orrs	r2, r1
 8000abc:	635a      	str	r2, [r3, #52]	; 0x34
 8000abe:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <HAL_UART_MspInit+0x148>)
 8000ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ac2:	2202      	movs	r2, #2
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	60bb      	str	r3, [r7, #8]
 8000ac8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ASTRO_TX_Pin|ASTRO_RX_Pin;
 8000aca:	2164      	movs	r1, #100	; 0x64
 8000acc:	187b      	adds	r3, r7, r1
 8000ace:	22c0      	movs	r2, #192	; 0xc0
 8000ad0:	0092      	lsls	r2, r2, #2
 8000ad2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad4:	187b      	adds	r3, r7, r1
 8000ad6:	2202      	movs	r2, #2
 8000ad8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	187b      	adds	r3, r7, r1
 8000adc:	2200      	movs	r2, #0
 8000ade:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae0:	187b      	adds	r3, r7, r1
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8000ae6:	187b      	adds	r3, r7, r1
 8000ae8:	2204      	movs	r2, #4
 8000aea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aec:	187b      	adds	r3, r7, r1
 8000aee:	4a07      	ldr	r2, [pc, #28]	; (8000b0c <HAL_UART_MspInit+0x150>)
 8000af0:	0019      	movs	r1, r3
 8000af2:	0010      	movs	r0, r2
 8000af4:	f000 f9a2 	bl	8000e3c <HAL_GPIO_Init>
}
 8000af8:	46c0      	nop			; (mov r8, r8)
 8000afa:	46bd      	mov	sp, r7
 8000afc:	b01f      	add	sp, #124	; 0x7c
 8000afe:	bd90      	pop	{r4, r7, pc}
 8000b00:	40004400 	.word	0x40004400
 8000b04:	40021000 	.word	0x40021000
 8000b08:	40004800 	.word	0x40004800
 8000b0c:	50000400 	.word	0x50000400

08000b10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b14:	e7fe      	b.n	8000b14 <NMI_Handler+0x4>

08000b16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b16:	b580      	push	{r7, lr}
 8000b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b1a:	e7fe      	b.n	8000b1a <HardFault_Handler+0x4>

08000b1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b20:	46c0      	nop			; (mov r8, r8)
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}

08000b26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b26:	b580      	push	{r7, lr}
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b2a:	46c0      	nop			; (mov r8, r8)
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}

08000b30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b34:	f000 f89c 	bl	8000c70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b38:	46c0      	nop			; (mov r8, r8)
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b42:	46c0      	nop			; (mov r8, r8)
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b48:	480d      	ldr	r0, [pc, #52]	; (8000b80 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b4a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b4c:	f7ff fff7 	bl	8000b3e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b50:	480c      	ldr	r0, [pc, #48]	; (8000b84 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b52:	490d      	ldr	r1, [pc, #52]	; (8000b88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b54:	4a0d      	ldr	r2, [pc, #52]	; (8000b8c <LoopForever+0xe>)
  movs r3, #0
 8000b56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b58:	e002      	b.n	8000b60 <LoopCopyDataInit>

08000b5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b5e:	3304      	adds	r3, #4

08000b60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b64:	d3f9      	bcc.n	8000b5a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b66:	4a0a      	ldr	r2, [pc, #40]	; (8000b90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b68:	4c0a      	ldr	r4, [pc, #40]	; (8000b94 <LoopForever+0x16>)
  movs r3, #0
 8000b6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b6c:	e001      	b.n	8000b72 <LoopFillZerobss>

08000b6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b70:	3204      	adds	r2, #4

08000b72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b74:	d3fb      	bcc.n	8000b6e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b76:	f002 fa23 	bl	8002fc0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000b7a:	f7ff fd57 	bl	800062c <main>

08000b7e <LoopForever>:

LoopForever:
  b LoopForever
 8000b7e:	e7fe      	b.n	8000b7e <LoopForever>
  ldr   r0, =_estack
 8000b80:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000b84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b88:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000b8c:	08003118 	.word	0x08003118
  ldr r2, =_sbss
 8000b90:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000b94:	20000158 	.word	0x20000158

08000b98 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b98:	e7fe      	b.n	8000b98 <ADC1_COMP_IRQHandler>
	...

08000b9c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ba2:	1dfb      	adds	r3, r7, #7
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ba8:	4b0b      	ldr	r3, [pc, #44]	; (8000bd8 <HAL_Init+0x3c>)
 8000baa:	681a      	ldr	r2, [r3, #0]
 8000bac:	4b0a      	ldr	r3, [pc, #40]	; (8000bd8 <HAL_Init+0x3c>)
 8000bae:	2180      	movs	r1, #128	; 0x80
 8000bb0:	0049      	lsls	r1, r1, #1
 8000bb2:	430a      	orrs	r2, r1
 8000bb4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bb6:	2003      	movs	r0, #3
 8000bb8:	f000 f810 	bl	8000bdc <HAL_InitTick>
 8000bbc:	1e03      	subs	r3, r0, #0
 8000bbe:	d003      	beq.n	8000bc8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000bc0:	1dfb      	adds	r3, r7, #7
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	701a      	strb	r2, [r3, #0]
 8000bc6:	e001      	b.n	8000bcc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000bc8:	f7ff fed0 	bl	800096c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bcc:	1dfb      	adds	r3, r7, #7
 8000bce:	781b      	ldrb	r3, [r3, #0]
}
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	b002      	add	sp, #8
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40022000 	.word	0x40022000

08000bdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bdc:	b590      	push	{r4, r7, lr}
 8000bde:	b085      	sub	sp, #20
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000be4:	230f      	movs	r3, #15
 8000be6:	18fb      	adds	r3, r7, r3
 8000be8:	2200      	movs	r2, #0
 8000bea:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000bec:	4b1d      	ldr	r3, [pc, #116]	; (8000c64 <HAL_InitTick+0x88>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d02b      	beq.n	8000c4c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000bf4:	4b1c      	ldr	r3, [pc, #112]	; (8000c68 <HAL_InitTick+0x8c>)
 8000bf6:	681c      	ldr	r4, [r3, #0]
 8000bf8:	4b1a      	ldr	r3, [pc, #104]	; (8000c64 <HAL_InitTick+0x88>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	0019      	movs	r1, r3
 8000bfe:	23fa      	movs	r3, #250	; 0xfa
 8000c00:	0098      	lsls	r0, r3, #2
 8000c02:	f7ff fa87 	bl	8000114 <__udivsi3>
 8000c06:	0003      	movs	r3, r0
 8000c08:	0019      	movs	r1, r3
 8000c0a:	0020      	movs	r0, r4
 8000c0c:	f7ff fa82 	bl	8000114 <__udivsi3>
 8000c10:	0003      	movs	r3, r0
 8000c12:	0018      	movs	r0, r3
 8000c14:	f000 f905 	bl	8000e22 <HAL_SYSTICK_Config>
 8000c18:	1e03      	subs	r3, r0, #0
 8000c1a:	d112      	bne.n	8000c42 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	2b03      	cmp	r3, #3
 8000c20:	d80a      	bhi.n	8000c38 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c22:	6879      	ldr	r1, [r7, #4]
 8000c24:	2301      	movs	r3, #1
 8000c26:	425b      	negs	r3, r3
 8000c28:	2200      	movs	r2, #0
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	f000 f8e4 	bl	8000df8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c30:	4b0e      	ldr	r3, [pc, #56]	; (8000c6c <HAL_InitTick+0x90>)
 8000c32:	687a      	ldr	r2, [r7, #4]
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	e00d      	b.n	8000c54 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000c38:	230f      	movs	r3, #15
 8000c3a:	18fb      	adds	r3, r7, r3
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	701a      	strb	r2, [r3, #0]
 8000c40:	e008      	b.n	8000c54 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c42:	230f      	movs	r3, #15
 8000c44:	18fb      	adds	r3, r7, r3
 8000c46:	2201      	movs	r2, #1
 8000c48:	701a      	strb	r2, [r3, #0]
 8000c4a:	e003      	b.n	8000c54 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c4c:	230f      	movs	r3, #15
 8000c4e:	18fb      	adds	r3, r7, r3
 8000c50:	2201      	movs	r2, #1
 8000c52:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000c54:	230f      	movs	r3, #15
 8000c56:	18fb      	adds	r3, r7, r3
 8000c58:	781b      	ldrb	r3, [r3, #0]
}
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	b005      	add	sp, #20
 8000c60:	bd90      	pop	{r4, r7, pc}
 8000c62:	46c0      	nop			; (mov r8, r8)
 8000c64:	2000000c 	.word	0x2000000c
 8000c68:	20000004 	.word	0x20000004
 8000c6c:	20000008 	.word	0x20000008

08000c70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c74:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <HAL_IncTick+0x1c>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	001a      	movs	r2, r3
 8000c7a:	4b05      	ldr	r3, [pc, #20]	; (8000c90 <HAL_IncTick+0x20>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	18d2      	adds	r2, r2, r3
 8000c80:	4b03      	ldr	r3, [pc, #12]	; (8000c90 <HAL_IncTick+0x20>)
 8000c82:	601a      	str	r2, [r3, #0]
}
 8000c84:	46c0      	nop			; (mov r8, r8)
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	46c0      	nop			; (mov r8, r8)
 8000c8c:	2000000c 	.word	0x2000000c
 8000c90:	20000154 	.word	0x20000154

08000c94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  return uwTick;
 8000c98:	4b02      	ldr	r3, [pc, #8]	; (8000ca4 <HAL_GetTick+0x10>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
}
 8000c9c:	0018      	movs	r0, r3
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	46c0      	nop			; (mov r8, r8)
 8000ca4:	20000154 	.word	0x20000154

08000ca8 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000cb0:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a06      	ldr	r2, [pc, #24]	; (8000cd0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	0019      	movs	r1, r3
 8000cba:	4b04      	ldr	r3, [pc, #16]	; (8000ccc <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000cbc:	687a      	ldr	r2, [r7, #4]
 8000cbe:	430a      	orrs	r2, r1
 8000cc0:	601a      	str	r2, [r3, #0]
}
 8000cc2:	46c0      	nop			; (mov r8, r8)
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	b002      	add	sp, #8
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	46c0      	nop			; (mov r8, r8)
 8000ccc:	40010000 	.word	0x40010000
 8000cd0:	fffff9ff 	.word	0xfffff9ff

08000cd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cd4:	b590      	push	{r4, r7, lr}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	0002      	movs	r2, r0
 8000cdc:	6039      	str	r1, [r7, #0]
 8000cde:	1dfb      	adds	r3, r7, #7
 8000ce0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ce2:	1dfb      	adds	r3, r7, #7
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	2b7f      	cmp	r3, #127	; 0x7f
 8000ce8:	d828      	bhi.n	8000d3c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cea:	4a2f      	ldr	r2, [pc, #188]	; (8000da8 <__NVIC_SetPriority+0xd4>)
 8000cec:	1dfb      	adds	r3, r7, #7
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	b25b      	sxtb	r3, r3
 8000cf2:	089b      	lsrs	r3, r3, #2
 8000cf4:	33c0      	adds	r3, #192	; 0xc0
 8000cf6:	009b      	lsls	r3, r3, #2
 8000cf8:	589b      	ldr	r3, [r3, r2]
 8000cfa:	1dfa      	adds	r2, r7, #7
 8000cfc:	7812      	ldrb	r2, [r2, #0]
 8000cfe:	0011      	movs	r1, r2
 8000d00:	2203      	movs	r2, #3
 8000d02:	400a      	ands	r2, r1
 8000d04:	00d2      	lsls	r2, r2, #3
 8000d06:	21ff      	movs	r1, #255	; 0xff
 8000d08:	4091      	lsls	r1, r2
 8000d0a:	000a      	movs	r2, r1
 8000d0c:	43d2      	mvns	r2, r2
 8000d0e:	401a      	ands	r2, r3
 8000d10:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	019b      	lsls	r3, r3, #6
 8000d16:	22ff      	movs	r2, #255	; 0xff
 8000d18:	401a      	ands	r2, r3
 8000d1a:	1dfb      	adds	r3, r7, #7
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	0018      	movs	r0, r3
 8000d20:	2303      	movs	r3, #3
 8000d22:	4003      	ands	r3, r0
 8000d24:	00db      	lsls	r3, r3, #3
 8000d26:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d28:	481f      	ldr	r0, [pc, #124]	; (8000da8 <__NVIC_SetPriority+0xd4>)
 8000d2a:	1dfb      	adds	r3, r7, #7
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	b25b      	sxtb	r3, r3
 8000d30:	089b      	lsrs	r3, r3, #2
 8000d32:	430a      	orrs	r2, r1
 8000d34:	33c0      	adds	r3, #192	; 0xc0
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d3a:	e031      	b.n	8000da0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d3c:	4a1b      	ldr	r2, [pc, #108]	; (8000dac <__NVIC_SetPriority+0xd8>)
 8000d3e:	1dfb      	adds	r3, r7, #7
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	0019      	movs	r1, r3
 8000d44:	230f      	movs	r3, #15
 8000d46:	400b      	ands	r3, r1
 8000d48:	3b08      	subs	r3, #8
 8000d4a:	089b      	lsrs	r3, r3, #2
 8000d4c:	3306      	adds	r3, #6
 8000d4e:	009b      	lsls	r3, r3, #2
 8000d50:	18d3      	adds	r3, r2, r3
 8000d52:	3304      	adds	r3, #4
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	1dfa      	adds	r2, r7, #7
 8000d58:	7812      	ldrb	r2, [r2, #0]
 8000d5a:	0011      	movs	r1, r2
 8000d5c:	2203      	movs	r2, #3
 8000d5e:	400a      	ands	r2, r1
 8000d60:	00d2      	lsls	r2, r2, #3
 8000d62:	21ff      	movs	r1, #255	; 0xff
 8000d64:	4091      	lsls	r1, r2
 8000d66:	000a      	movs	r2, r1
 8000d68:	43d2      	mvns	r2, r2
 8000d6a:	401a      	ands	r2, r3
 8000d6c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	019b      	lsls	r3, r3, #6
 8000d72:	22ff      	movs	r2, #255	; 0xff
 8000d74:	401a      	ands	r2, r3
 8000d76:	1dfb      	adds	r3, r7, #7
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	0018      	movs	r0, r3
 8000d7c:	2303      	movs	r3, #3
 8000d7e:	4003      	ands	r3, r0
 8000d80:	00db      	lsls	r3, r3, #3
 8000d82:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d84:	4809      	ldr	r0, [pc, #36]	; (8000dac <__NVIC_SetPriority+0xd8>)
 8000d86:	1dfb      	adds	r3, r7, #7
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	001c      	movs	r4, r3
 8000d8c:	230f      	movs	r3, #15
 8000d8e:	4023      	ands	r3, r4
 8000d90:	3b08      	subs	r3, #8
 8000d92:	089b      	lsrs	r3, r3, #2
 8000d94:	430a      	orrs	r2, r1
 8000d96:	3306      	adds	r3, #6
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	18c3      	adds	r3, r0, r3
 8000d9c:	3304      	adds	r3, #4
 8000d9e:	601a      	str	r2, [r3, #0]
}
 8000da0:	46c0      	nop			; (mov r8, r8)
 8000da2:	46bd      	mov	sp, r7
 8000da4:	b003      	add	sp, #12
 8000da6:	bd90      	pop	{r4, r7, pc}
 8000da8:	e000e100 	.word	0xe000e100
 8000dac:	e000ed00 	.word	0xe000ed00

08000db0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	1e5a      	subs	r2, r3, #1
 8000dbc:	2380      	movs	r3, #128	; 0x80
 8000dbe:	045b      	lsls	r3, r3, #17
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	d301      	bcc.n	8000dc8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	e010      	b.n	8000dea <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dc8:	4b0a      	ldr	r3, [pc, #40]	; (8000df4 <SysTick_Config+0x44>)
 8000dca:	687a      	ldr	r2, [r7, #4]
 8000dcc:	3a01      	subs	r2, #1
 8000dce:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	425b      	negs	r3, r3
 8000dd4:	2103      	movs	r1, #3
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	f7ff ff7c 	bl	8000cd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ddc:	4b05      	ldr	r3, [pc, #20]	; (8000df4 <SysTick_Config+0x44>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000de2:	4b04      	ldr	r3, [pc, #16]	; (8000df4 <SysTick_Config+0x44>)
 8000de4:	2207      	movs	r2, #7
 8000de6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000de8:	2300      	movs	r3, #0
}
 8000dea:	0018      	movs	r0, r3
 8000dec:	46bd      	mov	sp, r7
 8000dee:	b002      	add	sp, #8
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	46c0      	nop			; (mov r8, r8)
 8000df4:	e000e010 	.word	0xe000e010

08000df8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	60b9      	str	r1, [r7, #8]
 8000e00:	607a      	str	r2, [r7, #4]
 8000e02:	210f      	movs	r1, #15
 8000e04:	187b      	adds	r3, r7, r1
 8000e06:	1c02      	adds	r2, r0, #0
 8000e08:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000e0a:	68ba      	ldr	r2, [r7, #8]
 8000e0c:	187b      	adds	r3, r7, r1
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	b25b      	sxtb	r3, r3
 8000e12:	0011      	movs	r1, r2
 8000e14:	0018      	movs	r0, r3
 8000e16:	f7ff ff5d 	bl	8000cd4 <__NVIC_SetPriority>
}
 8000e1a:	46c0      	nop			; (mov r8, r8)
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	b004      	add	sp, #16
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b082      	sub	sp, #8
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	0018      	movs	r0, r3
 8000e2e:	f7ff ffbf 	bl	8000db0 <SysTick_Config>
 8000e32:	0003      	movs	r3, r0
}
 8000e34:	0018      	movs	r0, r3
 8000e36:	46bd      	mov	sp, r7
 8000e38:	b002      	add	sp, #8
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b086      	sub	sp, #24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e46:	2300      	movs	r3, #0
 8000e48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e4a:	e14d      	b.n	80010e8 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	2101      	movs	r1, #1
 8000e52:	697a      	ldr	r2, [r7, #20]
 8000e54:	4091      	lsls	r1, r2
 8000e56:	000a      	movs	r2, r1
 8000e58:	4013      	ands	r3, r2
 8000e5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d100      	bne.n	8000e64 <HAL_GPIO_Init+0x28>
 8000e62:	e13e      	b.n	80010e2 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	2203      	movs	r2, #3
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d005      	beq.n	8000e7c <HAL_GPIO_Init+0x40>
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	2203      	movs	r2, #3
 8000e76:	4013      	ands	r3, r2
 8000e78:	2b02      	cmp	r3, #2
 8000e7a:	d130      	bne.n	8000ede <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	689b      	ldr	r3, [r3, #8]
 8000e80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	005b      	lsls	r3, r3, #1
 8000e86:	2203      	movs	r2, #3
 8000e88:	409a      	lsls	r2, r3
 8000e8a:	0013      	movs	r3, r2
 8000e8c:	43da      	mvns	r2, r3
 8000e8e:	693b      	ldr	r3, [r7, #16]
 8000e90:	4013      	ands	r3, r2
 8000e92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	68da      	ldr	r2, [r3, #12]
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	409a      	lsls	r2, r3
 8000e9e:	0013      	movs	r3, r2
 8000ea0:	693a      	ldr	r2, [r7, #16]
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	409a      	lsls	r2, r3
 8000eb8:	0013      	movs	r3, r2
 8000eba:	43da      	mvns	r2, r3
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	091b      	lsrs	r3, r3, #4
 8000ec8:	2201      	movs	r2, #1
 8000eca:	401a      	ands	r2, r3
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	409a      	lsls	r2, r3
 8000ed0:	0013      	movs	r3, r2
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	2203      	movs	r2, #3
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	2b03      	cmp	r3, #3
 8000ee8:	d017      	beq.n	8000f1a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	68db      	ldr	r3, [r3, #12]
 8000eee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	2203      	movs	r2, #3
 8000ef6:	409a      	lsls	r2, r3
 8000ef8:	0013      	movs	r3, r2
 8000efa:	43da      	mvns	r2, r3
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	4013      	ands	r3, r2
 8000f00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	689a      	ldr	r2, [r3, #8]
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	409a      	lsls	r2, r3
 8000f0c:	0013      	movs	r3, r2
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	2203      	movs	r2, #3
 8000f20:	4013      	ands	r3, r2
 8000f22:	2b02      	cmp	r3, #2
 8000f24:	d123      	bne.n	8000f6e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	08da      	lsrs	r2, r3, #3
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	3208      	adds	r2, #8
 8000f2e:	0092      	lsls	r2, r2, #2
 8000f30:	58d3      	ldr	r3, [r2, r3]
 8000f32:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	2207      	movs	r2, #7
 8000f38:	4013      	ands	r3, r2
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	220f      	movs	r2, #15
 8000f3e:	409a      	lsls	r2, r3
 8000f40:	0013      	movs	r3, r2
 8000f42:	43da      	mvns	r2, r3
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	4013      	ands	r3, r2
 8000f48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	691a      	ldr	r2, [r3, #16]
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	2107      	movs	r1, #7
 8000f52:	400b      	ands	r3, r1
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	409a      	lsls	r2, r3
 8000f58:	0013      	movs	r3, r2
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	08da      	lsrs	r2, r3, #3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	3208      	adds	r2, #8
 8000f68:	0092      	lsls	r2, r2, #2
 8000f6a:	6939      	ldr	r1, [r7, #16]
 8000f6c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	2203      	movs	r2, #3
 8000f7a:	409a      	lsls	r2, r3
 8000f7c:	0013      	movs	r3, r2
 8000f7e:	43da      	mvns	r2, r3
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	4013      	ands	r3, r2
 8000f84:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	2203      	movs	r2, #3
 8000f8c:	401a      	ands	r2, r3
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	409a      	lsls	r2, r3
 8000f94:	0013      	movs	r3, r2
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	685a      	ldr	r2, [r3, #4]
 8000fa6:	23c0      	movs	r3, #192	; 0xc0
 8000fa8:	029b      	lsls	r3, r3, #10
 8000faa:	4013      	ands	r3, r2
 8000fac:	d100      	bne.n	8000fb0 <HAL_GPIO_Init+0x174>
 8000fae:	e098      	b.n	80010e2 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000fb0:	4a53      	ldr	r2, [pc, #332]	; (8001100 <HAL_GPIO_Init+0x2c4>)
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	089b      	lsrs	r3, r3, #2
 8000fb6:	3318      	adds	r3, #24
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	589b      	ldr	r3, [r3, r2]
 8000fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	2203      	movs	r2, #3
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	00db      	lsls	r3, r3, #3
 8000fc6:	220f      	movs	r2, #15
 8000fc8:	409a      	lsls	r2, r3
 8000fca:	0013      	movs	r3, r2
 8000fcc:	43da      	mvns	r2, r3
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000fd4:	687a      	ldr	r2, [r7, #4]
 8000fd6:	23a0      	movs	r3, #160	; 0xa0
 8000fd8:	05db      	lsls	r3, r3, #23
 8000fda:	429a      	cmp	r2, r3
 8000fdc:	d019      	beq.n	8001012 <HAL_GPIO_Init+0x1d6>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a48      	ldr	r2, [pc, #288]	; (8001104 <HAL_GPIO_Init+0x2c8>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d013      	beq.n	800100e <HAL_GPIO_Init+0x1d2>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a47      	ldr	r2, [pc, #284]	; (8001108 <HAL_GPIO_Init+0x2cc>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d00d      	beq.n	800100a <HAL_GPIO_Init+0x1ce>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4a46      	ldr	r2, [pc, #280]	; (800110c <HAL_GPIO_Init+0x2d0>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d007      	beq.n	8001006 <HAL_GPIO_Init+0x1ca>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4a45      	ldr	r2, [pc, #276]	; (8001110 <HAL_GPIO_Init+0x2d4>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d101      	bne.n	8001002 <HAL_GPIO_Init+0x1c6>
 8000ffe:	2304      	movs	r3, #4
 8001000:	e008      	b.n	8001014 <HAL_GPIO_Init+0x1d8>
 8001002:	2305      	movs	r3, #5
 8001004:	e006      	b.n	8001014 <HAL_GPIO_Init+0x1d8>
 8001006:	2303      	movs	r3, #3
 8001008:	e004      	b.n	8001014 <HAL_GPIO_Init+0x1d8>
 800100a:	2302      	movs	r3, #2
 800100c:	e002      	b.n	8001014 <HAL_GPIO_Init+0x1d8>
 800100e:	2301      	movs	r3, #1
 8001010:	e000      	b.n	8001014 <HAL_GPIO_Init+0x1d8>
 8001012:	2300      	movs	r3, #0
 8001014:	697a      	ldr	r2, [r7, #20]
 8001016:	2103      	movs	r1, #3
 8001018:	400a      	ands	r2, r1
 800101a:	00d2      	lsls	r2, r2, #3
 800101c:	4093      	lsls	r3, r2
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	4313      	orrs	r3, r2
 8001022:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001024:	4936      	ldr	r1, [pc, #216]	; (8001100 <HAL_GPIO_Init+0x2c4>)
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	089b      	lsrs	r3, r3, #2
 800102a:	3318      	adds	r3, #24
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001032:	4b33      	ldr	r3, [pc, #204]	; (8001100 <HAL_GPIO_Init+0x2c4>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	43da      	mvns	r2, r3
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	4013      	ands	r3, r2
 8001040:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685a      	ldr	r2, [r3, #4]
 8001046:	2380      	movs	r3, #128	; 0x80
 8001048:	035b      	lsls	r3, r3, #13
 800104a:	4013      	ands	r3, r2
 800104c:	d003      	beq.n	8001056 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	4313      	orrs	r3, r2
 8001054:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001056:	4b2a      	ldr	r3, [pc, #168]	; (8001100 <HAL_GPIO_Init+0x2c4>)
 8001058:	693a      	ldr	r2, [r7, #16]
 800105a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800105c:	4b28      	ldr	r3, [pc, #160]	; (8001100 <HAL_GPIO_Init+0x2c4>)
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	43da      	mvns	r2, r3
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	4013      	ands	r3, r2
 800106a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685a      	ldr	r2, [r3, #4]
 8001070:	2380      	movs	r3, #128	; 0x80
 8001072:	039b      	lsls	r3, r3, #14
 8001074:	4013      	ands	r3, r2
 8001076:	d003      	beq.n	8001080 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	4313      	orrs	r3, r2
 800107e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001080:	4b1f      	ldr	r3, [pc, #124]	; (8001100 <HAL_GPIO_Init+0x2c4>)
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001086:	4a1e      	ldr	r2, [pc, #120]	; (8001100 <HAL_GPIO_Init+0x2c4>)
 8001088:	2384      	movs	r3, #132	; 0x84
 800108a:	58d3      	ldr	r3, [r2, r3]
 800108c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	43da      	mvns	r2, r3
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	4013      	ands	r3, r2
 8001096:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685a      	ldr	r2, [r3, #4]
 800109c:	2380      	movs	r3, #128	; 0x80
 800109e:	029b      	lsls	r3, r3, #10
 80010a0:	4013      	ands	r3, r2
 80010a2:	d003      	beq.n	80010ac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80010a4:	693a      	ldr	r2, [r7, #16]
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010ac:	4914      	ldr	r1, [pc, #80]	; (8001100 <HAL_GPIO_Init+0x2c4>)
 80010ae:	2284      	movs	r2, #132	; 0x84
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80010b4:	4a12      	ldr	r2, [pc, #72]	; (8001100 <HAL_GPIO_Init+0x2c4>)
 80010b6:	2380      	movs	r3, #128	; 0x80
 80010b8:	58d3      	ldr	r3, [r2, r3]
 80010ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	43da      	mvns	r2, r3
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	4013      	ands	r3, r2
 80010c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685a      	ldr	r2, [r3, #4]
 80010ca:	2380      	movs	r3, #128	; 0x80
 80010cc:	025b      	lsls	r3, r3, #9
 80010ce:	4013      	ands	r3, r2
 80010d0:	d003      	beq.n	80010da <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010da:	4909      	ldr	r1, [pc, #36]	; (8001100 <HAL_GPIO_Init+0x2c4>)
 80010dc:	2280      	movs	r2, #128	; 0x80
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	3301      	adds	r3, #1
 80010e6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	40da      	lsrs	r2, r3
 80010f0:	1e13      	subs	r3, r2, #0
 80010f2:	d000      	beq.n	80010f6 <HAL_GPIO_Init+0x2ba>
 80010f4:	e6aa      	b.n	8000e4c <HAL_GPIO_Init+0x10>
  }
}
 80010f6:	46c0      	nop			; (mov r8, r8)
 80010f8:	46c0      	nop			; (mov r8, r8)
 80010fa:	46bd      	mov	sp, r7
 80010fc:	b006      	add	sp, #24
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40021800 	.word	0x40021800
 8001104:	50000400 	.word	0x50000400
 8001108:	50000800 	.word	0x50000800
 800110c:	50000c00 	.word	0x50000c00
 8001110:	50001000 	.word	0x50001000

08001114 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	0008      	movs	r0, r1
 800111e:	0011      	movs	r1, r2
 8001120:	1cbb      	adds	r3, r7, #2
 8001122:	1c02      	adds	r2, r0, #0
 8001124:	801a      	strh	r2, [r3, #0]
 8001126:	1c7b      	adds	r3, r7, #1
 8001128:	1c0a      	adds	r2, r1, #0
 800112a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800112c:	1c7b      	adds	r3, r7, #1
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d004      	beq.n	800113e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001134:	1cbb      	adds	r3, r7, #2
 8001136:	881a      	ldrh	r2, [r3, #0]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800113c:	e003      	b.n	8001146 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800113e:	1cbb      	adds	r3, r7, #2
 8001140:	881a      	ldrh	r2, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001146:	46c0      	nop			; (mov r8, r8)
 8001148:	46bd      	mov	sp, r7
 800114a:	b002      	add	sp, #8
 800114c:	bd80      	pop	{r7, pc}
	...

08001150 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001158:	4b19      	ldr	r3, [pc, #100]	; (80011c0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a19      	ldr	r2, [pc, #100]	; (80011c4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800115e:	4013      	ands	r3, r2
 8001160:	0019      	movs	r1, r3
 8001162:	4b17      	ldr	r3, [pc, #92]	; (80011c0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001164:	687a      	ldr	r2, [r7, #4]
 8001166:	430a      	orrs	r2, r1
 8001168:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	2380      	movs	r3, #128	; 0x80
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	429a      	cmp	r2, r3
 8001172:	d11f      	bne.n	80011b4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001174:	4b14      	ldr	r3, [pc, #80]	; (80011c8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	0013      	movs	r3, r2
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	189b      	adds	r3, r3, r2
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	4912      	ldr	r1, [pc, #72]	; (80011cc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001182:	0018      	movs	r0, r3
 8001184:	f7fe ffc6 	bl	8000114 <__udivsi3>
 8001188:	0003      	movs	r3, r0
 800118a:	3301      	adds	r3, #1
 800118c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800118e:	e008      	b.n	80011a2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d003      	beq.n	800119e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	3b01      	subs	r3, #1
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	e001      	b.n	80011a2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800119e:	2303      	movs	r3, #3
 80011a0:	e009      	b.n	80011b6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011a2:	4b07      	ldr	r3, [pc, #28]	; (80011c0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80011a4:	695a      	ldr	r2, [r3, #20]
 80011a6:	2380      	movs	r3, #128	; 0x80
 80011a8:	00db      	lsls	r3, r3, #3
 80011aa:	401a      	ands	r2, r3
 80011ac:	2380      	movs	r3, #128	; 0x80
 80011ae:	00db      	lsls	r3, r3, #3
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d0ed      	beq.n	8001190 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80011b4:	2300      	movs	r3, #0
}
 80011b6:	0018      	movs	r0, r3
 80011b8:	46bd      	mov	sp, r7
 80011ba:	b004      	add	sp, #16
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	46c0      	nop			; (mov r8, r8)
 80011c0:	40007000 	.word	0x40007000
 80011c4:	fffff9ff 	.word	0xfffff9ff
 80011c8:	20000004 	.word	0x20000004
 80011cc:	000f4240 	.word	0x000f4240

080011d0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80011d4:	4b03      	ldr	r3, [pc, #12]	; (80011e4 <LL_RCC_GetAPB1Prescaler+0x14>)
 80011d6:	689a      	ldr	r2, [r3, #8]
 80011d8:	23e0      	movs	r3, #224	; 0xe0
 80011da:	01db      	lsls	r3, r3, #7
 80011dc:	4013      	ands	r3, r2
}
 80011de:	0018      	movs	r0, r3
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	40021000 	.word	0x40021000

080011e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b088      	sub	sp, #32
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d102      	bne.n	80011fc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	f000 fb50 	bl	800189c <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	2201      	movs	r2, #1
 8001202:	4013      	ands	r3, r2
 8001204:	d100      	bne.n	8001208 <HAL_RCC_OscConfig+0x20>
 8001206:	e07c      	b.n	8001302 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001208:	4bc3      	ldr	r3, [pc, #780]	; (8001518 <HAL_RCC_OscConfig+0x330>)
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	2238      	movs	r2, #56	; 0x38
 800120e:	4013      	ands	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001212:	4bc1      	ldr	r3, [pc, #772]	; (8001518 <HAL_RCC_OscConfig+0x330>)
 8001214:	68db      	ldr	r3, [r3, #12]
 8001216:	2203      	movs	r2, #3
 8001218:	4013      	ands	r3, r2
 800121a:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	2b10      	cmp	r3, #16
 8001220:	d102      	bne.n	8001228 <HAL_RCC_OscConfig+0x40>
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	2b03      	cmp	r3, #3
 8001226:	d002      	beq.n	800122e <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	2b08      	cmp	r3, #8
 800122c:	d10b      	bne.n	8001246 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800122e:	4bba      	ldr	r3, [pc, #744]	; (8001518 <HAL_RCC_OscConfig+0x330>)
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	2380      	movs	r3, #128	; 0x80
 8001234:	029b      	lsls	r3, r3, #10
 8001236:	4013      	ands	r3, r2
 8001238:	d062      	beq.n	8001300 <HAL_RCC_OscConfig+0x118>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d15e      	bne.n	8001300 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e32a      	b.n	800189c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	685a      	ldr	r2, [r3, #4]
 800124a:	2380      	movs	r3, #128	; 0x80
 800124c:	025b      	lsls	r3, r3, #9
 800124e:	429a      	cmp	r2, r3
 8001250:	d107      	bne.n	8001262 <HAL_RCC_OscConfig+0x7a>
 8001252:	4bb1      	ldr	r3, [pc, #708]	; (8001518 <HAL_RCC_OscConfig+0x330>)
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	4bb0      	ldr	r3, [pc, #704]	; (8001518 <HAL_RCC_OscConfig+0x330>)
 8001258:	2180      	movs	r1, #128	; 0x80
 800125a:	0249      	lsls	r1, r1, #9
 800125c:	430a      	orrs	r2, r1
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	e020      	b.n	80012a4 <HAL_RCC_OscConfig+0xbc>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	685a      	ldr	r2, [r3, #4]
 8001266:	23a0      	movs	r3, #160	; 0xa0
 8001268:	02db      	lsls	r3, r3, #11
 800126a:	429a      	cmp	r2, r3
 800126c:	d10e      	bne.n	800128c <HAL_RCC_OscConfig+0xa4>
 800126e:	4baa      	ldr	r3, [pc, #680]	; (8001518 <HAL_RCC_OscConfig+0x330>)
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	4ba9      	ldr	r3, [pc, #676]	; (8001518 <HAL_RCC_OscConfig+0x330>)
 8001274:	2180      	movs	r1, #128	; 0x80
 8001276:	02c9      	lsls	r1, r1, #11
 8001278:	430a      	orrs	r2, r1
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	4ba6      	ldr	r3, [pc, #664]	; (8001518 <HAL_RCC_OscConfig+0x330>)
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	4ba5      	ldr	r3, [pc, #660]	; (8001518 <HAL_RCC_OscConfig+0x330>)
 8001282:	2180      	movs	r1, #128	; 0x80
 8001284:	0249      	lsls	r1, r1, #9
 8001286:	430a      	orrs	r2, r1
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	e00b      	b.n	80012a4 <HAL_RCC_OscConfig+0xbc>
 800128c:	4ba2      	ldr	r3, [pc, #648]	; (8001518 <HAL_RCC_OscConfig+0x330>)
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	4ba1      	ldr	r3, [pc, #644]	; (8001518 <HAL_RCC_OscConfig+0x330>)
 8001292:	49a2      	ldr	r1, [pc, #648]	; (800151c <HAL_RCC_OscConfig+0x334>)
 8001294:	400a      	ands	r2, r1
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	4b9f      	ldr	r3, [pc, #636]	; (8001518 <HAL_RCC_OscConfig+0x330>)
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	4b9e      	ldr	r3, [pc, #632]	; (8001518 <HAL_RCC_OscConfig+0x330>)
 800129e:	49a0      	ldr	r1, [pc, #640]	; (8001520 <HAL_RCC_OscConfig+0x338>)
 80012a0:	400a      	ands	r2, r1
 80012a2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d014      	beq.n	80012d6 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ac:	f7ff fcf2 	bl	8000c94 <HAL_GetTick>
 80012b0:	0003      	movs	r3, r0
 80012b2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012b4:	e008      	b.n	80012c8 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012b6:	f7ff fced 	bl	8000c94 <HAL_GetTick>
 80012ba:	0002      	movs	r2, r0
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	1ad3      	subs	r3, r2, r3
 80012c0:	2b64      	cmp	r3, #100	; 0x64
 80012c2:	d901      	bls.n	80012c8 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80012c4:	2303      	movs	r3, #3
 80012c6:	e2e9      	b.n	800189c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012c8:	4b93      	ldr	r3, [pc, #588]	; (8001518 <HAL_RCC_OscConfig+0x330>)
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	2380      	movs	r3, #128	; 0x80
 80012ce:	029b      	lsls	r3, r3, #10
 80012d0:	4013      	ands	r3, r2
 80012d2:	d0f0      	beq.n	80012b6 <HAL_RCC_OscConfig+0xce>
 80012d4:	e015      	b.n	8001302 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012d6:	f7ff fcdd 	bl	8000c94 <HAL_GetTick>
 80012da:	0003      	movs	r3, r0
 80012dc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012de:	e008      	b.n	80012f2 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012e0:	f7ff fcd8 	bl	8000c94 <HAL_GetTick>
 80012e4:	0002      	movs	r2, r0
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	2b64      	cmp	r3, #100	; 0x64
 80012ec:	d901      	bls.n	80012f2 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80012ee:	2303      	movs	r3, #3
 80012f0:	e2d4      	b.n	800189c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012f2:	4b89      	ldr	r3, [pc, #548]	; (8001518 <HAL_RCC_OscConfig+0x330>)
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	2380      	movs	r3, #128	; 0x80
 80012f8:	029b      	lsls	r3, r3, #10
 80012fa:	4013      	ands	r3, r2
 80012fc:	d1f0      	bne.n	80012e0 <HAL_RCC_OscConfig+0xf8>
 80012fe:	e000      	b.n	8001302 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001300:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2202      	movs	r2, #2
 8001308:	4013      	ands	r3, r2
 800130a:	d100      	bne.n	800130e <HAL_RCC_OscConfig+0x126>
 800130c:	e099      	b.n	8001442 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800130e:	4b82      	ldr	r3, [pc, #520]	; (8001518 <HAL_RCC_OscConfig+0x330>)
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	2238      	movs	r2, #56	; 0x38
 8001314:	4013      	ands	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001318:	4b7f      	ldr	r3, [pc, #508]	; (8001518 <HAL_RCC_OscConfig+0x330>)
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	2203      	movs	r2, #3
 800131e:	4013      	ands	r3, r2
 8001320:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	2b10      	cmp	r3, #16
 8001326:	d102      	bne.n	800132e <HAL_RCC_OscConfig+0x146>
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	2b02      	cmp	r3, #2
 800132c:	d002      	beq.n	8001334 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d135      	bne.n	80013a0 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001334:	4b78      	ldr	r3, [pc, #480]	; (8001518 <HAL_RCC_OscConfig+0x330>)
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	2380      	movs	r3, #128	; 0x80
 800133a:	00db      	lsls	r3, r3, #3
 800133c:	4013      	ands	r3, r2
 800133e:	d005      	beq.n	800134c <HAL_RCC_OscConfig+0x164>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d101      	bne.n	800134c <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8001348:	2301      	movs	r3, #1
 800134a:	e2a7      	b.n	800189c <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800134c:	4b72      	ldr	r3, [pc, #456]	; (8001518 <HAL_RCC_OscConfig+0x330>)
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	4a74      	ldr	r2, [pc, #464]	; (8001524 <HAL_RCC_OscConfig+0x33c>)
 8001352:	4013      	ands	r3, r2
 8001354:	0019      	movs	r1, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	695b      	ldr	r3, [r3, #20]
 800135a:	021a      	lsls	r2, r3, #8
 800135c:	4b6e      	ldr	r3, [pc, #440]	; (8001518 <HAL_RCC_OscConfig+0x330>)
 800135e:	430a      	orrs	r2, r1
 8001360:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d112      	bne.n	800138e <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001368:	4b6b      	ldr	r3, [pc, #428]	; (8001518 <HAL_RCC_OscConfig+0x330>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a6e      	ldr	r2, [pc, #440]	; (8001528 <HAL_RCC_OscConfig+0x340>)
 800136e:	4013      	ands	r3, r2
 8001370:	0019      	movs	r1, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	691a      	ldr	r2, [r3, #16]
 8001376:	4b68      	ldr	r3, [pc, #416]	; (8001518 <HAL_RCC_OscConfig+0x330>)
 8001378:	430a      	orrs	r2, r1
 800137a:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800137c:	4b66      	ldr	r3, [pc, #408]	; (8001518 <HAL_RCC_OscConfig+0x330>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	0adb      	lsrs	r3, r3, #11
 8001382:	2207      	movs	r2, #7
 8001384:	4013      	ands	r3, r2
 8001386:	4a69      	ldr	r2, [pc, #420]	; (800152c <HAL_RCC_OscConfig+0x344>)
 8001388:	40da      	lsrs	r2, r3
 800138a:	4b69      	ldr	r3, [pc, #420]	; (8001530 <HAL_RCC_OscConfig+0x348>)
 800138c:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800138e:	4b69      	ldr	r3, [pc, #420]	; (8001534 <HAL_RCC_OscConfig+0x34c>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	0018      	movs	r0, r3
 8001394:	f7ff fc22 	bl	8000bdc <HAL_InitTick>
 8001398:	1e03      	subs	r3, r0, #0
 800139a:	d051      	beq.n	8001440 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	e27d      	b.n	800189c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d030      	beq.n	800140a <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80013a8:	4b5b      	ldr	r3, [pc, #364]	; (8001518 <HAL_RCC_OscConfig+0x330>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a5e      	ldr	r2, [pc, #376]	; (8001528 <HAL_RCC_OscConfig+0x340>)
 80013ae:	4013      	ands	r3, r2
 80013b0:	0019      	movs	r1, r3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	691a      	ldr	r2, [r3, #16]
 80013b6:	4b58      	ldr	r3, [pc, #352]	; (8001518 <HAL_RCC_OscConfig+0x330>)
 80013b8:	430a      	orrs	r2, r1
 80013ba:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80013bc:	4b56      	ldr	r3, [pc, #344]	; (8001518 <HAL_RCC_OscConfig+0x330>)
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	4b55      	ldr	r3, [pc, #340]	; (8001518 <HAL_RCC_OscConfig+0x330>)
 80013c2:	2180      	movs	r1, #128	; 0x80
 80013c4:	0049      	lsls	r1, r1, #1
 80013c6:	430a      	orrs	r2, r1
 80013c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ca:	f7ff fc63 	bl	8000c94 <HAL_GetTick>
 80013ce:	0003      	movs	r3, r0
 80013d0:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013d2:	e008      	b.n	80013e6 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013d4:	f7ff fc5e 	bl	8000c94 <HAL_GetTick>
 80013d8:	0002      	movs	r2, r0
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d901      	bls.n	80013e6 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80013e2:	2303      	movs	r3, #3
 80013e4:	e25a      	b.n	800189c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013e6:	4b4c      	ldr	r3, [pc, #304]	; (8001518 <HAL_RCC_OscConfig+0x330>)
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	2380      	movs	r3, #128	; 0x80
 80013ec:	00db      	lsls	r3, r3, #3
 80013ee:	4013      	ands	r3, r2
 80013f0:	d0f0      	beq.n	80013d4 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013f2:	4b49      	ldr	r3, [pc, #292]	; (8001518 <HAL_RCC_OscConfig+0x330>)
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	4a4b      	ldr	r2, [pc, #300]	; (8001524 <HAL_RCC_OscConfig+0x33c>)
 80013f8:	4013      	ands	r3, r2
 80013fa:	0019      	movs	r1, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	695b      	ldr	r3, [r3, #20]
 8001400:	021a      	lsls	r2, r3, #8
 8001402:	4b45      	ldr	r3, [pc, #276]	; (8001518 <HAL_RCC_OscConfig+0x330>)
 8001404:	430a      	orrs	r2, r1
 8001406:	605a      	str	r2, [r3, #4]
 8001408:	e01b      	b.n	8001442 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800140a:	4b43      	ldr	r3, [pc, #268]	; (8001518 <HAL_RCC_OscConfig+0x330>)
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	4b42      	ldr	r3, [pc, #264]	; (8001518 <HAL_RCC_OscConfig+0x330>)
 8001410:	4949      	ldr	r1, [pc, #292]	; (8001538 <HAL_RCC_OscConfig+0x350>)
 8001412:	400a      	ands	r2, r1
 8001414:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001416:	f7ff fc3d 	bl	8000c94 <HAL_GetTick>
 800141a:	0003      	movs	r3, r0
 800141c:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800141e:	e008      	b.n	8001432 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001420:	f7ff fc38 	bl	8000c94 <HAL_GetTick>
 8001424:	0002      	movs	r2, r0
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	2b02      	cmp	r3, #2
 800142c:	d901      	bls.n	8001432 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 800142e:	2303      	movs	r3, #3
 8001430:	e234      	b.n	800189c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001432:	4b39      	ldr	r3, [pc, #228]	; (8001518 <HAL_RCC_OscConfig+0x330>)
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	2380      	movs	r3, #128	; 0x80
 8001438:	00db      	lsls	r3, r3, #3
 800143a:	4013      	ands	r3, r2
 800143c:	d1f0      	bne.n	8001420 <HAL_RCC_OscConfig+0x238>
 800143e:	e000      	b.n	8001442 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001440:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2208      	movs	r2, #8
 8001448:	4013      	ands	r3, r2
 800144a:	d047      	beq.n	80014dc <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800144c:	4b32      	ldr	r3, [pc, #200]	; (8001518 <HAL_RCC_OscConfig+0x330>)
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	2238      	movs	r2, #56	; 0x38
 8001452:	4013      	ands	r3, r2
 8001454:	2b18      	cmp	r3, #24
 8001456:	d10a      	bne.n	800146e <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001458:	4b2f      	ldr	r3, [pc, #188]	; (8001518 <HAL_RCC_OscConfig+0x330>)
 800145a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800145c:	2202      	movs	r2, #2
 800145e:	4013      	ands	r3, r2
 8001460:	d03c      	beq.n	80014dc <HAL_RCC_OscConfig+0x2f4>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	699b      	ldr	r3, [r3, #24]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d138      	bne.n	80014dc <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e216      	b.n	800189c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	699b      	ldr	r3, [r3, #24]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d019      	beq.n	80014aa <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001476:	4b28      	ldr	r3, [pc, #160]	; (8001518 <HAL_RCC_OscConfig+0x330>)
 8001478:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800147a:	4b27      	ldr	r3, [pc, #156]	; (8001518 <HAL_RCC_OscConfig+0x330>)
 800147c:	2101      	movs	r1, #1
 800147e:	430a      	orrs	r2, r1
 8001480:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001482:	f7ff fc07 	bl	8000c94 <HAL_GetTick>
 8001486:	0003      	movs	r3, r0
 8001488:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800148a:	e008      	b.n	800149e <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800148c:	f7ff fc02 	bl	8000c94 <HAL_GetTick>
 8001490:	0002      	movs	r2, r0
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	2b02      	cmp	r3, #2
 8001498:	d901      	bls.n	800149e <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e1fe      	b.n	800189c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800149e:	4b1e      	ldr	r3, [pc, #120]	; (8001518 <HAL_RCC_OscConfig+0x330>)
 80014a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014a2:	2202      	movs	r2, #2
 80014a4:	4013      	ands	r3, r2
 80014a6:	d0f1      	beq.n	800148c <HAL_RCC_OscConfig+0x2a4>
 80014a8:	e018      	b.n	80014dc <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80014aa:	4b1b      	ldr	r3, [pc, #108]	; (8001518 <HAL_RCC_OscConfig+0x330>)
 80014ac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80014ae:	4b1a      	ldr	r3, [pc, #104]	; (8001518 <HAL_RCC_OscConfig+0x330>)
 80014b0:	2101      	movs	r1, #1
 80014b2:	438a      	bics	r2, r1
 80014b4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b6:	f7ff fbed 	bl	8000c94 <HAL_GetTick>
 80014ba:	0003      	movs	r3, r0
 80014bc:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014be:	e008      	b.n	80014d2 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014c0:	f7ff fbe8 	bl	8000c94 <HAL_GetTick>
 80014c4:	0002      	movs	r2, r0
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d901      	bls.n	80014d2 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	e1e4      	b.n	800189c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014d2:	4b11      	ldr	r3, [pc, #68]	; (8001518 <HAL_RCC_OscConfig+0x330>)
 80014d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014d6:	2202      	movs	r2, #2
 80014d8:	4013      	ands	r3, r2
 80014da:	d1f1      	bne.n	80014c0 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2204      	movs	r2, #4
 80014e2:	4013      	ands	r3, r2
 80014e4:	d100      	bne.n	80014e8 <HAL_RCC_OscConfig+0x300>
 80014e6:	e0c7      	b.n	8001678 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014e8:	231f      	movs	r3, #31
 80014ea:	18fb      	adds	r3, r7, r3
 80014ec:	2200      	movs	r2, #0
 80014ee:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80014f0:	4b09      	ldr	r3, [pc, #36]	; (8001518 <HAL_RCC_OscConfig+0x330>)
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	2238      	movs	r2, #56	; 0x38
 80014f6:	4013      	ands	r3, r2
 80014f8:	2b20      	cmp	r3, #32
 80014fa:	d11f      	bne.n	800153c <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80014fc:	4b06      	ldr	r3, [pc, #24]	; (8001518 <HAL_RCC_OscConfig+0x330>)
 80014fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001500:	2202      	movs	r2, #2
 8001502:	4013      	ands	r3, r2
 8001504:	d100      	bne.n	8001508 <HAL_RCC_OscConfig+0x320>
 8001506:	e0b7      	b.n	8001678 <HAL_RCC_OscConfig+0x490>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d000      	beq.n	8001512 <HAL_RCC_OscConfig+0x32a>
 8001510:	e0b2      	b.n	8001678 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e1c2      	b.n	800189c <HAL_RCC_OscConfig+0x6b4>
 8001516:	46c0      	nop			; (mov r8, r8)
 8001518:	40021000 	.word	0x40021000
 800151c:	fffeffff 	.word	0xfffeffff
 8001520:	fffbffff 	.word	0xfffbffff
 8001524:	ffff80ff 	.word	0xffff80ff
 8001528:	ffffc7ff 	.word	0xffffc7ff
 800152c:	00f42400 	.word	0x00f42400
 8001530:	20000004 	.word	0x20000004
 8001534:	20000008 	.word	0x20000008
 8001538:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800153c:	4bb5      	ldr	r3, [pc, #724]	; (8001814 <HAL_RCC_OscConfig+0x62c>)
 800153e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001540:	2380      	movs	r3, #128	; 0x80
 8001542:	055b      	lsls	r3, r3, #21
 8001544:	4013      	ands	r3, r2
 8001546:	d101      	bne.n	800154c <HAL_RCC_OscConfig+0x364>
 8001548:	2301      	movs	r3, #1
 800154a:	e000      	b.n	800154e <HAL_RCC_OscConfig+0x366>
 800154c:	2300      	movs	r3, #0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d011      	beq.n	8001576 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001552:	4bb0      	ldr	r3, [pc, #704]	; (8001814 <HAL_RCC_OscConfig+0x62c>)
 8001554:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001556:	4baf      	ldr	r3, [pc, #700]	; (8001814 <HAL_RCC_OscConfig+0x62c>)
 8001558:	2180      	movs	r1, #128	; 0x80
 800155a:	0549      	lsls	r1, r1, #21
 800155c:	430a      	orrs	r2, r1
 800155e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001560:	4bac      	ldr	r3, [pc, #688]	; (8001814 <HAL_RCC_OscConfig+0x62c>)
 8001562:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001564:	2380      	movs	r3, #128	; 0x80
 8001566:	055b      	lsls	r3, r3, #21
 8001568:	4013      	ands	r3, r2
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800156e:	231f      	movs	r3, #31
 8001570:	18fb      	adds	r3, r7, r3
 8001572:	2201      	movs	r2, #1
 8001574:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001576:	4ba8      	ldr	r3, [pc, #672]	; (8001818 <HAL_RCC_OscConfig+0x630>)
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	2380      	movs	r3, #128	; 0x80
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	4013      	ands	r3, r2
 8001580:	d11a      	bne.n	80015b8 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001582:	4ba5      	ldr	r3, [pc, #660]	; (8001818 <HAL_RCC_OscConfig+0x630>)
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	4ba4      	ldr	r3, [pc, #656]	; (8001818 <HAL_RCC_OscConfig+0x630>)
 8001588:	2180      	movs	r1, #128	; 0x80
 800158a:	0049      	lsls	r1, r1, #1
 800158c:	430a      	orrs	r2, r1
 800158e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001590:	f7ff fb80 	bl	8000c94 <HAL_GetTick>
 8001594:	0003      	movs	r3, r0
 8001596:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001598:	e008      	b.n	80015ac <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800159a:	f7ff fb7b 	bl	8000c94 <HAL_GetTick>
 800159e:	0002      	movs	r2, r0
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d901      	bls.n	80015ac <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 80015a8:	2303      	movs	r3, #3
 80015aa:	e177      	b.n	800189c <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015ac:	4b9a      	ldr	r3, [pc, #616]	; (8001818 <HAL_RCC_OscConfig+0x630>)
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	2380      	movs	r3, #128	; 0x80
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	4013      	ands	r3, r2
 80015b6:	d0f0      	beq.n	800159a <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d106      	bne.n	80015ce <HAL_RCC_OscConfig+0x3e6>
 80015c0:	4b94      	ldr	r3, [pc, #592]	; (8001814 <HAL_RCC_OscConfig+0x62c>)
 80015c2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80015c4:	4b93      	ldr	r3, [pc, #588]	; (8001814 <HAL_RCC_OscConfig+0x62c>)
 80015c6:	2101      	movs	r1, #1
 80015c8:	430a      	orrs	r2, r1
 80015ca:	65da      	str	r2, [r3, #92]	; 0x5c
 80015cc:	e01c      	b.n	8001608 <HAL_RCC_OscConfig+0x420>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	2b05      	cmp	r3, #5
 80015d4:	d10c      	bne.n	80015f0 <HAL_RCC_OscConfig+0x408>
 80015d6:	4b8f      	ldr	r3, [pc, #572]	; (8001814 <HAL_RCC_OscConfig+0x62c>)
 80015d8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80015da:	4b8e      	ldr	r3, [pc, #568]	; (8001814 <HAL_RCC_OscConfig+0x62c>)
 80015dc:	2104      	movs	r1, #4
 80015de:	430a      	orrs	r2, r1
 80015e0:	65da      	str	r2, [r3, #92]	; 0x5c
 80015e2:	4b8c      	ldr	r3, [pc, #560]	; (8001814 <HAL_RCC_OscConfig+0x62c>)
 80015e4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80015e6:	4b8b      	ldr	r3, [pc, #556]	; (8001814 <HAL_RCC_OscConfig+0x62c>)
 80015e8:	2101      	movs	r1, #1
 80015ea:	430a      	orrs	r2, r1
 80015ec:	65da      	str	r2, [r3, #92]	; 0x5c
 80015ee:	e00b      	b.n	8001608 <HAL_RCC_OscConfig+0x420>
 80015f0:	4b88      	ldr	r3, [pc, #544]	; (8001814 <HAL_RCC_OscConfig+0x62c>)
 80015f2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80015f4:	4b87      	ldr	r3, [pc, #540]	; (8001814 <HAL_RCC_OscConfig+0x62c>)
 80015f6:	2101      	movs	r1, #1
 80015f8:	438a      	bics	r2, r1
 80015fa:	65da      	str	r2, [r3, #92]	; 0x5c
 80015fc:	4b85      	ldr	r3, [pc, #532]	; (8001814 <HAL_RCC_OscConfig+0x62c>)
 80015fe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001600:	4b84      	ldr	r3, [pc, #528]	; (8001814 <HAL_RCC_OscConfig+0x62c>)
 8001602:	2104      	movs	r1, #4
 8001604:	438a      	bics	r2, r1
 8001606:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d014      	beq.n	800163a <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001610:	f7ff fb40 	bl	8000c94 <HAL_GetTick>
 8001614:	0003      	movs	r3, r0
 8001616:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001618:	e009      	b.n	800162e <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800161a:	f7ff fb3b 	bl	8000c94 <HAL_GetTick>
 800161e:	0002      	movs	r2, r0
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	4a7d      	ldr	r2, [pc, #500]	; (800181c <HAL_RCC_OscConfig+0x634>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d901      	bls.n	800162e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e136      	b.n	800189c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800162e:	4b79      	ldr	r3, [pc, #484]	; (8001814 <HAL_RCC_OscConfig+0x62c>)
 8001630:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001632:	2202      	movs	r2, #2
 8001634:	4013      	ands	r3, r2
 8001636:	d0f0      	beq.n	800161a <HAL_RCC_OscConfig+0x432>
 8001638:	e013      	b.n	8001662 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800163a:	f7ff fb2b 	bl	8000c94 <HAL_GetTick>
 800163e:	0003      	movs	r3, r0
 8001640:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001642:	e009      	b.n	8001658 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001644:	f7ff fb26 	bl	8000c94 <HAL_GetTick>
 8001648:	0002      	movs	r2, r0
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	4a73      	ldr	r2, [pc, #460]	; (800181c <HAL_RCC_OscConfig+0x634>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d901      	bls.n	8001658 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e121      	b.n	800189c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001658:	4b6e      	ldr	r3, [pc, #440]	; (8001814 <HAL_RCC_OscConfig+0x62c>)
 800165a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800165c:	2202      	movs	r2, #2
 800165e:	4013      	ands	r3, r2
 8001660:	d1f0      	bne.n	8001644 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001662:	231f      	movs	r3, #31
 8001664:	18fb      	adds	r3, r7, r3
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	2b01      	cmp	r3, #1
 800166a:	d105      	bne.n	8001678 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800166c:	4b69      	ldr	r3, [pc, #420]	; (8001814 <HAL_RCC_OscConfig+0x62c>)
 800166e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001670:	4b68      	ldr	r3, [pc, #416]	; (8001814 <HAL_RCC_OscConfig+0x62c>)
 8001672:	496b      	ldr	r1, [pc, #428]	; (8001820 <HAL_RCC_OscConfig+0x638>)
 8001674:	400a      	ands	r2, r1
 8001676:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2220      	movs	r2, #32
 800167e:	4013      	ands	r3, r2
 8001680:	d039      	beq.n	80016f6 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	69db      	ldr	r3, [r3, #28]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d01b      	beq.n	80016c2 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800168a:	4b62      	ldr	r3, [pc, #392]	; (8001814 <HAL_RCC_OscConfig+0x62c>)
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	4b61      	ldr	r3, [pc, #388]	; (8001814 <HAL_RCC_OscConfig+0x62c>)
 8001690:	2180      	movs	r1, #128	; 0x80
 8001692:	03c9      	lsls	r1, r1, #15
 8001694:	430a      	orrs	r2, r1
 8001696:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001698:	f7ff fafc 	bl	8000c94 <HAL_GetTick>
 800169c:	0003      	movs	r3, r0
 800169e:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80016a0:	e008      	b.n	80016b4 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016a2:	f7ff faf7 	bl	8000c94 <HAL_GetTick>
 80016a6:	0002      	movs	r2, r0
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d901      	bls.n	80016b4 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 80016b0:	2303      	movs	r3, #3
 80016b2:	e0f3      	b.n	800189c <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80016b4:	4b57      	ldr	r3, [pc, #348]	; (8001814 <HAL_RCC_OscConfig+0x62c>)
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	2380      	movs	r3, #128	; 0x80
 80016ba:	041b      	lsls	r3, r3, #16
 80016bc:	4013      	ands	r3, r2
 80016be:	d0f0      	beq.n	80016a2 <HAL_RCC_OscConfig+0x4ba>
 80016c0:	e019      	b.n	80016f6 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80016c2:	4b54      	ldr	r3, [pc, #336]	; (8001814 <HAL_RCC_OscConfig+0x62c>)
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	4b53      	ldr	r3, [pc, #332]	; (8001814 <HAL_RCC_OscConfig+0x62c>)
 80016c8:	4956      	ldr	r1, [pc, #344]	; (8001824 <HAL_RCC_OscConfig+0x63c>)
 80016ca:	400a      	ands	r2, r1
 80016cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ce:	f7ff fae1 	bl	8000c94 <HAL_GetTick>
 80016d2:	0003      	movs	r3, r0
 80016d4:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80016d6:	e008      	b.n	80016ea <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016d8:	f7ff fadc 	bl	8000c94 <HAL_GetTick>
 80016dc:	0002      	movs	r2, r0
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e0d8      	b.n	800189c <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80016ea:	4b4a      	ldr	r3, [pc, #296]	; (8001814 <HAL_RCC_OscConfig+0x62c>)
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	2380      	movs	r3, #128	; 0x80
 80016f0:	041b      	lsls	r3, r3, #16
 80016f2:	4013      	ands	r3, r2
 80016f4:	d1f0      	bne.n	80016d8 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6a1b      	ldr	r3, [r3, #32]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d100      	bne.n	8001700 <HAL_RCC_OscConfig+0x518>
 80016fe:	e0cc      	b.n	800189a <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001700:	4b44      	ldr	r3, [pc, #272]	; (8001814 <HAL_RCC_OscConfig+0x62c>)
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	2238      	movs	r2, #56	; 0x38
 8001706:	4013      	ands	r3, r2
 8001708:	2b10      	cmp	r3, #16
 800170a:	d100      	bne.n	800170e <HAL_RCC_OscConfig+0x526>
 800170c:	e07b      	b.n	8001806 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a1b      	ldr	r3, [r3, #32]
 8001712:	2b02      	cmp	r3, #2
 8001714:	d156      	bne.n	80017c4 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001716:	4b3f      	ldr	r3, [pc, #252]	; (8001814 <HAL_RCC_OscConfig+0x62c>)
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	4b3e      	ldr	r3, [pc, #248]	; (8001814 <HAL_RCC_OscConfig+0x62c>)
 800171c:	4942      	ldr	r1, [pc, #264]	; (8001828 <HAL_RCC_OscConfig+0x640>)
 800171e:	400a      	ands	r2, r1
 8001720:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001722:	f7ff fab7 	bl	8000c94 <HAL_GetTick>
 8001726:	0003      	movs	r3, r0
 8001728:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800172a:	e008      	b.n	800173e <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800172c:	f7ff fab2 	bl	8000c94 <HAL_GetTick>
 8001730:	0002      	movs	r2, r0
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	2b02      	cmp	r3, #2
 8001738:	d901      	bls.n	800173e <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e0ae      	b.n	800189c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800173e:	4b35      	ldr	r3, [pc, #212]	; (8001814 <HAL_RCC_OscConfig+0x62c>)
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	2380      	movs	r3, #128	; 0x80
 8001744:	049b      	lsls	r3, r3, #18
 8001746:	4013      	ands	r3, r2
 8001748:	d1f0      	bne.n	800172c <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800174a:	4b32      	ldr	r3, [pc, #200]	; (8001814 <HAL_RCC_OscConfig+0x62c>)
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	4a37      	ldr	r2, [pc, #220]	; (800182c <HAL_RCC_OscConfig+0x644>)
 8001750:	4013      	ands	r3, r2
 8001752:	0019      	movs	r1, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800175c:	431a      	orrs	r2, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001762:	021b      	lsls	r3, r3, #8
 8001764:	431a      	orrs	r2, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	431a      	orrs	r2, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001770:	431a      	orrs	r2, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001776:	431a      	orrs	r2, r3
 8001778:	4b26      	ldr	r3, [pc, #152]	; (8001814 <HAL_RCC_OscConfig+0x62c>)
 800177a:	430a      	orrs	r2, r1
 800177c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800177e:	4b25      	ldr	r3, [pc, #148]	; (8001814 <HAL_RCC_OscConfig+0x62c>)
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	4b24      	ldr	r3, [pc, #144]	; (8001814 <HAL_RCC_OscConfig+0x62c>)
 8001784:	2180      	movs	r1, #128	; 0x80
 8001786:	0449      	lsls	r1, r1, #17
 8001788:	430a      	orrs	r2, r1
 800178a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800178c:	4b21      	ldr	r3, [pc, #132]	; (8001814 <HAL_RCC_OscConfig+0x62c>)
 800178e:	68da      	ldr	r2, [r3, #12]
 8001790:	4b20      	ldr	r3, [pc, #128]	; (8001814 <HAL_RCC_OscConfig+0x62c>)
 8001792:	2180      	movs	r1, #128	; 0x80
 8001794:	0549      	lsls	r1, r1, #21
 8001796:	430a      	orrs	r2, r1
 8001798:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800179a:	f7ff fa7b 	bl	8000c94 <HAL_GetTick>
 800179e:	0003      	movs	r3, r0
 80017a0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017a2:	e008      	b.n	80017b6 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017a4:	f7ff fa76 	bl	8000c94 <HAL_GetTick>
 80017a8:	0002      	movs	r2, r0
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e072      	b.n	800189c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017b6:	4b17      	ldr	r3, [pc, #92]	; (8001814 <HAL_RCC_OscConfig+0x62c>)
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	2380      	movs	r3, #128	; 0x80
 80017bc:	049b      	lsls	r3, r3, #18
 80017be:	4013      	ands	r3, r2
 80017c0:	d0f0      	beq.n	80017a4 <HAL_RCC_OscConfig+0x5bc>
 80017c2:	e06a      	b.n	800189a <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017c4:	4b13      	ldr	r3, [pc, #76]	; (8001814 <HAL_RCC_OscConfig+0x62c>)
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	4b12      	ldr	r3, [pc, #72]	; (8001814 <HAL_RCC_OscConfig+0x62c>)
 80017ca:	4917      	ldr	r1, [pc, #92]	; (8001828 <HAL_RCC_OscConfig+0x640>)
 80017cc:	400a      	ands	r2, r1
 80017ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d0:	f7ff fa60 	bl	8000c94 <HAL_GetTick>
 80017d4:	0003      	movs	r3, r0
 80017d6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017d8:	e008      	b.n	80017ec <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017da:	f7ff fa5b 	bl	8000c94 <HAL_GetTick>
 80017de:	0002      	movs	r2, r0
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d901      	bls.n	80017ec <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	e057      	b.n	800189c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017ec:	4b09      	ldr	r3, [pc, #36]	; (8001814 <HAL_RCC_OscConfig+0x62c>)
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	2380      	movs	r3, #128	; 0x80
 80017f2:	049b      	lsls	r3, r3, #18
 80017f4:	4013      	ands	r3, r2
 80017f6:	d1f0      	bne.n	80017da <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80017f8:	4b06      	ldr	r3, [pc, #24]	; (8001814 <HAL_RCC_OscConfig+0x62c>)
 80017fa:	68da      	ldr	r2, [r3, #12]
 80017fc:	4b05      	ldr	r3, [pc, #20]	; (8001814 <HAL_RCC_OscConfig+0x62c>)
 80017fe:	490c      	ldr	r1, [pc, #48]	; (8001830 <HAL_RCC_OscConfig+0x648>)
 8001800:	400a      	ands	r2, r1
 8001802:	60da      	str	r2, [r3, #12]
 8001804:	e049      	b.n	800189a <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6a1b      	ldr	r3, [r3, #32]
 800180a:	2b01      	cmp	r3, #1
 800180c:	d112      	bne.n	8001834 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e044      	b.n	800189c <HAL_RCC_OscConfig+0x6b4>
 8001812:	46c0      	nop			; (mov r8, r8)
 8001814:	40021000 	.word	0x40021000
 8001818:	40007000 	.word	0x40007000
 800181c:	00001388 	.word	0x00001388
 8001820:	efffffff 	.word	0xefffffff
 8001824:	ffbfffff 	.word	0xffbfffff
 8001828:	feffffff 	.word	0xfeffffff
 800182c:	11c1808c 	.word	0x11c1808c
 8001830:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001834:	4b1b      	ldr	r3, [pc, #108]	; (80018a4 <HAL_RCC_OscConfig+0x6bc>)
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	2203      	movs	r2, #3
 800183e:	401a      	ands	r2, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001844:	429a      	cmp	r2, r3
 8001846:	d126      	bne.n	8001896 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	2270      	movs	r2, #112	; 0x70
 800184c:	401a      	ands	r2, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001852:	429a      	cmp	r2, r3
 8001854:	d11f      	bne.n	8001896 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001856:	697a      	ldr	r2, [r7, #20]
 8001858:	23fe      	movs	r3, #254	; 0xfe
 800185a:	01db      	lsls	r3, r3, #7
 800185c:	401a      	ands	r2, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001862:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001864:	429a      	cmp	r2, r3
 8001866:	d116      	bne.n	8001896 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001868:	697a      	ldr	r2, [r7, #20]
 800186a:	23f8      	movs	r3, #248	; 0xf8
 800186c:	039b      	lsls	r3, r3, #14
 800186e:	401a      	ands	r2, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001874:	429a      	cmp	r2, r3
 8001876:	d10e      	bne.n	8001896 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001878:	697a      	ldr	r2, [r7, #20]
 800187a:	23e0      	movs	r3, #224	; 0xe0
 800187c:	051b      	lsls	r3, r3, #20
 800187e:	401a      	ands	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001884:	429a      	cmp	r2, r3
 8001886:	d106      	bne.n	8001896 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	0f5b      	lsrs	r3, r3, #29
 800188c:	075a      	lsls	r2, r3, #29
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001892:	429a      	cmp	r2, r3
 8001894:	d001      	beq.n	800189a <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e000      	b.n	800189c <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 800189a:	2300      	movs	r3, #0
}
 800189c:	0018      	movs	r0, r3
 800189e:	46bd      	mov	sp, r7
 80018a0:	b008      	add	sp, #32
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	40021000 	.word	0x40021000

080018a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d101      	bne.n	80018bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e0e9      	b.n	8001a90 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018bc:	4b76      	ldr	r3, [pc, #472]	; (8001a98 <HAL_RCC_ClockConfig+0x1f0>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2207      	movs	r2, #7
 80018c2:	4013      	ands	r3, r2
 80018c4:	683a      	ldr	r2, [r7, #0]
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d91e      	bls.n	8001908 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ca:	4b73      	ldr	r3, [pc, #460]	; (8001a98 <HAL_RCC_ClockConfig+0x1f0>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2207      	movs	r2, #7
 80018d0:	4393      	bics	r3, r2
 80018d2:	0019      	movs	r1, r3
 80018d4:	4b70      	ldr	r3, [pc, #448]	; (8001a98 <HAL_RCC_ClockConfig+0x1f0>)
 80018d6:	683a      	ldr	r2, [r7, #0]
 80018d8:	430a      	orrs	r2, r1
 80018da:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80018dc:	f7ff f9da 	bl	8000c94 <HAL_GetTick>
 80018e0:	0003      	movs	r3, r0
 80018e2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80018e4:	e009      	b.n	80018fa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018e6:	f7ff f9d5 	bl	8000c94 <HAL_GetTick>
 80018ea:	0002      	movs	r2, r0
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	4a6a      	ldr	r2, [pc, #424]	; (8001a9c <HAL_RCC_ClockConfig+0x1f4>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e0ca      	b.n	8001a90 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80018fa:	4b67      	ldr	r3, [pc, #412]	; (8001a98 <HAL_RCC_ClockConfig+0x1f0>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2207      	movs	r2, #7
 8001900:	4013      	ands	r3, r2
 8001902:	683a      	ldr	r2, [r7, #0]
 8001904:	429a      	cmp	r2, r3
 8001906:	d1ee      	bne.n	80018e6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	2202      	movs	r2, #2
 800190e:	4013      	ands	r3, r2
 8001910:	d015      	beq.n	800193e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	2204      	movs	r2, #4
 8001918:	4013      	ands	r3, r2
 800191a:	d006      	beq.n	800192a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800191c:	4b60      	ldr	r3, [pc, #384]	; (8001aa0 <HAL_RCC_ClockConfig+0x1f8>)
 800191e:	689a      	ldr	r2, [r3, #8]
 8001920:	4b5f      	ldr	r3, [pc, #380]	; (8001aa0 <HAL_RCC_ClockConfig+0x1f8>)
 8001922:	21e0      	movs	r1, #224	; 0xe0
 8001924:	01c9      	lsls	r1, r1, #7
 8001926:	430a      	orrs	r2, r1
 8001928:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800192a:	4b5d      	ldr	r3, [pc, #372]	; (8001aa0 <HAL_RCC_ClockConfig+0x1f8>)
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	4a5d      	ldr	r2, [pc, #372]	; (8001aa4 <HAL_RCC_ClockConfig+0x1fc>)
 8001930:	4013      	ands	r3, r2
 8001932:	0019      	movs	r1, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	689a      	ldr	r2, [r3, #8]
 8001938:	4b59      	ldr	r3, [pc, #356]	; (8001aa0 <HAL_RCC_ClockConfig+0x1f8>)
 800193a:	430a      	orrs	r2, r1
 800193c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2201      	movs	r2, #1
 8001944:	4013      	ands	r3, r2
 8001946:	d057      	beq.n	80019f8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d107      	bne.n	8001960 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001950:	4b53      	ldr	r3, [pc, #332]	; (8001aa0 <HAL_RCC_ClockConfig+0x1f8>)
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	2380      	movs	r3, #128	; 0x80
 8001956:	029b      	lsls	r3, r3, #10
 8001958:	4013      	ands	r3, r2
 800195a:	d12b      	bne.n	80019b4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e097      	b.n	8001a90 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	2b02      	cmp	r3, #2
 8001966:	d107      	bne.n	8001978 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001968:	4b4d      	ldr	r3, [pc, #308]	; (8001aa0 <HAL_RCC_ClockConfig+0x1f8>)
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	2380      	movs	r3, #128	; 0x80
 800196e:	049b      	lsls	r3, r3, #18
 8001970:	4013      	ands	r3, r2
 8001972:	d11f      	bne.n	80019b4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e08b      	b.n	8001a90 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d107      	bne.n	8001990 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001980:	4b47      	ldr	r3, [pc, #284]	; (8001aa0 <HAL_RCC_ClockConfig+0x1f8>)
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	2380      	movs	r3, #128	; 0x80
 8001986:	00db      	lsls	r3, r3, #3
 8001988:	4013      	ands	r3, r2
 800198a:	d113      	bne.n	80019b4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e07f      	b.n	8001a90 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	2b03      	cmp	r3, #3
 8001996:	d106      	bne.n	80019a6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001998:	4b41      	ldr	r3, [pc, #260]	; (8001aa0 <HAL_RCC_ClockConfig+0x1f8>)
 800199a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800199c:	2202      	movs	r2, #2
 800199e:	4013      	ands	r3, r2
 80019a0:	d108      	bne.n	80019b4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e074      	b.n	8001a90 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019a6:	4b3e      	ldr	r3, [pc, #248]	; (8001aa0 <HAL_RCC_ClockConfig+0x1f8>)
 80019a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019aa:	2202      	movs	r2, #2
 80019ac:	4013      	ands	r3, r2
 80019ae:	d101      	bne.n	80019b4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e06d      	b.n	8001a90 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80019b4:	4b3a      	ldr	r3, [pc, #232]	; (8001aa0 <HAL_RCC_ClockConfig+0x1f8>)
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	2207      	movs	r2, #7
 80019ba:	4393      	bics	r3, r2
 80019bc:	0019      	movs	r1, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685a      	ldr	r2, [r3, #4]
 80019c2:	4b37      	ldr	r3, [pc, #220]	; (8001aa0 <HAL_RCC_ClockConfig+0x1f8>)
 80019c4:	430a      	orrs	r2, r1
 80019c6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019c8:	f7ff f964 	bl	8000c94 <HAL_GetTick>
 80019cc:	0003      	movs	r3, r0
 80019ce:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019d0:	e009      	b.n	80019e6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019d2:	f7ff f95f 	bl	8000c94 <HAL_GetTick>
 80019d6:	0002      	movs	r2, r0
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	4a2f      	ldr	r2, [pc, #188]	; (8001a9c <HAL_RCC_ClockConfig+0x1f4>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e054      	b.n	8001a90 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019e6:	4b2e      	ldr	r3, [pc, #184]	; (8001aa0 <HAL_RCC_ClockConfig+0x1f8>)
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	2238      	movs	r2, #56	; 0x38
 80019ec:	401a      	ands	r2, r3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	00db      	lsls	r3, r3, #3
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d1ec      	bne.n	80019d2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019f8:	4b27      	ldr	r3, [pc, #156]	; (8001a98 <HAL_RCC_ClockConfig+0x1f0>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2207      	movs	r2, #7
 80019fe:	4013      	ands	r3, r2
 8001a00:	683a      	ldr	r2, [r7, #0]
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d21e      	bcs.n	8001a44 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a06:	4b24      	ldr	r3, [pc, #144]	; (8001a98 <HAL_RCC_ClockConfig+0x1f0>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2207      	movs	r2, #7
 8001a0c:	4393      	bics	r3, r2
 8001a0e:	0019      	movs	r1, r3
 8001a10:	4b21      	ldr	r3, [pc, #132]	; (8001a98 <HAL_RCC_ClockConfig+0x1f0>)
 8001a12:	683a      	ldr	r2, [r7, #0]
 8001a14:	430a      	orrs	r2, r1
 8001a16:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a18:	f7ff f93c 	bl	8000c94 <HAL_GetTick>
 8001a1c:	0003      	movs	r3, r0
 8001a1e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a20:	e009      	b.n	8001a36 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a22:	f7ff f937 	bl	8000c94 <HAL_GetTick>
 8001a26:	0002      	movs	r2, r0
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	4a1b      	ldr	r2, [pc, #108]	; (8001a9c <HAL_RCC_ClockConfig+0x1f4>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e02c      	b.n	8001a90 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a36:	4b18      	ldr	r3, [pc, #96]	; (8001a98 <HAL_RCC_ClockConfig+0x1f0>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2207      	movs	r2, #7
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	683a      	ldr	r2, [r7, #0]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d1ee      	bne.n	8001a22 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2204      	movs	r2, #4
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	d009      	beq.n	8001a62 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001a4e:	4b14      	ldr	r3, [pc, #80]	; (8001aa0 <HAL_RCC_ClockConfig+0x1f8>)
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	4a15      	ldr	r2, [pc, #84]	; (8001aa8 <HAL_RCC_ClockConfig+0x200>)
 8001a54:	4013      	ands	r3, r2
 8001a56:	0019      	movs	r1, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	68da      	ldr	r2, [r3, #12]
 8001a5c:	4b10      	ldr	r3, [pc, #64]	; (8001aa0 <HAL_RCC_ClockConfig+0x1f8>)
 8001a5e:	430a      	orrs	r2, r1
 8001a60:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001a62:	f000 f829 	bl	8001ab8 <HAL_RCC_GetSysClockFreq>
 8001a66:	0001      	movs	r1, r0
 8001a68:	4b0d      	ldr	r3, [pc, #52]	; (8001aa0 <HAL_RCC_ClockConfig+0x1f8>)
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	0a1b      	lsrs	r3, r3, #8
 8001a6e:	220f      	movs	r2, #15
 8001a70:	401a      	ands	r2, r3
 8001a72:	4b0e      	ldr	r3, [pc, #56]	; (8001aac <HAL_RCC_ClockConfig+0x204>)
 8001a74:	0092      	lsls	r2, r2, #2
 8001a76:	58d3      	ldr	r3, [r2, r3]
 8001a78:	221f      	movs	r2, #31
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	000a      	movs	r2, r1
 8001a7e:	40da      	lsrs	r2, r3
 8001a80:	4b0b      	ldr	r3, [pc, #44]	; (8001ab0 <HAL_RCC_ClockConfig+0x208>)
 8001a82:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001a84:	4b0b      	ldr	r3, [pc, #44]	; (8001ab4 <HAL_RCC_ClockConfig+0x20c>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	0018      	movs	r0, r3
 8001a8a:	f7ff f8a7 	bl	8000bdc <HAL_InitTick>
 8001a8e:	0003      	movs	r3, r0
}
 8001a90:	0018      	movs	r0, r3
 8001a92:	46bd      	mov	sp, r7
 8001a94:	b004      	add	sp, #16
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	40022000 	.word	0x40022000
 8001a9c:	00001388 	.word	0x00001388
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	fffff0ff 	.word	0xfffff0ff
 8001aa8:	ffff8fff 	.word	0xffff8fff
 8001aac:	08003080 	.word	0x08003080
 8001ab0:	20000004 	.word	0x20000004
 8001ab4:	20000008 	.word	0x20000008

08001ab8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b086      	sub	sp, #24
 8001abc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001abe:	4b3c      	ldr	r3, [pc, #240]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	2238      	movs	r2, #56	; 0x38
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	d10f      	bne.n	8001ae8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001ac8:	4b39      	ldr	r3, [pc, #228]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	0adb      	lsrs	r3, r3, #11
 8001ace:	2207      	movs	r2, #7
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	409a      	lsls	r2, r3
 8001ad6:	0013      	movs	r3, r2
 8001ad8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001ada:	6839      	ldr	r1, [r7, #0]
 8001adc:	4835      	ldr	r0, [pc, #212]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001ade:	f7fe fb19 	bl	8000114 <__udivsi3>
 8001ae2:	0003      	movs	r3, r0
 8001ae4:	613b      	str	r3, [r7, #16]
 8001ae6:	e05d      	b.n	8001ba4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ae8:	4b31      	ldr	r3, [pc, #196]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	2238      	movs	r2, #56	; 0x38
 8001aee:	4013      	ands	r3, r2
 8001af0:	2b08      	cmp	r3, #8
 8001af2:	d102      	bne.n	8001afa <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001af4:	4b30      	ldr	r3, [pc, #192]	; (8001bb8 <HAL_RCC_GetSysClockFreq+0x100>)
 8001af6:	613b      	str	r3, [r7, #16]
 8001af8:	e054      	b.n	8001ba4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001afa:	4b2d      	ldr	r3, [pc, #180]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	2238      	movs	r2, #56	; 0x38
 8001b00:	4013      	ands	r3, r2
 8001b02:	2b10      	cmp	r3, #16
 8001b04:	d138      	bne.n	8001b78 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001b06:	4b2a      	ldr	r3, [pc, #168]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	2203      	movs	r2, #3
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b10:	4b27      	ldr	r3, [pc, #156]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	091b      	lsrs	r3, r3, #4
 8001b16:	2207      	movs	r2, #7
 8001b18:	4013      	ands	r3, r2
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2b03      	cmp	r3, #3
 8001b22:	d10d      	bne.n	8001b40 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b24:	68b9      	ldr	r1, [r7, #8]
 8001b26:	4824      	ldr	r0, [pc, #144]	; (8001bb8 <HAL_RCC_GetSysClockFreq+0x100>)
 8001b28:	f7fe faf4 	bl	8000114 <__udivsi3>
 8001b2c:	0003      	movs	r3, r0
 8001b2e:	0019      	movs	r1, r3
 8001b30:	4b1f      	ldr	r3, [pc, #124]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	0a1b      	lsrs	r3, r3, #8
 8001b36:	227f      	movs	r2, #127	; 0x7f
 8001b38:	4013      	ands	r3, r2
 8001b3a:	434b      	muls	r3, r1
 8001b3c:	617b      	str	r3, [r7, #20]
        break;
 8001b3e:	e00d      	b.n	8001b5c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001b40:	68b9      	ldr	r1, [r7, #8]
 8001b42:	481c      	ldr	r0, [pc, #112]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001b44:	f7fe fae6 	bl	8000114 <__udivsi3>
 8001b48:	0003      	movs	r3, r0
 8001b4a:	0019      	movs	r1, r3
 8001b4c:	4b18      	ldr	r3, [pc, #96]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	0a1b      	lsrs	r3, r3, #8
 8001b52:	227f      	movs	r2, #127	; 0x7f
 8001b54:	4013      	ands	r3, r2
 8001b56:	434b      	muls	r3, r1
 8001b58:	617b      	str	r3, [r7, #20]
        break;
 8001b5a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001b5c:	4b14      	ldr	r3, [pc, #80]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	0f5b      	lsrs	r3, r3, #29
 8001b62:	2207      	movs	r2, #7
 8001b64:	4013      	ands	r3, r2
 8001b66:	3301      	adds	r3, #1
 8001b68:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001b6a:	6879      	ldr	r1, [r7, #4]
 8001b6c:	6978      	ldr	r0, [r7, #20]
 8001b6e:	f7fe fad1 	bl	8000114 <__udivsi3>
 8001b72:	0003      	movs	r3, r0
 8001b74:	613b      	str	r3, [r7, #16]
 8001b76:	e015      	b.n	8001ba4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001b78:	4b0d      	ldr	r3, [pc, #52]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	2238      	movs	r2, #56	; 0x38
 8001b7e:	4013      	ands	r3, r2
 8001b80:	2b20      	cmp	r3, #32
 8001b82:	d103      	bne.n	8001b8c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001b84:	2380      	movs	r3, #128	; 0x80
 8001b86:	021b      	lsls	r3, r3, #8
 8001b88:	613b      	str	r3, [r7, #16]
 8001b8a:	e00b      	b.n	8001ba4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001b8c:	4b08      	ldr	r3, [pc, #32]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	2238      	movs	r2, #56	; 0x38
 8001b92:	4013      	ands	r3, r2
 8001b94:	2b18      	cmp	r3, #24
 8001b96:	d103      	bne.n	8001ba0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001b98:	23fa      	movs	r3, #250	; 0xfa
 8001b9a:	01db      	lsls	r3, r3, #7
 8001b9c:	613b      	str	r3, [r7, #16]
 8001b9e:	e001      	b.n	8001ba4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001ba4:	693b      	ldr	r3, [r7, #16]
}
 8001ba6:	0018      	movs	r0, r3
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	b006      	add	sp, #24
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	46c0      	nop			; (mov r8, r8)
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	00f42400 	.word	0x00f42400
 8001bb8:	007a1200 	.word	0x007a1200

08001bbc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bc0:	4b02      	ldr	r3, [pc, #8]	; (8001bcc <HAL_RCC_GetHCLKFreq+0x10>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
}
 8001bc4:	0018      	movs	r0, r3
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	46c0      	nop			; (mov r8, r8)
 8001bcc:	20000004 	.word	0x20000004

08001bd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bd0:	b5b0      	push	{r4, r5, r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001bd4:	f7ff fff2 	bl	8001bbc <HAL_RCC_GetHCLKFreq>
 8001bd8:	0004      	movs	r4, r0
 8001bda:	f7ff faf9 	bl	80011d0 <LL_RCC_GetAPB1Prescaler>
 8001bde:	0003      	movs	r3, r0
 8001be0:	0b1a      	lsrs	r2, r3, #12
 8001be2:	4b05      	ldr	r3, [pc, #20]	; (8001bf8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001be4:	0092      	lsls	r2, r2, #2
 8001be6:	58d3      	ldr	r3, [r2, r3]
 8001be8:	221f      	movs	r2, #31
 8001bea:	4013      	ands	r3, r2
 8001bec:	40dc      	lsrs	r4, r3
 8001bee:	0023      	movs	r3, r4
}
 8001bf0:	0018      	movs	r0, r3
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bdb0      	pop	{r4, r5, r7, pc}
 8001bf6:	46c0      	nop			; (mov r8, r8)
 8001bf8:	080030c0 	.word	0x080030c0

08001bfc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b086      	sub	sp, #24
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001c04:	2313      	movs	r3, #19
 8001c06:	18fb      	adds	r3, r7, r3
 8001c08:	2200      	movs	r2, #0
 8001c0a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001c0c:	2312      	movs	r3, #18
 8001c0e:	18fb      	adds	r3, r7, r3
 8001c10:	2200      	movs	r2, #0
 8001c12:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	2380      	movs	r3, #128	; 0x80
 8001c1a:	029b      	lsls	r3, r3, #10
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	d100      	bne.n	8001c22 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001c20:	e0ad      	b.n	8001d7e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c22:	2011      	movs	r0, #17
 8001c24:	183b      	adds	r3, r7, r0
 8001c26:	2200      	movs	r2, #0
 8001c28:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c2a:	4b47      	ldr	r3, [pc, #284]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001c2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c2e:	2380      	movs	r3, #128	; 0x80
 8001c30:	055b      	lsls	r3, r3, #21
 8001c32:	4013      	ands	r3, r2
 8001c34:	d110      	bne.n	8001c58 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c36:	4b44      	ldr	r3, [pc, #272]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001c38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c3a:	4b43      	ldr	r3, [pc, #268]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001c3c:	2180      	movs	r1, #128	; 0x80
 8001c3e:	0549      	lsls	r1, r1, #21
 8001c40:	430a      	orrs	r2, r1
 8001c42:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c44:	4b40      	ldr	r3, [pc, #256]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001c46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c48:	2380      	movs	r3, #128	; 0x80
 8001c4a:	055b      	lsls	r3, r3, #21
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	60bb      	str	r3, [r7, #8]
 8001c50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c52:	183b      	adds	r3, r7, r0
 8001c54:	2201      	movs	r2, #1
 8001c56:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c58:	4b3c      	ldr	r3, [pc, #240]	; (8001d4c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	4b3b      	ldr	r3, [pc, #236]	; (8001d4c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001c5e:	2180      	movs	r1, #128	; 0x80
 8001c60:	0049      	lsls	r1, r1, #1
 8001c62:	430a      	orrs	r2, r1
 8001c64:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001c66:	f7ff f815 	bl	8000c94 <HAL_GetTick>
 8001c6a:	0003      	movs	r3, r0
 8001c6c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c6e:	e00b      	b.n	8001c88 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c70:	f7ff f810 	bl	8000c94 <HAL_GetTick>
 8001c74:	0002      	movs	r2, r0
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d904      	bls.n	8001c88 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001c7e:	2313      	movs	r3, #19
 8001c80:	18fb      	adds	r3, r7, r3
 8001c82:	2203      	movs	r2, #3
 8001c84:	701a      	strb	r2, [r3, #0]
        break;
 8001c86:	e005      	b.n	8001c94 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c88:	4b30      	ldr	r3, [pc, #192]	; (8001d4c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	2380      	movs	r3, #128	; 0x80
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	4013      	ands	r3, r2
 8001c92:	d0ed      	beq.n	8001c70 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001c94:	2313      	movs	r3, #19
 8001c96:	18fb      	adds	r3, r7, r3
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d15e      	bne.n	8001d5c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001c9e:	4b2a      	ldr	r3, [pc, #168]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001ca0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ca2:	23c0      	movs	r3, #192	; 0xc0
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d019      	beq.n	8001ce4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb4:	697a      	ldr	r2, [r7, #20]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d014      	beq.n	8001ce4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001cba:	4b23      	ldr	r3, [pc, #140]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001cbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cbe:	4a24      	ldr	r2, [pc, #144]	; (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001cc4:	4b20      	ldr	r3, [pc, #128]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001cc6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001cc8:	4b1f      	ldr	r3, [pc, #124]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001cca:	2180      	movs	r1, #128	; 0x80
 8001ccc:	0249      	lsls	r1, r1, #9
 8001cce:	430a      	orrs	r2, r1
 8001cd0:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001cd2:	4b1d      	ldr	r3, [pc, #116]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001cd4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001cd6:	4b1c      	ldr	r3, [pc, #112]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001cd8:	491e      	ldr	r1, [pc, #120]	; (8001d54 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8001cda:	400a      	ands	r2, r1
 8001cdc:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001cde:	4b1a      	ldr	r3, [pc, #104]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001ce0:	697a      	ldr	r2, [r7, #20]
 8001ce2:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	4013      	ands	r3, r2
 8001cea:	d016      	beq.n	8001d1a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cec:	f7fe ffd2 	bl	8000c94 <HAL_GetTick>
 8001cf0:	0003      	movs	r3, r0
 8001cf2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cf4:	e00c      	b.n	8001d10 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cf6:	f7fe ffcd 	bl	8000c94 <HAL_GetTick>
 8001cfa:	0002      	movs	r2, r0
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	4a15      	ldr	r2, [pc, #84]	; (8001d58 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d904      	bls.n	8001d10 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001d06:	2313      	movs	r3, #19
 8001d08:	18fb      	adds	r3, r7, r3
 8001d0a:	2203      	movs	r2, #3
 8001d0c:	701a      	strb	r2, [r3, #0]
            break;
 8001d0e:	e004      	b.n	8001d1a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d10:	4b0d      	ldr	r3, [pc, #52]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d14:	2202      	movs	r2, #2
 8001d16:	4013      	ands	r3, r2
 8001d18:	d0ed      	beq.n	8001cf6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001d1a:	2313      	movs	r3, #19
 8001d1c:	18fb      	adds	r3, r7, r3
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d10a      	bne.n	8001d3a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d24:	4b08      	ldr	r3, [pc, #32]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d28:	4a09      	ldr	r2, [pc, #36]	; (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	0019      	movs	r1, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d32:	4b05      	ldr	r3, [pc, #20]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d34:	430a      	orrs	r2, r1
 8001d36:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d38:	e016      	b.n	8001d68 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001d3a:	2312      	movs	r3, #18
 8001d3c:	18fb      	adds	r3, r7, r3
 8001d3e:	2213      	movs	r2, #19
 8001d40:	18ba      	adds	r2, r7, r2
 8001d42:	7812      	ldrb	r2, [r2, #0]
 8001d44:	701a      	strb	r2, [r3, #0]
 8001d46:	e00f      	b.n	8001d68 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	40007000 	.word	0x40007000
 8001d50:	fffffcff 	.word	0xfffffcff
 8001d54:	fffeffff 	.word	0xfffeffff
 8001d58:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001d5c:	2312      	movs	r3, #18
 8001d5e:	18fb      	adds	r3, r7, r3
 8001d60:	2213      	movs	r2, #19
 8001d62:	18ba      	adds	r2, r7, r2
 8001d64:	7812      	ldrb	r2, [r2, #0]
 8001d66:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d68:	2311      	movs	r3, #17
 8001d6a:	18fb      	adds	r3, r7, r3
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d105      	bne.n	8001d7e <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d72:	4bb6      	ldr	r3, [pc, #728]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d76:	4bb5      	ldr	r3, [pc, #724]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d78:	49b5      	ldr	r1, [pc, #724]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001d7a:	400a      	ands	r2, r1
 8001d7c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	2201      	movs	r2, #1
 8001d84:	4013      	ands	r3, r2
 8001d86:	d009      	beq.n	8001d9c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001d88:	4bb0      	ldr	r3, [pc, #704]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d8c:	2203      	movs	r2, #3
 8001d8e:	4393      	bics	r3, r2
 8001d90:	0019      	movs	r1, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685a      	ldr	r2, [r3, #4]
 8001d96:	4bad      	ldr	r3, [pc, #692]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d98:	430a      	orrs	r2, r1
 8001d9a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2202      	movs	r2, #2
 8001da2:	4013      	ands	r3, r2
 8001da4:	d009      	beq.n	8001dba <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001da6:	4ba9      	ldr	r3, [pc, #676]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001daa:	220c      	movs	r2, #12
 8001dac:	4393      	bics	r3, r2
 8001dae:	0019      	movs	r1, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	689a      	ldr	r2, [r3, #8]
 8001db4:	4ba5      	ldr	r3, [pc, #660]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001db6:	430a      	orrs	r2, r1
 8001db8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	2204      	movs	r2, #4
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	d009      	beq.n	8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001dc4:	4ba1      	ldr	r3, [pc, #644]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dc8:	2230      	movs	r2, #48	; 0x30
 8001dca:	4393      	bics	r3, r2
 8001dcc:	0019      	movs	r1, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	68da      	ldr	r2, [r3, #12]
 8001dd2:	4b9e      	ldr	r3, [pc, #632]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001dd4:	430a      	orrs	r2, r1
 8001dd6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2210      	movs	r2, #16
 8001dde:	4013      	ands	r3, r2
 8001de0:	d009      	beq.n	8001df6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001de2:	4b9a      	ldr	r3, [pc, #616]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001de6:	4a9b      	ldr	r2, [pc, #620]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8001de8:	4013      	ands	r3, r2
 8001dea:	0019      	movs	r1, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	691a      	ldr	r2, [r3, #16]
 8001df0:	4b96      	ldr	r3, [pc, #600]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001df2:	430a      	orrs	r2, r1
 8001df4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	2380      	movs	r3, #128	; 0x80
 8001dfc:	015b      	lsls	r3, r3, #5
 8001dfe:	4013      	ands	r3, r2
 8001e00:	d009      	beq.n	8001e16 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8001e02:	4b92      	ldr	r3, [pc, #584]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e06:	4a94      	ldr	r2, [pc, #592]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001e08:	4013      	ands	r3, r2
 8001e0a:	0019      	movs	r1, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	695a      	ldr	r2, [r3, #20]
 8001e10:	4b8e      	ldr	r3, [pc, #568]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e12:	430a      	orrs	r2, r1
 8001e14:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	2380      	movs	r3, #128	; 0x80
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	4013      	ands	r3, r2
 8001e20:	d009      	beq.n	8001e36 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001e22:	4b8a      	ldr	r3, [pc, #552]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e26:	4a8d      	ldr	r2, [pc, #564]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8001e28:	4013      	ands	r3, r2
 8001e2a:	0019      	movs	r1, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e30:	4b86      	ldr	r3, [pc, #536]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e32:	430a      	orrs	r2, r1
 8001e34:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	2380      	movs	r3, #128	; 0x80
 8001e3c:	00db      	lsls	r3, r3, #3
 8001e3e:	4013      	ands	r3, r2
 8001e40:	d009      	beq.n	8001e56 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001e42:	4b82      	ldr	r3, [pc, #520]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e46:	4a86      	ldr	r2, [pc, #536]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8001e48:	4013      	ands	r3, r2
 8001e4a:	0019      	movs	r1, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e50:	4b7e      	ldr	r3, [pc, #504]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e52:	430a      	orrs	r2, r1
 8001e54:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2220      	movs	r2, #32
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	d009      	beq.n	8001e74 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e60:	4b7a      	ldr	r3, [pc, #488]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e64:	4a7f      	ldr	r2, [pc, #508]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8001e66:	4013      	ands	r3, r2
 8001e68:	0019      	movs	r1, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	699a      	ldr	r2, [r3, #24]
 8001e6e:	4b77      	ldr	r3, [pc, #476]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e70:	430a      	orrs	r2, r1
 8001e72:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2240      	movs	r2, #64	; 0x40
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	d009      	beq.n	8001e92 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001e7e:	4b73      	ldr	r3, [pc, #460]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e82:	4a79      	ldr	r2, [pc, #484]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8001e84:	4013      	ands	r3, r2
 8001e86:	0019      	movs	r1, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	69da      	ldr	r2, [r3, #28]
 8001e8c:	4b6f      	ldr	r3, [pc, #444]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e8e:	430a      	orrs	r2, r1
 8001e90:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	2380      	movs	r3, #128	; 0x80
 8001e98:	01db      	lsls	r3, r3, #7
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	d015      	beq.n	8001eca <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001e9e:	4b6b      	ldr	r3, [pc, #428]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	0899      	lsrs	r1, r3, #2
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001eaa:	4b68      	ldr	r3, [pc, #416]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001eac:	430a      	orrs	r2, r1
 8001eae:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001eb4:	2380      	movs	r3, #128	; 0x80
 8001eb6:	05db      	lsls	r3, r3, #23
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d106      	bne.n	8001eca <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001ebc:	4b63      	ldr	r3, [pc, #396]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ebe:	68da      	ldr	r2, [r3, #12]
 8001ec0:	4b62      	ldr	r3, [pc, #392]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ec2:	2180      	movs	r1, #128	; 0x80
 8001ec4:	0249      	lsls	r1, r1, #9
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	2380      	movs	r3, #128	; 0x80
 8001ed0:	031b      	lsls	r3, r3, #12
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	d009      	beq.n	8001eea <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001ed6:	4b5d      	ldr	r3, [pc, #372]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eda:	2240      	movs	r2, #64	; 0x40
 8001edc:	4393      	bics	r3, r2
 8001ede:	0019      	movs	r1, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ee4:	4b59      	ldr	r3, [pc, #356]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	2380      	movs	r3, #128	; 0x80
 8001ef0:	039b      	lsls	r3, r3, #14
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	d016      	beq.n	8001f24 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001ef6:	4b55      	ldr	r3, [pc, #340]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001efa:	4a5c      	ldr	r2, [pc, #368]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8001efc:	4013      	ands	r3, r2
 8001efe:	0019      	movs	r1, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f04:	4b51      	ldr	r3, [pc, #324]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f06:	430a      	orrs	r2, r1
 8001f08:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f0e:	2380      	movs	r3, #128	; 0x80
 8001f10:	03db      	lsls	r3, r3, #15
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d106      	bne.n	8001f24 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001f16:	4b4d      	ldr	r3, [pc, #308]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f18:	68da      	ldr	r2, [r3, #12]
 8001f1a:	4b4c      	ldr	r3, [pc, #304]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f1c:	2180      	movs	r1, #128	; 0x80
 8001f1e:	0449      	lsls	r1, r1, #17
 8001f20:	430a      	orrs	r2, r1
 8001f22:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	2380      	movs	r3, #128	; 0x80
 8001f2a:	03db      	lsls	r3, r3, #15
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	d016      	beq.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8001f30:	4b46      	ldr	r3, [pc, #280]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f34:	4a4e      	ldr	r2, [pc, #312]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8001f36:	4013      	ands	r3, r2
 8001f38:	0019      	movs	r1, r3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f3e:	4b43      	ldr	r3, [pc, #268]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f40:	430a      	orrs	r2, r1
 8001f42:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f48:	2380      	movs	r3, #128	; 0x80
 8001f4a:	045b      	lsls	r3, r3, #17
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d106      	bne.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001f50:	4b3e      	ldr	r3, [pc, #248]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f52:	68da      	ldr	r2, [r3, #12]
 8001f54:	4b3d      	ldr	r3, [pc, #244]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f56:	2180      	movs	r1, #128	; 0x80
 8001f58:	0449      	lsls	r1, r1, #17
 8001f5a:	430a      	orrs	r2, r1
 8001f5c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	2380      	movs	r3, #128	; 0x80
 8001f64:	011b      	lsls	r3, r3, #4
 8001f66:	4013      	ands	r3, r2
 8001f68:	d014      	beq.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001f6a:	4b38      	ldr	r3, [pc, #224]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f6e:	2203      	movs	r2, #3
 8001f70:	4393      	bics	r3, r2
 8001f72:	0019      	movs	r1, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6a1a      	ldr	r2, [r3, #32]
 8001f78:	4b34      	ldr	r3, [pc, #208]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f7a:	430a      	orrs	r2, r1
 8001f7c:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6a1b      	ldr	r3, [r3, #32]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d106      	bne.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001f86:	4b31      	ldr	r3, [pc, #196]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f88:	68da      	ldr	r2, [r3, #12]
 8001f8a:	4b30      	ldr	r3, [pc, #192]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f8c:	2180      	movs	r1, #128	; 0x80
 8001f8e:	0249      	lsls	r1, r1, #9
 8001f90:	430a      	orrs	r2, r1
 8001f92:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	2380      	movs	r3, #128	; 0x80
 8001f9a:	019b      	lsls	r3, r3, #6
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	d014      	beq.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8001fa0:	4b2a      	ldr	r3, [pc, #168]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa4:	220c      	movs	r2, #12
 8001fa6:	4393      	bics	r3, r2
 8001fa8:	0019      	movs	r1, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fae:	4b27      	ldr	r3, [pc, #156]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fb0:	430a      	orrs	r2, r1
 8001fb2:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb8:	2b04      	cmp	r3, #4
 8001fba:	d106      	bne.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001fbc:	4b23      	ldr	r3, [pc, #140]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fbe:	68da      	ldr	r2, [r3, #12]
 8001fc0:	4b22      	ldr	r3, [pc, #136]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fc2:	2180      	movs	r1, #128	; 0x80
 8001fc4:	0249      	lsls	r1, r1, #9
 8001fc6:	430a      	orrs	r2, r1
 8001fc8:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	2380      	movs	r3, #128	; 0x80
 8001fd0:	045b      	lsls	r3, r3, #17
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	d016      	beq.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001fd6:	4b1d      	ldr	r3, [pc, #116]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fda:	4a22      	ldr	r2, [pc, #136]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8001fdc:	4013      	ands	r3, r2
 8001fde:	0019      	movs	r1, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001fe4:	4b19      	ldr	r3, [pc, #100]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fe6:	430a      	orrs	r2, r1
 8001fe8:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001fee:	2380      	movs	r3, #128	; 0x80
 8001ff0:	019b      	lsls	r3, r3, #6
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d106      	bne.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001ff6:	4b15      	ldr	r3, [pc, #84]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ff8:	68da      	ldr	r2, [r3, #12]
 8001ffa:	4b14      	ldr	r3, [pc, #80]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ffc:	2180      	movs	r1, #128	; 0x80
 8001ffe:	0449      	lsls	r1, r1, #17
 8002000:	430a      	orrs	r2, r1
 8002002:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	2380      	movs	r3, #128	; 0x80
 800200a:	049b      	lsls	r3, r3, #18
 800200c:	4013      	ands	r3, r2
 800200e:	d016      	beq.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002010:	4b0e      	ldr	r3, [pc, #56]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002014:	4a10      	ldr	r2, [pc, #64]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002016:	4013      	ands	r3, r2
 8002018:	0019      	movs	r1, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800201e:	4b0b      	ldr	r3, [pc, #44]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002020:	430a      	orrs	r2, r1
 8002022:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002028:	2380      	movs	r3, #128	; 0x80
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	429a      	cmp	r2, r3
 800202e:	d106      	bne.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002030:	4b06      	ldr	r3, [pc, #24]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002032:	68da      	ldr	r2, [r3, #12]
 8002034:	4b05      	ldr	r3, [pc, #20]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002036:	2180      	movs	r1, #128	; 0x80
 8002038:	0449      	lsls	r1, r1, #17
 800203a:	430a      	orrs	r2, r1
 800203c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800203e:	2312      	movs	r3, #18
 8002040:	18fb      	adds	r3, r7, r3
 8002042:	781b      	ldrb	r3, [r3, #0]
}
 8002044:	0018      	movs	r0, r3
 8002046:	46bd      	mov	sp, r7
 8002048:	b006      	add	sp, #24
 800204a:	bd80      	pop	{r7, pc}
 800204c:	40021000 	.word	0x40021000
 8002050:	efffffff 	.word	0xefffffff
 8002054:	fffff3ff 	.word	0xfffff3ff
 8002058:	fffffcff 	.word	0xfffffcff
 800205c:	fff3ffff 	.word	0xfff3ffff
 8002060:	ffcfffff 	.word	0xffcfffff
 8002064:	ffffcfff 	.word	0xffffcfff
 8002068:	ffff3fff 	.word	0xffff3fff
 800206c:	ffbfffff 	.word	0xffbfffff
 8002070:	feffffff 	.word	0xfeffffff

08002074 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d101      	bne.n	8002086 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e046      	b.n	8002114 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2288      	movs	r2, #136	; 0x88
 800208a:	589b      	ldr	r3, [r3, r2]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d107      	bne.n	80020a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2284      	movs	r2, #132	; 0x84
 8002094:	2100      	movs	r1, #0
 8002096:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	0018      	movs	r0, r3
 800209c:	f7fe fc8e 	bl	80009bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2288      	movs	r2, #136	; 0x88
 80020a4:	2124      	movs	r1, #36	; 0x24
 80020a6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2101      	movs	r1, #1
 80020b4:	438a      	bics	r2, r1
 80020b6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d003      	beq.n	80020c8 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	0018      	movs	r0, r3
 80020c4:	f000 fc26 	bl	8002914 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	0018      	movs	r0, r3
 80020cc:	f000 f8cc 	bl	8002268 <UART_SetConfig>
 80020d0:	0003      	movs	r3, r0
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d101      	bne.n	80020da <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e01c      	b.n	8002114 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	685a      	ldr	r2, [r3, #4]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	490d      	ldr	r1, [pc, #52]	; (800211c <HAL_UART_Init+0xa8>)
 80020e6:	400a      	ands	r2, r1
 80020e8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	689a      	ldr	r2, [r3, #8]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	212a      	movs	r1, #42	; 0x2a
 80020f6:	438a      	bics	r2, r1
 80020f8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2101      	movs	r1, #1
 8002106:	430a      	orrs	r2, r1
 8002108:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	0018      	movs	r0, r3
 800210e:	f000 fcb5 	bl	8002a7c <UART_CheckIdleState>
 8002112:	0003      	movs	r3, r0
}
 8002114:	0018      	movs	r0, r3
 8002116:	46bd      	mov	sp, r7
 8002118:	b002      	add	sp, #8
 800211a:	bd80      	pop	{r7, pc}
 800211c:	ffffb7ff 	.word	0xffffb7ff

08002120 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b08a      	sub	sp, #40	; 0x28
 8002124:	af02      	add	r7, sp, #8
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	603b      	str	r3, [r7, #0]
 800212c:	1dbb      	adds	r3, r7, #6
 800212e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2288      	movs	r2, #136	; 0x88
 8002134:	589b      	ldr	r3, [r3, r2]
 8002136:	2b20      	cmp	r3, #32
 8002138:	d000      	beq.n	800213c <HAL_UART_Transmit+0x1c>
 800213a:	e090      	b.n	800225e <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d003      	beq.n	800214a <HAL_UART_Transmit+0x2a>
 8002142:	1dbb      	adds	r3, r7, #6
 8002144:	881b      	ldrh	r3, [r3, #0]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d101      	bne.n	800214e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e088      	b.n	8002260 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	689a      	ldr	r2, [r3, #8]
 8002152:	2380      	movs	r3, #128	; 0x80
 8002154:	015b      	lsls	r3, r3, #5
 8002156:	429a      	cmp	r2, r3
 8002158:	d109      	bne.n	800216e <HAL_UART_Transmit+0x4e>
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d105      	bne.n	800216e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	2201      	movs	r2, #1
 8002166:	4013      	ands	r3, r2
 8002168:	d001      	beq.n	800216e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e078      	b.n	8002260 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2290      	movs	r2, #144	; 0x90
 8002172:	2100      	movs	r1, #0
 8002174:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2288      	movs	r2, #136	; 0x88
 800217a:	2121      	movs	r1, #33	; 0x21
 800217c:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800217e:	f7fe fd89 	bl	8000c94 <HAL_GetTick>
 8002182:	0003      	movs	r3, r0
 8002184:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	1dba      	adds	r2, r7, #6
 800218a:	2154      	movs	r1, #84	; 0x54
 800218c:	8812      	ldrh	r2, [r2, #0]
 800218e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	1dba      	adds	r2, r7, #6
 8002194:	2156      	movs	r1, #86	; 0x56
 8002196:	8812      	ldrh	r2, [r2, #0]
 8002198:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	689a      	ldr	r2, [r3, #8]
 800219e:	2380      	movs	r3, #128	; 0x80
 80021a0:	015b      	lsls	r3, r3, #5
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d108      	bne.n	80021b8 <HAL_UART_Transmit+0x98>
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	691b      	ldr	r3, [r3, #16]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d104      	bne.n	80021b8 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80021ae:	2300      	movs	r3, #0
 80021b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	61bb      	str	r3, [r7, #24]
 80021b6:	e003      	b.n	80021c0 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80021bc:	2300      	movs	r3, #0
 80021be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80021c0:	e030      	b.n	8002224 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80021c2:	697a      	ldr	r2, [r7, #20]
 80021c4:	68f8      	ldr	r0, [r7, #12]
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	9300      	str	r3, [sp, #0]
 80021ca:	0013      	movs	r3, r2
 80021cc:	2200      	movs	r2, #0
 80021ce:	2180      	movs	r1, #128	; 0x80
 80021d0:	f000 fcfe 	bl	8002bd0 <UART_WaitOnFlagUntilTimeout>
 80021d4:	1e03      	subs	r3, r0, #0
 80021d6:	d005      	beq.n	80021e4 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2288      	movs	r2, #136	; 0x88
 80021dc:	2120      	movs	r1, #32
 80021de:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e03d      	b.n	8002260 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d10b      	bne.n	8002202 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	881b      	ldrh	r3, [r3, #0]
 80021ee:	001a      	movs	r2, r3
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	05d2      	lsls	r2, r2, #23
 80021f6:	0dd2      	lsrs	r2, r2, #23
 80021f8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	3302      	adds	r3, #2
 80021fe:	61bb      	str	r3, [r7, #24]
 8002200:	e007      	b.n	8002212 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	781a      	ldrb	r2, [r3, #0]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	3301      	adds	r3, #1
 8002210:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2256      	movs	r2, #86	; 0x56
 8002216:	5a9b      	ldrh	r3, [r3, r2]
 8002218:	b29b      	uxth	r3, r3
 800221a:	3b01      	subs	r3, #1
 800221c:	b299      	uxth	r1, r3
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2256      	movs	r2, #86	; 0x56
 8002222:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2256      	movs	r2, #86	; 0x56
 8002228:	5a9b      	ldrh	r3, [r3, r2]
 800222a:	b29b      	uxth	r3, r3
 800222c:	2b00      	cmp	r3, #0
 800222e:	d1c8      	bne.n	80021c2 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002230:	697a      	ldr	r2, [r7, #20]
 8002232:	68f8      	ldr	r0, [r7, #12]
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	9300      	str	r3, [sp, #0]
 8002238:	0013      	movs	r3, r2
 800223a:	2200      	movs	r2, #0
 800223c:	2140      	movs	r1, #64	; 0x40
 800223e:	f000 fcc7 	bl	8002bd0 <UART_WaitOnFlagUntilTimeout>
 8002242:	1e03      	subs	r3, r0, #0
 8002244:	d005      	beq.n	8002252 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2288      	movs	r2, #136	; 0x88
 800224a:	2120      	movs	r1, #32
 800224c:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e006      	b.n	8002260 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2288      	movs	r2, #136	; 0x88
 8002256:	2120      	movs	r1, #32
 8002258:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800225a:	2300      	movs	r3, #0
 800225c:	e000      	b.n	8002260 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 800225e:	2302      	movs	r3, #2
  }
}
 8002260:	0018      	movs	r0, r3
 8002262:	46bd      	mov	sp, r7
 8002264:	b008      	add	sp, #32
 8002266:	bd80      	pop	{r7, pc}

08002268 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002268:	b5b0      	push	{r4, r5, r7, lr}
 800226a:	b090      	sub	sp, #64	; 0x40
 800226c:	af00      	add	r7, sp, #0
 800226e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002270:	231a      	movs	r3, #26
 8002272:	2220      	movs	r2, #32
 8002274:	189b      	adds	r3, r3, r2
 8002276:	19db      	adds	r3, r3, r7
 8002278:	2200      	movs	r2, #0
 800227a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800227c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227e:	689a      	ldr	r2, [r3, #8]
 8002280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002282:	691b      	ldr	r3, [r3, #16]
 8002284:	431a      	orrs	r2, r3
 8002286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002288:	695b      	ldr	r3, [r3, #20]
 800228a:	431a      	orrs	r2, r3
 800228c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228e:	69db      	ldr	r3, [r3, #28]
 8002290:	4313      	orrs	r3, r2
 8002292:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4ac1      	ldr	r2, [pc, #772]	; (80025a0 <UART_SetConfig+0x338>)
 800229c:	4013      	ands	r3, r2
 800229e:	0019      	movs	r1, r3
 80022a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022a6:	430b      	orrs	r3, r1
 80022a8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	4abc      	ldr	r2, [pc, #752]	; (80025a4 <UART_SetConfig+0x33c>)
 80022b2:	4013      	ands	r3, r2
 80022b4:	0018      	movs	r0, r3
 80022b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b8:	68d9      	ldr	r1, [r3, #12]
 80022ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	0003      	movs	r3, r0
 80022c0:	430b      	orrs	r3, r1
 80022c2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80022c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c6:	699b      	ldr	r3, [r3, #24]
 80022c8:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80022ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4ab6      	ldr	r2, [pc, #728]	; (80025a8 <UART_SetConfig+0x340>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d009      	beq.n	80022e8 <UART_SetConfig+0x80>
 80022d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4ab4      	ldr	r2, [pc, #720]	; (80025ac <UART_SetConfig+0x344>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d004      	beq.n	80022e8 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80022de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e0:	6a1b      	ldr	r3, [r3, #32]
 80022e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80022e4:	4313      	orrs	r3, r2
 80022e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80022e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	4ab0      	ldr	r2, [pc, #704]	; (80025b0 <UART_SetConfig+0x348>)
 80022f0:	4013      	ands	r3, r2
 80022f2:	0019      	movs	r1, r3
 80022f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022fa:	430b      	orrs	r3, r1
 80022fc:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80022fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002304:	220f      	movs	r2, #15
 8002306:	4393      	bics	r3, r2
 8002308:	0018      	movs	r0, r3
 800230a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800230e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	0003      	movs	r3, r0
 8002314:	430b      	orrs	r3, r1
 8002316:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4aa5      	ldr	r2, [pc, #660]	; (80025b4 <UART_SetConfig+0x34c>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d131      	bne.n	8002386 <UART_SetConfig+0x11e>
 8002322:	4ba5      	ldr	r3, [pc, #660]	; (80025b8 <UART_SetConfig+0x350>)
 8002324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002326:	2203      	movs	r2, #3
 8002328:	4013      	ands	r3, r2
 800232a:	2b03      	cmp	r3, #3
 800232c:	d01d      	beq.n	800236a <UART_SetConfig+0x102>
 800232e:	d823      	bhi.n	8002378 <UART_SetConfig+0x110>
 8002330:	2b02      	cmp	r3, #2
 8002332:	d00c      	beq.n	800234e <UART_SetConfig+0xe6>
 8002334:	d820      	bhi.n	8002378 <UART_SetConfig+0x110>
 8002336:	2b00      	cmp	r3, #0
 8002338:	d002      	beq.n	8002340 <UART_SetConfig+0xd8>
 800233a:	2b01      	cmp	r3, #1
 800233c:	d00e      	beq.n	800235c <UART_SetConfig+0xf4>
 800233e:	e01b      	b.n	8002378 <UART_SetConfig+0x110>
 8002340:	231b      	movs	r3, #27
 8002342:	2220      	movs	r2, #32
 8002344:	189b      	adds	r3, r3, r2
 8002346:	19db      	adds	r3, r3, r7
 8002348:	2200      	movs	r2, #0
 800234a:	701a      	strb	r2, [r3, #0]
 800234c:	e154      	b.n	80025f8 <UART_SetConfig+0x390>
 800234e:	231b      	movs	r3, #27
 8002350:	2220      	movs	r2, #32
 8002352:	189b      	adds	r3, r3, r2
 8002354:	19db      	adds	r3, r3, r7
 8002356:	2202      	movs	r2, #2
 8002358:	701a      	strb	r2, [r3, #0]
 800235a:	e14d      	b.n	80025f8 <UART_SetConfig+0x390>
 800235c:	231b      	movs	r3, #27
 800235e:	2220      	movs	r2, #32
 8002360:	189b      	adds	r3, r3, r2
 8002362:	19db      	adds	r3, r3, r7
 8002364:	2204      	movs	r2, #4
 8002366:	701a      	strb	r2, [r3, #0]
 8002368:	e146      	b.n	80025f8 <UART_SetConfig+0x390>
 800236a:	231b      	movs	r3, #27
 800236c:	2220      	movs	r2, #32
 800236e:	189b      	adds	r3, r3, r2
 8002370:	19db      	adds	r3, r3, r7
 8002372:	2208      	movs	r2, #8
 8002374:	701a      	strb	r2, [r3, #0]
 8002376:	e13f      	b.n	80025f8 <UART_SetConfig+0x390>
 8002378:	231b      	movs	r3, #27
 800237a:	2220      	movs	r2, #32
 800237c:	189b      	adds	r3, r3, r2
 800237e:	19db      	adds	r3, r3, r7
 8002380:	2210      	movs	r2, #16
 8002382:	701a      	strb	r2, [r3, #0]
 8002384:	e138      	b.n	80025f8 <UART_SetConfig+0x390>
 8002386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a8c      	ldr	r2, [pc, #560]	; (80025bc <UART_SetConfig+0x354>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d131      	bne.n	80023f4 <UART_SetConfig+0x18c>
 8002390:	4b89      	ldr	r3, [pc, #548]	; (80025b8 <UART_SetConfig+0x350>)
 8002392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002394:	220c      	movs	r2, #12
 8002396:	4013      	ands	r3, r2
 8002398:	2b0c      	cmp	r3, #12
 800239a:	d01d      	beq.n	80023d8 <UART_SetConfig+0x170>
 800239c:	d823      	bhi.n	80023e6 <UART_SetConfig+0x17e>
 800239e:	2b08      	cmp	r3, #8
 80023a0:	d00c      	beq.n	80023bc <UART_SetConfig+0x154>
 80023a2:	d820      	bhi.n	80023e6 <UART_SetConfig+0x17e>
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d002      	beq.n	80023ae <UART_SetConfig+0x146>
 80023a8:	2b04      	cmp	r3, #4
 80023aa:	d00e      	beq.n	80023ca <UART_SetConfig+0x162>
 80023ac:	e01b      	b.n	80023e6 <UART_SetConfig+0x17e>
 80023ae:	231b      	movs	r3, #27
 80023b0:	2220      	movs	r2, #32
 80023b2:	189b      	adds	r3, r3, r2
 80023b4:	19db      	adds	r3, r3, r7
 80023b6:	2200      	movs	r2, #0
 80023b8:	701a      	strb	r2, [r3, #0]
 80023ba:	e11d      	b.n	80025f8 <UART_SetConfig+0x390>
 80023bc:	231b      	movs	r3, #27
 80023be:	2220      	movs	r2, #32
 80023c0:	189b      	adds	r3, r3, r2
 80023c2:	19db      	adds	r3, r3, r7
 80023c4:	2202      	movs	r2, #2
 80023c6:	701a      	strb	r2, [r3, #0]
 80023c8:	e116      	b.n	80025f8 <UART_SetConfig+0x390>
 80023ca:	231b      	movs	r3, #27
 80023cc:	2220      	movs	r2, #32
 80023ce:	189b      	adds	r3, r3, r2
 80023d0:	19db      	adds	r3, r3, r7
 80023d2:	2204      	movs	r2, #4
 80023d4:	701a      	strb	r2, [r3, #0]
 80023d6:	e10f      	b.n	80025f8 <UART_SetConfig+0x390>
 80023d8:	231b      	movs	r3, #27
 80023da:	2220      	movs	r2, #32
 80023dc:	189b      	adds	r3, r3, r2
 80023de:	19db      	adds	r3, r3, r7
 80023e0:	2208      	movs	r2, #8
 80023e2:	701a      	strb	r2, [r3, #0]
 80023e4:	e108      	b.n	80025f8 <UART_SetConfig+0x390>
 80023e6:	231b      	movs	r3, #27
 80023e8:	2220      	movs	r2, #32
 80023ea:	189b      	adds	r3, r3, r2
 80023ec:	19db      	adds	r3, r3, r7
 80023ee:	2210      	movs	r2, #16
 80023f0:	701a      	strb	r2, [r3, #0]
 80023f2:	e101      	b.n	80025f8 <UART_SetConfig+0x390>
 80023f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a71      	ldr	r2, [pc, #452]	; (80025c0 <UART_SetConfig+0x358>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d131      	bne.n	8002462 <UART_SetConfig+0x1fa>
 80023fe:	4b6e      	ldr	r3, [pc, #440]	; (80025b8 <UART_SetConfig+0x350>)
 8002400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002402:	2230      	movs	r2, #48	; 0x30
 8002404:	4013      	ands	r3, r2
 8002406:	2b30      	cmp	r3, #48	; 0x30
 8002408:	d01d      	beq.n	8002446 <UART_SetConfig+0x1de>
 800240a:	d823      	bhi.n	8002454 <UART_SetConfig+0x1ec>
 800240c:	2b20      	cmp	r3, #32
 800240e:	d00c      	beq.n	800242a <UART_SetConfig+0x1c2>
 8002410:	d820      	bhi.n	8002454 <UART_SetConfig+0x1ec>
 8002412:	2b00      	cmp	r3, #0
 8002414:	d002      	beq.n	800241c <UART_SetConfig+0x1b4>
 8002416:	2b10      	cmp	r3, #16
 8002418:	d00e      	beq.n	8002438 <UART_SetConfig+0x1d0>
 800241a:	e01b      	b.n	8002454 <UART_SetConfig+0x1ec>
 800241c:	231b      	movs	r3, #27
 800241e:	2220      	movs	r2, #32
 8002420:	189b      	adds	r3, r3, r2
 8002422:	19db      	adds	r3, r3, r7
 8002424:	2200      	movs	r2, #0
 8002426:	701a      	strb	r2, [r3, #0]
 8002428:	e0e6      	b.n	80025f8 <UART_SetConfig+0x390>
 800242a:	231b      	movs	r3, #27
 800242c:	2220      	movs	r2, #32
 800242e:	189b      	adds	r3, r3, r2
 8002430:	19db      	adds	r3, r3, r7
 8002432:	2202      	movs	r2, #2
 8002434:	701a      	strb	r2, [r3, #0]
 8002436:	e0df      	b.n	80025f8 <UART_SetConfig+0x390>
 8002438:	231b      	movs	r3, #27
 800243a:	2220      	movs	r2, #32
 800243c:	189b      	adds	r3, r3, r2
 800243e:	19db      	adds	r3, r3, r7
 8002440:	2204      	movs	r2, #4
 8002442:	701a      	strb	r2, [r3, #0]
 8002444:	e0d8      	b.n	80025f8 <UART_SetConfig+0x390>
 8002446:	231b      	movs	r3, #27
 8002448:	2220      	movs	r2, #32
 800244a:	189b      	adds	r3, r3, r2
 800244c:	19db      	adds	r3, r3, r7
 800244e:	2208      	movs	r2, #8
 8002450:	701a      	strb	r2, [r3, #0]
 8002452:	e0d1      	b.n	80025f8 <UART_SetConfig+0x390>
 8002454:	231b      	movs	r3, #27
 8002456:	2220      	movs	r2, #32
 8002458:	189b      	adds	r3, r3, r2
 800245a:	19db      	adds	r3, r3, r7
 800245c:	2210      	movs	r2, #16
 800245e:	701a      	strb	r2, [r3, #0]
 8002460:	e0ca      	b.n	80025f8 <UART_SetConfig+0x390>
 8002462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a57      	ldr	r2, [pc, #348]	; (80025c4 <UART_SetConfig+0x35c>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d106      	bne.n	800247a <UART_SetConfig+0x212>
 800246c:	231b      	movs	r3, #27
 800246e:	2220      	movs	r2, #32
 8002470:	189b      	adds	r3, r3, r2
 8002472:	19db      	adds	r3, r3, r7
 8002474:	2200      	movs	r2, #0
 8002476:	701a      	strb	r2, [r3, #0]
 8002478:	e0be      	b.n	80025f8 <UART_SetConfig+0x390>
 800247a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a52      	ldr	r2, [pc, #328]	; (80025c8 <UART_SetConfig+0x360>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d106      	bne.n	8002492 <UART_SetConfig+0x22a>
 8002484:	231b      	movs	r3, #27
 8002486:	2220      	movs	r2, #32
 8002488:	189b      	adds	r3, r3, r2
 800248a:	19db      	adds	r3, r3, r7
 800248c:	2200      	movs	r2, #0
 800248e:	701a      	strb	r2, [r3, #0]
 8002490:	e0b2      	b.n	80025f8 <UART_SetConfig+0x390>
 8002492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a4d      	ldr	r2, [pc, #308]	; (80025cc <UART_SetConfig+0x364>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d106      	bne.n	80024aa <UART_SetConfig+0x242>
 800249c:	231b      	movs	r3, #27
 800249e:	2220      	movs	r2, #32
 80024a0:	189b      	adds	r3, r3, r2
 80024a2:	19db      	adds	r3, r3, r7
 80024a4:	2200      	movs	r2, #0
 80024a6:	701a      	strb	r2, [r3, #0]
 80024a8:	e0a6      	b.n	80025f8 <UART_SetConfig+0x390>
 80024aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a3e      	ldr	r2, [pc, #248]	; (80025a8 <UART_SetConfig+0x340>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d13e      	bne.n	8002532 <UART_SetConfig+0x2ca>
 80024b4:	4b40      	ldr	r3, [pc, #256]	; (80025b8 <UART_SetConfig+0x350>)
 80024b6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80024b8:	23c0      	movs	r3, #192	; 0xc0
 80024ba:	011b      	lsls	r3, r3, #4
 80024bc:	4013      	ands	r3, r2
 80024be:	22c0      	movs	r2, #192	; 0xc0
 80024c0:	0112      	lsls	r2, r2, #4
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d027      	beq.n	8002516 <UART_SetConfig+0x2ae>
 80024c6:	22c0      	movs	r2, #192	; 0xc0
 80024c8:	0112      	lsls	r2, r2, #4
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d82a      	bhi.n	8002524 <UART_SetConfig+0x2bc>
 80024ce:	2280      	movs	r2, #128	; 0x80
 80024d0:	0112      	lsls	r2, r2, #4
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d011      	beq.n	80024fa <UART_SetConfig+0x292>
 80024d6:	2280      	movs	r2, #128	; 0x80
 80024d8:	0112      	lsls	r2, r2, #4
 80024da:	4293      	cmp	r3, r2
 80024dc:	d822      	bhi.n	8002524 <UART_SetConfig+0x2bc>
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d004      	beq.n	80024ec <UART_SetConfig+0x284>
 80024e2:	2280      	movs	r2, #128	; 0x80
 80024e4:	00d2      	lsls	r2, r2, #3
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d00e      	beq.n	8002508 <UART_SetConfig+0x2a0>
 80024ea:	e01b      	b.n	8002524 <UART_SetConfig+0x2bc>
 80024ec:	231b      	movs	r3, #27
 80024ee:	2220      	movs	r2, #32
 80024f0:	189b      	adds	r3, r3, r2
 80024f2:	19db      	adds	r3, r3, r7
 80024f4:	2200      	movs	r2, #0
 80024f6:	701a      	strb	r2, [r3, #0]
 80024f8:	e07e      	b.n	80025f8 <UART_SetConfig+0x390>
 80024fa:	231b      	movs	r3, #27
 80024fc:	2220      	movs	r2, #32
 80024fe:	189b      	adds	r3, r3, r2
 8002500:	19db      	adds	r3, r3, r7
 8002502:	2202      	movs	r2, #2
 8002504:	701a      	strb	r2, [r3, #0]
 8002506:	e077      	b.n	80025f8 <UART_SetConfig+0x390>
 8002508:	231b      	movs	r3, #27
 800250a:	2220      	movs	r2, #32
 800250c:	189b      	adds	r3, r3, r2
 800250e:	19db      	adds	r3, r3, r7
 8002510:	2204      	movs	r2, #4
 8002512:	701a      	strb	r2, [r3, #0]
 8002514:	e070      	b.n	80025f8 <UART_SetConfig+0x390>
 8002516:	231b      	movs	r3, #27
 8002518:	2220      	movs	r2, #32
 800251a:	189b      	adds	r3, r3, r2
 800251c:	19db      	adds	r3, r3, r7
 800251e:	2208      	movs	r2, #8
 8002520:	701a      	strb	r2, [r3, #0]
 8002522:	e069      	b.n	80025f8 <UART_SetConfig+0x390>
 8002524:	231b      	movs	r3, #27
 8002526:	2220      	movs	r2, #32
 8002528:	189b      	adds	r3, r3, r2
 800252a:	19db      	adds	r3, r3, r7
 800252c:	2210      	movs	r2, #16
 800252e:	701a      	strb	r2, [r3, #0]
 8002530:	e062      	b.n	80025f8 <UART_SetConfig+0x390>
 8002532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a1d      	ldr	r2, [pc, #116]	; (80025ac <UART_SetConfig+0x344>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d157      	bne.n	80025ec <UART_SetConfig+0x384>
 800253c:	4b1e      	ldr	r3, [pc, #120]	; (80025b8 <UART_SetConfig+0x350>)
 800253e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002540:	23c0      	movs	r3, #192	; 0xc0
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	4013      	ands	r3, r2
 8002546:	22c0      	movs	r2, #192	; 0xc0
 8002548:	0092      	lsls	r2, r2, #2
 800254a:	4293      	cmp	r3, r2
 800254c:	d040      	beq.n	80025d0 <UART_SetConfig+0x368>
 800254e:	22c0      	movs	r2, #192	; 0xc0
 8002550:	0092      	lsls	r2, r2, #2
 8002552:	4293      	cmp	r3, r2
 8002554:	d843      	bhi.n	80025de <UART_SetConfig+0x376>
 8002556:	2280      	movs	r2, #128	; 0x80
 8002558:	0092      	lsls	r2, r2, #2
 800255a:	4293      	cmp	r3, r2
 800255c:	d011      	beq.n	8002582 <UART_SetConfig+0x31a>
 800255e:	2280      	movs	r2, #128	; 0x80
 8002560:	0092      	lsls	r2, r2, #2
 8002562:	4293      	cmp	r3, r2
 8002564:	d83b      	bhi.n	80025de <UART_SetConfig+0x376>
 8002566:	2b00      	cmp	r3, #0
 8002568:	d004      	beq.n	8002574 <UART_SetConfig+0x30c>
 800256a:	2280      	movs	r2, #128	; 0x80
 800256c:	0052      	lsls	r2, r2, #1
 800256e:	4293      	cmp	r3, r2
 8002570:	d00e      	beq.n	8002590 <UART_SetConfig+0x328>
 8002572:	e034      	b.n	80025de <UART_SetConfig+0x376>
 8002574:	231b      	movs	r3, #27
 8002576:	2220      	movs	r2, #32
 8002578:	189b      	adds	r3, r3, r2
 800257a:	19db      	adds	r3, r3, r7
 800257c:	2200      	movs	r2, #0
 800257e:	701a      	strb	r2, [r3, #0]
 8002580:	e03a      	b.n	80025f8 <UART_SetConfig+0x390>
 8002582:	231b      	movs	r3, #27
 8002584:	2220      	movs	r2, #32
 8002586:	189b      	adds	r3, r3, r2
 8002588:	19db      	adds	r3, r3, r7
 800258a:	2202      	movs	r2, #2
 800258c:	701a      	strb	r2, [r3, #0]
 800258e:	e033      	b.n	80025f8 <UART_SetConfig+0x390>
 8002590:	231b      	movs	r3, #27
 8002592:	2220      	movs	r2, #32
 8002594:	189b      	adds	r3, r3, r2
 8002596:	19db      	adds	r3, r3, r7
 8002598:	2204      	movs	r2, #4
 800259a:	701a      	strb	r2, [r3, #0]
 800259c:	e02c      	b.n	80025f8 <UART_SetConfig+0x390>
 800259e:	46c0      	nop			; (mov r8, r8)
 80025a0:	cfff69f3 	.word	0xcfff69f3
 80025a4:	ffffcfff 	.word	0xffffcfff
 80025a8:	40008000 	.word	0x40008000
 80025ac:	40008400 	.word	0x40008400
 80025b0:	11fff4ff 	.word	0x11fff4ff
 80025b4:	40013800 	.word	0x40013800
 80025b8:	40021000 	.word	0x40021000
 80025bc:	40004400 	.word	0x40004400
 80025c0:	40004800 	.word	0x40004800
 80025c4:	40004c00 	.word	0x40004c00
 80025c8:	40005000 	.word	0x40005000
 80025cc:	40013c00 	.word	0x40013c00
 80025d0:	231b      	movs	r3, #27
 80025d2:	2220      	movs	r2, #32
 80025d4:	189b      	adds	r3, r3, r2
 80025d6:	19db      	adds	r3, r3, r7
 80025d8:	2208      	movs	r2, #8
 80025da:	701a      	strb	r2, [r3, #0]
 80025dc:	e00c      	b.n	80025f8 <UART_SetConfig+0x390>
 80025de:	231b      	movs	r3, #27
 80025e0:	2220      	movs	r2, #32
 80025e2:	189b      	adds	r3, r3, r2
 80025e4:	19db      	adds	r3, r3, r7
 80025e6:	2210      	movs	r2, #16
 80025e8:	701a      	strb	r2, [r3, #0]
 80025ea:	e005      	b.n	80025f8 <UART_SetConfig+0x390>
 80025ec:	231b      	movs	r3, #27
 80025ee:	2220      	movs	r2, #32
 80025f0:	189b      	adds	r3, r3, r2
 80025f2:	19db      	adds	r3, r3, r7
 80025f4:	2210      	movs	r2, #16
 80025f6:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80025f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4ac1      	ldr	r2, [pc, #772]	; (8002904 <UART_SetConfig+0x69c>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d005      	beq.n	800260e <UART_SetConfig+0x3a6>
 8002602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4ac0      	ldr	r2, [pc, #768]	; (8002908 <UART_SetConfig+0x6a0>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d000      	beq.n	800260e <UART_SetConfig+0x3a6>
 800260c:	e093      	b.n	8002736 <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800260e:	231b      	movs	r3, #27
 8002610:	2220      	movs	r2, #32
 8002612:	189b      	adds	r3, r3, r2
 8002614:	19db      	adds	r3, r3, r7
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	2b08      	cmp	r3, #8
 800261a:	d015      	beq.n	8002648 <UART_SetConfig+0x3e0>
 800261c:	dc18      	bgt.n	8002650 <UART_SetConfig+0x3e8>
 800261e:	2b04      	cmp	r3, #4
 8002620:	d00d      	beq.n	800263e <UART_SetConfig+0x3d6>
 8002622:	dc15      	bgt.n	8002650 <UART_SetConfig+0x3e8>
 8002624:	2b00      	cmp	r3, #0
 8002626:	d002      	beq.n	800262e <UART_SetConfig+0x3c6>
 8002628:	2b02      	cmp	r3, #2
 800262a:	d005      	beq.n	8002638 <UART_SetConfig+0x3d0>
 800262c:	e010      	b.n	8002650 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800262e:	f7ff facf 	bl	8001bd0 <HAL_RCC_GetPCLK1Freq>
 8002632:	0003      	movs	r3, r0
 8002634:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002636:	e014      	b.n	8002662 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002638:	4bb4      	ldr	r3, [pc, #720]	; (800290c <UART_SetConfig+0x6a4>)
 800263a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800263c:	e011      	b.n	8002662 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800263e:	f7ff fa3b 	bl	8001ab8 <HAL_RCC_GetSysClockFreq>
 8002642:	0003      	movs	r3, r0
 8002644:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002646:	e00c      	b.n	8002662 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002648:	2380      	movs	r3, #128	; 0x80
 800264a:	021b      	lsls	r3, r3, #8
 800264c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800264e:	e008      	b.n	8002662 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8002650:	2300      	movs	r3, #0
 8002652:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002654:	231a      	movs	r3, #26
 8002656:	2220      	movs	r2, #32
 8002658:	189b      	adds	r3, r3, r2
 800265a:	19db      	adds	r3, r3, r7
 800265c:	2201      	movs	r2, #1
 800265e:	701a      	strb	r2, [r3, #0]
        break;
 8002660:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002664:	2b00      	cmp	r3, #0
 8002666:	d100      	bne.n	800266a <UART_SetConfig+0x402>
 8002668:	e135      	b.n	80028d6 <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800266a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800266e:	4ba8      	ldr	r3, [pc, #672]	; (8002910 <UART_SetConfig+0x6a8>)
 8002670:	0052      	lsls	r2, r2, #1
 8002672:	5ad3      	ldrh	r3, [r2, r3]
 8002674:	0019      	movs	r1, r3
 8002676:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002678:	f7fd fd4c 	bl	8000114 <__udivsi3>
 800267c:	0003      	movs	r3, r0
 800267e:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002682:	685a      	ldr	r2, [r3, #4]
 8002684:	0013      	movs	r3, r2
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	189b      	adds	r3, r3, r2
 800268a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800268c:	429a      	cmp	r2, r3
 800268e:	d305      	bcc.n	800269c <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002696:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002698:	429a      	cmp	r2, r3
 800269a:	d906      	bls.n	80026aa <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 800269c:	231a      	movs	r3, #26
 800269e:	2220      	movs	r2, #32
 80026a0:	189b      	adds	r3, r3, r2
 80026a2:	19db      	adds	r3, r3, r7
 80026a4:	2201      	movs	r2, #1
 80026a6:	701a      	strb	r2, [r3, #0]
 80026a8:	e044      	b.n	8002734 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80026aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026ac:	61bb      	str	r3, [r7, #24]
 80026ae:	2300      	movs	r3, #0
 80026b0:	61fb      	str	r3, [r7, #28]
 80026b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026b6:	4b96      	ldr	r3, [pc, #600]	; (8002910 <UART_SetConfig+0x6a8>)
 80026b8:	0052      	lsls	r2, r2, #1
 80026ba:	5ad3      	ldrh	r3, [r2, r3]
 80026bc:	613b      	str	r3, [r7, #16]
 80026be:	2300      	movs	r3, #0
 80026c0:	617b      	str	r3, [r7, #20]
 80026c2:	693a      	ldr	r2, [r7, #16]
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	69b8      	ldr	r0, [r7, #24]
 80026c8:	69f9      	ldr	r1, [r7, #28]
 80026ca:	f7fd fe99 	bl	8000400 <__aeabi_uldivmod>
 80026ce:	0002      	movs	r2, r0
 80026d0:	000b      	movs	r3, r1
 80026d2:	0e11      	lsrs	r1, r2, #24
 80026d4:	021d      	lsls	r5, r3, #8
 80026d6:	430d      	orrs	r5, r1
 80026d8:	0214      	lsls	r4, r2, #8
 80026da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	085b      	lsrs	r3, r3, #1
 80026e0:	60bb      	str	r3, [r7, #8]
 80026e2:	2300      	movs	r3, #0
 80026e4:	60fb      	str	r3, [r7, #12]
 80026e6:	68b8      	ldr	r0, [r7, #8]
 80026e8:	68f9      	ldr	r1, [r7, #12]
 80026ea:	1900      	adds	r0, r0, r4
 80026ec:	4169      	adcs	r1, r5
 80026ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	603b      	str	r3, [r7, #0]
 80026f4:	2300      	movs	r3, #0
 80026f6:	607b      	str	r3, [r7, #4]
 80026f8:	683a      	ldr	r2, [r7, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f7fd fe80 	bl	8000400 <__aeabi_uldivmod>
 8002700:	0002      	movs	r2, r0
 8002702:	000b      	movs	r3, r1
 8002704:	0013      	movs	r3, r2
 8002706:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002708:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800270a:	23c0      	movs	r3, #192	; 0xc0
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	429a      	cmp	r2, r3
 8002710:	d309      	bcc.n	8002726 <UART_SetConfig+0x4be>
 8002712:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002714:	2380      	movs	r3, #128	; 0x80
 8002716:	035b      	lsls	r3, r3, #13
 8002718:	429a      	cmp	r2, r3
 800271a:	d204      	bcs.n	8002726 <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 800271c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002722:	60da      	str	r2, [r3, #12]
 8002724:	e006      	b.n	8002734 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 8002726:	231a      	movs	r3, #26
 8002728:	2220      	movs	r2, #32
 800272a:	189b      	adds	r3, r3, r2
 800272c:	19db      	adds	r3, r3, r7
 800272e:	2201      	movs	r2, #1
 8002730:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8002732:	e0d0      	b.n	80028d6 <UART_SetConfig+0x66e>
 8002734:	e0cf      	b.n	80028d6 <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002738:	69da      	ldr	r2, [r3, #28]
 800273a:	2380      	movs	r3, #128	; 0x80
 800273c:	021b      	lsls	r3, r3, #8
 800273e:	429a      	cmp	r2, r3
 8002740:	d000      	beq.n	8002744 <UART_SetConfig+0x4dc>
 8002742:	e070      	b.n	8002826 <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8002744:	231b      	movs	r3, #27
 8002746:	2220      	movs	r2, #32
 8002748:	189b      	adds	r3, r3, r2
 800274a:	19db      	adds	r3, r3, r7
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	2b08      	cmp	r3, #8
 8002750:	d015      	beq.n	800277e <UART_SetConfig+0x516>
 8002752:	dc18      	bgt.n	8002786 <UART_SetConfig+0x51e>
 8002754:	2b04      	cmp	r3, #4
 8002756:	d00d      	beq.n	8002774 <UART_SetConfig+0x50c>
 8002758:	dc15      	bgt.n	8002786 <UART_SetConfig+0x51e>
 800275a:	2b00      	cmp	r3, #0
 800275c:	d002      	beq.n	8002764 <UART_SetConfig+0x4fc>
 800275e:	2b02      	cmp	r3, #2
 8002760:	d005      	beq.n	800276e <UART_SetConfig+0x506>
 8002762:	e010      	b.n	8002786 <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002764:	f7ff fa34 	bl	8001bd0 <HAL_RCC_GetPCLK1Freq>
 8002768:	0003      	movs	r3, r0
 800276a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800276c:	e014      	b.n	8002798 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800276e:	4b67      	ldr	r3, [pc, #412]	; (800290c <UART_SetConfig+0x6a4>)
 8002770:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002772:	e011      	b.n	8002798 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002774:	f7ff f9a0 	bl	8001ab8 <HAL_RCC_GetSysClockFreq>
 8002778:	0003      	movs	r3, r0
 800277a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800277c:	e00c      	b.n	8002798 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800277e:	2380      	movs	r3, #128	; 0x80
 8002780:	021b      	lsls	r3, r3, #8
 8002782:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002784:	e008      	b.n	8002798 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 8002786:	2300      	movs	r3, #0
 8002788:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800278a:	231a      	movs	r3, #26
 800278c:	2220      	movs	r2, #32
 800278e:	189b      	adds	r3, r3, r2
 8002790:	19db      	adds	r3, r3, r7
 8002792:	2201      	movs	r2, #1
 8002794:	701a      	strb	r2, [r3, #0]
        break;
 8002796:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800279a:	2b00      	cmp	r3, #0
 800279c:	d100      	bne.n	80027a0 <UART_SetConfig+0x538>
 800279e:	e09a      	b.n	80028d6 <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80027a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027a4:	4b5a      	ldr	r3, [pc, #360]	; (8002910 <UART_SetConfig+0x6a8>)
 80027a6:	0052      	lsls	r2, r2, #1
 80027a8:	5ad3      	ldrh	r3, [r2, r3]
 80027aa:	0019      	movs	r1, r3
 80027ac:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80027ae:	f7fd fcb1 	bl	8000114 <__udivsi3>
 80027b2:	0003      	movs	r3, r0
 80027b4:	005a      	lsls	r2, r3, #1
 80027b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	085b      	lsrs	r3, r3, #1
 80027bc:	18d2      	adds	r2, r2, r3
 80027be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	0019      	movs	r1, r3
 80027c4:	0010      	movs	r0, r2
 80027c6:	f7fd fca5 	bl	8000114 <__udivsi3>
 80027ca:	0003      	movs	r3, r0
 80027cc:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80027ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027d0:	2b0f      	cmp	r3, #15
 80027d2:	d921      	bls.n	8002818 <UART_SetConfig+0x5b0>
 80027d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027d6:	2380      	movs	r3, #128	; 0x80
 80027d8:	025b      	lsls	r3, r3, #9
 80027da:	429a      	cmp	r2, r3
 80027dc:	d21c      	bcs.n	8002818 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80027de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027e0:	b29a      	uxth	r2, r3
 80027e2:	200e      	movs	r0, #14
 80027e4:	2420      	movs	r4, #32
 80027e6:	1903      	adds	r3, r0, r4
 80027e8:	19db      	adds	r3, r3, r7
 80027ea:	210f      	movs	r1, #15
 80027ec:	438a      	bics	r2, r1
 80027ee:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80027f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027f2:	085b      	lsrs	r3, r3, #1
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	2207      	movs	r2, #7
 80027f8:	4013      	ands	r3, r2
 80027fa:	b299      	uxth	r1, r3
 80027fc:	1903      	adds	r3, r0, r4
 80027fe:	19db      	adds	r3, r3, r7
 8002800:	1902      	adds	r2, r0, r4
 8002802:	19d2      	adds	r2, r2, r7
 8002804:	8812      	ldrh	r2, [r2, #0]
 8002806:	430a      	orrs	r2, r1
 8002808:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800280a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	1902      	adds	r2, r0, r4
 8002810:	19d2      	adds	r2, r2, r7
 8002812:	8812      	ldrh	r2, [r2, #0]
 8002814:	60da      	str	r2, [r3, #12]
 8002816:	e05e      	b.n	80028d6 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8002818:	231a      	movs	r3, #26
 800281a:	2220      	movs	r2, #32
 800281c:	189b      	adds	r3, r3, r2
 800281e:	19db      	adds	r3, r3, r7
 8002820:	2201      	movs	r2, #1
 8002822:	701a      	strb	r2, [r3, #0]
 8002824:	e057      	b.n	80028d6 <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002826:	231b      	movs	r3, #27
 8002828:	2220      	movs	r2, #32
 800282a:	189b      	adds	r3, r3, r2
 800282c:	19db      	adds	r3, r3, r7
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	2b08      	cmp	r3, #8
 8002832:	d015      	beq.n	8002860 <UART_SetConfig+0x5f8>
 8002834:	dc18      	bgt.n	8002868 <UART_SetConfig+0x600>
 8002836:	2b04      	cmp	r3, #4
 8002838:	d00d      	beq.n	8002856 <UART_SetConfig+0x5ee>
 800283a:	dc15      	bgt.n	8002868 <UART_SetConfig+0x600>
 800283c:	2b00      	cmp	r3, #0
 800283e:	d002      	beq.n	8002846 <UART_SetConfig+0x5de>
 8002840:	2b02      	cmp	r3, #2
 8002842:	d005      	beq.n	8002850 <UART_SetConfig+0x5e8>
 8002844:	e010      	b.n	8002868 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002846:	f7ff f9c3 	bl	8001bd0 <HAL_RCC_GetPCLK1Freq>
 800284a:	0003      	movs	r3, r0
 800284c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800284e:	e014      	b.n	800287a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002850:	4b2e      	ldr	r3, [pc, #184]	; (800290c <UART_SetConfig+0x6a4>)
 8002852:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002854:	e011      	b.n	800287a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002856:	f7ff f92f 	bl	8001ab8 <HAL_RCC_GetSysClockFreq>
 800285a:	0003      	movs	r3, r0
 800285c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800285e:	e00c      	b.n	800287a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002860:	2380      	movs	r3, #128	; 0x80
 8002862:	021b      	lsls	r3, r3, #8
 8002864:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002866:	e008      	b.n	800287a <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8002868:	2300      	movs	r3, #0
 800286a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800286c:	231a      	movs	r3, #26
 800286e:	2220      	movs	r2, #32
 8002870:	189b      	adds	r3, r3, r2
 8002872:	19db      	adds	r3, r3, r7
 8002874:	2201      	movs	r2, #1
 8002876:	701a      	strb	r2, [r3, #0]
        break;
 8002878:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800287a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800287c:	2b00      	cmp	r3, #0
 800287e:	d02a      	beq.n	80028d6 <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002882:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002884:	4b22      	ldr	r3, [pc, #136]	; (8002910 <UART_SetConfig+0x6a8>)
 8002886:	0052      	lsls	r2, r2, #1
 8002888:	5ad3      	ldrh	r3, [r2, r3]
 800288a:	0019      	movs	r1, r3
 800288c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800288e:	f7fd fc41 	bl	8000114 <__udivsi3>
 8002892:	0003      	movs	r3, r0
 8002894:	001a      	movs	r2, r3
 8002896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	085b      	lsrs	r3, r3, #1
 800289c:	18d2      	adds	r2, r2, r3
 800289e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	0019      	movs	r1, r3
 80028a4:	0010      	movs	r0, r2
 80028a6:	f7fd fc35 	bl	8000114 <__udivsi3>
 80028aa:	0003      	movs	r3, r0
 80028ac:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80028ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028b0:	2b0f      	cmp	r3, #15
 80028b2:	d90a      	bls.n	80028ca <UART_SetConfig+0x662>
 80028b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028b6:	2380      	movs	r3, #128	; 0x80
 80028b8:	025b      	lsls	r3, r3, #9
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d205      	bcs.n	80028ca <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80028be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c0:	b29a      	uxth	r2, r3
 80028c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	60da      	str	r2, [r3, #12]
 80028c8:	e005      	b.n	80028d6 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 80028ca:	231a      	movs	r3, #26
 80028cc:	2220      	movs	r2, #32
 80028ce:	189b      	adds	r3, r3, r2
 80028d0:	19db      	adds	r3, r3, r7
 80028d2:	2201      	movs	r2, #1
 80028d4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80028d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d8:	226a      	movs	r2, #106	; 0x6a
 80028da:	2101      	movs	r1, #1
 80028dc:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80028de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e0:	2268      	movs	r2, #104	; 0x68
 80028e2:	2101      	movs	r1, #1
 80028e4:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80028e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e8:	2200      	movs	r2, #0
 80028ea:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80028ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ee:	2200      	movs	r2, #0
 80028f0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80028f2:	231a      	movs	r3, #26
 80028f4:	2220      	movs	r2, #32
 80028f6:	189b      	adds	r3, r3, r2
 80028f8:	19db      	adds	r3, r3, r7
 80028fa:	781b      	ldrb	r3, [r3, #0]
}
 80028fc:	0018      	movs	r0, r3
 80028fe:	46bd      	mov	sp, r7
 8002900:	b010      	add	sp, #64	; 0x40
 8002902:	bdb0      	pop	{r4, r5, r7, pc}
 8002904:	40008000 	.word	0x40008000
 8002908:	40008400 	.word	0x40008400
 800290c:	00f42400 	.word	0x00f42400
 8002910:	080030e0 	.word	0x080030e0

08002914 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002920:	2208      	movs	r2, #8
 8002922:	4013      	ands	r3, r2
 8002924:	d00b      	beq.n	800293e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	4a4a      	ldr	r2, [pc, #296]	; (8002a58 <UART_AdvFeatureConfig+0x144>)
 800292e:	4013      	ands	r3, r2
 8002930:	0019      	movs	r1, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	430a      	orrs	r2, r1
 800293c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002942:	2201      	movs	r2, #1
 8002944:	4013      	ands	r3, r2
 8002946:	d00b      	beq.n	8002960 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	4a43      	ldr	r2, [pc, #268]	; (8002a5c <UART_AdvFeatureConfig+0x148>)
 8002950:	4013      	ands	r3, r2
 8002952:	0019      	movs	r1, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	430a      	orrs	r2, r1
 800295e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002964:	2202      	movs	r2, #2
 8002966:	4013      	ands	r3, r2
 8002968:	d00b      	beq.n	8002982 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	4a3b      	ldr	r2, [pc, #236]	; (8002a60 <UART_AdvFeatureConfig+0x14c>)
 8002972:	4013      	ands	r3, r2
 8002974:	0019      	movs	r1, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	430a      	orrs	r2, r1
 8002980:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002986:	2204      	movs	r2, #4
 8002988:	4013      	ands	r3, r2
 800298a:	d00b      	beq.n	80029a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	4a34      	ldr	r2, [pc, #208]	; (8002a64 <UART_AdvFeatureConfig+0x150>)
 8002994:	4013      	ands	r3, r2
 8002996:	0019      	movs	r1, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	430a      	orrs	r2, r1
 80029a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a8:	2210      	movs	r2, #16
 80029aa:	4013      	ands	r3, r2
 80029ac:	d00b      	beq.n	80029c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	4a2c      	ldr	r2, [pc, #176]	; (8002a68 <UART_AdvFeatureConfig+0x154>)
 80029b6:	4013      	ands	r3, r2
 80029b8:	0019      	movs	r1, r3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	430a      	orrs	r2, r1
 80029c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ca:	2220      	movs	r2, #32
 80029cc:	4013      	ands	r3, r2
 80029ce:	d00b      	beq.n	80029e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	4a25      	ldr	r2, [pc, #148]	; (8002a6c <UART_AdvFeatureConfig+0x158>)
 80029d8:	4013      	ands	r3, r2
 80029da:	0019      	movs	r1, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	430a      	orrs	r2, r1
 80029e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ec:	2240      	movs	r2, #64	; 0x40
 80029ee:	4013      	ands	r3, r2
 80029f0:	d01d      	beq.n	8002a2e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	4a1d      	ldr	r2, [pc, #116]	; (8002a70 <UART_AdvFeatureConfig+0x15c>)
 80029fa:	4013      	ands	r3, r2
 80029fc:	0019      	movs	r1, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	430a      	orrs	r2, r1
 8002a08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a0e:	2380      	movs	r3, #128	; 0x80
 8002a10:	035b      	lsls	r3, r3, #13
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d10b      	bne.n	8002a2e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	4a15      	ldr	r2, [pc, #84]	; (8002a74 <UART_AdvFeatureConfig+0x160>)
 8002a1e:	4013      	ands	r3, r2
 8002a20:	0019      	movs	r1, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a32:	2280      	movs	r2, #128	; 0x80
 8002a34:	4013      	ands	r3, r2
 8002a36:	d00b      	beq.n	8002a50 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	4a0e      	ldr	r2, [pc, #56]	; (8002a78 <UART_AdvFeatureConfig+0x164>)
 8002a40:	4013      	ands	r3, r2
 8002a42:	0019      	movs	r1, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	430a      	orrs	r2, r1
 8002a4e:	605a      	str	r2, [r3, #4]
  }
}
 8002a50:	46c0      	nop			; (mov r8, r8)
 8002a52:	46bd      	mov	sp, r7
 8002a54:	b002      	add	sp, #8
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	ffff7fff 	.word	0xffff7fff
 8002a5c:	fffdffff 	.word	0xfffdffff
 8002a60:	fffeffff 	.word	0xfffeffff
 8002a64:	fffbffff 	.word	0xfffbffff
 8002a68:	ffffefff 	.word	0xffffefff
 8002a6c:	ffffdfff 	.word	0xffffdfff
 8002a70:	ffefffff 	.word	0xffefffff
 8002a74:	ff9fffff 	.word	0xff9fffff
 8002a78:	fff7ffff 	.word	0xfff7ffff

08002a7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b092      	sub	sp, #72	; 0x48
 8002a80:	af02      	add	r7, sp, #8
 8002a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2290      	movs	r2, #144	; 0x90
 8002a88:	2100      	movs	r1, #0
 8002a8a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002a8c:	f7fe f902 	bl	8000c94 <HAL_GetTick>
 8002a90:	0003      	movs	r3, r0
 8002a92:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2208      	movs	r2, #8
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	2b08      	cmp	r3, #8
 8002aa0:	d12d      	bne.n	8002afe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002aa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002aa4:	2280      	movs	r2, #128	; 0x80
 8002aa6:	0391      	lsls	r1, r2, #14
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	4a47      	ldr	r2, [pc, #284]	; (8002bc8 <UART_CheckIdleState+0x14c>)
 8002aac:	9200      	str	r2, [sp, #0]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f000 f88e 	bl	8002bd0 <UART_WaitOnFlagUntilTimeout>
 8002ab4:	1e03      	subs	r3, r0, #0
 8002ab6:	d022      	beq.n	8002afe <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ab8:	f3ef 8310 	mrs	r3, PRIMASK
 8002abc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002ac0:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ac8:	f383 8810 	msr	PRIMASK, r3
}
 8002acc:	46c0      	nop			; (mov r8, r8)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2180      	movs	r1, #128	; 0x80
 8002ada:	438a      	bics	r2, r1
 8002adc:	601a      	str	r2, [r3, #0]
 8002ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ae4:	f383 8810 	msr	PRIMASK, r3
}
 8002ae8:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2288      	movs	r2, #136	; 0x88
 8002aee:	2120      	movs	r1, #32
 8002af0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2284      	movs	r2, #132	; 0x84
 8002af6:	2100      	movs	r1, #0
 8002af8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e060      	b.n	8002bc0 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2204      	movs	r2, #4
 8002b06:	4013      	ands	r3, r2
 8002b08:	2b04      	cmp	r3, #4
 8002b0a:	d146      	bne.n	8002b9a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b0e:	2280      	movs	r2, #128	; 0x80
 8002b10:	03d1      	lsls	r1, r2, #15
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	4a2c      	ldr	r2, [pc, #176]	; (8002bc8 <UART_CheckIdleState+0x14c>)
 8002b16:	9200      	str	r2, [sp, #0]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f000 f859 	bl	8002bd0 <UART_WaitOnFlagUntilTimeout>
 8002b1e:	1e03      	subs	r3, r0, #0
 8002b20:	d03b      	beq.n	8002b9a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b22:	f3ef 8310 	mrs	r3, PRIMASK
 8002b26:	60fb      	str	r3, [r7, #12]
  return(result);
 8002b28:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002b2a:	637b      	str	r3, [r7, #52]	; 0x34
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	f383 8810 	msr	PRIMASK, r3
}
 8002b36:	46c0      	nop			; (mov r8, r8)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4922      	ldr	r1, [pc, #136]	; (8002bcc <UART_CheckIdleState+0x150>)
 8002b44:	400a      	ands	r2, r1
 8002b46:	601a      	str	r2, [r3, #0]
 8002b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b4a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	f383 8810 	msr	PRIMASK, r3
}
 8002b52:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b54:	f3ef 8310 	mrs	r3, PRIMASK
 8002b58:	61bb      	str	r3, [r7, #24]
  return(result);
 8002b5a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b5c:	633b      	str	r3, [r7, #48]	; 0x30
 8002b5e:	2301      	movs	r3, #1
 8002b60:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	f383 8810 	msr	PRIMASK, r3
}
 8002b68:	46c0      	nop			; (mov r8, r8)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	689a      	ldr	r2, [r3, #8]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2101      	movs	r1, #1
 8002b76:	438a      	bics	r2, r1
 8002b78:	609a      	str	r2, [r3, #8]
 8002b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b7c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b7e:	6a3b      	ldr	r3, [r7, #32]
 8002b80:	f383 8810 	msr	PRIMASK, r3
}
 8002b84:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	228c      	movs	r2, #140	; 0x8c
 8002b8a:	2120      	movs	r1, #32
 8002b8c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2284      	movs	r2, #132	; 0x84
 8002b92:	2100      	movs	r1, #0
 8002b94:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e012      	b.n	8002bc0 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2288      	movs	r2, #136	; 0x88
 8002b9e:	2120      	movs	r1, #32
 8002ba0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	228c      	movs	r2, #140	; 0x8c
 8002ba6:	2120      	movs	r1, #32
 8002ba8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2284      	movs	r2, #132	; 0x84
 8002bba:	2100      	movs	r1, #0
 8002bbc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002bbe:	2300      	movs	r3, #0
}
 8002bc0:	0018      	movs	r0, r3
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	b010      	add	sp, #64	; 0x40
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	01ffffff 	.word	0x01ffffff
 8002bcc:	fffffedf 	.word	0xfffffedf

08002bd0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	603b      	str	r3, [r7, #0]
 8002bdc:	1dfb      	adds	r3, r7, #7
 8002bde:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002be0:	e051      	b.n	8002c86 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	3301      	adds	r3, #1
 8002be6:	d04e      	beq.n	8002c86 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002be8:	f7fe f854 	bl	8000c94 <HAL_GetTick>
 8002bec:	0002      	movs	r2, r0
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d302      	bcc.n	8002bfe <UART_WaitOnFlagUntilTimeout+0x2e>
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d101      	bne.n	8002c02 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e051      	b.n	8002ca6 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2204      	movs	r2, #4
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	d03b      	beq.n	8002c86 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	2b80      	cmp	r3, #128	; 0x80
 8002c12:	d038      	beq.n	8002c86 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	2b40      	cmp	r3, #64	; 0x40
 8002c18:	d035      	beq.n	8002c86 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	69db      	ldr	r3, [r3, #28]
 8002c20:	2208      	movs	r2, #8
 8002c22:	4013      	ands	r3, r2
 8002c24:	2b08      	cmp	r3, #8
 8002c26:	d111      	bne.n	8002c4c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2208      	movs	r2, #8
 8002c2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	0018      	movs	r0, r3
 8002c34:	f000 f83c 	bl	8002cb0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2290      	movs	r2, #144	; 0x90
 8002c3c:	2108      	movs	r1, #8
 8002c3e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2284      	movs	r2, #132	; 0x84
 8002c44:	2100      	movs	r1, #0
 8002c46:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e02c      	b.n	8002ca6 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	69da      	ldr	r2, [r3, #28]
 8002c52:	2380      	movs	r3, #128	; 0x80
 8002c54:	011b      	lsls	r3, r3, #4
 8002c56:	401a      	ands	r2, r3
 8002c58:	2380      	movs	r3, #128	; 0x80
 8002c5a:	011b      	lsls	r3, r3, #4
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d112      	bne.n	8002c86 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2280      	movs	r2, #128	; 0x80
 8002c66:	0112      	lsls	r2, r2, #4
 8002c68:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	0018      	movs	r0, r3
 8002c6e:	f000 f81f 	bl	8002cb0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2290      	movs	r2, #144	; 0x90
 8002c76:	2120      	movs	r1, #32
 8002c78:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2284      	movs	r2, #132	; 0x84
 8002c7e:	2100      	movs	r1, #0
 8002c80:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e00f      	b.n	8002ca6 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	69db      	ldr	r3, [r3, #28]
 8002c8c:	68ba      	ldr	r2, [r7, #8]
 8002c8e:	4013      	ands	r3, r2
 8002c90:	68ba      	ldr	r2, [r7, #8]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	425a      	negs	r2, r3
 8002c96:	4153      	adcs	r3, r2
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	001a      	movs	r2, r3
 8002c9c:	1dfb      	adds	r3, r7, #7
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d09e      	beq.n	8002be2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	0018      	movs	r0, r3
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	b004      	add	sp, #16
 8002cac:	bd80      	pop	{r7, pc}
	...

08002cb0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b08e      	sub	sp, #56	; 0x38
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cb8:	f3ef 8310 	mrs	r3, PRIMASK
 8002cbc:	617b      	str	r3, [r7, #20]
  return(result);
 8002cbe:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002cc0:	637b      	str	r3, [r7, #52]	; 0x34
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	f383 8810 	msr	PRIMASK, r3
}
 8002ccc:	46c0      	nop			; (mov r8, r8)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4926      	ldr	r1, [pc, #152]	; (8002d74 <UART_EndRxTransfer+0xc4>)
 8002cda:	400a      	ands	r2, r1
 8002cdc:	601a      	str	r2, [r3, #0]
 8002cde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ce0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	f383 8810 	msr	PRIMASK, r3
}
 8002ce8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cea:	f3ef 8310 	mrs	r3, PRIMASK
 8002cee:	623b      	str	r3, [r7, #32]
  return(result);
 8002cf0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002cf2:	633b      	str	r3, [r7, #48]	; 0x30
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfa:	f383 8810 	msr	PRIMASK, r3
}
 8002cfe:	46c0      	nop			; (mov r8, r8)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	689a      	ldr	r2, [r3, #8]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	491b      	ldr	r1, [pc, #108]	; (8002d78 <UART_EndRxTransfer+0xc8>)
 8002d0c:	400a      	ands	r2, r1
 8002d0e:	609a      	str	r2, [r3, #8]
 8002d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d12:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d16:	f383 8810 	msr	PRIMASK, r3
}
 8002d1a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d118      	bne.n	8002d56 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d24:	f3ef 8310 	mrs	r3, PRIMASK
 8002d28:	60bb      	str	r3, [r7, #8]
  return(result);
 8002d2a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d2e:	2301      	movs	r3, #1
 8002d30:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	f383 8810 	msr	PRIMASK, r3
}
 8002d38:	46c0      	nop			; (mov r8, r8)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2110      	movs	r1, #16
 8002d46:	438a      	bics	r2, r1
 8002d48:	601a      	str	r2, [r3, #0]
 8002d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d4c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	f383 8810 	msr	PRIMASK, r3
}
 8002d54:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	228c      	movs	r2, #140	; 0x8c
 8002d5a:	2120      	movs	r1, #32
 8002d5c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	675a      	str	r2, [r3, #116]	; 0x74
}
 8002d6a:	46c0      	nop			; (mov r8, r8)
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	b00e      	add	sp, #56	; 0x38
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	46c0      	nop			; (mov r8, r8)
 8002d74:	fffffedf 	.word	0xfffffedf
 8002d78:	effffffe 	.word	0xeffffffe

08002d7c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2284      	movs	r2, #132	; 0x84
 8002d88:	5c9b      	ldrb	r3, [r3, r2]
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d101      	bne.n	8002d92 <HAL_UARTEx_DisableFifoMode+0x16>
 8002d8e:	2302      	movs	r3, #2
 8002d90:	e027      	b.n	8002de2 <HAL_UARTEx_DisableFifoMode+0x66>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2284      	movs	r2, #132	; 0x84
 8002d96:	2101      	movs	r1, #1
 8002d98:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2288      	movs	r2, #136	; 0x88
 8002d9e:	2124      	movs	r1, #36	; 0x24
 8002da0:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2101      	movs	r1, #1
 8002db6:	438a      	bics	r2, r1
 8002db8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	4a0b      	ldr	r2, [pc, #44]	; (8002dec <HAL_UARTEx_DisableFifoMode+0x70>)
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	68fa      	ldr	r2, [r7, #12]
 8002dce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2288      	movs	r2, #136	; 0x88
 8002dd4:	2120      	movs	r1, #32
 8002dd6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2284      	movs	r2, #132	; 0x84
 8002ddc:	2100      	movs	r1, #0
 8002dde:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	0018      	movs	r0, r3
 8002de4:	46bd      	mov	sp, r7
 8002de6:	b004      	add	sp, #16
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	46c0      	nop			; (mov r8, r8)
 8002dec:	dfffffff 	.word	0xdfffffff

08002df0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2284      	movs	r2, #132	; 0x84
 8002dfe:	5c9b      	ldrb	r3, [r3, r2]
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d101      	bne.n	8002e08 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002e04:	2302      	movs	r3, #2
 8002e06:	e02e      	b.n	8002e66 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2284      	movs	r2, #132	; 0x84
 8002e0c:	2101      	movs	r1, #1
 8002e0e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2288      	movs	r2, #136	; 0x88
 8002e14:	2124      	movs	r1, #36	; 0x24
 8002e16:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2101      	movs	r1, #1
 8002e2c:	438a      	bics	r2, r1
 8002e2e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	00db      	lsls	r3, r3, #3
 8002e38:	08d9      	lsrs	r1, r3, #3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	683a      	ldr	r2, [r7, #0]
 8002e40:	430a      	orrs	r2, r1
 8002e42:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	0018      	movs	r0, r3
 8002e48:	f000 f854 	bl	8002ef4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	68fa      	ldr	r2, [r7, #12]
 8002e52:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2288      	movs	r2, #136	; 0x88
 8002e58:	2120      	movs	r1, #32
 8002e5a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2284      	movs	r2, #132	; 0x84
 8002e60:	2100      	movs	r1, #0
 8002e62:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	0018      	movs	r0, r3
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	b004      	add	sp, #16
 8002e6c:	bd80      	pop	{r7, pc}
	...

08002e70 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2284      	movs	r2, #132	; 0x84
 8002e7e:	5c9b      	ldrb	r3, [r3, r2]
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d101      	bne.n	8002e88 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002e84:	2302      	movs	r3, #2
 8002e86:	e02f      	b.n	8002ee8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2284      	movs	r2, #132	; 0x84
 8002e8c:	2101      	movs	r1, #1
 8002e8e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2288      	movs	r2, #136	; 0x88
 8002e94:	2124      	movs	r1, #36	; 0x24
 8002e96:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2101      	movs	r1, #1
 8002eac:	438a      	bics	r2, r1
 8002eae:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	4a0e      	ldr	r2, [pc, #56]	; (8002ef0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8002eb8:	4013      	ands	r3, r2
 8002eba:	0019      	movs	r1, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	683a      	ldr	r2, [r7, #0]
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	0018      	movs	r0, r3
 8002eca:	f000 f813 	bl	8002ef4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68fa      	ldr	r2, [r7, #12]
 8002ed4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2288      	movs	r2, #136	; 0x88
 8002eda:	2120      	movs	r1, #32
 8002edc:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2284      	movs	r2, #132	; 0x84
 8002ee2:	2100      	movs	r1, #0
 8002ee4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
}
 8002ee8:	0018      	movs	r0, r3
 8002eea:	46bd      	mov	sp, r7
 8002eec:	b004      	add	sp, #16
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	f1ffffff 	.word	0xf1ffffff

08002ef4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ef6:	b085      	sub	sp, #20
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d108      	bne.n	8002f16 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	226a      	movs	r2, #106	; 0x6a
 8002f08:	2101      	movs	r1, #1
 8002f0a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2268      	movs	r2, #104	; 0x68
 8002f10:	2101      	movs	r1, #1
 8002f12:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002f14:	e043      	b.n	8002f9e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002f16:	260f      	movs	r6, #15
 8002f18:	19bb      	adds	r3, r7, r6
 8002f1a:	2208      	movs	r2, #8
 8002f1c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8002f1e:	200e      	movs	r0, #14
 8002f20:	183b      	adds	r3, r7, r0
 8002f22:	2208      	movs	r2, #8
 8002f24:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	0e5b      	lsrs	r3, r3, #25
 8002f2e:	b2da      	uxtb	r2, r3
 8002f30:	240d      	movs	r4, #13
 8002f32:	193b      	adds	r3, r7, r4
 8002f34:	2107      	movs	r1, #7
 8002f36:	400a      	ands	r2, r1
 8002f38:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	0f5b      	lsrs	r3, r3, #29
 8002f42:	b2da      	uxtb	r2, r3
 8002f44:	250c      	movs	r5, #12
 8002f46:	197b      	adds	r3, r7, r5
 8002f48:	2107      	movs	r1, #7
 8002f4a:	400a      	ands	r2, r1
 8002f4c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002f4e:	183b      	adds	r3, r7, r0
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	197a      	adds	r2, r7, r5
 8002f54:	7812      	ldrb	r2, [r2, #0]
 8002f56:	4914      	ldr	r1, [pc, #80]	; (8002fa8 <UARTEx_SetNbDataToProcess+0xb4>)
 8002f58:	5c8a      	ldrb	r2, [r1, r2]
 8002f5a:	435a      	muls	r2, r3
 8002f5c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8002f5e:	197b      	adds	r3, r7, r5
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	4a12      	ldr	r2, [pc, #72]	; (8002fac <UARTEx_SetNbDataToProcess+0xb8>)
 8002f64:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002f66:	0019      	movs	r1, r3
 8002f68:	f7fd f95e 	bl	8000228 <__divsi3>
 8002f6c:	0003      	movs	r3, r0
 8002f6e:	b299      	uxth	r1, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	226a      	movs	r2, #106	; 0x6a
 8002f74:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002f76:	19bb      	adds	r3, r7, r6
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	193a      	adds	r2, r7, r4
 8002f7c:	7812      	ldrb	r2, [r2, #0]
 8002f7e:	490a      	ldr	r1, [pc, #40]	; (8002fa8 <UARTEx_SetNbDataToProcess+0xb4>)
 8002f80:	5c8a      	ldrb	r2, [r1, r2]
 8002f82:	435a      	muls	r2, r3
 8002f84:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8002f86:	193b      	adds	r3, r7, r4
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	4a08      	ldr	r2, [pc, #32]	; (8002fac <UARTEx_SetNbDataToProcess+0xb8>)
 8002f8c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002f8e:	0019      	movs	r1, r3
 8002f90:	f7fd f94a 	bl	8000228 <__divsi3>
 8002f94:	0003      	movs	r3, r0
 8002f96:	b299      	uxth	r1, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2268      	movs	r2, #104	; 0x68
 8002f9c:	5299      	strh	r1, [r3, r2]
}
 8002f9e:	46c0      	nop			; (mov r8, r8)
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	b005      	add	sp, #20
 8002fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fa6:	46c0      	nop			; (mov r8, r8)
 8002fa8:	080030f8 	.word	0x080030f8
 8002fac:	08003100 	.word	0x08003100

08002fb0 <memset>:
 8002fb0:	0003      	movs	r3, r0
 8002fb2:	1882      	adds	r2, r0, r2
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d100      	bne.n	8002fba <memset+0xa>
 8002fb8:	4770      	bx	lr
 8002fba:	7019      	strb	r1, [r3, #0]
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	e7f9      	b.n	8002fb4 <memset+0x4>

08002fc0 <__libc_init_array>:
 8002fc0:	b570      	push	{r4, r5, r6, lr}
 8002fc2:	2600      	movs	r6, #0
 8002fc4:	4c0c      	ldr	r4, [pc, #48]	; (8002ff8 <__libc_init_array+0x38>)
 8002fc6:	4d0d      	ldr	r5, [pc, #52]	; (8002ffc <__libc_init_array+0x3c>)
 8002fc8:	1b64      	subs	r4, r4, r5
 8002fca:	10a4      	asrs	r4, r4, #2
 8002fcc:	42a6      	cmp	r6, r4
 8002fce:	d109      	bne.n	8002fe4 <__libc_init_array+0x24>
 8002fd0:	2600      	movs	r6, #0
 8002fd2:	f000 f819 	bl	8003008 <_init>
 8002fd6:	4c0a      	ldr	r4, [pc, #40]	; (8003000 <__libc_init_array+0x40>)
 8002fd8:	4d0a      	ldr	r5, [pc, #40]	; (8003004 <__libc_init_array+0x44>)
 8002fda:	1b64      	subs	r4, r4, r5
 8002fdc:	10a4      	asrs	r4, r4, #2
 8002fde:	42a6      	cmp	r6, r4
 8002fe0:	d105      	bne.n	8002fee <__libc_init_array+0x2e>
 8002fe2:	bd70      	pop	{r4, r5, r6, pc}
 8002fe4:	00b3      	lsls	r3, r6, #2
 8002fe6:	58eb      	ldr	r3, [r5, r3]
 8002fe8:	4798      	blx	r3
 8002fea:	3601      	adds	r6, #1
 8002fec:	e7ee      	b.n	8002fcc <__libc_init_array+0xc>
 8002fee:	00b3      	lsls	r3, r6, #2
 8002ff0:	58eb      	ldr	r3, [r5, r3]
 8002ff2:	4798      	blx	r3
 8002ff4:	3601      	adds	r6, #1
 8002ff6:	e7f2      	b.n	8002fde <__libc_init_array+0x1e>
 8002ff8:	08003110 	.word	0x08003110
 8002ffc:	08003110 	.word	0x08003110
 8003000:	08003114 	.word	0x08003114
 8003004:	08003110 	.word	0x08003110

08003008 <_init>:
 8003008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800300a:	46c0      	nop			; (mov r8, r8)
 800300c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800300e:	bc08      	pop	{r3}
 8003010:	469e      	mov	lr, r3
 8003012:	4770      	bx	lr

08003014 <_fini>:
 8003014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003016:	46c0      	nop			; (mov r8, r8)
 8003018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800301a:	bc08      	pop	{r3}
 800301c:	469e      	mov	lr, r3
 800301e:	4770      	bx	lr
