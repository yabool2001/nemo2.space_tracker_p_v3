
nemo2.space_tracker_p_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fe4  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ab0  080060a0  080060a0  000160a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b50  08007b50  00020064  2**0
                  CONTENTS
  4 .ARM          00000008  08007b50  08007b50  00017b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b58  08007b58  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b58  08007b58  00017b58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b5c  08007b5c  00017b5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08007b60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000480  20000064  08007bc4  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004e4  08007bc4  000204e4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e9db  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002566  00000000  00000000  0002eaaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c68  00000000  00000000  00031010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009ae  00000000  00000000  00031c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d853  00000000  00000000  00032626  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010f06  00000000  00000000  0004fe79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ba030  00000000  00000000  00060d7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000030b0  00000000  00000000  0011adb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  0011de60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000064 	.word	0x20000064
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08006088 	.word	0x08006088

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000068 	.word	0x20000068
 8000100:	08006088 	.word	0x08006088

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	; 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_uldivmod>:
 8000414:	2b00      	cmp	r3, #0
 8000416:	d111      	bne.n	800043c <__aeabi_uldivmod+0x28>
 8000418:	2a00      	cmp	r2, #0
 800041a:	d10f      	bne.n	800043c <__aeabi_uldivmod+0x28>
 800041c:	2900      	cmp	r1, #0
 800041e:	d100      	bne.n	8000422 <__aeabi_uldivmod+0xe>
 8000420:	2800      	cmp	r0, #0
 8000422:	d002      	beq.n	800042a <__aeabi_uldivmod+0x16>
 8000424:	2100      	movs	r1, #0
 8000426:	43c9      	mvns	r1, r1
 8000428:	0008      	movs	r0, r1
 800042a:	b407      	push	{r0, r1, r2}
 800042c:	4802      	ldr	r0, [pc, #8]	; (8000438 <__aeabi_uldivmod+0x24>)
 800042e:	a102      	add	r1, pc, #8	; (adr r1, 8000438 <__aeabi_uldivmod+0x24>)
 8000430:	1840      	adds	r0, r0, r1
 8000432:	9002      	str	r0, [sp, #8]
 8000434:	bd03      	pop	{r0, r1, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	ffffffd9 	.word	0xffffffd9
 800043c:	b403      	push	{r0, r1}
 800043e:	4668      	mov	r0, sp
 8000440:	b501      	push	{r0, lr}
 8000442:	9802      	ldr	r0, [sp, #8]
 8000444:	f000 f806 	bl	8000454 <__udivmoddi4>
 8000448:	9b01      	ldr	r3, [sp, #4]
 800044a:	469e      	mov	lr, r3
 800044c:	b002      	add	sp, #8
 800044e:	bc0c      	pop	{r2, r3}
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__udivmoddi4>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	4657      	mov	r7, sl
 8000458:	464e      	mov	r6, r9
 800045a:	4645      	mov	r5, r8
 800045c:	46de      	mov	lr, fp
 800045e:	b5e0      	push	{r5, r6, r7, lr}
 8000460:	0004      	movs	r4, r0
 8000462:	000d      	movs	r5, r1
 8000464:	4692      	mov	sl, r2
 8000466:	4699      	mov	r9, r3
 8000468:	b083      	sub	sp, #12
 800046a:	428b      	cmp	r3, r1
 800046c:	d830      	bhi.n	80004d0 <__udivmoddi4+0x7c>
 800046e:	d02d      	beq.n	80004cc <__udivmoddi4+0x78>
 8000470:	4649      	mov	r1, r9
 8000472:	4650      	mov	r0, sl
 8000474:	f000 f8d8 	bl	8000628 <__clzdi2>
 8000478:	0029      	movs	r1, r5
 800047a:	0006      	movs	r6, r0
 800047c:	0020      	movs	r0, r4
 800047e:	f000 f8d3 	bl	8000628 <__clzdi2>
 8000482:	1a33      	subs	r3, r6, r0
 8000484:	4698      	mov	r8, r3
 8000486:	3b20      	subs	r3, #32
 8000488:	d434      	bmi.n	80004f4 <__udivmoddi4+0xa0>
 800048a:	469b      	mov	fp, r3
 800048c:	4653      	mov	r3, sl
 800048e:	465a      	mov	r2, fp
 8000490:	4093      	lsls	r3, r2
 8000492:	4642      	mov	r2, r8
 8000494:	001f      	movs	r7, r3
 8000496:	4653      	mov	r3, sl
 8000498:	4093      	lsls	r3, r2
 800049a:	001e      	movs	r6, r3
 800049c:	42af      	cmp	r7, r5
 800049e:	d83b      	bhi.n	8000518 <__udivmoddi4+0xc4>
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d100      	bne.n	80004a6 <__udivmoddi4+0x52>
 80004a4:	e079      	b.n	800059a <__udivmoddi4+0x146>
 80004a6:	465b      	mov	r3, fp
 80004a8:	1ba4      	subs	r4, r4, r6
 80004aa:	41bd      	sbcs	r5, r7
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	da00      	bge.n	80004b2 <__udivmoddi4+0x5e>
 80004b0:	e076      	b.n	80005a0 <__udivmoddi4+0x14c>
 80004b2:	2200      	movs	r2, #0
 80004b4:	2300      	movs	r3, #0
 80004b6:	9200      	str	r2, [sp, #0]
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	2301      	movs	r3, #1
 80004bc:	465a      	mov	r2, fp
 80004be:	4093      	lsls	r3, r2
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	2301      	movs	r3, #1
 80004c4:	4642      	mov	r2, r8
 80004c6:	4093      	lsls	r3, r2
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	e029      	b.n	8000520 <__udivmoddi4+0xcc>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d9cf      	bls.n	8000470 <__udivmoddi4+0x1c>
 80004d0:	2200      	movs	r2, #0
 80004d2:	2300      	movs	r3, #0
 80004d4:	9200      	str	r2, [sp, #0]
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <__udivmoddi4+0x8e>
 80004de:	601c      	str	r4, [r3, #0]
 80004e0:	605d      	str	r5, [r3, #4]
 80004e2:	9800      	ldr	r0, [sp, #0]
 80004e4:	9901      	ldr	r1, [sp, #4]
 80004e6:	b003      	add	sp, #12
 80004e8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ea:	46bb      	mov	fp, r7
 80004ec:	46b2      	mov	sl, r6
 80004ee:	46a9      	mov	r9, r5
 80004f0:	46a0      	mov	r8, r4
 80004f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f4:	4642      	mov	r2, r8
 80004f6:	469b      	mov	fp, r3
 80004f8:	2320      	movs	r3, #32
 80004fa:	1a9b      	subs	r3, r3, r2
 80004fc:	4652      	mov	r2, sl
 80004fe:	40da      	lsrs	r2, r3
 8000500:	4641      	mov	r1, r8
 8000502:	0013      	movs	r3, r2
 8000504:	464a      	mov	r2, r9
 8000506:	408a      	lsls	r2, r1
 8000508:	0017      	movs	r7, r2
 800050a:	4642      	mov	r2, r8
 800050c:	431f      	orrs	r7, r3
 800050e:	4653      	mov	r3, sl
 8000510:	4093      	lsls	r3, r2
 8000512:	001e      	movs	r6, r3
 8000514:	42af      	cmp	r7, r5
 8000516:	d9c3      	bls.n	80004a0 <__udivmoddi4+0x4c>
 8000518:	2200      	movs	r2, #0
 800051a:	2300      	movs	r3, #0
 800051c:	9200      	str	r2, [sp, #0]
 800051e:	9301      	str	r3, [sp, #4]
 8000520:	4643      	mov	r3, r8
 8000522:	2b00      	cmp	r3, #0
 8000524:	d0d8      	beq.n	80004d8 <__udivmoddi4+0x84>
 8000526:	07fb      	lsls	r3, r7, #31
 8000528:	0872      	lsrs	r2, r6, #1
 800052a:	431a      	orrs	r2, r3
 800052c:	4646      	mov	r6, r8
 800052e:	087b      	lsrs	r3, r7, #1
 8000530:	e00e      	b.n	8000550 <__udivmoddi4+0xfc>
 8000532:	42ab      	cmp	r3, r5
 8000534:	d101      	bne.n	800053a <__udivmoddi4+0xe6>
 8000536:	42a2      	cmp	r2, r4
 8000538:	d80c      	bhi.n	8000554 <__udivmoddi4+0x100>
 800053a:	1aa4      	subs	r4, r4, r2
 800053c:	419d      	sbcs	r5, r3
 800053e:	2001      	movs	r0, #1
 8000540:	1924      	adds	r4, r4, r4
 8000542:	416d      	adcs	r5, r5
 8000544:	2100      	movs	r1, #0
 8000546:	3e01      	subs	r6, #1
 8000548:	1824      	adds	r4, r4, r0
 800054a:	414d      	adcs	r5, r1
 800054c:	2e00      	cmp	r6, #0
 800054e:	d006      	beq.n	800055e <__udivmoddi4+0x10a>
 8000550:	42ab      	cmp	r3, r5
 8000552:	d9ee      	bls.n	8000532 <__udivmoddi4+0xde>
 8000554:	3e01      	subs	r6, #1
 8000556:	1924      	adds	r4, r4, r4
 8000558:	416d      	adcs	r5, r5
 800055a:	2e00      	cmp	r6, #0
 800055c:	d1f8      	bne.n	8000550 <__udivmoddi4+0xfc>
 800055e:	9800      	ldr	r0, [sp, #0]
 8000560:	9901      	ldr	r1, [sp, #4]
 8000562:	465b      	mov	r3, fp
 8000564:	1900      	adds	r0, r0, r4
 8000566:	4169      	adcs	r1, r5
 8000568:	2b00      	cmp	r3, #0
 800056a:	db24      	blt.n	80005b6 <__udivmoddi4+0x162>
 800056c:	002b      	movs	r3, r5
 800056e:	465a      	mov	r2, fp
 8000570:	4644      	mov	r4, r8
 8000572:	40d3      	lsrs	r3, r2
 8000574:	002a      	movs	r2, r5
 8000576:	40e2      	lsrs	r2, r4
 8000578:	001c      	movs	r4, r3
 800057a:	465b      	mov	r3, fp
 800057c:	0015      	movs	r5, r2
 800057e:	2b00      	cmp	r3, #0
 8000580:	db2a      	blt.n	80005d8 <__udivmoddi4+0x184>
 8000582:	0026      	movs	r6, r4
 8000584:	409e      	lsls	r6, r3
 8000586:	0033      	movs	r3, r6
 8000588:	0026      	movs	r6, r4
 800058a:	4647      	mov	r7, r8
 800058c:	40be      	lsls	r6, r7
 800058e:	0032      	movs	r2, r6
 8000590:	1a80      	subs	r0, r0, r2
 8000592:	4199      	sbcs	r1, r3
 8000594:	9000      	str	r0, [sp, #0]
 8000596:	9101      	str	r1, [sp, #4]
 8000598:	e79e      	b.n	80004d8 <__udivmoddi4+0x84>
 800059a:	42a3      	cmp	r3, r4
 800059c:	d8bc      	bhi.n	8000518 <__udivmoddi4+0xc4>
 800059e:	e782      	b.n	80004a6 <__udivmoddi4+0x52>
 80005a0:	4642      	mov	r2, r8
 80005a2:	2320      	movs	r3, #32
 80005a4:	2100      	movs	r1, #0
 80005a6:	1a9b      	subs	r3, r3, r2
 80005a8:	2200      	movs	r2, #0
 80005aa:	9100      	str	r1, [sp, #0]
 80005ac:	9201      	str	r2, [sp, #4]
 80005ae:	2201      	movs	r2, #1
 80005b0:	40da      	lsrs	r2, r3
 80005b2:	9201      	str	r2, [sp, #4]
 80005b4:	e785      	b.n	80004c2 <__udivmoddi4+0x6e>
 80005b6:	4642      	mov	r2, r8
 80005b8:	2320      	movs	r3, #32
 80005ba:	1a9b      	subs	r3, r3, r2
 80005bc:	002a      	movs	r2, r5
 80005be:	4646      	mov	r6, r8
 80005c0:	409a      	lsls	r2, r3
 80005c2:	0023      	movs	r3, r4
 80005c4:	40f3      	lsrs	r3, r6
 80005c6:	4644      	mov	r4, r8
 80005c8:	4313      	orrs	r3, r2
 80005ca:	002a      	movs	r2, r5
 80005cc:	40e2      	lsrs	r2, r4
 80005ce:	001c      	movs	r4, r3
 80005d0:	465b      	mov	r3, fp
 80005d2:	0015      	movs	r5, r2
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	dad4      	bge.n	8000582 <__udivmoddi4+0x12e>
 80005d8:	4642      	mov	r2, r8
 80005da:	002f      	movs	r7, r5
 80005dc:	2320      	movs	r3, #32
 80005de:	0026      	movs	r6, r4
 80005e0:	4097      	lsls	r7, r2
 80005e2:	1a9b      	subs	r3, r3, r2
 80005e4:	40de      	lsrs	r6, r3
 80005e6:	003b      	movs	r3, r7
 80005e8:	4333      	orrs	r3, r6
 80005ea:	e7cd      	b.n	8000588 <__udivmoddi4+0x134>

080005ec <__clzsi2>:
 80005ec:	211c      	movs	r1, #28
 80005ee:	2301      	movs	r3, #1
 80005f0:	041b      	lsls	r3, r3, #16
 80005f2:	4298      	cmp	r0, r3
 80005f4:	d301      	bcc.n	80005fa <__clzsi2+0xe>
 80005f6:	0c00      	lsrs	r0, r0, #16
 80005f8:	3910      	subs	r1, #16
 80005fa:	0a1b      	lsrs	r3, r3, #8
 80005fc:	4298      	cmp	r0, r3
 80005fe:	d301      	bcc.n	8000604 <__clzsi2+0x18>
 8000600:	0a00      	lsrs	r0, r0, #8
 8000602:	3908      	subs	r1, #8
 8000604:	091b      	lsrs	r3, r3, #4
 8000606:	4298      	cmp	r0, r3
 8000608:	d301      	bcc.n	800060e <__clzsi2+0x22>
 800060a:	0900      	lsrs	r0, r0, #4
 800060c:	3904      	subs	r1, #4
 800060e:	a202      	add	r2, pc, #8	; (adr r2, 8000618 <__clzsi2+0x2c>)
 8000610:	5c10      	ldrb	r0, [r2, r0]
 8000612:	1840      	adds	r0, r0, r1
 8000614:	4770      	bx	lr
 8000616:	46c0      	nop			; (mov r8, r8)
 8000618:	02020304 	.word	0x02020304
 800061c:	01010101 	.word	0x01010101
	...

08000628 <__clzdi2>:
 8000628:	b510      	push	{r4, lr}
 800062a:	2900      	cmp	r1, #0
 800062c:	d103      	bne.n	8000636 <__clzdi2+0xe>
 800062e:	f7ff ffdd 	bl	80005ec <__clzsi2>
 8000632:	3020      	adds	r0, #32
 8000634:	e002      	b.n	800063c <__clzdi2+0x14>
 8000636:	0008      	movs	r0, r1
 8000638:	f7ff ffd8 	bl	80005ec <__clzsi2>
 800063c:	bd10      	pop	{r4, pc}
 800063e:	46c0      	nop			; (mov r8, r8)

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000644:	f000 fd50 	bl	80010e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000648:	f000 f854 	bl	80006f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064c:	f000 fa1c 	bl	8000a88 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000650:	f000 f998 	bl	8000984 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8000654:	f000 f948 	bl	80008e8 <MX_USART2_UART_Init>
  MX_USART5_UART_Init();
 8000658:	f000 f9e2 	bl	8000a20 <MX_USART5_UART_Init>
  MX_RTC_Init();
 800065c:	f000 f8a0 	bl	80007a0 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  send_debug_logs ( hello ) ;
 8000660:	4b1e      	ldr	r3, [pc, #120]	; (80006dc <main+0x9c>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	0018      	movs	r0, r3
 8000666:	f000 fac1 	bl	8000bec <send_debug_logs>
  sprintf ( dbg_payload , "Firmware version: %s" , fv ) ;
 800066a:	4b1d      	ldr	r3, [pc, #116]	; (80006e0 <main+0xa0>)
 800066c:	681a      	ldr	r2, [r3, #0]
 800066e:	491d      	ldr	r1, [pc, #116]	; (80006e4 <main+0xa4>)
 8000670:	4b1d      	ldr	r3, [pc, #116]	; (80006e8 <main+0xa8>)
 8000672:	0018      	movs	r0, r3
 8000674:	f005 f862 	bl	800573c <siprintf>
  send_debug_logs ( dbg_payload ) ;
 8000678:	4b1b      	ldr	r3, [pc, #108]	; (80006e8 <main+0xa8>)
 800067a:	0018      	movs	r0, r3
 800067c:	f000 fab6 	bl	8000bec <send_debug_logs>
  /*sprintf ( dbg_payload , "Firmware mode: %u" , (uint16_t) sys_mode ) ;
  send_debug_logs ( dbg_payload ) ;
  sprintf ( dbg_payload , "Mission mode: %u" , (uint16_t) sys_mode ) ;
  send_debug_logs ( dbg_payload ) ;*/

  ant_sw_pos ( 2 ) ;
 8000680:	2002      	movs	r0, #2
 8000682:	f000 fb33 	bl	8000cec <ant_sw_pos>

  if ( my_astro_init () )
 8000686:	f004 ffab 	bl	80055e0 <my_astro_init>
 800068a:	1e03      	subs	r3, r0, #0
 800068c:	d011      	beq.n	80006b2 <main+0x72>
	  while ( is_astro_evt () )
 800068e:	e00b      	b.n	80006a8 <main+0x68>
	  {
		  sprintf ( dbg_payload , "%s,%d,astro_evt" , __FILE__ , __LINE__ ) ;
 8000690:	4a16      	ldr	r2, [pc, #88]	; (80006ec <main+0xac>)
 8000692:	4917      	ldr	r1, [pc, #92]	; (80006f0 <main+0xb0>)
 8000694:	4814      	ldr	r0, [pc, #80]	; (80006e8 <main+0xa8>)
 8000696:	237f      	movs	r3, #127	; 0x7f
 8000698:	f005 f850 	bl	800573c <siprintf>
		  send_debug_logs ( dbg_payload ) ;
 800069c:	4b12      	ldr	r3, [pc, #72]	; (80006e8 <main+0xa8>)
 800069e:	0018      	movs	r0, r3
 80006a0:	f000 faa4 	bl	8000bec <send_debug_logs>
		  my_astro_handle_evt () ;
 80006a4:	f004 ffd4 	bl	8005650 <my_astro_handle_evt>
	  while ( is_astro_evt () )
 80006a8:	f000 fa8e 	bl	8000bc8 <is_astro_evt>
 80006ac:	1e03      	subs	r3, r0, #0
 80006ae:	d1ef      	bne.n	8000690 <main+0x50>
 80006b0:	e00e      	b.n	80006d0 <main+0x90>
	  }
  else
	  sys_restart () ;
 80006b2:	f000 fa67 	bl	8000b84 <sys_restart>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while ( is_astro_evt () )
 80006b6:	e00b      	b.n	80006d0 <main+0x90>
	  {
		  sprintf ( dbg_payload , "%s,%d,astro_evt" , __FILE__ , __LINE__ ) ;
 80006b8:	4a0c      	ldr	r2, [pc, #48]	; (80006ec <main+0xac>)
 80006ba:	490d      	ldr	r1, [pc, #52]	; (80006f0 <main+0xb0>)
 80006bc:	480a      	ldr	r0, [pc, #40]	; (80006e8 <main+0xa8>)
 80006be:	238f      	movs	r3, #143	; 0x8f
 80006c0:	f005 f83c 	bl	800573c <siprintf>
		  send_debug_logs ( dbg_payload ) ;
 80006c4:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <main+0xa8>)
 80006c6:	0018      	movs	r0, r3
 80006c8:	f000 fa90 	bl	8000bec <send_debug_logs>
		  my_astro_handle_evt () ;
 80006cc:	f004 ffc0 	bl	8005650 <my_astro_handle_evt>
	  while ( is_astro_evt () )
 80006d0:	f000 fa7a 	bl	8000bc8 <is_astro_evt>
 80006d4:	1e03      	subs	r3, r0, #0
 80006d6:	d1ef      	bne.n	80006b8 <main+0x78>
 80006d8:	e7fa      	b.n	80006d0 <main+0x90>
 80006da:	46c0      	nop			; (mov r8, r8)
 80006dc:	20000000 	.word	0x20000000
 80006e0:	20000004 	.word	0x20000004
 80006e4:	080060d0 	.word	0x080060d0
 80006e8:	20000268 	.word	0x20000268
 80006ec:	080060e8 	.word	0x080060e8
 80006f0:	080060fc 	.word	0x080060fc

080006f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f4:	b590      	push	{r4, r7, lr}
 80006f6:	b095      	sub	sp, #84	; 0x54
 80006f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fa:	2414      	movs	r4, #20
 80006fc:	193b      	adds	r3, r7, r4
 80006fe:	0018      	movs	r0, r3
 8000700:	233c      	movs	r3, #60	; 0x3c
 8000702:	001a      	movs	r2, r3
 8000704:	2100      	movs	r1, #0
 8000706:	f005 f839 	bl	800577c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800070a:	1d3b      	adds	r3, r7, #4
 800070c:	0018      	movs	r0, r3
 800070e:	2310      	movs	r3, #16
 8000710:	001a      	movs	r2, r3
 8000712:	2100      	movs	r1, #0
 8000714:	f005 f832 	bl	800577c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000718:	2380      	movs	r3, #128	; 0x80
 800071a:	009b      	lsls	r3, r3, #2
 800071c:	0018      	movs	r0, r3
 800071e:	f001 f821 	bl	8001764 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000722:	f001 f811 	bl	8001748 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000726:	4b1d      	ldr	r3, [pc, #116]	; (800079c <SystemClock_Config+0xa8>)
 8000728:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800072a:	4b1c      	ldr	r3, [pc, #112]	; (800079c <SystemClock_Config+0xa8>)
 800072c:	2118      	movs	r1, #24
 800072e:	438a      	bics	r2, r1
 8000730:	65da      	str	r2, [r3, #92]	; 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000732:	193b      	adds	r3, r7, r4
 8000734:	2206      	movs	r2, #6
 8000736:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000738:	193b      	adds	r3, r7, r4
 800073a:	2201      	movs	r2, #1
 800073c:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800073e:	193b      	adds	r3, r7, r4
 8000740:	2280      	movs	r2, #128	; 0x80
 8000742:	0052      	lsls	r2, r2, #1
 8000744:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000746:	193b      	adds	r3, r7, r4
 8000748:	2200      	movs	r2, #0
 800074a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800074c:	193b      	adds	r3, r7, r4
 800074e:	2240      	movs	r2, #64	; 0x40
 8000750:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000752:	193b      	adds	r3, r7, r4
 8000754:	2200      	movs	r2, #0
 8000756:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000758:	193b      	adds	r3, r7, r4
 800075a:	0018      	movs	r0, r3
 800075c:	f001 f84e 	bl	80017fc <HAL_RCC_OscConfig>
 8000760:	1e03      	subs	r3, r0, #0
 8000762:	d001      	beq.n	8000768 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000764:	f000 faf4 	bl	8000d50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000768:	1d3b      	adds	r3, r7, #4
 800076a:	2207      	movs	r2, #7
 800076c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800076e:	1d3b      	adds	r3, r7, #4
 8000770:	2200      	movs	r2, #0
 8000772:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000774:	1d3b      	adds	r3, r7, #4
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800077a:	1d3b      	adds	r3, r7, #4
 800077c:	2200      	movs	r2, #0
 800077e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000780:	1d3b      	adds	r3, r7, #4
 8000782:	2100      	movs	r1, #0
 8000784:	0018      	movs	r0, r3
 8000786:	f001 fb99 	bl	8001ebc <HAL_RCC_ClockConfig>
 800078a:	1e03      	subs	r3, r0, #0
 800078c:	d001      	beq.n	8000792 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800078e:	f000 fadf 	bl	8000d50 <Error_Handler>
  }
}
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	46bd      	mov	sp, r7
 8000796:	b015      	add	sp, #84	; 0x54
 8000798:	bd90      	pop	{r4, r7, pc}
 800079a:	46c0      	nop			; (mov r8, r8)
 800079c:	40021000 	.word	0x40021000

080007a0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b090      	sub	sp, #64	; 0x40
 80007a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80007a6:	232c      	movs	r3, #44	; 0x2c
 80007a8:	18fb      	adds	r3, r7, r3
 80007aa:	0018      	movs	r0, r3
 80007ac:	2314      	movs	r3, #20
 80007ae:	001a      	movs	r2, r3
 80007b0:	2100      	movs	r1, #0
 80007b2:	f004 ffe3 	bl	800577c <memset>
  RTC_DateTypeDef sDate = {0};
 80007b6:	2328      	movs	r3, #40	; 0x28
 80007b8:	18fb      	adds	r3, r7, r3
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 80007be:	003b      	movs	r3, r7
 80007c0:	0018      	movs	r0, r3
 80007c2:	2328      	movs	r3, #40	; 0x28
 80007c4:	001a      	movs	r2, r3
 80007c6:	2100      	movs	r1, #0
 80007c8:	f004 ffd8 	bl	800577c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80007cc:	4b44      	ldr	r3, [pc, #272]	; (80008e0 <MX_RTC_Init+0x140>)
 80007ce:	4a45      	ldr	r2, [pc, #276]	; (80008e4 <MX_RTC_Init+0x144>)
 80007d0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80007d2:	4b43      	ldr	r3, [pc, #268]	; (80008e0 <MX_RTC_Init+0x140>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 80007d8:	4b41      	ldr	r3, [pc, #260]	; (80008e0 <MX_RTC_Init+0x140>)
 80007da:	227f      	movs	r2, #127	; 0x7f
 80007dc:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 80007de:	4b40      	ldr	r3, [pc, #256]	; (80008e0 <MX_RTC_Init+0x140>)
 80007e0:	22ff      	movs	r2, #255	; 0xff
 80007e2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80007e4:	4b3e      	ldr	r3, [pc, #248]	; (80008e0 <MX_RTC_Init+0x140>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80007ea:	4b3d      	ldr	r3, [pc, #244]	; (80008e0 <MX_RTC_Init+0x140>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80007f0:	4b3b      	ldr	r3, [pc, #236]	; (80008e0 <MX_RTC_Init+0x140>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80007f6:	4b3a      	ldr	r3, [pc, #232]	; (80008e0 <MX_RTC_Init+0x140>)
 80007f8:	2280      	movs	r2, #128	; 0x80
 80007fa:	05d2      	lsls	r2, r2, #23
 80007fc:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80007fe:	4b38      	ldr	r3, [pc, #224]	; (80008e0 <MX_RTC_Init+0x140>)
 8000800:	2200      	movs	r2, #0
 8000802:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000804:	4b36      	ldr	r3, [pc, #216]	; (80008e0 <MX_RTC_Init+0x140>)
 8000806:	0018      	movs	r0, r3
 8000808:	f001 ff3e 	bl	8002688 <HAL_RTC_Init>
 800080c:	1e03      	subs	r3, r0, #0
 800080e:	d001      	beq.n	8000814 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8000810:	f000 fa9e 	bl	8000d50 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000814:	212c      	movs	r1, #44	; 0x2c
 8000816:	187b      	adds	r3, r7, r1
 8000818:	2200      	movs	r2, #0
 800081a:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 800081c:	187b      	adds	r3, r7, r1
 800081e:	2200      	movs	r2, #0
 8000820:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8000822:	187b      	adds	r3, r7, r1
 8000824:	2200      	movs	r2, #0
 8000826:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 8000828:	187b      	adds	r3, r7, r1
 800082a:	2200      	movs	r2, #0
 800082c:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800082e:	187b      	adds	r3, r7, r1
 8000830:	2200      	movs	r2, #0
 8000832:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000834:	187b      	adds	r3, r7, r1
 8000836:	2200      	movs	r2, #0
 8000838:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800083a:	1879      	adds	r1, r7, r1
 800083c:	4b28      	ldr	r3, [pc, #160]	; (80008e0 <MX_RTC_Init+0x140>)
 800083e:	2201      	movs	r2, #1
 8000840:	0018      	movs	r0, r3
 8000842:	f001 ffc3 	bl	80027cc <HAL_RTC_SetTime>
 8000846:	1e03      	subs	r3, r0, #0
 8000848:	d001      	beq.n	800084e <MX_RTC_Init+0xae>
  {
    Error_Handler();
 800084a:	f000 fa81 	bl	8000d50 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800084e:	2128      	movs	r1, #40	; 0x28
 8000850:	187b      	adds	r3, r7, r1
 8000852:	2201      	movs	r2, #1
 8000854:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000856:	187b      	adds	r3, r7, r1
 8000858:	2201      	movs	r2, #1
 800085a:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 800085c:	187b      	adds	r3, r7, r1
 800085e:	2201      	movs	r2, #1
 8000860:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8000862:	187b      	adds	r3, r7, r1
 8000864:	2200      	movs	r2, #0
 8000866:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000868:	1879      	adds	r1, r7, r1
 800086a:	4b1d      	ldr	r3, [pc, #116]	; (80008e0 <MX_RTC_Init+0x140>)
 800086c:	2201      	movs	r2, #1
 800086e:	0018      	movs	r0, r3
 8000870:	f002 f854 	bl	800291c <HAL_RTC_SetDate>
 8000874:	1e03      	subs	r3, r0, #0
 8000876:	d001      	beq.n	800087c <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 8000878:	f000 fa6a 	bl	8000d50 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 800087c:	003b      	movs	r3, r7
 800087e:	2200      	movs	r2, #0
 8000880:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000882:	003b      	movs	r3, r7
 8000884:	2200      	movs	r2, #0
 8000886:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000888:	003b      	movs	r3, r7
 800088a:	2200      	movs	r2, #0
 800088c:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800088e:	003b      	movs	r3, r7
 8000890:	2200      	movs	r2, #0
 8000892:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000894:	003b      	movs	r3, r7
 8000896:	2200      	movs	r2, #0
 8000898:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800089a:	003b      	movs	r3, r7
 800089c:	2200      	movs	r2, #0
 800089e:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80008a0:	003b      	movs	r3, r7
 80008a2:	2200      	movs	r2, #0
 80008a4:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80008a6:	003b      	movs	r3, r7
 80008a8:	2200      	movs	r2, #0
 80008aa:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80008ac:	003b      	movs	r3, r7
 80008ae:	2200      	movs	r2, #0
 80008b0:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 80008b2:	003b      	movs	r3, r7
 80008b4:	2220      	movs	r2, #32
 80008b6:	2101      	movs	r1, #1
 80008b8:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 80008ba:	003b      	movs	r3, r7
 80008bc:	2280      	movs	r2, #128	; 0x80
 80008be:	0052      	lsls	r2, r2, #1
 80008c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80008c2:	0039      	movs	r1, r7
 80008c4:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <MX_RTC_Init+0x140>)
 80008c6:	2201      	movs	r2, #1
 80008c8:	0018      	movs	r0, r3
 80008ca:	f002 f8b9 	bl	8002a40 <HAL_RTC_SetAlarm>
 80008ce:	1e03      	subs	r3, r0, #0
 80008d0:	d001      	beq.n	80008d6 <MX_RTC_Init+0x136>
  {
    Error_Handler();
 80008d2:	f000 fa3d 	bl	8000d50 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80008d6:	46c0      	nop			; (mov r8, r8)
 80008d8:	46bd      	mov	sp, r7
 80008da:	b010      	add	sp, #64	; 0x40
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	46c0      	nop			; (mov r8, r8)
 80008e0:	20000080 	.word	0x20000080
 80008e4:	40002800 	.word	0x40002800

080008e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008ec:	4b23      	ldr	r3, [pc, #140]	; (800097c <MX_USART2_UART_Init+0x94>)
 80008ee:	4a24      	ldr	r2, [pc, #144]	; (8000980 <MX_USART2_UART_Init+0x98>)
 80008f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008f2:	4b22      	ldr	r3, [pc, #136]	; (800097c <MX_USART2_UART_Init+0x94>)
 80008f4:	22e1      	movs	r2, #225	; 0xe1
 80008f6:	0252      	lsls	r2, r2, #9
 80008f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008fa:	4b20      	ldr	r3, [pc, #128]	; (800097c <MX_USART2_UART_Init+0x94>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000900:	4b1e      	ldr	r3, [pc, #120]	; (800097c <MX_USART2_UART_Init+0x94>)
 8000902:	2200      	movs	r2, #0
 8000904:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000906:	4b1d      	ldr	r3, [pc, #116]	; (800097c <MX_USART2_UART_Init+0x94>)
 8000908:	2200      	movs	r2, #0
 800090a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800090c:	4b1b      	ldr	r3, [pc, #108]	; (800097c <MX_USART2_UART_Init+0x94>)
 800090e:	220c      	movs	r2, #12
 8000910:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000912:	4b1a      	ldr	r3, [pc, #104]	; (800097c <MX_USART2_UART_Init+0x94>)
 8000914:	2200      	movs	r2, #0
 8000916:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000918:	4b18      	ldr	r3, [pc, #96]	; (800097c <MX_USART2_UART_Init+0x94>)
 800091a:	2200      	movs	r2, #0
 800091c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800091e:	4b17      	ldr	r3, [pc, #92]	; (800097c <MX_USART2_UART_Init+0x94>)
 8000920:	2200      	movs	r2, #0
 8000922:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000924:	4b15      	ldr	r3, [pc, #84]	; (800097c <MX_USART2_UART_Init+0x94>)
 8000926:	2200      	movs	r2, #0
 8000928:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800092a:	4b14      	ldr	r3, [pc, #80]	; (800097c <MX_USART2_UART_Init+0x94>)
 800092c:	2200      	movs	r2, #0
 800092e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000930:	4b12      	ldr	r3, [pc, #72]	; (800097c <MX_USART2_UART_Init+0x94>)
 8000932:	0018      	movs	r0, r3
 8000934:	f002 fa7e 	bl	8002e34 <HAL_UART_Init>
 8000938:	1e03      	subs	r3, r0, #0
 800093a:	d001      	beq.n	8000940 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800093c:	f000 fa08 	bl	8000d50 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000940:	4b0e      	ldr	r3, [pc, #56]	; (800097c <MX_USART2_UART_Init+0x94>)
 8000942:	2100      	movs	r1, #0
 8000944:	0018      	movs	r0, r3
 8000946:	f003 fa19 	bl	8003d7c <HAL_UARTEx_SetTxFifoThreshold>
 800094a:	1e03      	subs	r3, r0, #0
 800094c:	d001      	beq.n	8000952 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800094e:	f000 f9ff 	bl	8000d50 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000952:	4b0a      	ldr	r3, [pc, #40]	; (800097c <MX_USART2_UART_Init+0x94>)
 8000954:	2100      	movs	r1, #0
 8000956:	0018      	movs	r0, r3
 8000958:	f003 fa50 	bl	8003dfc <HAL_UARTEx_SetRxFifoThreshold>
 800095c:	1e03      	subs	r3, r0, #0
 800095e:	d001      	beq.n	8000964 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000960:	f000 f9f6 	bl	8000d50 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000964:	4b05      	ldr	r3, [pc, #20]	; (800097c <MX_USART2_UART_Init+0x94>)
 8000966:	0018      	movs	r0, r3
 8000968:	f003 f9ce 	bl	8003d08 <HAL_UARTEx_DisableFifoMode>
 800096c:	1e03      	subs	r3, r0, #0
 800096e:	d001      	beq.n	8000974 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000970:	f000 f9ee 	bl	8000d50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000974:	46c0      	nop			; (mov r8, r8)
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	46c0      	nop			; (mov r8, r8)
 800097c:	200000ac 	.word	0x200000ac
 8000980:	40004400 	.word	0x40004400

08000984 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000988:	4b23      	ldr	r3, [pc, #140]	; (8000a18 <MX_USART3_UART_Init+0x94>)
 800098a:	4a24      	ldr	r2, [pc, #144]	; (8000a1c <MX_USART3_UART_Init+0x98>)
 800098c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800098e:	4b22      	ldr	r3, [pc, #136]	; (8000a18 <MX_USART3_UART_Init+0x94>)
 8000990:	2296      	movs	r2, #150	; 0x96
 8000992:	0192      	lsls	r2, r2, #6
 8000994:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000996:	4b20      	ldr	r3, [pc, #128]	; (8000a18 <MX_USART3_UART_Init+0x94>)
 8000998:	2200      	movs	r2, #0
 800099a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800099c:	4b1e      	ldr	r3, [pc, #120]	; (8000a18 <MX_USART3_UART_Init+0x94>)
 800099e:	2200      	movs	r2, #0
 80009a0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009a2:	4b1d      	ldr	r3, [pc, #116]	; (8000a18 <MX_USART3_UART_Init+0x94>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009a8:	4b1b      	ldr	r3, [pc, #108]	; (8000a18 <MX_USART3_UART_Init+0x94>)
 80009aa:	220c      	movs	r2, #12
 80009ac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ae:	4b1a      	ldr	r3, [pc, #104]	; (8000a18 <MX_USART3_UART_Init+0x94>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b4:	4b18      	ldr	r3, [pc, #96]	; (8000a18 <MX_USART3_UART_Init+0x94>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ba:	4b17      	ldr	r3, [pc, #92]	; (8000a18 <MX_USART3_UART_Init+0x94>)
 80009bc:	2200      	movs	r2, #0
 80009be:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009c0:	4b15      	ldr	r3, [pc, #84]	; (8000a18 <MX_USART3_UART_Init+0x94>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009c6:	4b14      	ldr	r3, [pc, #80]	; (8000a18 <MX_USART3_UART_Init+0x94>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009cc:	4b12      	ldr	r3, [pc, #72]	; (8000a18 <MX_USART3_UART_Init+0x94>)
 80009ce:	0018      	movs	r0, r3
 80009d0:	f002 fa30 	bl	8002e34 <HAL_UART_Init>
 80009d4:	1e03      	subs	r3, r0, #0
 80009d6:	d001      	beq.n	80009dc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80009d8:	f000 f9ba 	bl	8000d50 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009dc:	4b0e      	ldr	r3, [pc, #56]	; (8000a18 <MX_USART3_UART_Init+0x94>)
 80009de:	2100      	movs	r1, #0
 80009e0:	0018      	movs	r0, r3
 80009e2:	f003 f9cb 	bl	8003d7c <HAL_UARTEx_SetTxFifoThreshold>
 80009e6:	1e03      	subs	r3, r0, #0
 80009e8:	d001      	beq.n	80009ee <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80009ea:	f000 f9b1 	bl	8000d50 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009ee:	4b0a      	ldr	r3, [pc, #40]	; (8000a18 <MX_USART3_UART_Init+0x94>)
 80009f0:	2100      	movs	r1, #0
 80009f2:	0018      	movs	r0, r3
 80009f4:	f003 fa02 	bl	8003dfc <HAL_UARTEx_SetRxFifoThreshold>
 80009f8:	1e03      	subs	r3, r0, #0
 80009fa:	d001      	beq.n	8000a00 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80009fc:	f000 f9a8 	bl	8000d50 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a00:	4b05      	ldr	r3, [pc, #20]	; (8000a18 <MX_USART3_UART_Init+0x94>)
 8000a02:	0018      	movs	r0, r3
 8000a04:	f003 f980 	bl	8003d08 <HAL_UARTEx_DisableFifoMode>
 8000a08:	1e03      	subs	r3, r0, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a0c:	f000 f9a0 	bl	8000d50 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a10:	46c0      	nop			; (mov r8, r8)
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	46c0      	nop			; (mov r8, r8)
 8000a18:	20000140 	.word	0x20000140
 8000a1c:	40004800 	.word	0x40004800

08000a20 <MX_USART5_UART_Init>:
  * @brief USART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART5_UART_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE END USART5_Init 0 */

  /* USER CODE BEGIN USART5_Init 1 */

  /* USER CODE END USART5_Init 1 */
  huart5.Instance = USART5;
 8000a24:	4b16      	ldr	r3, [pc, #88]	; (8000a80 <MX_USART5_UART_Init+0x60>)
 8000a26:	4a17      	ldr	r2, [pc, #92]	; (8000a84 <MX_USART5_UART_Init+0x64>)
 8000a28:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8000a2a:	4b15      	ldr	r3, [pc, #84]	; (8000a80 <MX_USART5_UART_Init+0x60>)
 8000a2c:	2296      	movs	r2, #150	; 0x96
 8000a2e:	0192      	lsls	r2, r2, #6
 8000a30:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000a32:	4b13      	ldr	r3, [pc, #76]	; (8000a80 <MX_USART5_UART_Init+0x60>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000a38:	4b11      	ldr	r3, [pc, #68]	; (8000a80 <MX_USART5_UART_Init+0x60>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000a3e:	4b10      	ldr	r3, [pc, #64]	; (8000a80 <MX_USART5_UART_Init+0x60>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000a44:	4b0e      	ldr	r3, [pc, #56]	; (8000a80 <MX_USART5_UART_Init+0x60>)
 8000a46:	220c      	movs	r2, #12
 8000a48:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a4a:	4b0d      	ldr	r3, [pc, #52]	; (8000a80 <MX_USART5_UART_Init+0x60>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a50:	4b0b      	ldr	r3, [pc, #44]	; (8000a80 <MX_USART5_UART_Init+0x60>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a56:	4b0a      	ldr	r3, [pc, #40]	; (8000a80 <MX_USART5_UART_Init+0x60>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a5c:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <MX_USART5_UART_Init+0x60>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a62:	4b07      	ldr	r3, [pc, #28]	; (8000a80 <MX_USART5_UART_Init+0x60>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000a68:	4b05      	ldr	r3, [pc, #20]	; (8000a80 <MX_USART5_UART_Init+0x60>)
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	f002 f9e2 	bl	8002e34 <HAL_UART_Init>
 8000a70:	1e03      	subs	r3, r0, #0
 8000a72:	d001      	beq.n	8000a78 <MX_USART5_UART_Init+0x58>
  {
    Error_Handler();
 8000a74:	f000 f96c 	bl	8000d50 <Error_Handler>
  }
  /* USER CODE BEGIN USART5_Init 2 */

  /* USER CODE END USART5_Init 2 */

}
 8000a78:	46c0      	nop			; (mov r8, r8)
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	46c0      	nop			; (mov r8, r8)
 8000a80:	200001d4 	.word	0x200001d4
 8000a84:	40005000 	.word	0x40005000

08000a88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a88:	b590      	push	{r4, r7, lr}
 8000a8a:	b089      	sub	sp, #36	; 0x24
 8000a8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8e:	240c      	movs	r4, #12
 8000a90:	193b      	adds	r3, r7, r4
 8000a92:	0018      	movs	r0, r3
 8000a94:	2314      	movs	r3, #20
 8000a96:	001a      	movs	r2, r3
 8000a98:	2100      	movs	r1, #0
 8000a9a:	f004 fe6f 	bl	800577c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a9e:	4b35      	ldr	r3, [pc, #212]	; (8000b74 <MX_GPIO_Init+0xec>)
 8000aa0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000aa2:	4b34      	ldr	r3, [pc, #208]	; (8000b74 <MX_GPIO_Init+0xec>)
 8000aa4:	2104      	movs	r1, #4
 8000aa6:	430a      	orrs	r2, r1
 8000aa8:	635a      	str	r2, [r3, #52]	; 0x34
 8000aaa:	4b32      	ldr	r3, [pc, #200]	; (8000b74 <MX_GPIO_Init+0xec>)
 8000aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000aae:	2204      	movs	r2, #4
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	60bb      	str	r3, [r7, #8]
 8000ab4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab6:	4b2f      	ldr	r3, [pc, #188]	; (8000b74 <MX_GPIO_Init+0xec>)
 8000ab8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000aba:	4b2e      	ldr	r3, [pc, #184]	; (8000b74 <MX_GPIO_Init+0xec>)
 8000abc:	2101      	movs	r1, #1
 8000abe:	430a      	orrs	r2, r1
 8000ac0:	635a      	str	r2, [r3, #52]	; 0x34
 8000ac2:	4b2c      	ldr	r3, [pc, #176]	; (8000b74 <MX_GPIO_Init+0xec>)
 8000ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	4013      	ands	r3, r2
 8000aca:	607b      	str	r3, [r7, #4]
 8000acc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ace:	4b29      	ldr	r3, [pc, #164]	; (8000b74 <MX_GPIO_Init+0xec>)
 8000ad0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ad2:	4b28      	ldr	r3, [pc, #160]	; (8000b74 <MX_GPIO_Init+0xec>)
 8000ad4:	2102      	movs	r1, #2
 8000ad6:	430a      	orrs	r2, r1
 8000ad8:	635a      	str	r2, [r3, #52]	; 0x34
 8000ada:	4b26      	ldr	r3, [pc, #152]	; (8000b74 <MX_GPIO_Init+0xec>)
 8000adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ade:	2202      	movs	r2, #2
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	603b      	str	r3, [r7, #0]
 8000ae4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ASTRO_WKUP_Pin|ASTRO_RST_Pin|RF_SW_CTL2_Pin|GNSS_RST_Pin
 8000ae6:	4924      	ldr	r1, [pc, #144]	; (8000b78 <MX_GPIO_Init+0xf0>)
 8000ae8:	4b24      	ldr	r3, [pc, #144]	; (8000b7c <MX_GPIO_Init+0xf4>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	0018      	movs	r0, r3
 8000aee:	f000 fe0e 	bl	800170e <HAL_GPIO_WritePin>
                          |GNSS_PWR_SW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF_SW_CTL1_GPIO_Port, RF_SW_CTL1_Pin, GPIO_PIN_SET);
 8000af2:	2380      	movs	r3, #128	; 0x80
 8000af4:	00db      	lsls	r3, r3, #3
 8000af6:	4821      	ldr	r0, [pc, #132]	; (8000b7c <MX_GPIO_Init+0xf4>)
 8000af8:	2201      	movs	r2, #1
 8000afa:	0019      	movs	r1, r3
 8000afc:	f000 fe07 	bl	800170e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ASTRO_WKUP_Pin ASTRO_RST_Pin RF_SW_CTL1_Pin RF_SW_CTL2_Pin
                           GNSS_PWR_SW_Pin */
  GPIO_InitStruct.Pin = ASTRO_WKUP_Pin|ASTRO_RST_Pin|RF_SW_CTL1_Pin|RF_SW_CTL2_Pin
 8000b00:	193b      	adds	r3, r7, r4
 8000b02:	4a1f      	ldr	r2, [pc, #124]	; (8000b80 <MX_GPIO_Init+0xf8>)
 8000b04:	601a      	str	r2, [r3, #0]
                          |GNSS_PWR_SW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b06:	193b      	adds	r3, r7, r4
 8000b08:	2201      	movs	r2, #1
 8000b0a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	193b      	adds	r3, r7, r4
 8000b0e:	2200      	movs	r2, #0
 8000b10:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b12:	193b      	adds	r3, r7, r4
 8000b14:	2200      	movs	r2, #0
 8000b16:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b18:	193b      	adds	r3, r7, r4
 8000b1a:	4a18      	ldr	r2, [pc, #96]	; (8000b7c <MX_GPIO_Init+0xf4>)
 8000b1c:	0019      	movs	r1, r3
 8000b1e:	0010      	movs	r0, r2
 8000b20:	f000 fc6c 	bl	80013fc <HAL_GPIO_Init>

  /*Configure GPIO pin : ASTRO_EVT_Pin */
  GPIO_InitStruct.Pin = ASTRO_EVT_Pin;
 8000b24:	193b      	adds	r3, r7, r4
 8000b26:	2204      	movs	r2, #4
 8000b28:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b2a:	193b      	adds	r3, r7, r4
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	193b      	adds	r3, r7, r4
 8000b32:	2200      	movs	r2, #0
 8000b34:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ASTRO_EVT_GPIO_Port, &GPIO_InitStruct);
 8000b36:	193b      	adds	r3, r7, r4
 8000b38:	4a10      	ldr	r2, [pc, #64]	; (8000b7c <MX_GPIO_Init+0xf4>)
 8000b3a:	0019      	movs	r1, r3
 8000b3c:	0010      	movs	r0, r2
 8000b3e:	f000 fc5d 	bl	80013fc <HAL_GPIO_Init>

  /*Configure GPIO pin : GNSS_RST_Pin */
  GPIO_InitStruct.Pin = GNSS_RST_Pin;
 8000b42:	0021      	movs	r1, r4
 8000b44:	187b      	adds	r3, r7, r1
 8000b46:	2280      	movs	r2, #128	; 0x80
 8000b48:	0192      	lsls	r2, r2, #6
 8000b4a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000b4c:	187b      	adds	r3, r7, r1
 8000b4e:	2211      	movs	r2, #17
 8000b50:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	187b      	adds	r3, r7, r1
 8000b54:	2200      	movs	r2, #0
 8000b56:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b58:	187b      	adds	r3, r7, r1
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GNSS_RST_GPIO_Port, &GPIO_InitStruct);
 8000b5e:	187b      	adds	r3, r7, r1
 8000b60:	4a06      	ldr	r2, [pc, #24]	; (8000b7c <MX_GPIO_Init+0xf4>)
 8000b62:	0019      	movs	r1, r3
 8000b64:	0010      	movs	r0, r2
 8000b66:	f000 fc49 	bl	80013fc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b6a:	46c0      	nop			; (mov r8, r8)
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	b009      	add	sp, #36	; 0x24
 8000b70:	bd90      	pop	{r4, r7, pc}
 8000b72:	46c0      	nop			; (mov r8, r8)
 8000b74:	40021000 	.word	0x40021000
 8000b78:	0000a803 	.word	0x0000a803
 8000b7c:	50000400 	.word	0x50000400
 8000b80:	00008c03 	.word	0x00008c03

08000b84 <sys_restart>:

/* USER CODE BEGIN 4 */

// SYSTEM Operations
void sys_restart ( void )
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
	//my_rtc_get_dt_s ( rtc_dt_s ) ;
	//sprintf ( dbg_payload , "%s,%d,%s,HAL_NVIC_SystemReset" , __FILE__ , __LINE__ , rtc_dt_s ) ;
	//send_debug_logs ( dbg_payload ) ;
	HAL_NVIC_SystemReset () ;
 8000b88:	f000 fc27 	bl	80013da <HAL_NVIC_SystemReset>
}
 8000b8c:	46c0      	nop			; (mov r8, r8)
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
	...

08000b94 <astro_reset>:

// ASTRO Operations
void astro_reset ( void )
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin ( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_SET ) ;
 8000b98:	4b0a      	ldr	r3, [pc, #40]	; (8000bc4 <astro_reset+0x30>)
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	2102      	movs	r1, #2
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	f000 fdb5 	bl	800170e <HAL_GPIO_WritePin>
    HAL_Delay ( 1 ) ;
 8000ba4:	2001      	movs	r0, #1
 8000ba6:	f000 fb25 	bl	80011f4 <HAL_Delay>
    HAL_GPIO_WritePin ( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_RESET ) ;
 8000baa:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <astro_reset+0x30>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	2102      	movs	r1, #2
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	f000 fdac 	bl	800170e <HAL_GPIO_WritePin>
    HAL_Delay ( 250 ) ;
 8000bb6:	20fa      	movs	r0, #250	; 0xfa
 8000bb8:	f000 fb1c 	bl	80011f4 <HAL_Delay>
}
 8000bbc:	46c0      	nop			; (mov r8, r8)
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	46c0      	nop			; (mov r8, r8)
 8000bc4:	50000400 	.word	0x50000400

08000bc8 <is_astro_evt>:

bool is_astro_evt ( void )
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
	return ( HAL_GPIO_ReadPin ( ASTRO_EVT_GPIO_Port , ASTRO_EVT_Pin ) == GPIO_PIN_SET ? true : false);
 8000bcc:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <is_astro_evt+0x20>)
 8000bce:	2104      	movs	r1, #4
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	f000 fd7f 	bl	80016d4 <HAL_GPIO_ReadPin>
 8000bd6:	0003      	movs	r3, r0
 8000bd8:	3b01      	subs	r3, #1
 8000bda:	425a      	negs	r2, r3
 8000bdc:	4153      	adcs	r3, r2
 8000bde:	b2db      	uxtb	r3, r3
}
 8000be0:	0018      	movs	r0, r3
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	46c0      	nop			; (mov r8, r8)
 8000be8:	50000400 	.word	0x50000400

08000bec <send_debug_logs>:

void send_debug_logs ( const char* p_tx_buffer )
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
    uint32_t length = strlen ( p_tx_buffer ) ;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	0018      	movs	r0, r3
 8000bf8:	f7ff fa84 	bl	8000104 <strlen>
 8000bfc:	0003      	movs	r3, r0
 8000bfe:	60fb      	str	r3, [r7, #12]
    if ( length > UART_TX_MAX_BUFF_SIZE )
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	2bfa      	cmp	r3, #250	; 0xfa
 8000c04:	d908      	bls.n	8000c18 <send_debug_logs+0x2c>
    {
        HAL_UART_Transmit ( &HUART_DBG , ( uint8_t* ) "[ERROR] UART buffer reached max length.\n" , 42 , 1000 ) ;
 8000c06:	23fa      	movs	r3, #250	; 0xfa
 8000c08:	009b      	lsls	r3, r3, #2
 8000c0a:	490d      	ldr	r1, [pc, #52]	; (8000c40 <send_debug_logs+0x54>)
 8000c0c:	480d      	ldr	r0, [pc, #52]	; (8000c44 <send_debug_logs+0x58>)
 8000c0e:	222a      	movs	r2, #42	; 0x2a
 8000c10:	f002 f966 	bl	8002ee0 <HAL_UART_Transmit>
        length = UART_TX_MAX_BUFF_SIZE;
 8000c14:	23fa      	movs	r3, #250	; 0xfa
 8000c16:	60fb      	str	r3, [r7, #12]
    }
    HAL_UART_Transmit ( &HUART_DBG , ( uint8_t* ) p_tx_buffer , length , 1000 ) ;
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	b29a      	uxth	r2, r3
 8000c1c:	23fa      	movs	r3, #250	; 0xfa
 8000c1e:	009b      	lsls	r3, r3, #2
 8000c20:	6879      	ldr	r1, [r7, #4]
 8000c22:	4808      	ldr	r0, [pc, #32]	; (8000c44 <send_debug_logs+0x58>)
 8000c24:	f002 f95c 	bl	8002ee0 <HAL_UART_Transmit>
    HAL_UART_Transmit ( &HUART_DBG , ( uint8_t* ) "\n" , 1 , 1000 ) ;
 8000c28:	23fa      	movs	r3, #250	; 0xfa
 8000c2a:	009b      	lsls	r3, r3, #2
 8000c2c:	4906      	ldr	r1, [pc, #24]	; (8000c48 <send_debug_logs+0x5c>)
 8000c2e:	4805      	ldr	r0, [pc, #20]	; (8000c44 <send_debug_logs+0x58>)
 8000c30:	2201      	movs	r2, #1
 8000c32:	f002 f955 	bl	8002ee0 <HAL_UART_Transmit>
}
 8000c36:	46c0      	nop			; (mov r8, r8)
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	b004      	add	sp, #16
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	46c0      	nop			; (mov r8, r8)
 8000c40:	0800610c 	.word	0x0800610c
 8000c44:	200000ac 	.word	0x200000ac
 8000c48:	08006138 	.word	0x08006138

08000c4c <send_astronode_request>:

void send_astronode_request ( uint8_t* p_tx_buffer , uint32_t length )
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	6039      	str	r1, [r7, #0]
    send_debug_logs ( "Message sent to the Astronode --> " ) ;
 8000c56:	4b0a      	ldr	r3, [pc, #40]	; (8000c80 <send_astronode_request+0x34>)
 8000c58:	0018      	movs	r0, r3
 8000c5a:	f7ff ffc7 	bl	8000bec <send_debug_logs>
    send_debug_logs ( ( char* ) p_tx_buffer ) ;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	0018      	movs	r0, r3
 8000c62:	f7ff ffc3 	bl	8000bec <send_debug_logs>
    HAL_UART_Transmit ( &HUART_ASTRO , p_tx_buffer , length , 1000 ) ;
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	b29a      	uxth	r2, r3
 8000c6a:	23fa      	movs	r3, #250	; 0xfa
 8000c6c:	009b      	lsls	r3, r3, #2
 8000c6e:	6879      	ldr	r1, [r7, #4]
 8000c70:	4804      	ldr	r0, [pc, #16]	; (8000c84 <send_astronode_request+0x38>)
 8000c72:	f002 f935 	bl	8002ee0 <HAL_UART_Transmit>
}
 8000c76:	46c0      	nop			; (mov r8, r8)
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	b002      	add	sp, #8
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	46c0      	nop			; (mov r8, r8)
 8000c80:	0800613c 	.word	0x0800613c
 8000c84:	20000140 	.word	0x20000140

08000c88 <get_systick>:

uint32_t get_systick ( void )
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
    return HAL_GetTick() ;
 8000c8c:	f000 faa8 	bl	80011e0 <HAL_GetTick>
 8000c90:	0003      	movs	r3, r0
}
 8000c92:	0018      	movs	r0, r3
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <is_systick_timeout_over>:

bool is_systick_timeout_over ( uint32_t starting_value , uint16_t duration )
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	000a      	movs	r2, r1
 8000ca2:	1cbb      	adds	r3, r7, #2
 8000ca4:	801a      	strh	r2, [r3, #0]
    return ( get_systick () - starting_value > duration ) ? true : false ;
 8000ca6:	f7ff ffef 	bl	8000c88 <get_systick>
 8000caa:	0002      	movs	r2, r0
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	1ad3      	subs	r3, r2, r3
 8000cb0:	1cba      	adds	r2, r7, #2
 8000cb2:	8812      	ldrh	r2, [r2, #0]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	419b      	sbcs	r3, r3
 8000cb8:	425b      	negs	r3, r3
 8000cba:	b2db      	uxtb	r3, r3
}
 8000cbc:	0018      	movs	r0, r3
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	b002      	add	sp, #8
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <is_astronode_character_received>:

bool is_astronode_character_received ( uint8_t* p_rx_char )
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
    return ( HAL_UART_Receive ( &HUART_ASTRO , p_rx_char , 1 , 100 ) == HAL_OK ? true : false ) ;
 8000ccc:	6879      	ldr	r1, [r7, #4]
 8000cce:	4806      	ldr	r0, [pc, #24]	; (8000ce8 <is_astronode_character_received+0x24>)
 8000cd0:	2364      	movs	r3, #100	; 0x64
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	f002 f9a8 	bl	8003028 <HAL_UART_Receive>
 8000cd8:	0003      	movs	r3, r0
 8000cda:	425a      	negs	r2, r3
 8000cdc:	4153      	adcs	r3, r2
 8000cde:	b2db      	uxtb	r3, r3
}
 8000ce0:	0018      	movs	r0, r3
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	b002      	add	sp, #8
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	20000140 	.word	0x20000140

08000cec <ant_sw_pos>:

// ** ANT SW Operations
void ant_sw_pos ( uint8_t pos )
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	0002      	movs	r2, r0
 8000cf4:	1dfb      	adds	r3, r7, #7
 8000cf6:	701a      	strb	r2, [r3, #0]
	if ( pos == 1 ) // Włączenie GNSS czyli ustawienie RF_SW_CTL1 = LOW i RF_SW_CTL2 = HIGH
 8000cf8:	1dfb      	adds	r3, r7, #7
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d10e      	bne.n	8000d1e <ant_sw_pos+0x32>
	{
		HAL_GPIO_WritePin ( RF_SW_CTL1_GPIO_Port , RF_SW_CTL1_Pin , GPIO_PIN_RESET ) ;
 8000d00:	2380      	movs	r3, #128	; 0x80
 8000d02:	00db      	lsls	r3, r3, #3
 8000d04:	4811      	ldr	r0, [pc, #68]	; (8000d4c <ant_sw_pos+0x60>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	0019      	movs	r1, r3
 8000d0a:	f000 fd00 	bl	800170e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( RF_SW_CTL2_GPIO_Port , RF_SW_CTL2_Pin , GPIO_PIN_SET ) ;
 8000d0e:	2380      	movs	r3, #128	; 0x80
 8000d10:	011b      	lsls	r3, r3, #4
 8000d12:	480e      	ldr	r0, [pc, #56]	; (8000d4c <ant_sw_pos+0x60>)
 8000d14:	2201      	movs	r2, #1
 8000d16:	0019      	movs	r1, r3
 8000d18:	f000 fcf9 	bl	800170e <HAL_GPIO_WritePin>
	else if ( pos == 2 )
	{
		HAL_GPIO_WritePin ( RF_SW_CTL1_GPIO_Port , RF_SW_CTL1_Pin , GPIO_PIN_SET ) ;
		HAL_GPIO_WritePin ( RF_SW_CTL2_GPIO_Port , RF_SW_CTL2_Pin , GPIO_PIN_RESET ) ;
	}
}
 8000d1c:	e011      	b.n	8000d42 <ant_sw_pos+0x56>
	else if ( pos == 2 )
 8000d1e:	1dfb      	adds	r3, r7, #7
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	2b02      	cmp	r3, #2
 8000d24:	d10d      	bne.n	8000d42 <ant_sw_pos+0x56>
		HAL_GPIO_WritePin ( RF_SW_CTL1_GPIO_Port , RF_SW_CTL1_Pin , GPIO_PIN_SET ) ;
 8000d26:	2380      	movs	r3, #128	; 0x80
 8000d28:	00db      	lsls	r3, r3, #3
 8000d2a:	4808      	ldr	r0, [pc, #32]	; (8000d4c <ant_sw_pos+0x60>)
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	0019      	movs	r1, r3
 8000d30:	f000 fced 	bl	800170e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( RF_SW_CTL2_GPIO_Port , RF_SW_CTL2_Pin , GPIO_PIN_RESET ) ;
 8000d34:	2380      	movs	r3, #128	; 0x80
 8000d36:	011b      	lsls	r3, r3, #4
 8000d38:	4804      	ldr	r0, [pc, #16]	; (8000d4c <ant_sw_pos+0x60>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	0019      	movs	r1, r3
 8000d3e:	f000 fce6 	bl	800170e <HAL_GPIO_WritePin>
}
 8000d42:	46c0      	nop			; (mov r8, r8)
 8000d44:	46bd      	mov	sp, r7
 8000d46:	b002      	add	sp, #8
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	46c0      	nop			; (mov r8, r8)
 8000d4c:	50000400 	.word	0x50000400

08000d50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d54:	b672      	cpsid	i
}
 8000d56:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d58:	e7fe      	b.n	8000d58 <Error_Handler+0x8>
	...

08000d5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d62:	4b11      	ldr	r3, [pc, #68]	; (8000da8 <HAL_MspInit+0x4c>)
 8000d64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d66:	4b10      	ldr	r3, [pc, #64]	; (8000da8 <HAL_MspInit+0x4c>)
 8000d68:	2101      	movs	r1, #1
 8000d6a:	430a      	orrs	r2, r1
 8000d6c:	641a      	str	r2, [r3, #64]	; 0x40
 8000d6e:	4b0e      	ldr	r3, [pc, #56]	; (8000da8 <HAL_MspInit+0x4c>)
 8000d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d72:	2201      	movs	r2, #1
 8000d74:	4013      	ands	r3, r2
 8000d76:	607b      	str	r3, [r7, #4]
 8000d78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d7a:	4b0b      	ldr	r3, [pc, #44]	; (8000da8 <HAL_MspInit+0x4c>)
 8000d7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d7e:	4b0a      	ldr	r3, [pc, #40]	; (8000da8 <HAL_MspInit+0x4c>)
 8000d80:	2180      	movs	r1, #128	; 0x80
 8000d82:	0549      	lsls	r1, r1, #21
 8000d84:	430a      	orrs	r2, r1
 8000d86:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d88:	4b07      	ldr	r3, [pc, #28]	; (8000da8 <HAL_MspInit+0x4c>)
 8000d8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d8c:	2380      	movs	r3, #128	; 0x80
 8000d8e:	055b      	lsls	r3, r3, #21
 8000d90:	4013      	ands	r3, r2
 8000d92:	603b      	str	r3, [r7, #0]
 8000d94:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000d96:	23c0      	movs	r3, #192	; 0xc0
 8000d98:	00db      	lsls	r3, r3, #3
 8000d9a:	0018      	movs	r0, r3
 8000d9c:	f000 fa4e 	bl	800123c <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000da0:	46c0      	nop			; (mov r8, r8)
 8000da2:	46bd      	mov	sp, r7
 8000da4:	b002      	add	sp, #8
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	40021000 	.word	0x40021000

08000dac <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000dac:	b590      	push	{r4, r7, lr}
 8000dae:	b097      	sub	sp, #92	; 0x5c
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000db4:	240c      	movs	r4, #12
 8000db6:	193b      	adds	r3, r7, r4
 8000db8:	0018      	movs	r0, r3
 8000dba:	234c      	movs	r3, #76	; 0x4c
 8000dbc:	001a      	movs	r2, r3
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	f004 fcdc 	bl	800577c <memset>
  if(hrtc->Instance==RTC)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a15      	ldr	r2, [pc, #84]	; (8000e20 <HAL_RTC_MspInit+0x74>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d124      	bne.n	8000e18 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000dce:	193b      	adds	r3, r7, r4
 8000dd0:	2280      	movs	r2, #128	; 0x80
 8000dd2:	0292      	lsls	r2, r2, #10
 8000dd4:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000dd6:	193b      	adds	r3, r7, r4
 8000dd8:	2280      	movs	r2, #128	; 0x80
 8000dda:	0052      	lsls	r2, r2, #1
 8000ddc:	641a      	str	r2, [r3, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dde:	193b      	adds	r3, r7, r4
 8000de0:	0018      	movs	r0, r3
 8000de2:	f001 fa15 	bl	8002210 <HAL_RCCEx_PeriphCLKConfig>
 8000de6:	1e03      	subs	r3, r0, #0
 8000de8:	d001      	beq.n	8000dee <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000dea:	f7ff ffb1 	bl	8000d50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000dee:	4b0d      	ldr	r3, [pc, #52]	; (8000e24 <HAL_RTC_MspInit+0x78>)
 8000df0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000df2:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <HAL_RTC_MspInit+0x78>)
 8000df4:	2180      	movs	r1, #128	; 0x80
 8000df6:	0209      	lsls	r1, r1, #8
 8000df8:	430a      	orrs	r2, r1
 8000dfa:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000dfc:	4b09      	ldr	r3, [pc, #36]	; (8000e24 <HAL_RTC_MspInit+0x78>)
 8000dfe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e00:	4b08      	ldr	r3, [pc, #32]	; (8000e24 <HAL_RTC_MspInit+0x78>)
 8000e02:	2180      	movs	r1, #128	; 0x80
 8000e04:	00c9      	lsls	r1, r1, #3
 8000e06:	430a      	orrs	r2, r1
 8000e08:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e0a:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <HAL_RTC_MspInit+0x78>)
 8000e0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e0e:	2380      	movs	r3, #128	; 0x80
 8000e10:	00db      	lsls	r3, r3, #3
 8000e12:	4013      	ands	r3, r2
 8000e14:	60bb      	str	r3, [r7, #8]
 8000e16:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000e18:	46c0      	nop			; (mov r8, r8)
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	b017      	add	sp, #92	; 0x5c
 8000e1e:	bd90      	pop	{r4, r7, pc}
 8000e20:	40002800 	.word	0x40002800
 8000e24:	40021000 	.word	0x40021000

08000e28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e28:	b590      	push	{r4, r7, lr}
 8000e2a:	b0a1      	sub	sp, #132	; 0x84
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e30:	236c      	movs	r3, #108	; 0x6c
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	0018      	movs	r0, r3
 8000e36:	2314      	movs	r3, #20
 8000e38:	001a      	movs	r2, r3
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	f004 fc9e 	bl	800577c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e40:	2420      	movs	r4, #32
 8000e42:	193b      	adds	r3, r7, r4
 8000e44:	0018      	movs	r0, r3
 8000e46:	234c      	movs	r3, #76	; 0x4c
 8000e48:	001a      	movs	r2, r3
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	f004 fc96 	bl	800577c <memset>
  if(huart->Instance==USART2)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a60      	ldr	r2, [pc, #384]	; (8000fd8 <HAL_UART_MspInit+0x1b0>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d13f      	bne.n	8000eda <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e5a:	193b      	adds	r3, r7, r4
 8000e5c:	2202      	movs	r2, #2
 8000e5e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e60:	193b      	adds	r3, r7, r4
 8000e62:	2200      	movs	r2, #0
 8000e64:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e66:	193b      	adds	r3, r7, r4
 8000e68:	0018      	movs	r0, r3
 8000e6a:	f001 f9d1 	bl	8002210 <HAL_RCCEx_PeriphCLKConfig>
 8000e6e:	1e03      	subs	r3, r0, #0
 8000e70:	d001      	beq.n	8000e76 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e72:	f7ff ff6d 	bl	8000d50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e76:	4b59      	ldr	r3, [pc, #356]	; (8000fdc <HAL_UART_MspInit+0x1b4>)
 8000e78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e7a:	4b58      	ldr	r3, [pc, #352]	; (8000fdc <HAL_UART_MspInit+0x1b4>)
 8000e7c:	2180      	movs	r1, #128	; 0x80
 8000e7e:	0289      	lsls	r1, r1, #10
 8000e80:	430a      	orrs	r2, r1
 8000e82:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e84:	4b55      	ldr	r3, [pc, #340]	; (8000fdc <HAL_UART_MspInit+0x1b4>)
 8000e86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e88:	2380      	movs	r3, #128	; 0x80
 8000e8a:	029b      	lsls	r3, r3, #10
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	61fb      	str	r3, [r7, #28]
 8000e90:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e92:	4b52      	ldr	r3, [pc, #328]	; (8000fdc <HAL_UART_MspInit+0x1b4>)
 8000e94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e96:	4b51      	ldr	r3, [pc, #324]	; (8000fdc <HAL_UART_MspInit+0x1b4>)
 8000e98:	2101      	movs	r1, #1
 8000e9a:	430a      	orrs	r2, r1
 8000e9c:	635a      	str	r2, [r3, #52]	; 0x34
 8000e9e:	4b4f      	ldr	r3, [pc, #316]	; (8000fdc <HAL_UART_MspInit+0x1b4>)
 8000ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	61bb      	str	r3, [r7, #24]
 8000ea8:	69bb      	ldr	r3, [r7, #24]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = DBG_TX_Pin|DBG_RX_Pin;
 8000eaa:	216c      	movs	r1, #108	; 0x6c
 8000eac:	187b      	adds	r3, r7, r1
 8000eae:	220c      	movs	r2, #12
 8000eb0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb2:	187b      	adds	r3, r7, r1
 8000eb4:	2202      	movs	r2, #2
 8000eb6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	187b      	adds	r3, r7, r1
 8000eba:	2200      	movs	r2, #0
 8000ebc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ebe:	187b      	adds	r3, r7, r1
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000ec4:	187b      	adds	r3, r7, r1
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eca:	187a      	adds	r2, r7, r1
 8000ecc:	23a0      	movs	r3, #160	; 0xa0
 8000ece:	05db      	lsls	r3, r3, #23
 8000ed0:	0011      	movs	r1, r2
 8000ed2:	0018      	movs	r0, r3
 8000ed4:	f000 fa92 	bl	80013fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART5_MspInit 1 */

  /* USER CODE END USART5_MspInit 1 */
  }

}
 8000ed8:	e07a      	b.n	8000fd0 <HAL_UART_MspInit+0x1a8>
  else if(huart->Instance==USART3)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a40      	ldr	r2, [pc, #256]	; (8000fe0 <HAL_UART_MspInit+0x1b8>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d140      	bne.n	8000f66 <HAL_UART_MspInit+0x13e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ee4:	2120      	movs	r1, #32
 8000ee6:	187b      	adds	r3, r7, r1
 8000ee8:	2204      	movs	r2, #4
 8000eea:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000eec:	187b      	adds	r3, r7, r1
 8000eee:	2200      	movs	r2, #0
 8000ef0:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ef2:	187b      	adds	r3, r7, r1
 8000ef4:	0018      	movs	r0, r3
 8000ef6:	f001 f98b 	bl	8002210 <HAL_RCCEx_PeriphCLKConfig>
 8000efa:	1e03      	subs	r3, r0, #0
 8000efc:	d001      	beq.n	8000f02 <HAL_UART_MspInit+0xda>
      Error_Handler();
 8000efe:	f7ff ff27 	bl	8000d50 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f02:	4b36      	ldr	r3, [pc, #216]	; (8000fdc <HAL_UART_MspInit+0x1b4>)
 8000f04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f06:	4b35      	ldr	r3, [pc, #212]	; (8000fdc <HAL_UART_MspInit+0x1b4>)
 8000f08:	2180      	movs	r1, #128	; 0x80
 8000f0a:	02c9      	lsls	r1, r1, #11
 8000f0c:	430a      	orrs	r2, r1
 8000f0e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f10:	4b32      	ldr	r3, [pc, #200]	; (8000fdc <HAL_UART_MspInit+0x1b4>)
 8000f12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f14:	2380      	movs	r3, #128	; 0x80
 8000f16:	02db      	lsls	r3, r3, #11
 8000f18:	4013      	ands	r3, r2
 8000f1a:	617b      	str	r3, [r7, #20]
 8000f1c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f1e:	4b2f      	ldr	r3, [pc, #188]	; (8000fdc <HAL_UART_MspInit+0x1b4>)
 8000f20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f22:	4b2e      	ldr	r3, [pc, #184]	; (8000fdc <HAL_UART_MspInit+0x1b4>)
 8000f24:	2102      	movs	r1, #2
 8000f26:	430a      	orrs	r2, r1
 8000f28:	635a      	str	r2, [r3, #52]	; 0x34
 8000f2a:	4b2c      	ldr	r3, [pc, #176]	; (8000fdc <HAL_UART_MspInit+0x1b4>)
 8000f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f2e:	2202      	movs	r2, #2
 8000f30:	4013      	ands	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]
 8000f34:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ASTRO_TX_Pin|ASTRO_RX_Pin;
 8000f36:	216c      	movs	r1, #108	; 0x6c
 8000f38:	187b      	adds	r3, r7, r1
 8000f3a:	22c0      	movs	r2, #192	; 0xc0
 8000f3c:	0092      	lsls	r2, r2, #2
 8000f3e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f40:	187b      	adds	r3, r7, r1
 8000f42:	2202      	movs	r2, #2
 8000f44:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	187b      	adds	r3, r7, r1
 8000f48:	2200      	movs	r2, #0
 8000f4a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4c:	187b      	adds	r3, r7, r1
 8000f4e:	2200      	movs	r2, #0
 8000f50:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8000f52:	187b      	adds	r3, r7, r1
 8000f54:	2204      	movs	r2, #4
 8000f56:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f58:	187b      	adds	r3, r7, r1
 8000f5a:	4a22      	ldr	r2, [pc, #136]	; (8000fe4 <HAL_UART_MspInit+0x1bc>)
 8000f5c:	0019      	movs	r1, r3
 8000f5e:	0010      	movs	r0, r2
 8000f60:	f000 fa4c 	bl	80013fc <HAL_GPIO_Init>
}
 8000f64:	e034      	b.n	8000fd0 <HAL_UART_MspInit+0x1a8>
  else if(huart->Instance==USART5)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a1f      	ldr	r2, [pc, #124]	; (8000fe8 <HAL_UART_MspInit+0x1c0>)
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d12f      	bne.n	8000fd0 <HAL_UART_MspInit+0x1a8>
    __HAL_RCC_USART5_CLK_ENABLE();
 8000f70:	4b1a      	ldr	r3, [pc, #104]	; (8000fdc <HAL_UART_MspInit+0x1b4>)
 8000f72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f74:	4b19      	ldr	r3, [pc, #100]	; (8000fdc <HAL_UART_MspInit+0x1b4>)
 8000f76:	2180      	movs	r1, #128	; 0x80
 8000f78:	0049      	lsls	r1, r1, #1
 8000f7a:	430a      	orrs	r2, r1
 8000f7c:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f7e:	4b17      	ldr	r3, [pc, #92]	; (8000fdc <HAL_UART_MspInit+0x1b4>)
 8000f80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f82:	2380      	movs	r3, #128	; 0x80
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	4013      	ands	r3, r2
 8000f88:	60fb      	str	r3, [r7, #12]
 8000f8a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f8c:	4b13      	ldr	r3, [pc, #76]	; (8000fdc <HAL_UART_MspInit+0x1b4>)
 8000f8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f90:	4b12      	ldr	r3, [pc, #72]	; (8000fdc <HAL_UART_MspInit+0x1b4>)
 8000f92:	2102      	movs	r1, #2
 8000f94:	430a      	orrs	r2, r1
 8000f96:	635a      	str	r2, [r3, #52]	; 0x34
 8000f98:	4b10      	ldr	r3, [pc, #64]	; (8000fdc <HAL_UART_MspInit+0x1b4>)
 8000f9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f9c:	2202      	movs	r2, #2
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	60bb      	str	r3, [r7, #8]
 8000fa2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GNSS_TX_Pin|GNSS_RX_Pin;
 8000fa4:	216c      	movs	r1, #108	; 0x6c
 8000fa6:	187b      	adds	r3, r7, r1
 8000fa8:	2218      	movs	r2, #24
 8000faa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fac:	187b      	adds	r3, r7, r1
 8000fae:	2202      	movs	r2, #2
 8000fb0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb2:	187b      	adds	r3, r7, r1
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb8:	187b      	adds	r3, r7, r1
 8000fba:	2200      	movs	r2, #0
 8000fbc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART5;
 8000fbe:	187b      	adds	r3, r7, r1
 8000fc0:	2203      	movs	r2, #3
 8000fc2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc4:	187b      	adds	r3, r7, r1
 8000fc6:	4a07      	ldr	r2, [pc, #28]	; (8000fe4 <HAL_UART_MspInit+0x1bc>)
 8000fc8:	0019      	movs	r1, r3
 8000fca:	0010      	movs	r0, r2
 8000fcc:	f000 fa16 	bl	80013fc <HAL_GPIO_Init>
}
 8000fd0:	46c0      	nop			; (mov r8, r8)
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	b021      	add	sp, #132	; 0x84
 8000fd6:	bd90      	pop	{r4, r7, pc}
 8000fd8:	40004400 	.word	0x40004400
 8000fdc:	40021000 	.word	0x40021000
 8000fe0:	40004800 	.word	0x40004800
 8000fe4:	50000400 	.word	0x50000400
 8000fe8:	40005000 	.word	0x40005000

08000fec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ff0:	e7fe      	b.n	8000ff0 <NMI_Handler+0x4>

08000ff2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ff6:	e7fe      	b.n	8000ff6 <HardFault_Handler+0x4>

08000ff8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ffc:	46c0      	nop			; (mov r8, r8)
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}

08001002 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001006:	46c0      	nop			; (mov r8, r8)
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001010:	f000 f8d4 	bl	80011bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001014:	46c0      	nop			; (mov r8, r8)
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
	...

0800101c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b086      	sub	sp, #24
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001024:	4a14      	ldr	r2, [pc, #80]	; (8001078 <_sbrk+0x5c>)
 8001026:	4b15      	ldr	r3, [pc, #84]	; (800107c <_sbrk+0x60>)
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001030:	4b13      	ldr	r3, [pc, #76]	; (8001080 <_sbrk+0x64>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d102      	bne.n	800103e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001038:	4b11      	ldr	r3, [pc, #68]	; (8001080 <_sbrk+0x64>)
 800103a:	4a12      	ldr	r2, [pc, #72]	; (8001084 <_sbrk+0x68>)
 800103c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800103e:	4b10      	ldr	r3, [pc, #64]	; (8001080 <_sbrk+0x64>)
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	18d3      	adds	r3, r2, r3
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	429a      	cmp	r2, r3
 800104a:	d207      	bcs.n	800105c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800104c:	f004 fb9e 	bl	800578c <__errno>
 8001050:	0003      	movs	r3, r0
 8001052:	220c      	movs	r2, #12
 8001054:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001056:	2301      	movs	r3, #1
 8001058:	425b      	negs	r3, r3
 800105a:	e009      	b.n	8001070 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800105c:	4b08      	ldr	r3, [pc, #32]	; (8001080 <_sbrk+0x64>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001062:	4b07      	ldr	r3, [pc, #28]	; (8001080 <_sbrk+0x64>)
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	18d2      	adds	r2, r2, r3
 800106a:	4b05      	ldr	r3, [pc, #20]	; (8001080 <_sbrk+0x64>)
 800106c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800106e:	68fb      	ldr	r3, [r7, #12]
}
 8001070:	0018      	movs	r0, r3
 8001072:	46bd      	mov	sp, r7
 8001074:	b006      	add	sp, #24
 8001076:	bd80      	pop	{r7, pc}
 8001078:	20024000 	.word	0x20024000
 800107c:	00000400 	.word	0x00000400
 8001080:	20000364 	.word	0x20000364
 8001084:	200004e8 	.word	0x200004e8

08001088 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800108c:	46c0      	nop			; (mov r8, r8)
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
	...

08001094 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001094:	480d      	ldr	r0, [pc, #52]	; (80010cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001096:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001098:	f7ff fff6 	bl	8001088 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800109c:	480c      	ldr	r0, [pc, #48]	; (80010d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800109e:	490d      	ldr	r1, [pc, #52]	; (80010d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010a0:	4a0d      	ldr	r2, [pc, #52]	; (80010d8 <LoopForever+0xe>)
  movs r3, #0
 80010a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010a4:	e002      	b.n	80010ac <LoopCopyDataInit>

080010a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010aa:	3304      	adds	r3, #4

080010ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010b0:	d3f9      	bcc.n	80010a6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010b2:	4a0a      	ldr	r2, [pc, #40]	; (80010dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80010b4:	4c0a      	ldr	r4, [pc, #40]	; (80010e0 <LoopForever+0x16>)
  movs r3, #0
 80010b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010b8:	e001      	b.n	80010be <LoopFillZerobss>

080010ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010bc:	3204      	adds	r2, #4

080010be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010c0:	d3fb      	bcc.n	80010ba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80010c2:	f004 fb69 	bl	8005798 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80010c6:	f7ff fabb 	bl	8000640 <main>

080010ca <LoopForever>:

LoopForever:
  b LoopForever
 80010ca:	e7fe      	b.n	80010ca <LoopForever>
  ldr   r0, =_estack
 80010cc:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 80010d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010d4:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80010d8:	08007b60 	.word	0x08007b60
  ldr r2, =_sbss
 80010dc:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80010e0:	200004e4 	.word	0x200004e4

080010e4 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010e4:	e7fe      	b.n	80010e4 <ADC1_COMP_IRQHandler>
	...

080010e8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010ee:	1dfb      	adds	r3, r7, #7
 80010f0:	2200      	movs	r2, #0
 80010f2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010f4:	4b0b      	ldr	r3, [pc, #44]	; (8001124 <HAL_Init+0x3c>)
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	4b0a      	ldr	r3, [pc, #40]	; (8001124 <HAL_Init+0x3c>)
 80010fa:	2180      	movs	r1, #128	; 0x80
 80010fc:	0049      	lsls	r1, r1, #1
 80010fe:	430a      	orrs	r2, r1
 8001100:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001102:	2003      	movs	r0, #3
 8001104:	f000 f810 	bl	8001128 <HAL_InitTick>
 8001108:	1e03      	subs	r3, r0, #0
 800110a:	d003      	beq.n	8001114 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800110c:	1dfb      	adds	r3, r7, #7
 800110e:	2201      	movs	r2, #1
 8001110:	701a      	strb	r2, [r3, #0]
 8001112:	e001      	b.n	8001118 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001114:	f7ff fe22 	bl	8000d5c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001118:	1dfb      	adds	r3, r7, #7
 800111a:	781b      	ldrb	r3, [r3, #0]
}
 800111c:	0018      	movs	r0, r3
 800111e:	46bd      	mov	sp, r7
 8001120:	b002      	add	sp, #8
 8001122:	bd80      	pop	{r7, pc}
 8001124:	40022000 	.word	0x40022000

08001128 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001128:	b590      	push	{r4, r7, lr}
 800112a:	b085      	sub	sp, #20
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001130:	230f      	movs	r3, #15
 8001132:	18fb      	adds	r3, r7, r3
 8001134:	2200      	movs	r2, #0
 8001136:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001138:	4b1d      	ldr	r3, [pc, #116]	; (80011b0 <HAL_InitTick+0x88>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d02b      	beq.n	8001198 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001140:	4b1c      	ldr	r3, [pc, #112]	; (80011b4 <HAL_InitTick+0x8c>)
 8001142:	681c      	ldr	r4, [r3, #0]
 8001144:	4b1a      	ldr	r3, [pc, #104]	; (80011b0 <HAL_InitTick+0x88>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	0019      	movs	r1, r3
 800114a:	23fa      	movs	r3, #250	; 0xfa
 800114c:	0098      	lsls	r0, r3, #2
 800114e:	f7fe ffeb 	bl	8000128 <__udivsi3>
 8001152:	0003      	movs	r3, r0
 8001154:	0019      	movs	r1, r3
 8001156:	0020      	movs	r0, r4
 8001158:	f7fe ffe6 	bl	8000128 <__udivsi3>
 800115c:	0003      	movs	r3, r0
 800115e:	0018      	movs	r0, r3
 8001160:	f000 f93f 	bl	80013e2 <HAL_SYSTICK_Config>
 8001164:	1e03      	subs	r3, r0, #0
 8001166:	d112      	bne.n	800118e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2b03      	cmp	r3, #3
 800116c:	d80a      	bhi.n	8001184 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800116e:	6879      	ldr	r1, [r7, #4]
 8001170:	2301      	movs	r3, #1
 8001172:	425b      	negs	r3, r3
 8001174:	2200      	movs	r2, #0
 8001176:	0018      	movs	r0, r3
 8001178:	f000 f91a 	bl	80013b0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800117c:	4b0e      	ldr	r3, [pc, #56]	; (80011b8 <HAL_InitTick+0x90>)
 800117e:	687a      	ldr	r2, [r7, #4]
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	e00d      	b.n	80011a0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001184:	230f      	movs	r3, #15
 8001186:	18fb      	adds	r3, r7, r3
 8001188:	2201      	movs	r2, #1
 800118a:	701a      	strb	r2, [r3, #0]
 800118c:	e008      	b.n	80011a0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800118e:	230f      	movs	r3, #15
 8001190:	18fb      	adds	r3, r7, r3
 8001192:	2201      	movs	r2, #1
 8001194:	701a      	strb	r2, [r3, #0]
 8001196:	e003      	b.n	80011a0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001198:	230f      	movs	r3, #15
 800119a:	18fb      	adds	r3, r7, r3
 800119c:	2201      	movs	r2, #1
 800119e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80011a0:	230f      	movs	r3, #15
 80011a2:	18fb      	adds	r3, r7, r3
 80011a4:	781b      	ldrb	r3, [r3, #0]
}
 80011a6:	0018      	movs	r0, r3
 80011a8:	46bd      	mov	sp, r7
 80011aa:	b005      	add	sp, #20
 80011ac:	bd90      	pop	{r4, r7, pc}
 80011ae:	46c0      	nop			; (mov r8, r8)
 80011b0:	20000010 	.word	0x20000010
 80011b4:	20000008 	.word	0x20000008
 80011b8:	2000000c 	.word	0x2000000c

080011bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011c0:	4b05      	ldr	r3, [pc, #20]	; (80011d8 <HAL_IncTick+0x1c>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	001a      	movs	r2, r3
 80011c6:	4b05      	ldr	r3, [pc, #20]	; (80011dc <HAL_IncTick+0x20>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	18d2      	adds	r2, r2, r3
 80011cc:	4b03      	ldr	r3, [pc, #12]	; (80011dc <HAL_IncTick+0x20>)
 80011ce:	601a      	str	r2, [r3, #0]
}
 80011d0:	46c0      	nop			; (mov r8, r8)
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	46c0      	nop			; (mov r8, r8)
 80011d8:	20000010 	.word	0x20000010
 80011dc:	20000368 	.word	0x20000368

080011e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  return uwTick;
 80011e4:	4b02      	ldr	r3, [pc, #8]	; (80011f0 <HAL_GetTick+0x10>)
 80011e6:	681b      	ldr	r3, [r3, #0]
}
 80011e8:	0018      	movs	r0, r3
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	46c0      	nop			; (mov r8, r8)
 80011f0:	20000368 	.word	0x20000368

080011f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011fc:	f7ff fff0 	bl	80011e0 <HAL_GetTick>
 8001200:	0003      	movs	r3, r0
 8001202:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	3301      	adds	r3, #1
 800120c:	d005      	beq.n	800121a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800120e:	4b0a      	ldr	r3, [pc, #40]	; (8001238 <HAL_Delay+0x44>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	001a      	movs	r2, r3
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	189b      	adds	r3, r3, r2
 8001218:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800121a:	46c0      	nop			; (mov r8, r8)
 800121c:	f7ff ffe0 	bl	80011e0 <HAL_GetTick>
 8001220:	0002      	movs	r2, r0
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	68fa      	ldr	r2, [r7, #12]
 8001228:	429a      	cmp	r2, r3
 800122a:	d8f7      	bhi.n	800121c <HAL_Delay+0x28>
  {
  }
}
 800122c:	46c0      	nop			; (mov r8, r8)
 800122e:	46c0      	nop			; (mov r8, r8)
 8001230:	46bd      	mov	sp, r7
 8001232:	b004      	add	sp, #16
 8001234:	bd80      	pop	{r7, pc}
 8001236:	46c0      	nop			; (mov r8, r8)
 8001238:	20000010 	.word	0x20000010

0800123c <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8001244:	4b06      	ldr	r3, [pc, #24]	; (8001260 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a06      	ldr	r2, [pc, #24]	; (8001264 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 800124a:	4013      	ands	r3, r2
 800124c:	0019      	movs	r1, r3
 800124e:	4b04      	ldr	r3, [pc, #16]	; (8001260 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001250:	687a      	ldr	r2, [r7, #4]
 8001252:	430a      	orrs	r2, r1
 8001254:	601a      	str	r2, [r3, #0]
}
 8001256:	46c0      	nop			; (mov r8, r8)
 8001258:	46bd      	mov	sp, r7
 800125a:	b002      	add	sp, #8
 800125c:	bd80      	pop	{r7, pc}
 800125e:	46c0      	nop			; (mov r8, r8)
 8001260:	40010000 	.word	0x40010000
 8001264:	fffff9ff 	.word	0xfffff9ff

08001268 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001268:	b590      	push	{r4, r7, lr}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	0002      	movs	r2, r0
 8001270:	6039      	str	r1, [r7, #0]
 8001272:	1dfb      	adds	r3, r7, #7
 8001274:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001276:	1dfb      	adds	r3, r7, #7
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b7f      	cmp	r3, #127	; 0x7f
 800127c:	d828      	bhi.n	80012d0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800127e:	4a2f      	ldr	r2, [pc, #188]	; (800133c <__NVIC_SetPriority+0xd4>)
 8001280:	1dfb      	adds	r3, r7, #7
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	b25b      	sxtb	r3, r3
 8001286:	089b      	lsrs	r3, r3, #2
 8001288:	33c0      	adds	r3, #192	; 0xc0
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	589b      	ldr	r3, [r3, r2]
 800128e:	1dfa      	adds	r2, r7, #7
 8001290:	7812      	ldrb	r2, [r2, #0]
 8001292:	0011      	movs	r1, r2
 8001294:	2203      	movs	r2, #3
 8001296:	400a      	ands	r2, r1
 8001298:	00d2      	lsls	r2, r2, #3
 800129a:	21ff      	movs	r1, #255	; 0xff
 800129c:	4091      	lsls	r1, r2
 800129e:	000a      	movs	r2, r1
 80012a0:	43d2      	mvns	r2, r2
 80012a2:	401a      	ands	r2, r3
 80012a4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	019b      	lsls	r3, r3, #6
 80012aa:	22ff      	movs	r2, #255	; 0xff
 80012ac:	401a      	ands	r2, r3
 80012ae:	1dfb      	adds	r3, r7, #7
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	0018      	movs	r0, r3
 80012b4:	2303      	movs	r3, #3
 80012b6:	4003      	ands	r3, r0
 80012b8:	00db      	lsls	r3, r3, #3
 80012ba:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012bc:	481f      	ldr	r0, [pc, #124]	; (800133c <__NVIC_SetPriority+0xd4>)
 80012be:	1dfb      	adds	r3, r7, #7
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	b25b      	sxtb	r3, r3
 80012c4:	089b      	lsrs	r3, r3, #2
 80012c6:	430a      	orrs	r2, r1
 80012c8:	33c0      	adds	r3, #192	; 0xc0
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80012ce:	e031      	b.n	8001334 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012d0:	4a1b      	ldr	r2, [pc, #108]	; (8001340 <__NVIC_SetPriority+0xd8>)
 80012d2:	1dfb      	adds	r3, r7, #7
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	0019      	movs	r1, r3
 80012d8:	230f      	movs	r3, #15
 80012da:	400b      	ands	r3, r1
 80012dc:	3b08      	subs	r3, #8
 80012de:	089b      	lsrs	r3, r3, #2
 80012e0:	3306      	adds	r3, #6
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	18d3      	adds	r3, r2, r3
 80012e6:	3304      	adds	r3, #4
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	1dfa      	adds	r2, r7, #7
 80012ec:	7812      	ldrb	r2, [r2, #0]
 80012ee:	0011      	movs	r1, r2
 80012f0:	2203      	movs	r2, #3
 80012f2:	400a      	ands	r2, r1
 80012f4:	00d2      	lsls	r2, r2, #3
 80012f6:	21ff      	movs	r1, #255	; 0xff
 80012f8:	4091      	lsls	r1, r2
 80012fa:	000a      	movs	r2, r1
 80012fc:	43d2      	mvns	r2, r2
 80012fe:	401a      	ands	r2, r3
 8001300:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	019b      	lsls	r3, r3, #6
 8001306:	22ff      	movs	r2, #255	; 0xff
 8001308:	401a      	ands	r2, r3
 800130a:	1dfb      	adds	r3, r7, #7
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	0018      	movs	r0, r3
 8001310:	2303      	movs	r3, #3
 8001312:	4003      	ands	r3, r0
 8001314:	00db      	lsls	r3, r3, #3
 8001316:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001318:	4809      	ldr	r0, [pc, #36]	; (8001340 <__NVIC_SetPriority+0xd8>)
 800131a:	1dfb      	adds	r3, r7, #7
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	001c      	movs	r4, r3
 8001320:	230f      	movs	r3, #15
 8001322:	4023      	ands	r3, r4
 8001324:	3b08      	subs	r3, #8
 8001326:	089b      	lsrs	r3, r3, #2
 8001328:	430a      	orrs	r2, r1
 800132a:	3306      	adds	r3, #6
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	18c3      	adds	r3, r0, r3
 8001330:	3304      	adds	r3, #4
 8001332:	601a      	str	r2, [r3, #0]
}
 8001334:	46c0      	nop			; (mov r8, r8)
 8001336:	46bd      	mov	sp, r7
 8001338:	b003      	add	sp, #12
 800133a:	bd90      	pop	{r4, r7, pc}
 800133c:	e000e100 	.word	0xe000e100
 8001340:	e000ed00 	.word	0xe000ed00

08001344 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001348:	f3bf 8f4f 	dsb	sy
}
 800134c:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800134e:	4b04      	ldr	r3, [pc, #16]	; (8001360 <__NVIC_SystemReset+0x1c>)
 8001350:	4a04      	ldr	r2, [pc, #16]	; (8001364 <__NVIC_SystemReset+0x20>)
 8001352:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001354:	f3bf 8f4f 	dsb	sy
}
 8001358:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800135a:	46c0      	nop			; (mov r8, r8)
 800135c:	e7fd      	b.n	800135a <__NVIC_SystemReset+0x16>
 800135e:	46c0      	nop			; (mov r8, r8)
 8001360:	e000ed00 	.word	0xe000ed00
 8001364:	05fa0004 	.word	0x05fa0004

08001368 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	1e5a      	subs	r2, r3, #1
 8001374:	2380      	movs	r3, #128	; 0x80
 8001376:	045b      	lsls	r3, r3, #17
 8001378:	429a      	cmp	r2, r3
 800137a:	d301      	bcc.n	8001380 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800137c:	2301      	movs	r3, #1
 800137e:	e010      	b.n	80013a2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001380:	4b0a      	ldr	r3, [pc, #40]	; (80013ac <SysTick_Config+0x44>)
 8001382:	687a      	ldr	r2, [r7, #4]
 8001384:	3a01      	subs	r2, #1
 8001386:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001388:	2301      	movs	r3, #1
 800138a:	425b      	negs	r3, r3
 800138c:	2103      	movs	r1, #3
 800138e:	0018      	movs	r0, r3
 8001390:	f7ff ff6a 	bl	8001268 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001394:	4b05      	ldr	r3, [pc, #20]	; (80013ac <SysTick_Config+0x44>)
 8001396:	2200      	movs	r2, #0
 8001398:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800139a:	4b04      	ldr	r3, [pc, #16]	; (80013ac <SysTick_Config+0x44>)
 800139c:	2207      	movs	r2, #7
 800139e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	0018      	movs	r0, r3
 80013a4:	46bd      	mov	sp, r7
 80013a6:	b002      	add	sp, #8
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	46c0      	nop			; (mov r8, r8)
 80013ac:	e000e010 	.word	0xe000e010

080013b0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	60b9      	str	r1, [r7, #8]
 80013b8:	607a      	str	r2, [r7, #4]
 80013ba:	210f      	movs	r1, #15
 80013bc:	187b      	adds	r3, r7, r1
 80013be:	1c02      	adds	r2, r0, #0
 80013c0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80013c2:	68ba      	ldr	r2, [r7, #8]
 80013c4:	187b      	adds	r3, r7, r1
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	b25b      	sxtb	r3, r3
 80013ca:	0011      	movs	r1, r2
 80013cc:	0018      	movs	r0, r3
 80013ce:	f7ff ff4b 	bl	8001268 <__NVIC_SetPriority>
}
 80013d2:	46c0      	nop			; (mov r8, r8)
 80013d4:	46bd      	mov	sp, r7
 80013d6:	b004      	add	sp, #16
 80013d8:	bd80      	pop	{r7, pc}

080013da <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80013da:	b580      	push	{r7, lr}
 80013dc:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80013de:	f7ff ffb1 	bl	8001344 <__NVIC_SystemReset>

080013e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b082      	sub	sp, #8
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	0018      	movs	r0, r3
 80013ee:	f7ff ffbb 	bl	8001368 <SysTick_Config>
 80013f2:	0003      	movs	r3, r0
}
 80013f4:	0018      	movs	r0, r3
 80013f6:	46bd      	mov	sp, r7
 80013f8:	b002      	add	sp, #8
 80013fa:	bd80      	pop	{r7, pc}

080013fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b086      	sub	sp, #24
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001406:	2300      	movs	r3, #0
 8001408:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800140a:	e14d      	b.n	80016a8 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2101      	movs	r1, #1
 8001412:	697a      	ldr	r2, [r7, #20]
 8001414:	4091      	lsls	r1, r2
 8001416:	000a      	movs	r2, r1
 8001418:	4013      	ands	r3, r2
 800141a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d100      	bne.n	8001424 <HAL_GPIO_Init+0x28>
 8001422:	e13e      	b.n	80016a2 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	2203      	movs	r2, #3
 800142a:	4013      	ands	r3, r2
 800142c:	2b01      	cmp	r3, #1
 800142e:	d005      	beq.n	800143c <HAL_GPIO_Init+0x40>
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	2203      	movs	r2, #3
 8001436:	4013      	ands	r3, r2
 8001438:	2b02      	cmp	r3, #2
 800143a:	d130      	bne.n	800149e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	2203      	movs	r2, #3
 8001448:	409a      	lsls	r2, r3
 800144a:	0013      	movs	r3, r2
 800144c:	43da      	mvns	r2, r3
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	4013      	ands	r3, r2
 8001452:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	68da      	ldr	r2, [r3, #12]
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	409a      	lsls	r2, r3
 800145e:	0013      	movs	r3, r2
 8001460:	693a      	ldr	r2, [r7, #16]
 8001462:	4313      	orrs	r3, r2
 8001464:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	693a      	ldr	r2, [r7, #16]
 800146a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001472:	2201      	movs	r2, #1
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	409a      	lsls	r2, r3
 8001478:	0013      	movs	r3, r2
 800147a:	43da      	mvns	r2, r3
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	4013      	ands	r3, r2
 8001480:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	091b      	lsrs	r3, r3, #4
 8001488:	2201      	movs	r2, #1
 800148a:	401a      	ands	r2, r3
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	409a      	lsls	r2, r3
 8001490:	0013      	movs	r3, r2
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	4313      	orrs	r3, r2
 8001496:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	2203      	movs	r2, #3
 80014a4:	4013      	ands	r3, r2
 80014a6:	2b03      	cmp	r3, #3
 80014a8:	d017      	beq.n	80014da <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	68db      	ldr	r3, [r3, #12]
 80014ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	2203      	movs	r2, #3
 80014b6:	409a      	lsls	r2, r3
 80014b8:	0013      	movs	r3, r2
 80014ba:	43da      	mvns	r2, r3
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	4013      	ands	r3, r2
 80014c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	689a      	ldr	r2, [r3, #8]
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	409a      	lsls	r2, r3
 80014cc:	0013      	movs	r3, r2
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	2203      	movs	r2, #3
 80014e0:	4013      	ands	r3, r2
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d123      	bne.n	800152e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	08da      	lsrs	r2, r3, #3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	3208      	adds	r2, #8
 80014ee:	0092      	lsls	r2, r2, #2
 80014f0:	58d3      	ldr	r3, [r2, r3]
 80014f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	2207      	movs	r2, #7
 80014f8:	4013      	ands	r3, r2
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	220f      	movs	r2, #15
 80014fe:	409a      	lsls	r2, r3
 8001500:	0013      	movs	r3, r2
 8001502:	43da      	mvns	r2, r3
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	4013      	ands	r3, r2
 8001508:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	691a      	ldr	r2, [r3, #16]
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	2107      	movs	r1, #7
 8001512:	400b      	ands	r3, r1
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	409a      	lsls	r2, r3
 8001518:	0013      	movs	r3, r2
 800151a:	693a      	ldr	r2, [r7, #16]
 800151c:	4313      	orrs	r3, r2
 800151e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	08da      	lsrs	r2, r3, #3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	3208      	adds	r2, #8
 8001528:	0092      	lsls	r2, r2, #2
 800152a:	6939      	ldr	r1, [r7, #16]
 800152c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	2203      	movs	r2, #3
 800153a:	409a      	lsls	r2, r3
 800153c:	0013      	movs	r3, r2
 800153e:	43da      	mvns	r2, r3
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	4013      	ands	r3, r2
 8001544:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	2203      	movs	r2, #3
 800154c:	401a      	ands	r2, r3
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	409a      	lsls	r2, r3
 8001554:	0013      	movs	r3, r2
 8001556:	693a      	ldr	r2, [r7, #16]
 8001558:	4313      	orrs	r3, r2
 800155a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	685a      	ldr	r2, [r3, #4]
 8001566:	23c0      	movs	r3, #192	; 0xc0
 8001568:	029b      	lsls	r3, r3, #10
 800156a:	4013      	ands	r3, r2
 800156c:	d100      	bne.n	8001570 <HAL_GPIO_Init+0x174>
 800156e:	e098      	b.n	80016a2 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001570:	4a53      	ldr	r2, [pc, #332]	; (80016c0 <HAL_GPIO_Init+0x2c4>)
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	089b      	lsrs	r3, r3, #2
 8001576:	3318      	adds	r3, #24
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	589b      	ldr	r3, [r3, r2]
 800157c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	2203      	movs	r2, #3
 8001582:	4013      	ands	r3, r2
 8001584:	00db      	lsls	r3, r3, #3
 8001586:	220f      	movs	r2, #15
 8001588:	409a      	lsls	r2, r3
 800158a:	0013      	movs	r3, r2
 800158c:	43da      	mvns	r2, r3
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	4013      	ands	r3, r2
 8001592:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	23a0      	movs	r3, #160	; 0xa0
 8001598:	05db      	lsls	r3, r3, #23
 800159a:	429a      	cmp	r2, r3
 800159c:	d019      	beq.n	80015d2 <HAL_GPIO_Init+0x1d6>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4a48      	ldr	r2, [pc, #288]	; (80016c4 <HAL_GPIO_Init+0x2c8>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d013      	beq.n	80015ce <HAL_GPIO_Init+0x1d2>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4a47      	ldr	r2, [pc, #284]	; (80016c8 <HAL_GPIO_Init+0x2cc>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d00d      	beq.n	80015ca <HAL_GPIO_Init+0x1ce>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a46      	ldr	r2, [pc, #280]	; (80016cc <HAL_GPIO_Init+0x2d0>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d007      	beq.n	80015c6 <HAL_GPIO_Init+0x1ca>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4a45      	ldr	r2, [pc, #276]	; (80016d0 <HAL_GPIO_Init+0x2d4>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d101      	bne.n	80015c2 <HAL_GPIO_Init+0x1c6>
 80015be:	2304      	movs	r3, #4
 80015c0:	e008      	b.n	80015d4 <HAL_GPIO_Init+0x1d8>
 80015c2:	2305      	movs	r3, #5
 80015c4:	e006      	b.n	80015d4 <HAL_GPIO_Init+0x1d8>
 80015c6:	2303      	movs	r3, #3
 80015c8:	e004      	b.n	80015d4 <HAL_GPIO_Init+0x1d8>
 80015ca:	2302      	movs	r3, #2
 80015cc:	e002      	b.n	80015d4 <HAL_GPIO_Init+0x1d8>
 80015ce:	2301      	movs	r3, #1
 80015d0:	e000      	b.n	80015d4 <HAL_GPIO_Init+0x1d8>
 80015d2:	2300      	movs	r3, #0
 80015d4:	697a      	ldr	r2, [r7, #20]
 80015d6:	2103      	movs	r1, #3
 80015d8:	400a      	ands	r2, r1
 80015da:	00d2      	lsls	r2, r2, #3
 80015dc:	4093      	lsls	r3, r2
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80015e4:	4936      	ldr	r1, [pc, #216]	; (80016c0 <HAL_GPIO_Init+0x2c4>)
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	089b      	lsrs	r3, r3, #2
 80015ea:	3318      	adds	r3, #24
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015f2:	4b33      	ldr	r3, [pc, #204]	; (80016c0 <HAL_GPIO_Init+0x2c4>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	43da      	mvns	r2, r3
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	4013      	ands	r3, r2
 8001600:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685a      	ldr	r2, [r3, #4]
 8001606:	2380      	movs	r3, #128	; 0x80
 8001608:	035b      	lsls	r3, r3, #13
 800160a:	4013      	ands	r3, r2
 800160c:	d003      	beq.n	8001616 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	4313      	orrs	r3, r2
 8001614:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001616:	4b2a      	ldr	r3, [pc, #168]	; (80016c0 <HAL_GPIO_Init+0x2c4>)
 8001618:	693a      	ldr	r2, [r7, #16]
 800161a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800161c:	4b28      	ldr	r3, [pc, #160]	; (80016c0 <HAL_GPIO_Init+0x2c4>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	43da      	mvns	r2, r3
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	4013      	ands	r3, r2
 800162a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685a      	ldr	r2, [r3, #4]
 8001630:	2380      	movs	r3, #128	; 0x80
 8001632:	039b      	lsls	r3, r3, #14
 8001634:	4013      	ands	r3, r2
 8001636:	d003      	beq.n	8001640 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	4313      	orrs	r3, r2
 800163e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001640:	4b1f      	ldr	r3, [pc, #124]	; (80016c0 <HAL_GPIO_Init+0x2c4>)
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001646:	4a1e      	ldr	r2, [pc, #120]	; (80016c0 <HAL_GPIO_Init+0x2c4>)
 8001648:	2384      	movs	r3, #132	; 0x84
 800164a:	58d3      	ldr	r3, [r2, r3]
 800164c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	43da      	mvns	r2, r3
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	4013      	ands	r3, r2
 8001656:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685a      	ldr	r2, [r3, #4]
 800165c:	2380      	movs	r3, #128	; 0x80
 800165e:	029b      	lsls	r3, r3, #10
 8001660:	4013      	ands	r3, r2
 8001662:	d003      	beq.n	800166c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001664:	693a      	ldr	r2, [r7, #16]
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	4313      	orrs	r3, r2
 800166a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800166c:	4914      	ldr	r1, [pc, #80]	; (80016c0 <HAL_GPIO_Init+0x2c4>)
 800166e:	2284      	movs	r2, #132	; 0x84
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001674:	4a12      	ldr	r2, [pc, #72]	; (80016c0 <HAL_GPIO_Init+0x2c4>)
 8001676:	2380      	movs	r3, #128	; 0x80
 8001678:	58d3      	ldr	r3, [r2, r3]
 800167a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	43da      	mvns	r2, r3
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	4013      	ands	r3, r2
 8001684:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685a      	ldr	r2, [r3, #4]
 800168a:	2380      	movs	r3, #128	; 0x80
 800168c:	025b      	lsls	r3, r3, #9
 800168e:	4013      	ands	r3, r2
 8001690:	d003      	beq.n	800169a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	4313      	orrs	r3, r2
 8001698:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800169a:	4909      	ldr	r1, [pc, #36]	; (80016c0 <HAL_GPIO_Init+0x2c4>)
 800169c:	2280      	movs	r2, #128	; 0x80
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	3301      	adds	r3, #1
 80016a6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	40da      	lsrs	r2, r3
 80016b0:	1e13      	subs	r3, r2, #0
 80016b2:	d000      	beq.n	80016b6 <HAL_GPIO_Init+0x2ba>
 80016b4:	e6aa      	b.n	800140c <HAL_GPIO_Init+0x10>
  }
}
 80016b6:	46c0      	nop			; (mov r8, r8)
 80016b8:	46c0      	nop			; (mov r8, r8)
 80016ba:	46bd      	mov	sp, r7
 80016bc:	b006      	add	sp, #24
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	40021800 	.word	0x40021800
 80016c4:	50000400 	.word	0x50000400
 80016c8:	50000800 	.word	0x50000800
 80016cc:	50000c00 	.word	0x50000c00
 80016d0:	50001000 	.word	0x50001000

080016d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	000a      	movs	r2, r1
 80016de:	1cbb      	adds	r3, r7, #2
 80016e0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	691b      	ldr	r3, [r3, #16]
 80016e6:	1cba      	adds	r2, r7, #2
 80016e8:	8812      	ldrh	r2, [r2, #0]
 80016ea:	4013      	ands	r3, r2
 80016ec:	d004      	beq.n	80016f8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80016ee:	230f      	movs	r3, #15
 80016f0:	18fb      	adds	r3, r7, r3
 80016f2:	2201      	movs	r2, #1
 80016f4:	701a      	strb	r2, [r3, #0]
 80016f6:	e003      	b.n	8001700 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016f8:	230f      	movs	r3, #15
 80016fa:	18fb      	adds	r3, r7, r3
 80016fc:	2200      	movs	r2, #0
 80016fe:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001700:	230f      	movs	r3, #15
 8001702:	18fb      	adds	r3, r7, r3
 8001704:	781b      	ldrb	r3, [r3, #0]
}
 8001706:	0018      	movs	r0, r3
 8001708:	46bd      	mov	sp, r7
 800170a:	b004      	add	sp, #16
 800170c:	bd80      	pop	{r7, pc}

0800170e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	b082      	sub	sp, #8
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
 8001716:	0008      	movs	r0, r1
 8001718:	0011      	movs	r1, r2
 800171a:	1cbb      	adds	r3, r7, #2
 800171c:	1c02      	adds	r2, r0, #0
 800171e:	801a      	strh	r2, [r3, #0]
 8001720:	1c7b      	adds	r3, r7, #1
 8001722:	1c0a      	adds	r2, r1, #0
 8001724:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001726:	1c7b      	adds	r3, r7, #1
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d004      	beq.n	8001738 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800172e:	1cbb      	adds	r3, r7, #2
 8001730:	881a      	ldrh	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001736:	e003      	b.n	8001740 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001738:	1cbb      	adds	r3, r7, #2
 800173a:	881a      	ldrh	r2, [r3, #0]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001740:	46c0      	nop			; (mov r8, r8)
 8001742:	46bd      	mov	sp, r7
 8001744:	b002      	add	sp, #8
 8001746:	bd80      	pop	{r7, pc}

08001748 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800174c:	4b04      	ldr	r3, [pc, #16]	; (8001760 <HAL_PWR_EnableBkUpAccess+0x18>)
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	4b03      	ldr	r3, [pc, #12]	; (8001760 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001752:	2180      	movs	r1, #128	; 0x80
 8001754:	0049      	lsls	r1, r1, #1
 8001756:	430a      	orrs	r2, r1
 8001758:	601a      	str	r2, [r3, #0]
}
 800175a:	46c0      	nop			; (mov r8, r8)
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	40007000 	.word	0x40007000

08001764 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800176c:	4b19      	ldr	r3, [pc, #100]	; (80017d4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a19      	ldr	r2, [pc, #100]	; (80017d8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001772:	4013      	ands	r3, r2
 8001774:	0019      	movs	r1, r3
 8001776:	4b17      	ldr	r3, [pc, #92]	; (80017d4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001778:	687a      	ldr	r2, [r7, #4]
 800177a:	430a      	orrs	r2, r1
 800177c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	2380      	movs	r3, #128	; 0x80
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	429a      	cmp	r2, r3
 8001786:	d11f      	bne.n	80017c8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001788:	4b14      	ldr	r3, [pc, #80]	; (80017dc <HAL_PWREx_ControlVoltageScaling+0x78>)
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	0013      	movs	r3, r2
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	189b      	adds	r3, r3, r2
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	4912      	ldr	r1, [pc, #72]	; (80017e0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001796:	0018      	movs	r0, r3
 8001798:	f7fe fcc6 	bl	8000128 <__udivsi3>
 800179c:	0003      	movs	r3, r0
 800179e:	3301      	adds	r3, #1
 80017a0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017a2:	e008      	b.n	80017b6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d003      	beq.n	80017b2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	3b01      	subs	r3, #1
 80017ae:	60fb      	str	r3, [r7, #12]
 80017b0:	e001      	b.n	80017b6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e009      	b.n	80017ca <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017b6:	4b07      	ldr	r3, [pc, #28]	; (80017d4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80017b8:	695a      	ldr	r2, [r3, #20]
 80017ba:	2380      	movs	r3, #128	; 0x80
 80017bc:	00db      	lsls	r3, r3, #3
 80017be:	401a      	ands	r2, r3
 80017c0:	2380      	movs	r3, #128	; 0x80
 80017c2:	00db      	lsls	r3, r3, #3
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d0ed      	beq.n	80017a4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80017c8:	2300      	movs	r3, #0
}
 80017ca:	0018      	movs	r0, r3
 80017cc:	46bd      	mov	sp, r7
 80017ce:	b004      	add	sp, #16
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	46c0      	nop			; (mov r8, r8)
 80017d4:	40007000 	.word	0x40007000
 80017d8:	fffff9ff 	.word	0xfffff9ff
 80017dc:	20000008 	.word	0x20000008
 80017e0:	000f4240 	.word	0x000f4240

080017e4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80017e8:	4b03      	ldr	r3, [pc, #12]	; (80017f8 <LL_RCC_GetAPB1Prescaler+0x14>)
 80017ea:	689a      	ldr	r2, [r3, #8]
 80017ec:	23e0      	movs	r3, #224	; 0xe0
 80017ee:	01db      	lsls	r3, r3, #7
 80017f0:	4013      	ands	r3, r2
}
 80017f2:	0018      	movs	r0, r3
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	40021000 	.word	0x40021000

080017fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b088      	sub	sp, #32
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d102      	bne.n	8001810 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	f000 fb50 	bl	8001eb0 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2201      	movs	r2, #1
 8001816:	4013      	ands	r3, r2
 8001818:	d100      	bne.n	800181c <HAL_RCC_OscConfig+0x20>
 800181a:	e07c      	b.n	8001916 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800181c:	4bc3      	ldr	r3, [pc, #780]	; (8001b2c <HAL_RCC_OscConfig+0x330>)
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	2238      	movs	r2, #56	; 0x38
 8001822:	4013      	ands	r3, r2
 8001824:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001826:	4bc1      	ldr	r3, [pc, #772]	; (8001b2c <HAL_RCC_OscConfig+0x330>)
 8001828:	68db      	ldr	r3, [r3, #12]
 800182a:	2203      	movs	r2, #3
 800182c:	4013      	ands	r3, r2
 800182e:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001830:	69bb      	ldr	r3, [r7, #24]
 8001832:	2b10      	cmp	r3, #16
 8001834:	d102      	bne.n	800183c <HAL_RCC_OscConfig+0x40>
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	2b03      	cmp	r3, #3
 800183a:	d002      	beq.n	8001842 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	2b08      	cmp	r3, #8
 8001840:	d10b      	bne.n	800185a <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001842:	4bba      	ldr	r3, [pc, #744]	; (8001b2c <HAL_RCC_OscConfig+0x330>)
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	2380      	movs	r3, #128	; 0x80
 8001848:	029b      	lsls	r3, r3, #10
 800184a:	4013      	ands	r3, r2
 800184c:	d062      	beq.n	8001914 <HAL_RCC_OscConfig+0x118>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d15e      	bne.n	8001914 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e32a      	b.n	8001eb0 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685a      	ldr	r2, [r3, #4]
 800185e:	2380      	movs	r3, #128	; 0x80
 8001860:	025b      	lsls	r3, r3, #9
 8001862:	429a      	cmp	r2, r3
 8001864:	d107      	bne.n	8001876 <HAL_RCC_OscConfig+0x7a>
 8001866:	4bb1      	ldr	r3, [pc, #708]	; (8001b2c <HAL_RCC_OscConfig+0x330>)
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	4bb0      	ldr	r3, [pc, #704]	; (8001b2c <HAL_RCC_OscConfig+0x330>)
 800186c:	2180      	movs	r1, #128	; 0x80
 800186e:	0249      	lsls	r1, r1, #9
 8001870:	430a      	orrs	r2, r1
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	e020      	b.n	80018b8 <HAL_RCC_OscConfig+0xbc>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685a      	ldr	r2, [r3, #4]
 800187a:	23a0      	movs	r3, #160	; 0xa0
 800187c:	02db      	lsls	r3, r3, #11
 800187e:	429a      	cmp	r2, r3
 8001880:	d10e      	bne.n	80018a0 <HAL_RCC_OscConfig+0xa4>
 8001882:	4baa      	ldr	r3, [pc, #680]	; (8001b2c <HAL_RCC_OscConfig+0x330>)
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	4ba9      	ldr	r3, [pc, #676]	; (8001b2c <HAL_RCC_OscConfig+0x330>)
 8001888:	2180      	movs	r1, #128	; 0x80
 800188a:	02c9      	lsls	r1, r1, #11
 800188c:	430a      	orrs	r2, r1
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	4ba6      	ldr	r3, [pc, #664]	; (8001b2c <HAL_RCC_OscConfig+0x330>)
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	4ba5      	ldr	r3, [pc, #660]	; (8001b2c <HAL_RCC_OscConfig+0x330>)
 8001896:	2180      	movs	r1, #128	; 0x80
 8001898:	0249      	lsls	r1, r1, #9
 800189a:	430a      	orrs	r2, r1
 800189c:	601a      	str	r2, [r3, #0]
 800189e:	e00b      	b.n	80018b8 <HAL_RCC_OscConfig+0xbc>
 80018a0:	4ba2      	ldr	r3, [pc, #648]	; (8001b2c <HAL_RCC_OscConfig+0x330>)
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	4ba1      	ldr	r3, [pc, #644]	; (8001b2c <HAL_RCC_OscConfig+0x330>)
 80018a6:	49a2      	ldr	r1, [pc, #648]	; (8001b30 <HAL_RCC_OscConfig+0x334>)
 80018a8:	400a      	ands	r2, r1
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	4b9f      	ldr	r3, [pc, #636]	; (8001b2c <HAL_RCC_OscConfig+0x330>)
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	4b9e      	ldr	r3, [pc, #632]	; (8001b2c <HAL_RCC_OscConfig+0x330>)
 80018b2:	49a0      	ldr	r1, [pc, #640]	; (8001b34 <HAL_RCC_OscConfig+0x338>)
 80018b4:	400a      	ands	r2, r1
 80018b6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d014      	beq.n	80018ea <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c0:	f7ff fc8e 	bl	80011e0 <HAL_GetTick>
 80018c4:	0003      	movs	r3, r0
 80018c6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018c8:	e008      	b.n	80018dc <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018ca:	f7ff fc89 	bl	80011e0 <HAL_GetTick>
 80018ce:	0002      	movs	r2, r0
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	2b64      	cmp	r3, #100	; 0x64
 80018d6:	d901      	bls.n	80018dc <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80018d8:	2303      	movs	r3, #3
 80018da:	e2e9      	b.n	8001eb0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018dc:	4b93      	ldr	r3, [pc, #588]	; (8001b2c <HAL_RCC_OscConfig+0x330>)
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	2380      	movs	r3, #128	; 0x80
 80018e2:	029b      	lsls	r3, r3, #10
 80018e4:	4013      	ands	r3, r2
 80018e6:	d0f0      	beq.n	80018ca <HAL_RCC_OscConfig+0xce>
 80018e8:	e015      	b.n	8001916 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ea:	f7ff fc79 	bl	80011e0 <HAL_GetTick>
 80018ee:	0003      	movs	r3, r0
 80018f0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018f2:	e008      	b.n	8001906 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018f4:	f7ff fc74 	bl	80011e0 <HAL_GetTick>
 80018f8:	0002      	movs	r2, r0
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b64      	cmp	r3, #100	; 0x64
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e2d4      	b.n	8001eb0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001906:	4b89      	ldr	r3, [pc, #548]	; (8001b2c <HAL_RCC_OscConfig+0x330>)
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	2380      	movs	r3, #128	; 0x80
 800190c:	029b      	lsls	r3, r3, #10
 800190e:	4013      	ands	r3, r2
 8001910:	d1f0      	bne.n	80018f4 <HAL_RCC_OscConfig+0xf8>
 8001912:	e000      	b.n	8001916 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001914:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2202      	movs	r2, #2
 800191c:	4013      	ands	r3, r2
 800191e:	d100      	bne.n	8001922 <HAL_RCC_OscConfig+0x126>
 8001920:	e099      	b.n	8001a56 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001922:	4b82      	ldr	r3, [pc, #520]	; (8001b2c <HAL_RCC_OscConfig+0x330>)
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	2238      	movs	r2, #56	; 0x38
 8001928:	4013      	ands	r3, r2
 800192a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800192c:	4b7f      	ldr	r3, [pc, #508]	; (8001b2c <HAL_RCC_OscConfig+0x330>)
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	2203      	movs	r2, #3
 8001932:	4013      	ands	r3, r2
 8001934:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	2b10      	cmp	r3, #16
 800193a:	d102      	bne.n	8001942 <HAL_RCC_OscConfig+0x146>
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	2b02      	cmp	r3, #2
 8001940:	d002      	beq.n	8001948 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d135      	bne.n	80019b4 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001948:	4b78      	ldr	r3, [pc, #480]	; (8001b2c <HAL_RCC_OscConfig+0x330>)
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	2380      	movs	r3, #128	; 0x80
 800194e:	00db      	lsls	r3, r3, #3
 8001950:	4013      	ands	r3, r2
 8001952:	d005      	beq.n	8001960 <HAL_RCC_OscConfig+0x164>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d101      	bne.n	8001960 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e2a7      	b.n	8001eb0 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001960:	4b72      	ldr	r3, [pc, #456]	; (8001b2c <HAL_RCC_OscConfig+0x330>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	4a74      	ldr	r2, [pc, #464]	; (8001b38 <HAL_RCC_OscConfig+0x33c>)
 8001966:	4013      	ands	r3, r2
 8001968:	0019      	movs	r1, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	695b      	ldr	r3, [r3, #20]
 800196e:	021a      	lsls	r2, r3, #8
 8001970:	4b6e      	ldr	r3, [pc, #440]	; (8001b2c <HAL_RCC_OscConfig+0x330>)
 8001972:	430a      	orrs	r2, r1
 8001974:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d112      	bne.n	80019a2 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800197c:	4b6b      	ldr	r3, [pc, #428]	; (8001b2c <HAL_RCC_OscConfig+0x330>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a6e      	ldr	r2, [pc, #440]	; (8001b3c <HAL_RCC_OscConfig+0x340>)
 8001982:	4013      	ands	r3, r2
 8001984:	0019      	movs	r1, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	691a      	ldr	r2, [r3, #16]
 800198a:	4b68      	ldr	r3, [pc, #416]	; (8001b2c <HAL_RCC_OscConfig+0x330>)
 800198c:	430a      	orrs	r2, r1
 800198e:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001990:	4b66      	ldr	r3, [pc, #408]	; (8001b2c <HAL_RCC_OscConfig+0x330>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	0adb      	lsrs	r3, r3, #11
 8001996:	2207      	movs	r2, #7
 8001998:	4013      	ands	r3, r2
 800199a:	4a69      	ldr	r2, [pc, #420]	; (8001b40 <HAL_RCC_OscConfig+0x344>)
 800199c:	40da      	lsrs	r2, r3
 800199e:	4b69      	ldr	r3, [pc, #420]	; (8001b44 <HAL_RCC_OscConfig+0x348>)
 80019a0:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80019a2:	4b69      	ldr	r3, [pc, #420]	; (8001b48 <HAL_RCC_OscConfig+0x34c>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	0018      	movs	r0, r3
 80019a8:	f7ff fbbe 	bl	8001128 <HAL_InitTick>
 80019ac:	1e03      	subs	r3, r0, #0
 80019ae:	d051      	beq.n	8001a54 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e27d      	b.n	8001eb0 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d030      	beq.n	8001a1e <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80019bc:	4b5b      	ldr	r3, [pc, #364]	; (8001b2c <HAL_RCC_OscConfig+0x330>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a5e      	ldr	r2, [pc, #376]	; (8001b3c <HAL_RCC_OscConfig+0x340>)
 80019c2:	4013      	ands	r3, r2
 80019c4:	0019      	movs	r1, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	691a      	ldr	r2, [r3, #16]
 80019ca:	4b58      	ldr	r3, [pc, #352]	; (8001b2c <HAL_RCC_OscConfig+0x330>)
 80019cc:	430a      	orrs	r2, r1
 80019ce:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80019d0:	4b56      	ldr	r3, [pc, #344]	; (8001b2c <HAL_RCC_OscConfig+0x330>)
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	4b55      	ldr	r3, [pc, #340]	; (8001b2c <HAL_RCC_OscConfig+0x330>)
 80019d6:	2180      	movs	r1, #128	; 0x80
 80019d8:	0049      	lsls	r1, r1, #1
 80019da:	430a      	orrs	r2, r1
 80019dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019de:	f7ff fbff 	bl	80011e0 <HAL_GetTick>
 80019e2:	0003      	movs	r3, r0
 80019e4:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019e6:	e008      	b.n	80019fa <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019e8:	f7ff fbfa 	bl	80011e0 <HAL_GetTick>
 80019ec:	0002      	movs	r2, r0
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e25a      	b.n	8001eb0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019fa:	4b4c      	ldr	r3, [pc, #304]	; (8001b2c <HAL_RCC_OscConfig+0x330>)
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	2380      	movs	r3, #128	; 0x80
 8001a00:	00db      	lsls	r3, r3, #3
 8001a02:	4013      	ands	r3, r2
 8001a04:	d0f0      	beq.n	80019e8 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a06:	4b49      	ldr	r3, [pc, #292]	; (8001b2c <HAL_RCC_OscConfig+0x330>)
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	4a4b      	ldr	r2, [pc, #300]	; (8001b38 <HAL_RCC_OscConfig+0x33c>)
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	0019      	movs	r1, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	695b      	ldr	r3, [r3, #20]
 8001a14:	021a      	lsls	r2, r3, #8
 8001a16:	4b45      	ldr	r3, [pc, #276]	; (8001b2c <HAL_RCC_OscConfig+0x330>)
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	605a      	str	r2, [r3, #4]
 8001a1c:	e01b      	b.n	8001a56 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001a1e:	4b43      	ldr	r3, [pc, #268]	; (8001b2c <HAL_RCC_OscConfig+0x330>)
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	4b42      	ldr	r3, [pc, #264]	; (8001b2c <HAL_RCC_OscConfig+0x330>)
 8001a24:	4949      	ldr	r1, [pc, #292]	; (8001b4c <HAL_RCC_OscConfig+0x350>)
 8001a26:	400a      	ands	r2, r1
 8001a28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a2a:	f7ff fbd9 	bl	80011e0 <HAL_GetTick>
 8001a2e:	0003      	movs	r3, r0
 8001a30:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a34:	f7ff fbd4 	bl	80011e0 <HAL_GetTick>
 8001a38:	0002      	movs	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e234      	b.n	8001eb0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a46:	4b39      	ldr	r3, [pc, #228]	; (8001b2c <HAL_RCC_OscConfig+0x330>)
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	2380      	movs	r3, #128	; 0x80
 8001a4c:	00db      	lsls	r3, r3, #3
 8001a4e:	4013      	ands	r3, r2
 8001a50:	d1f0      	bne.n	8001a34 <HAL_RCC_OscConfig+0x238>
 8001a52:	e000      	b.n	8001a56 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a54:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2208      	movs	r2, #8
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	d047      	beq.n	8001af0 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001a60:	4b32      	ldr	r3, [pc, #200]	; (8001b2c <HAL_RCC_OscConfig+0x330>)
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	2238      	movs	r2, #56	; 0x38
 8001a66:	4013      	ands	r3, r2
 8001a68:	2b18      	cmp	r3, #24
 8001a6a:	d10a      	bne.n	8001a82 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001a6c:	4b2f      	ldr	r3, [pc, #188]	; (8001b2c <HAL_RCC_OscConfig+0x330>)
 8001a6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a70:	2202      	movs	r2, #2
 8001a72:	4013      	ands	r3, r2
 8001a74:	d03c      	beq.n	8001af0 <HAL_RCC_OscConfig+0x2f4>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	699b      	ldr	r3, [r3, #24]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d138      	bne.n	8001af0 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e216      	b.n	8001eb0 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	699b      	ldr	r3, [r3, #24]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d019      	beq.n	8001abe <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001a8a:	4b28      	ldr	r3, [pc, #160]	; (8001b2c <HAL_RCC_OscConfig+0x330>)
 8001a8c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a8e:	4b27      	ldr	r3, [pc, #156]	; (8001b2c <HAL_RCC_OscConfig+0x330>)
 8001a90:	2101      	movs	r1, #1
 8001a92:	430a      	orrs	r2, r1
 8001a94:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a96:	f7ff fba3 	bl	80011e0 <HAL_GetTick>
 8001a9a:	0003      	movs	r3, r0
 8001a9c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a9e:	e008      	b.n	8001ab2 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aa0:	f7ff fb9e 	bl	80011e0 <HAL_GetTick>
 8001aa4:	0002      	movs	r2, r0
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e1fe      	b.n	8001eb0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ab2:	4b1e      	ldr	r3, [pc, #120]	; (8001b2c <HAL_RCC_OscConfig+0x330>)
 8001ab4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ab6:	2202      	movs	r2, #2
 8001ab8:	4013      	ands	r3, r2
 8001aba:	d0f1      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x2a4>
 8001abc:	e018      	b.n	8001af0 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001abe:	4b1b      	ldr	r3, [pc, #108]	; (8001b2c <HAL_RCC_OscConfig+0x330>)
 8001ac0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ac2:	4b1a      	ldr	r3, [pc, #104]	; (8001b2c <HAL_RCC_OscConfig+0x330>)
 8001ac4:	2101      	movs	r1, #1
 8001ac6:	438a      	bics	r2, r1
 8001ac8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aca:	f7ff fb89 	bl	80011e0 <HAL_GetTick>
 8001ace:	0003      	movs	r3, r0
 8001ad0:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ad2:	e008      	b.n	8001ae6 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ad4:	f7ff fb84 	bl	80011e0 <HAL_GetTick>
 8001ad8:	0002      	movs	r2, r0
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d901      	bls.n	8001ae6 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e1e4      	b.n	8001eb0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ae6:	4b11      	ldr	r3, [pc, #68]	; (8001b2c <HAL_RCC_OscConfig+0x330>)
 8001ae8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aea:	2202      	movs	r2, #2
 8001aec:	4013      	ands	r3, r2
 8001aee:	d1f1      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2204      	movs	r2, #4
 8001af6:	4013      	ands	r3, r2
 8001af8:	d100      	bne.n	8001afc <HAL_RCC_OscConfig+0x300>
 8001afa:	e0c7      	b.n	8001c8c <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001afc:	231f      	movs	r3, #31
 8001afe:	18fb      	adds	r3, r7, r3
 8001b00:	2200      	movs	r2, #0
 8001b02:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001b04:	4b09      	ldr	r3, [pc, #36]	; (8001b2c <HAL_RCC_OscConfig+0x330>)
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	2238      	movs	r2, #56	; 0x38
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	2b20      	cmp	r3, #32
 8001b0e:	d11f      	bne.n	8001b50 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001b10:	4b06      	ldr	r3, [pc, #24]	; (8001b2c <HAL_RCC_OscConfig+0x330>)
 8001b12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b14:	2202      	movs	r2, #2
 8001b16:	4013      	ands	r3, r2
 8001b18:	d100      	bne.n	8001b1c <HAL_RCC_OscConfig+0x320>
 8001b1a:	e0b7      	b.n	8001c8c <HAL_RCC_OscConfig+0x490>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d000      	beq.n	8001b26 <HAL_RCC_OscConfig+0x32a>
 8001b24:	e0b2      	b.n	8001c8c <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e1c2      	b.n	8001eb0 <HAL_RCC_OscConfig+0x6b4>
 8001b2a:	46c0      	nop			; (mov r8, r8)
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	fffeffff 	.word	0xfffeffff
 8001b34:	fffbffff 	.word	0xfffbffff
 8001b38:	ffff80ff 	.word	0xffff80ff
 8001b3c:	ffffc7ff 	.word	0xffffc7ff
 8001b40:	00f42400 	.word	0x00f42400
 8001b44:	20000008 	.word	0x20000008
 8001b48:	2000000c 	.word	0x2000000c
 8001b4c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001b50:	4bb5      	ldr	r3, [pc, #724]	; (8001e28 <HAL_RCC_OscConfig+0x62c>)
 8001b52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b54:	2380      	movs	r3, #128	; 0x80
 8001b56:	055b      	lsls	r3, r3, #21
 8001b58:	4013      	ands	r3, r2
 8001b5a:	d101      	bne.n	8001b60 <HAL_RCC_OscConfig+0x364>
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e000      	b.n	8001b62 <HAL_RCC_OscConfig+0x366>
 8001b60:	2300      	movs	r3, #0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d011      	beq.n	8001b8a <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001b66:	4bb0      	ldr	r3, [pc, #704]	; (8001e28 <HAL_RCC_OscConfig+0x62c>)
 8001b68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b6a:	4baf      	ldr	r3, [pc, #700]	; (8001e28 <HAL_RCC_OscConfig+0x62c>)
 8001b6c:	2180      	movs	r1, #128	; 0x80
 8001b6e:	0549      	lsls	r1, r1, #21
 8001b70:	430a      	orrs	r2, r1
 8001b72:	63da      	str	r2, [r3, #60]	; 0x3c
 8001b74:	4bac      	ldr	r3, [pc, #688]	; (8001e28 <HAL_RCC_OscConfig+0x62c>)
 8001b76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b78:	2380      	movs	r3, #128	; 0x80
 8001b7a:	055b      	lsls	r3, r3, #21
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	60fb      	str	r3, [r7, #12]
 8001b80:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001b82:	231f      	movs	r3, #31
 8001b84:	18fb      	adds	r3, r7, r3
 8001b86:	2201      	movs	r2, #1
 8001b88:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b8a:	4ba8      	ldr	r3, [pc, #672]	; (8001e2c <HAL_RCC_OscConfig+0x630>)
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	2380      	movs	r3, #128	; 0x80
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	4013      	ands	r3, r2
 8001b94:	d11a      	bne.n	8001bcc <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b96:	4ba5      	ldr	r3, [pc, #660]	; (8001e2c <HAL_RCC_OscConfig+0x630>)
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	4ba4      	ldr	r3, [pc, #656]	; (8001e2c <HAL_RCC_OscConfig+0x630>)
 8001b9c:	2180      	movs	r1, #128	; 0x80
 8001b9e:	0049      	lsls	r1, r1, #1
 8001ba0:	430a      	orrs	r2, r1
 8001ba2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001ba4:	f7ff fb1c 	bl	80011e0 <HAL_GetTick>
 8001ba8:	0003      	movs	r3, r0
 8001baa:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bac:	e008      	b.n	8001bc0 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bae:	f7ff fb17 	bl	80011e0 <HAL_GetTick>
 8001bb2:	0002      	movs	r2, r0
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d901      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e177      	b.n	8001eb0 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bc0:	4b9a      	ldr	r3, [pc, #616]	; (8001e2c <HAL_RCC_OscConfig+0x630>)
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	2380      	movs	r3, #128	; 0x80
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	4013      	ands	r3, r2
 8001bca:	d0f0      	beq.n	8001bae <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d106      	bne.n	8001be2 <HAL_RCC_OscConfig+0x3e6>
 8001bd4:	4b94      	ldr	r3, [pc, #592]	; (8001e28 <HAL_RCC_OscConfig+0x62c>)
 8001bd6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001bd8:	4b93      	ldr	r3, [pc, #588]	; (8001e28 <HAL_RCC_OscConfig+0x62c>)
 8001bda:	2101      	movs	r1, #1
 8001bdc:	430a      	orrs	r2, r1
 8001bde:	65da      	str	r2, [r3, #92]	; 0x5c
 8001be0:	e01c      	b.n	8001c1c <HAL_RCC_OscConfig+0x420>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	2b05      	cmp	r3, #5
 8001be8:	d10c      	bne.n	8001c04 <HAL_RCC_OscConfig+0x408>
 8001bea:	4b8f      	ldr	r3, [pc, #572]	; (8001e28 <HAL_RCC_OscConfig+0x62c>)
 8001bec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001bee:	4b8e      	ldr	r3, [pc, #568]	; (8001e28 <HAL_RCC_OscConfig+0x62c>)
 8001bf0:	2104      	movs	r1, #4
 8001bf2:	430a      	orrs	r2, r1
 8001bf4:	65da      	str	r2, [r3, #92]	; 0x5c
 8001bf6:	4b8c      	ldr	r3, [pc, #560]	; (8001e28 <HAL_RCC_OscConfig+0x62c>)
 8001bf8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001bfa:	4b8b      	ldr	r3, [pc, #556]	; (8001e28 <HAL_RCC_OscConfig+0x62c>)
 8001bfc:	2101      	movs	r1, #1
 8001bfe:	430a      	orrs	r2, r1
 8001c00:	65da      	str	r2, [r3, #92]	; 0x5c
 8001c02:	e00b      	b.n	8001c1c <HAL_RCC_OscConfig+0x420>
 8001c04:	4b88      	ldr	r3, [pc, #544]	; (8001e28 <HAL_RCC_OscConfig+0x62c>)
 8001c06:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c08:	4b87      	ldr	r3, [pc, #540]	; (8001e28 <HAL_RCC_OscConfig+0x62c>)
 8001c0a:	2101      	movs	r1, #1
 8001c0c:	438a      	bics	r2, r1
 8001c0e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001c10:	4b85      	ldr	r3, [pc, #532]	; (8001e28 <HAL_RCC_OscConfig+0x62c>)
 8001c12:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c14:	4b84      	ldr	r3, [pc, #528]	; (8001e28 <HAL_RCC_OscConfig+0x62c>)
 8001c16:	2104      	movs	r1, #4
 8001c18:	438a      	bics	r2, r1
 8001c1a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d014      	beq.n	8001c4e <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c24:	f7ff fadc 	bl	80011e0 <HAL_GetTick>
 8001c28:	0003      	movs	r3, r0
 8001c2a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c2c:	e009      	b.n	8001c42 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c2e:	f7ff fad7 	bl	80011e0 <HAL_GetTick>
 8001c32:	0002      	movs	r2, r0
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	4a7d      	ldr	r2, [pc, #500]	; (8001e30 <HAL_RCC_OscConfig+0x634>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e136      	b.n	8001eb0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c42:	4b79      	ldr	r3, [pc, #484]	; (8001e28 <HAL_RCC_OscConfig+0x62c>)
 8001c44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c46:	2202      	movs	r2, #2
 8001c48:	4013      	ands	r3, r2
 8001c4a:	d0f0      	beq.n	8001c2e <HAL_RCC_OscConfig+0x432>
 8001c4c:	e013      	b.n	8001c76 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c4e:	f7ff fac7 	bl	80011e0 <HAL_GetTick>
 8001c52:	0003      	movs	r3, r0
 8001c54:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c56:	e009      	b.n	8001c6c <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c58:	f7ff fac2 	bl	80011e0 <HAL_GetTick>
 8001c5c:	0002      	movs	r2, r0
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	4a73      	ldr	r2, [pc, #460]	; (8001e30 <HAL_RCC_OscConfig+0x634>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d901      	bls.n	8001c6c <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	e121      	b.n	8001eb0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c6c:	4b6e      	ldr	r3, [pc, #440]	; (8001e28 <HAL_RCC_OscConfig+0x62c>)
 8001c6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c70:	2202      	movs	r2, #2
 8001c72:	4013      	ands	r3, r2
 8001c74:	d1f0      	bne.n	8001c58 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001c76:	231f      	movs	r3, #31
 8001c78:	18fb      	adds	r3, r7, r3
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d105      	bne.n	8001c8c <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001c80:	4b69      	ldr	r3, [pc, #420]	; (8001e28 <HAL_RCC_OscConfig+0x62c>)
 8001c82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c84:	4b68      	ldr	r3, [pc, #416]	; (8001e28 <HAL_RCC_OscConfig+0x62c>)
 8001c86:	496b      	ldr	r1, [pc, #428]	; (8001e34 <HAL_RCC_OscConfig+0x638>)
 8001c88:	400a      	ands	r2, r1
 8001c8a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2220      	movs	r2, #32
 8001c92:	4013      	ands	r3, r2
 8001c94:	d039      	beq.n	8001d0a <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	69db      	ldr	r3, [r3, #28]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d01b      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c9e:	4b62      	ldr	r3, [pc, #392]	; (8001e28 <HAL_RCC_OscConfig+0x62c>)
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	4b61      	ldr	r3, [pc, #388]	; (8001e28 <HAL_RCC_OscConfig+0x62c>)
 8001ca4:	2180      	movs	r1, #128	; 0x80
 8001ca6:	03c9      	lsls	r1, r1, #15
 8001ca8:	430a      	orrs	r2, r1
 8001caa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cac:	f7ff fa98 	bl	80011e0 <HAL_GetTick>
 8001cb0:	0003      	movs	r3, r0
 8001cb2:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001cb4:	e008      	b.n	8001cc8 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001cb6:	f7ff fa93 	bl	80011e0 <HAL_GetTick>
 8001cba:	0002      	movs	r2, r0
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d901      	bls.n	8001cc8 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e0f3      	b.n	8001eb0 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001cc8:	4b57      	ldr	r3, [pc, #348]	; (8001e28 <HAL_RCC_OscConfig+0x62c>)
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	2380      	movs	r3, #128	; 0x80
 8001cce:	041b      	lsls	r3, r3, #16
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	d0f0      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x4ba>
 8001cd4:	e019      	b.n	8001d0a <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001cd6:	4b54      	ldr	r3, [pc, #336]	; (8001e28 <HAL_RCC_OscConfig+0x62c>)
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	4b53      	ldr	r3, [pc, #332]	; (8001e28 <HAL_RCC_OscConfig+0x62c>)
 8001cdc:	4956      	ldr	r1, [pc, #344]	; (8001e38 <HAL_RCC_OscConfig+0x63c>)
 8001cde:	400a      	ands	r2, r1
 8001ce0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ce2:	f7ff fa7d 	bl	80011e0 <HAL_GetTick>
 8001ce6:	0003      	movs	r3, r0
 8001ce8:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001cec:	f7ff fa78 	bl	80011e0 <HAL_GetTick>
 8001cf0:	0002      	movs	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e0d8      	b.n	8001eb0 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001cfe:	4b4a      	ldr	r3, [pc, #296]	; (8001e28 <HAL_RCC_OscConfig+0x62c>)
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	2380      	movs	r3, #128	; 0x80
 8001d04:	041b      	lsls	r3, r3, #16
 8001d06:	4013      	ands	r3, r2
 8001d08:	d1f0      	bne.n	8001cec <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6a1b      	ldr	r3, [r3, #32]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d100      	bne.n	8001d14 <HAL_RCC_OscConfig+0x518>
 8001d12:	e0cc      	b.n	8001eae <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d14:	4b44      	ldr	r3, [pc, #272]	; (8001e28 <HAL_RCC_OscConfig+0x62c>)
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	2238      	movs	r2, #56	; 0x38
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	2b10      	cmp	r3, #16
 8001d1e:	d100      	bne.n	8001d22 <HAL_RCC_OscConfig+0x526>
 8001d20:	e07b      	b.n	8001e1a <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6a1b      	ldr	r3, [r3, #32]
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d156      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d2a:	4b3f      	ldr	r3, [pc, #252]	; (8001e28 <HAL_RCC_OscConfig+0x62c>)
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	4b3e      	ldr	r3, [pc, #248]	; (8001e28 <HAL_RCC_OscConfig+0x62c>)
 8001d30:	4942      	ldr	r1, [pc, #264]	; (8001e3c <HAL_RCC_OscConfig+0x640>)
 8001d32:	400a      	ands	r2, r1
 8001d34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d36:	f7ff fa53 	bl	80011e0 <HAL_GetTick>
 8001d3a:	0003      	movs	r3, r0
 8001d3c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d3e:	e008      	b.n	8001d52 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d40:	f7ff fa4e 	bl	80011e0 <HAL_GetTick>
 8001d44:	0002      	movs	r2, r0
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e0ae      	b.n	8001eb0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d52:	4b35      	ldr	r3, [pc, #212]	; (8001e28 <HAL_RCC_OscConfig+0x62c>)
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	2380      	movs	r3, #128	; 0x80
 8001d58:	049b      	lsls	r3, r3, #18
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	d1f0      	bne.n	8001d40 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d5e:	4b32      	ldr	r3, [pc, #200]	; (8001e28 <HAL_RCC_OscConfig+0x62c>)
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	4a37      	ldr	r2, [pc, #220]	; (8001e40 <HAL_RCC_OscConfig+0x644>)
 8001d64:	4013      	ands	r3, r2
 8001d66:	0019      	movs	r1, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d70:	431a      	orrs	r2, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d76:	021b      	lsls	r3, r3, #8
 8001d78:	431a      	orrs	r2, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7e:	431a      	orrs	r2, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d84:	431a      	orrs	r2, r3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d8a:	431a      	orrs	r2, r3
 8001d8c:	4b26      	ldr	r3, [pc, #152]	; (8001e28 <HAL_RCC_OscConfig+0x62c>)
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d92:	4b25      	ldr	r3, [pc, #148]	; (8001e28 <HAL_RCC_OscConfig+0x62c>)
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	4b24      	ldr	r3, [pc, #144]	; (8001e28 <HAL_RCC_OscConfig+0x62c>)
 8001d98:	2180      	movs	r1, #128	; 0x80
 8001d9a:	0449      	lsls	r1, r1, #17
 8001d9c:	430a      	orrs	r2, r1
 8001d9e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001da0:	4b21      	ldr	r3, [pc, #132]	; (8001e28 <HAL_RCC_OscConfig+0x62c>)
 8001da2:	68da      	ldr	r2, [r3, #12]
 8001da4:	4b20      	ldr	r3, [pc, #128]	; (8001e28 <HAL_RCC_OscConfig+0x62c>)
 8001da6:	2180      	movs	r1, #128	; 0x80
 8001da8:	0549      	lsls	r1, r1, #21
 8001daa:	430a      	orrs	r2, r1
 8001dac:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dae:	f7ff fa17 	bl	80011e0 <HAL_GetTick>
 8001db2:	0003      	movs	r3, r0
 8001db4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001db6:	e008      	b.n	8001dca <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001db8:	f7ff fa12 	bl	80011e0 <HAL_GetTick>
 8001dbc:	0002      	movs	r2, r0
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e072      	b.n	8001eb0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dca:	4b17      	ldr	r3, [pc, #92]	; (8001e28 <HAL_RCC_OscConfig+0x62c>)
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	2380      	movs	r3, #128	; 0x80
 8001dd0:	049b      	lsls	r3, r3, #18
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	d0f0      	beq.n	8001db8 <HAL_RCC_OscConfig+0x5bc>
 8001dd6:	e06a      	b.n	8001eae <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dd8:	4b13      	ldr	r3, [pc, #76]	; (8001e28 <HAL_RCC_OscConfig+0x62c>)
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	4b12      	ldr	r3, [pc, #72]	; (8001e28 <HAL_RCC_OscConfig+0x62c>)
 8001dde:	4917      	ldr	r1, [pc, #92]	; (8001e3c <HAL_RCC_OscConfig+0x640>)
 8001de0:	400a      	ands	r2, r1
 8001de2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de4:	f7ff f9fc 	bl	80011e0 <HAL_GetTick>
 8001de8:	0003      	movs	r3, r0
 8001dea:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dec:	e008      	b.n	8001e00 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dee:	f7ff f9f7 	bl	80011e0 <HAL_GetTick>
 8001df2:	0002      	movs	r2, r0
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d901      	bls.n	8001e00 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	e057      	b.n	8001eb0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e00:	4b09      	ldr	r3, [pc, #36]	; (8001e28 <HAL_RCC_OscConfig+0x62c>)
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	2380      	movs	r3, #128	; 0x80
 8001e06:	049b      	lsls	r3, r3, #18
 8001e08:	4013      	ands	r3, r2
 8001e0a:	d1f0      	bne.n	8001dee <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001e0c:	4b06      	ldr	r3, [pc, #24]	; (8001e28 <HAL_RCC_OscConfig+0x62c>)
 8001e0e:	68da      	ldr	r2, [r3, #12]
 8001e10:	4b05      	ldr	r3, [pc, #20]	; (8001e28 <HAL_RCC_OscConfig+0x62c>)
 8001e12:	490c      	ldr	r1, [pc, #48]	; (8001e44 <HAL_RCC_OscConfig+0x648>)
 8001e14:	400a      	ands	r2, r1
 8001e16:	60da      	str	r2, [r3, #12]
 8001e18:	e049      	b.n	8001eae <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6a1b      	ldr	r3, [r3, #32]
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d112      	bne.n	8001e48 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e044      	b.n	8001eb0 <HAL_RCC_OscConfig+0x6b4>
 8001e26:	46c0      	nop			; (mov r8, r8)
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	40007000 	.word	0x40007000
 8001e30:	00001388 	.word	0x00001388
 8001e34:	efffffff 	.word	0xefffffff
 8001e38:	ffbfffff 	.word	0xffbfffff
 8001e3c:	feffffff 	.word	0xfeffffff
 8001e40:	11c1808c 	.word	0x11c1808c
 8001e44:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001e48:	4b1b      	ldr	r3, [pc, #108]	; (8001eb8 <HAL_RCC_OscConfig+0x6bc>)
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	2203      	movs	r2, #3
 8001e52:	401a      	ands	r2, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d126      	bne.n	8001eaa <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	2270      	movs	r2, #112	; 0x70
 8001e60:	401a      	ands	r2, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d11f      	bne.n	8001eaa <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e6a:	697a      	ldr	r2, [r7, #20]
 8001e6c:	23fe      	movs	r3, #254	; 0xfe
 8001e6e:	01db      	lsls	r3, r3, #7
 8001e70:	401a      	ands	r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e76:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d116      	bne.n	8001eaa <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001e7c:	697a      	ldr	r2, [r7, #20]
 8001e7e:	23f8      	movs	r3, #248	; 0xf8
 8001e80:	039b      	lsls	r3, r3, #14
 8001e82:	401a      	ands	r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d10e      	bne.n	8001eaa <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001e8c:	697a      	ldr	r2, [r7, #20]
 8001e8e:	23e0      	movs	r3, #224	; 0xe0
 8001e90:	051b      	lsls	r3, r3, #20
 8001e92:	401a      	ands	r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d106      	bne.n	8001eaa <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	0f5b      	lsrs	r3, r3, #29
 8001ea0:	075a      	lsls	r2, r3, #29
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d001      	beq.n	8001eae <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e000      	b.n	8001eb0 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8001eae:	2300      	movs	r3, #0
}
 8001eb0:	0018      	movs	r0, r3
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	b008      	add	sp, #32
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	40021000 	.word	0x40021000

08001ebc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d101      	bne.n	8001ed0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e0e9      	b.n	80020a4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ed0:	4b76      	ldr	r3, [pc, #472]	; (80020ac <HAL_RCC_ClockConfig+0x1f0>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2207      	movs	r2, #7
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	683a      	ldr	r2, [r7, #0]
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d91e      	bls.n	8001f1c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ede:	4b73      	ldr	r3, [pc, #460]	; (80020ac <HAL_RCC_ClockConfig+0x1f0>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2207      	movs	r2, #7
 8001ee4:	4393      	bics	r3, r2
 8001ee6:	0019      	movs	r1, r3
 8001ee8:	4b70      	ldr	r3, [pc, #448]	; (80020ac <HAL_RCC_ClockConfig+0x1f0>)
 8001eea:	683a      	ldr	r2, [r7, #0]
 8001eec:	430a      	orrs	r2, r1
 8001eee:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ef0:	f7ff f976 	bl	80011e0 <HAL_GetTick>
 8001ef4:	0003      	movs	r3, r0
 8001ef6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ef8:	e009      	b.n	8001f0e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001efa:	f7ff f971 	bl	80011e0 <HAL_GetTick>
 8001efe:	0002      	movs	r2, r0
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	4a6a      	ldr	r2, [pc, #424]	; (80020b0 <HAL_RCC_ClockConfig+0x1f4>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d901      	bls.n	8001f0e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e0ca      	b.n	80020a4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f0e:	4b67      	ldr	r3, [pc, #412]	; (80020ac <HAL_RCC_ClockConfig+0x1f0>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	2207      	movs	r2, #7
 8001f14:	4013      	ands	r3, r2
 8001f16:	683a      	ldr	r2, [r7, #0]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d1ee      	bne.n	8001efa <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2202      	movs	r2, #2
 8001f22:	4013      	ands	r3, r2
 8001f24:	d015      	beq.n	8001f52 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	2204      	movs	r2, #4
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	d006      	beq.n	8001f3e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001f30:	4b60      	ldr	r3, [pc, #384]	; (80020b4 <HAL_RCC_ClockConfig+0x1f8>)
 8001f32:	689a      	ldr	r2, [r3, #8]
 8001f34:	4b5f      	ldr	r3, [pc, #380]	; (80020b4 <HAL_RCC_ClockConfig+0x1f8>)
 8001f36:	21e0      	movs	r1, #224	; 0xe0
 8001f38:	01c9      	lsls	r1, r1, #7
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f3e:	4b5d      	ldr	r3, [pc, #372]	; (80020b4 <HAL_RCC_ClockConfig+0x1f8>)
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	4a5d      	ldr	r2, [pc, #372]	; (80020b8 <HAL_RCC_ClockConfig+0x1fc>)
 8001f44:	4013      	ands	r3, r2
 8001f46:	0019      	movs	r1, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	689a      	ldr	r2, [r3, #8]
 8001f4c:	4b59      	ldr	r3, [pc, #356]	; (80020b4 <HAL_RCC_ClockConfig+0x1f8>)
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2201      	movs	r2, #1
 8001f58:	4013      	ands	r3, r2
 8001f5a:	d057      	beq.n	800200c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d107      	bne.n	8001f74 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f64:	4b53      	ldr	r3, [pc, #332]	; (80020b4 <HAL_RCC_ClockConfig+0x1f8>)
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	2380      	movs	r3, #128	; 0x80
 8001f6a:	029b      	lsls	r3, r3, #10
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	d12b      	bne.n	8001fc8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e097      	b.n	80020a4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d107      	bne.n	8001f8c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f7c:	4b4d      	ldr	r3, [pc, #308]	; (80020b4 <HAL_RCC_ClockConfig+0x1f8>)
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	2380      	movs	r3, #128	; 0x80
 8001f82:	049b      	lsls	r3, r3, #18
 8001f84:	4013      	ands	r3, r2
 8001f86:	d11f      	bne.n	8001fc8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e08b      	b.n	80020a4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d107      	bne.n	8001fa4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f94:	4b47      	ldr	r3, [pc, #284]	; (80020b4 <HAL_RCC_ClockConfig+0x1f8>)
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	2380      	movs	r3, #128	; 0x80
 8001f9a:	00db      	lsls	r3, r3, #3
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	d113      	bne.n	8001fc8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e07f      	b.n	80020a4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	2b03      	cmp	r3, #3
 8001faa:	d106      	bne.n	8001fba <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fac:	4b41      	ldr	r3, [pc, #260]	; (80020b4 <HAL_RCC_ClockConfig+0x1f8>)
 8001fae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fb0:	2202      	movs	r2, #2
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	d108      	bne.n	8001fc8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e074      	b.n	80020a4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fba:	4b3e      	ldr	r3, [pc, #248]	; (80020b4 <HAL_RCC_ClockConfig+0x1f8>)
 8001fbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fbe:	2202      	movs	r2, #2
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	d101      	bne.n	8001fc8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e06d      	b.n	80020a4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001fc8:	4b3a      	ldr	r3, [pc, #232]	; (80020b4 <HAL_RCC_ClockConfig+0x1f8>)
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	2207      	movs	r2, #7
 8001fce:	4393      	bics	r3, r2
 8001fd0:	0019      	movs	r1, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685a      	ldr	r2, [r3, #4]
 8001fd6:	4b37      	ldr	r3, [pc, #220]	; (80020b4 <HAL_RCC_ClockConfig+0x1f8>)
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fdc:	f7ff f900 	bl	80011e0 <HAL_GetTick>
 8001fe0:	0003      	movs	r3, r0
 8001fe2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fe4:	e009      	b.n	8001ffa <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fe6:	f7ff f8fb 	bl	80011e0 <HAL_GetTick>
 8001fea:	0002      	movs	r2, r0
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	4a2f      	ldr	r2, [pc, #188]	; (80020b0 <HAL_RCC_ClockConfig+0x1f4>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e054      	b.n	80020a4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ffa:	4b2e      	ldr	r3, [pc, #184]	; (80020b4 <HAL_RCC_ClockConfig+0x1f8>)
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	2238      	movs	r2, #56	; 0x38
 8002000:	401a      	ands	r2, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	00db      	lsls	r3, r3, #3
 8002008:	429a      	cmp	r2, r3
 800200a:	d1ec      	bne.n	8001fe6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800200c:	4b27      	ldr	r3, [pc, #156]	; (80020ac <HAL_RCC_ClockConfig+0x1f0>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2207      	movs	r2, #7
 8002012:	4013      	ands	r3, r2
 8002014:	683a      	ldr	r2, [r7, #0]
 8002016:	429a      	cmp	r2, r3
 8002018:	d21e      	bcs.n	8002058 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800201a:	4b24      	ldr	r3, [pc, #144]	; (80020ac <HAL_RCC_ClockConfig+0x1f0>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2207      	movs	r2, #7
 8002020:	4393      	bics	r3, r2
 8002022:	0019      	movs	r1, r3
 8002024:	4b21      	ldr	r3, [pc, #132]	; (80020ac <HAL_RCC_ClockConfig+0x1f0>)
 8002026:	683a      	ldr	r2, [r7, #0]
 8002028:	430a      	orrs	r2, r1
 800202a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800202c:	f7ff f8d8 	bl	80011e0 <HAL_GetTick>
 8002030:	0003      	movs	r3, r0
 8002032:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002034:	e009      	b.n	800204a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002036:	f7ff f8d3 	bl	80011e0 <HAL_GetTick>
 800203a:	0002      	movs	r2, r0
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	4a1b      	ldr	r2, [pc, #108]	; (80020b0 <HAL_RCC_ClockConfig+0x1f4>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d901      	bls.n	800204a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e02c      	b.n	80020a4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800204a:	4b18      	ldr	r3, [pc, #96]	; (80020ac <HAL_RCC_ClockConfig+0x1f0>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2207      	movs	r2, #7
 8002050:	4013      	ands	r3, r2
 8002052:	683a      	ldr	r2, [r7, #0]
 8002054:	429a      	cmp	r2, r3
 8002056:	d1ee      	bne.n	8002036 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2204      	movs	r2, #4
 800205e:	4013      	ands	r3, r2
 8002060:	d009      	beq.n	8002076 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002062:	4b14      	ldr	r3, [pc, #80]	; (80020b4 <HAL_RCC_ClockConfig+0x1f8>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	4a15      	ldr	r2, [pc, #84]	; (80020bc <HAL_RCC_ClockConfig+0x200>)
 8002068:	4013      	ands	r3, r2
 800206a:	0019      	movs	r1, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	68da      	ldr	r2, [r3, #12]
 8002070:	4b10      	ldr	r3, [pc, #64]	; (80020b4 <HAL_RCC_ClockConfig+0x1f8>)
 8002072:	430a      	orrs	r2, r1
 8002074:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002076:	f000 f829 	bl	80020cc <HAL_RCC_GetSysClockFreq>
 800207a:	0001      	movs	r1, r0
 800207c:	4b0d      	ldr	r3, [pc, #52]	; (80020b4 <HAL_RCC_ClockConfig+0x1f8>)
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	0a1b      	lsrs	r3, r3, #8
 8002082:	220f      	movs	r2, #15
 8002084:	401a      	ands	r2, r3
 8002086:	4b0e      	ldr	r3, [pc, #56]	; (80020c0 <HAL_RCC_ClockConfig+0x204>)
 8002088:	0092      	lsls	r2, r2, #2
 800208a:	58d3      	ldr	r3, [r2, r3]
 800208c:	221f      	movs	r2, #31
 800208e:	4013      	ands	r3, r2
 8002090:	000a      	movs	r2, r1
 8002092:	40da      	lsrs	r2, r3
 8002094:	4b0b      	ldr	r3, [pc, #44]	; (80020c4 <HAL_RCC_ClockConfig+0x208>)
 8002096:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002098:	4b0b      	ldr	r3, [pc, #44]	; (80020c8 <HAL_RCC_ClockConfig+0x20c>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	0018      	movs	r0, r3
 800209e:	f7ff f843 	bl	8001128 <HAL_InitTick>
 80020a2:	0003      	movs	r3, r0
}
 80020a4:	0018      	movs	r0, r3
 80020a6:	46bd      	mov	sp, r7
 80020a8:	b004      	add	sp, #16
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	40022000 	.word	0x40022000
 80020b0:	00001388 	.word	0x00001388
 80020b4:	40021000 	.word	0x40021000
 80020b8:	fffff0ff 	.word	0xfffff0ff
 80020bc:	ffff8fff 	.word	0xffff8fff
 80020c0:	08007984 	.word	0x08007984
 80020c4:	20000008 	.word	0x20000008
 80020c8:	2000000c 	.word	0x2000000c

080020cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b086      	sub	sp, #24
 80020d0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020d2:	4b3c      	ldr	r3, [pc, #240]	; (80021c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	2238      	movs	r2, #56	; 0x38
 80020d8:	4013      	ands	r3, r2
 80020da:	d10f      	bne.n	80020fc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80020dc:	4b39      	ldr	r3, [pc, #228]	; (80021c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	0adb      	lsrs	r3, r3, #11
 80020e2:	2207      	movs	r2, #7
 80020e4:	4013      	ands	r3, r2
 80020e6:	2201      	movs	r2, #1
 80020e8:	409a      	lsls	r2, r3
 80020ea:	0013      	movs	r3, r2
 80020ec:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80020ee:	6839      	ldr	r1, [r7, #0]
 80020f0:	4835      	ldr	r0, [pc, #212]	; (80021c8 <HAL_RCC_GetSysClockFreq+0xfc>)
 80020f2:	f7fe f819 	bl	8000128 <__udivsi3>
 80020f6:	0003      	movs	r3, r0
 80020f8:	613b      	str	r3, [r7, #16]
 80020fa:	e05d      	b.n	80021b8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020fc:	4b31      	ldr	r3, [pc, #196]	; (80021c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	2238      	movs	r2, #56	; 0x38
 8002102:	4013      	ands	r3, r2
 8002104:	2b08      	cmp	r3, #8
 8002106:	d102      	bne.n	800210e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002108:	4b30      	ldr	r3, [pc, #192]	; (80021cc <HAL_RCC_GetSysClockFreq+0x100>)
 800210a:	613b      	str	r3, [r7, #16]
 800210c:	e054      	b.n	80021b8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800210e:	4b2d      	ldr	r3, [pc, #180]	; (80021c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	2238      	movs	r2, #56	; 0x38
 8002114:	4013      	ands	r3, r2
 8002116:	2b10      	cmp	r3, #16
 8002118:	d138      	bne.n	800218c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800211a:	4b2a      	ldr	r3, [pc, #168]	; (80021c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	2203      	movs	r2, #3
 8002120:	4013      	ands	r3, r2
 8002122:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002124:	4b27      	ldr	r3, [pc, #156]	; (80021c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	091b      	lsrs	r3, r3, #4
 800212a:	2207      	movs	r2, #7
 800212c:	4013      	ands	r3, r2
 800212e:	3301      	adds	r3, #1
 8002130:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2b03      	cmp	r3, #3
 8002136:	d10d      	bne.n	8002154 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002138:	68b9      	ldr	r1, [r7, #8]
 800213a:	4824      	ldr	r0, [pc, #144]	; (80021cc <HAL_RCC_GetSysClockFreq+0x100>)
 800213c:	f7fd fff4 	bl	8000128 <__udivsi3>
 8002140:	0003      	movs	r3, r0
 8002142:	0019      	movs	r1, r3
 8002144:	4b1f      	ldr	r3, [pc, #124]	; (80021c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	0a1b      	lsrs	r3, r3, #8
 800214a:	227f      	movs	r2, #127	; 0x7f
 800214c:	4013      	ands	r3, r2
 800214e:	434b      	muls	r3, r1
 8002150:	617b      	str	r3, [r7, #20]
        break;
 8002152:	e00d      	b.n	8002170 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002154:	68b9      	ldr	r1, [r7, #8]
 8002156:	481c      	ldr	r0, [pc, #112]	; (80021c8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002158:	f7fd ffe6 	bl	8000128 <__udivsi3>
 800215c:	0003      	movs	r3, r0
 800215e:	0019      	movs	r1, r3
 8002160:	4b18      	ldr	r3, [pc, #96]	; (80021c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	0a1b      	lsrs	r3, r3, #8
 8002166:	227f      	movs	r2, #127	; 0x7f
 8002168:	4013      	ands	r3, r2
 800216a:	434b      	muls	r3, r1
 800216c:	617b      	str	r3, [r7, #20]
        break;
 800216e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002170:	4b14      	ldr	r3, [pc, #80]	; (80021c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	0f5b      	lsrs	r3, r3, #29
 8002176:	2207      	movs	r2, #7
 8002178:	4013      	ands	r3, r2
 800217a:	3301      	adds	r3, #1
 800217c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800217e:	6879      	ldr	r1, [r7, #4]
 8002180:	6978      	ldr	r0, [r7, #20]
 8002182:	f7fd ffd1 	bl	8000128 <__udivsi3>
 8002186:	0003      	movs	r3, r0
 8002188:	613b      	str	r3, [r7, #16]
 800218a:	e015      	b.n	80021b8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800218c:	4b0d      	ldr	r3, [pc, #52]	; (80021c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	2238      	movs	r2, #56	; 0x38
 8002192:	4013      	ands	r3, r2
 8002194:	2b20      	cmp	r3, #32
 8002196:	d103      	bne.n	80021a0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002198:	2380      	movs	r3, #128	; 0x80
 800219a:	021b      	lsls	r3, r3, #8
 800219c:	613b      	str	r3, [r7, #16]
 800219e:	e00b      	b.n	80021b8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80021a0:	4b08      	ldr	r3, [pc, #32]	; (80021c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	2238      	movs	r2, #56	; 0x38
 80021a6:	4013      	ands	r3, r2
 80021a8:	2b18      	cmp	r3, #24
 80021aa:	d103      	bne.n	80021b4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80021ac:	23fa      	movs	r3, #250	; 0xfa
 80021ae:	01db      	lsls	r3, r3, #7
 80021b0:	613b      	str	r3, [r7, #16]
 80021b2:	e001      	b.n	80021b8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80021b4:	2300      	movs	r3, #0
 80021b6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80021b8:	693b      	ldr	r3, [r7, #16]
}
 80021ba:	0018      	movs	r0, r3
 80021bc:	46bd      	mov	sp, r7
 80021be:	b006      	add	sp, #24
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	46c0      	nop			; (mov r8, r8)
 80021c4:	40021000 	.word	0x40021000
 80021c8:	00f42400 	.word	0x00f42400
 80021cc:	007a1200 	.word	0x007a1200

080021d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021d4:	4b02      	ldr	r3, [pc, #8]	; (80021e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80021d6:	681b      	ldr	r3, [r3, #0]
}
 80021d8:	0018      	movs	r0, r3
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	46c0      	nop			; (mov r8, r8)
 80021e0:	20000008 	.word	0x20000008

080021e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021e4:	b5b0      	push	{r4, r5, r7, lr}
 80021e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80021e8:	f7ff fff2 	bl	80021d0 <HAL_RCC_GetHCLKFreq>
 80021ec:	0004      	movs	r4, r0
 80021ee:	f7ff faf9 	bl	80017e4 <LL_RCC_GetAPB1Prescaler>
 80021f2:	0003      	movs	r3, r0
 80021f4:	0b1a      	lsrs	r2, r3, #12
 80021f6:	4b05      	ldr	r3, [pc, #20]	; (800220c <HAL_RCC_GetPCLK1Freq+0x28>)
 80021f8:	0092      	lsls	r2, r2, #2
 80021fa:	58d3      	ldr	r3, [r2, r3]
 80021fc:	221f      	movs	r2, #31
 80021fe:	4013      	ands	r3, r2
 8002200:	40dc      	lsrs	r4, r3
 8002202:	0023      	movs	r3, r4
}
 8002204:	0018      	movs	r0, r3
 8002206:	46bd      	mov	sp, r7
 8002208:	bdb0      	pop	{r4, r5, r7, pc}
 800220a:	46c0      	nop			; (mov r8, r8)
 800220c:	080079c4 	.word	0x080079c4

08002210 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b086      	sub	sp, #24
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002218:	2313      	movs	r3, #19
 800221a:	18fb      	adds	r3, r7, r3
 800221c:	2200      	movs	r2, #0
 800221e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002220:	2312      	movs	r3, #18
 8002222:	18fb      	adds	r3, r7, r3
 8002224:	2200      	movs	r2, #0
 8002226:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	2380      	movs	r3, #128	; 0x80
 800222e:	029b      	lsls	r3, r3, #10
 8002230:	4013      	ands	r3, r2
 8002232:	d100      	bne.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002234:	e0ad      	b.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002236:	2011      	movs	r0, #17
 8002238:	183b      	adds	r3, r7, r0
 800223a:	2200      	movs	r2, #0
 800223c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800223e:	4b47      	ldr	r3, [pc, #284]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002240:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002242:	2380      	movs	r3, #128	; 0x80
 8002244:	055b      	lsls	r3, r3, #21
 8002246:	4013      	ands	r3, r2
 8002248:	d110      	bne.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800224a:	4b44      	ldr	r3, [pc, #272]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800224c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800224e:	4b43      	ldr	r3, [pc, #268]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002250:	2180      	movs	r1, #128	; 0x80
 8002252:	0549      	lsls	r1, r1, #21
 8002254:	430a      	orrs	r2, r1
 8002256:	63da      	str	r2, [r3, #60]	; 0x3c
 8002258:	4b40      	ldr	r3, [pc, #256]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800225a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800225c:	2380      	movs	r3, #128	; 0x80
 800225e:	055b      	lsls	r3, r3, #21
 8002260:	4013      	ands	r3, r2
 8002262:	60bb      	str	r3, [r7, #8]
 8002264:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002266:	183b      	adds	r3, r7, r0
 8002268:	2201      	movs	r2, #1
 800226a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800226c:	4b3c      	ldr	r3, [pc, #240]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	4b3b      	ldr	r3, [pc, #236]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002272:	2180      	movs	r1, #128	; 0x80
 8002274:	0049      	lsls	r1, r1, #1
 8002276:	430a      	orrs	r2, r1
 8002278:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800227a:	f7fe ffb1 	bl	80011e0 <HAL_GetTick>
 800227e:	0003      	movs	r3, r0
 8002280:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002282:	e00b      	b.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002284:	f7fe ffac 	bl	80011e0 <HAL_GetTick>
 8002288:	0002      	movs	r2, r0
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b02      	cmp	r3, #2
 8002290:	d904      	bls.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002292:	2313      	movs	r3, #19
 8002294:	18fb      	adds	r3, r7, r3
 8002296:	2203      	movs	r2, #3
 8002298:	701a      	strb	r2, [r3, #0]
        break;
 800229a:	e005      	b.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800229c:	4b30      	ldr	r3, [pc, #192]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	2380      	movs	r3, #128	; 0x80
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	4013      	ands	r3, r2
 80022a6:	d0ed      	beq.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80022a8:	2313      	movs	r3, #19
 80022aa:	18fb      	adds	r3, r7, r3
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d15e      	bne.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80022b2:	4b2a      	ldr	r3, [pc, #168]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80022b4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80022b6:	23c0      	movs	r3, #192	; 0xc0
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	4013      	ands	r3, r2
 80022bc:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d019      	beq.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c8:	697a      	ldr	r2, [r7, #20]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d014      	beq.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80022ce:	4b23      	ldr	r3, [pc, #140]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80022d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022d2:	4a24      	ldr	r2, [pc, #144]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80022d4:	4013      	ands	r3, r2
 80022d6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80022d8:	4b20      	ldr	r3, [pc, #128]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80022da:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80022dc:	4b1f      	ldr	r3, [pc, #124]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80022de:	2180      	movs	r1, #128	; 0x80
 80022e0:	0249      	lsls	r1, r1, #9
 80022e2:	430a      	orrs	r2, r1
 80022e4:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80022e6:	4b1d      	ldr	r3, [pc, #116]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80022e8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80022ea:	4b1c      	ldr	r3, [pc, #112]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80022ec:	491e      	ldr	r1, [pc, #120]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 80022ee:	400a      	ands	r2, r1
 80022f0:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80022f2:	4b1a      	ldr	r3, [pc, #104]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80022f4:	697a      	ldr	r2, [r7, #20]
 80022f6:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	2201      	movs	r2, #1
 80022fc:	4013      	ands	r3, r2
 80022fe:	d016      	beq.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002300:	f7fe ff6e 	bl	80011e0 <HAL_GetTick>
 8002304:	0003      	movs	r3, r0
 8002306:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002308:	e00c      	b.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800230a:	f7fe ff69 	bl	80011e0 <HAL_GetTick>
 800230e:	0002      	movs	r2, r0
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	4a15      	ldr	r2, [pc, #84]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d904      	bls.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800231a:	2313      	movs	r3, #19
 800231c:	18fb      	adds	r3, r7, r3
 800231e:	2203      	movs	r2, #3
 8002320:	701a      	strb	r2, [r3, #0]
            break;
 8002322:	e004      	b.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002324:	4b0d      	ldr	r3, [pc, #52]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002326:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002328:	2202      	movs	r2, #2
 800232a:	4013      	ands	r3, r2
 800232c:	d0ed      	beq.n	800230a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800232e:	2313      	movs	r3, #19
 8002330:	18fb      	adds	r3, r7, r3
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d10a      	bne.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002338:	4b08      	ldr	r3, [pc, #32]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800233a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800233c:	4a09      	ldr	r2, [pc, #36]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800233e:	4013      	ands	r3, r2
 8002340:	0019      	movs	r1, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002346:	4b05      	ldr	r3, [pc, #20]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002348:	430a      	orrs	r2, r1
 800234a:	65da      	str	r2, [r3, #92]	; 0x5c
 800234c:	e016      	b.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800234e:	2312      	movs	r3, #18
 8002350:	18fb      	adds	r3, r7, r3
 8002352:	2213      	movs	r2, #19
 8002354:	18ba      	adds	r2, r7, r2
 8002356:	7812      	ldrb	r2, [r2, #0]
 8002358:	701a      	strb	r2, [r3, #0]
 800235a:	e00f      	b.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800235c:	40021000 	.word	0x40021000
 8002360:	40007000 	.word	0x40007000
 8002364:	fffffcff 	.word	0xfffffcff
 8002368:	fffeffff 	.word	0xfffeffff
 800236c:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002370:	2312      	movs	r3, #18
 8002372:	18fb      	adds	r3, r7, r3
 8002374:	2213      	movs	r2, #19
 8002376:	18ba      	adds	r2, r7, r2
 8002378:	7812      	ldrb	r2, [r2, #0]
 800237a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800237c:	2311      	movs	r3, #17
 800237e:	18fb      	adds	r3, r7, r3
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	2b01      	cmp	r3, #1
 8002384:	d105      	bne.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002386:	4bb6      	ldr	r3, [pc, #728]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002388:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800238a:	4bb5      	ldr	r3, [pc, #724]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800238c:	49b5      	ldr	r1, [pc, #724]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800238e:	400a      	ands	r2, r1
 8002390:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	2201      	movs	r2, #1
 8002398:	4013      	ands	r3, r2
 800239a:	d009      	beq.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800239c:	4bb0      	ldr	r3, [pc, #704]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800239e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023a0:	2203      	movs	r2, #3
 80023a2:	4393      	bics	r3, r2
 80023a4:	0019      	movs	r1, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685a      	ldr	r2, [r3, #4]
 80023aa:	4bad      	ldr	r3, [pc, #692]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023ac:	430a      	orrs	r2, r1
 80023ae:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2202      	movs	r2, #2
 80023b6:	4013      	ands	r3, r2
 80023b8:	d009      	beq.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023ba:	4ba9      	ldr	r3, [pc, #676]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023be:	220c      	movs	r2, #12
 80023c0:	4393      	bics	r3, r2
 80023c2:	0019      	movs	r1, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	689a      	ldr	r2, [r3, #8]
 80023c8:	4ba5      	ldr	r3, [pc, #660]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023ca:	430a      	orrs	r2, r1
 80023cc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2204      	movs	r2, #4
 80023d4:	4013      	ands	r3, r2
 80023d6:	d009      	beq.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80023d8:	4ba1      	ldr	r3, [pc, #644]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023dc:	2230      	movs	r2, #48	; 0x30
 80023de:	4393      	bics	r3, r2
 80023e0:	0019      	movs	r1, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	68da      	ldr	r2, [r3, #12]
 80023e6:	4b9e      	ldr	r3, [pc, #632]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023e8:	430a      	orrs	r2, r1
 80023ea:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2210      	movs	r2, #16
 80023f2:	4013      	ands	r3, r2
 80023f4:	d009      	beq.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80023f6:	4b9a      	ldr	r3, [pc, #616]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023fa:	4a9b      	ldr	r2, [pc, #620]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80023fc:	4013      	ands	r3, r2
 80023fe:	0019      	movs	r1, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	691a      	ldr	r2, [r3, #16]
 8002404:	4b96      	ldr	r3, [pc, #600]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002406:	430a      	orrs	r2, r1
 8002408:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	2380      	movs	r3, #128	; 0x80
 8002410:	015b      	lsls	r3, r3, #5
 8002412:	4013      	ands	r3, r2
 8002414:	d009      	beq.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8002416:	4b92      	ldr	r3, [pc, #584]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800241a:	4a94      	ldr	r2, [pc, #592]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800241c:	4013      	ands	r3, r2
 800241e:	0019      	movs	r1, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	695a      	ldr	r2, [r3, #20]
 8002424:	4b8e      	ldr	r3, [pc, #568]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002426:	430a      	orrs	r2, r1
 8002428:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	2380      	movs	r3, #128	; 0x80
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	4013      	ands	r3, r2
 8002434:	d009      	beq.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002436:	4b8a      	ldr	r3, [pc, #552]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800243a:	4a8d      	ldr	r2, [pc, #564]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 800243c:	4013      	ands	r3, r2
 800243e:	0019      	movs	r1, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002444:	4b86      	ldr	r3, [pc, #536]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002446:	430a      	orrs	r2, r1
 8002448:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	2380      	movs	r3, #128	; 0x80
 8002450:	00db      	lsls	r3, r3, #3
 8002452:	4013      	ands	r3, r2
 8002454:	d009      	beq.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002456:	4b82      	ldr	r3, [pc, #520]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800245a:	4a86      	ldr	r2, [pc, #536]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 800245c:	4013      	ands	r3, r2
 800245e:	0019      	movs	r1, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002464:	4b7e      	ldr	r3, [pc, #504]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002466:	430a      	orrs	r2, r1
 8002468:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2220      	movs	r2, #32
 8002470:	4013      	ands	r3, r2
 8002472:	d009      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002474:	4b7a      	ldr	r3, [pc, #488]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002478:	4a7f      	ldr	r2, [pc, #508]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800247a:	4013      	ands	r3, r2
 800247c:	0019      	movs	r1, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	699a      	ldr	r2, [r3, #24]
 8002482:	4b77      	ldr	r3, [pc, #476]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002484:	430a      	orrs	r2, r1
 8002486:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2240      	movs	r2, #64	; 0x40
 800248e:	4013      	ands	r3, r2
 8002490:	d009      	beq.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002492:	4b73      	ldr	r3, [pc, #460]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002496:	4a79      	ldr	r2, [pc, #484]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8002498:	4013      	ands	r3, r2
 800249a:	0019      	movs	r1, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	69da      	ldr	r2, [r3, #28]
 80024a0:	4b6f      	ldr	r3, [pc, #444]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80024a2:	430a      	orrs	r2, r1
 80024a4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	2380      	movs	r3, #128	; 0x80
 80024ac:	01db      	lsls	r3, r3, #7
 80024ae:	4013      	ands	r3, r2
 80024b0:	d015      	beq.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80024b2:	4b6b      	ldr	r3, [pc, #428]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80024b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	0899      	lsrs	r1, r3, #2
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024be:	4b68      	ldr	r3, [pc, #416]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80024c0:	430a      	orrs	r2, r1
 80024c2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024c8:	2380      	movs	r3, #128	; 0x80
 80024ca:	05db      	lsls	r3, r3, #23
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d106      	bne.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80024d0:	4b63      	ldr	r3, [pc, #396]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80024d2:	68da      	ldr	r2, [r3, #12]
 80024d4:	4b62      	ldr	r3, [pc, #392]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80024d6:	2180      	movs	r1, #128	; 0x80
 80024d8:	0249      	lsls	r1, r1, #9
 80024da:	430a      	orrs	r2, r1
 80024dc:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	2380      	movs	r3, #128	; 0x80
 80024e4:	031b      	lsls	r3, r3, #12
 80024e6:	4013      	ands	r3, r2
 80024e8:	d009      	beq.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80024ea:	4b5d      	ldr	r3, [pc, #372]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80024ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ee:	2240      	movs	r2, #64	; 0x40
 80024f0:	4393      	bics	r3, r2
 80024f2:	0019      	movs	r1, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024f8:	4b59      	ldr	r3, [pc, #356]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80024fa:	430a      	orrs	r2, r1
 80024fc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	2380      	movs	r3, #128	; 0x80
 8002504:	039b      	lsls	r3, r3, #14
 8002506:	4013      	ands	r3, r2
 8002508:	d016      	beq.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800250a:	4b55      	ldr	r3, [pc, #340]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800250c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800250e:	4a5c      	ldr	r2, [pc, #368]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002510:	4013      	ands	r3, r2
 8002512:	0019      	movs	r1, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002518:	4b51      	ldr	r3, [pc, #324]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800251a:	430a      	orrs	r2, r1
 800251c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002522:	2380      	movs	r3, #128	; 0x80
 8002524:	03db      	lsls	r3, r3, #15
 8002526:	429a      	cmp	r2, r3
 8002528:	d106      	bne.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800252a:	4b4d      	ldr	r3, [pc, #308]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800252c:	68da      	ldr	r2, [r3, #12]
 800252e:	4b4c      	ldr	r3, [pc, #304]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002530:	2180      	movs	r1, #128	; 0x80
 8002532:	0449      	lsls	r1, r1, #17
 8002534:	430a      	orrs	r2, r1
 8002536:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	2380      	movs	r3, #128	; 0x80
 800253e:	03db      	lsls	r3, r3, #15
 8002540:	4013      	ands	r3, r2
 8002542:	d016      	beq.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002544:	4b46      	ldr	r3, [pc, #280]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002548:	4a4e      	ldr	r2, [pc, #312]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800254a:	4013      	ands	r3, r2
 800254c:	0019      	movs	r1, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002552:	4b43      	ldr	r3, [pc, #268]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002554:	430a      	orrs	r2, r1
 8002556:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800255c:	2380      	movs	r3, #128	; 0x80
 800255e:	045b      	lsls	r3, r3, #17
 8002560:	429a      	cmp	r2, r3
 8002562:	d106      	bne.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002564:	4b3e      	ldr	r3, [pc, #248]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002566:	68da      	ldr	r2, [r3, #12]
 8002568:	4b3d      	ldr	r3, [pc, #244]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800256a:	2180      	movs	r1, #128	; 0x80
 800256c:	0449      	lsls	r1, r1, #17
 800256e:	430a      	orrs	r2, r1
 8002570:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	2380      	movs	r3, #128	; 0x80
 8002578:	011b      	lsls	r3, r3, #4
 800257a:	4013      	ands	r3, r2
 800257c:	d014      	beq.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800257e:	4b38      	ldr	r3, [pc, #224]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002582:	2203      	movs	r2, #3
 8002584:	4393      	bics	r3, r2
 8002586:	0019      	movs	r1, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6a1a      	ldr	r2, [r3, #32]
 800258c:	4b34      	ldr	r3, [pc, #208]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800258e:	430a      	orrs	r2, r1
 8002590:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6a1b      	ldr	r3, [r3, #32]
 8002596:	2b01      	cmp	r3, #1
 8002598:	d106      	bne.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800259a:	4b31      	ldr	r3, [pc, #196]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800259c:	68da      	ldr	r2, [r3, #12]
 800259e:	4b30      	ldr	r3, [pc, #192]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025a0:	2180      	movs	r1, #128	; 0x80
 80025a2:	0249      	lsls	r1, r1, #9
 80025a4:	430a      	orrs	r2, r1
 80025a6:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	2380      	movs	r3, #128	; 0x80
 80025ae:	019b      	lsls	r3, r3, #6
 80025b0:	4013      	ands	r3, r2
 80025b2:	d014      	beq.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80025b4:	4b2a      	ldr	r3, [pc, #168]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025b8:	220c      	movs	r2, #12
 80025ba:	4393      	bics	r3, r2
 80025bc:	0019      	movs	r1, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025c2:	4b27      	ldr	r3, [pc, #156]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025c4:	430a      	orrs	r2, r1
 80025c6:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025cc:	2b04      	cmp	r3, #4
 80025ce:	d106      	bne.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80025d0:	4b23      	ldr	r3, [pc, #140]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025d2:	68da      	ldr	r2, [r3, #12]
 80025d4:	4b22      	ldr	r3, [pc, #136]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025d6:	2180      	movs	r1, #128	; 0x80
 80025d8:	0249      	lsls	r1, r1, #9
 80025da:	430a      	orrs	r2, r1
 80025dc:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	2380      	movs	r3, #128	; 0x80
 80025e4:	045b      	lsls	r3, r3, #17
 80025e6:	4013      	ands	r3, r2
 80025e8:	d016      	beq.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80025ea:	4b1d      	ldr	r3, [pc, #116]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ee:	4a22      	ldr	r2, [pc, #136]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80025f0:	4013      	ands	r3, r2
 80025f2:	0019      	movs	r1, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80025f8:	4b19      	ldr	r3, [pc, #100]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025fa:	430a      	orrs	r2, r1
 80025fc:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002602:	2380      	movs	r3, #128	; 0x80
 8002604:	019b      	lsls	r3, r3, #6
 8002606:	429a      	cmp	r2, r3
 8002608:	d106      	bne.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800260a:	4b15      	ldr	r3, [pc, #84]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800260c:	68da      	ldr	r2, [r3, #12]
 800260e:	4b14      	ldr	r3, [pc, #80]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002610:	2180      	movs	r1, #128	; 0x80
 8002612:	0449      	lsls	r1, r1, #17
 8002614:	430a      	orrs	r2, r1
 8002616:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	2380      	movs	r3, #128	; 0x80
 800261e:	049b      	lsls	r3, r3, #18
 8002620:	4013      	ands	r3, r2
 8002622:	d016      	beq.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002624:	4b0e      	ldr	r3, [pc, #56]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002628:	4a10      	ldr	r2, [pc, #64]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800262a:	4013      	ands	r3, r2
 800262c:	0019      	movs	r1, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002632:	4b0b      	ldr	r3, [pc, #44]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002634:	430a      	orrs	r2, r1
 8002636:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800263c:	2380      	movs	r3, #128	; 0x80
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	429a      	cmp	r2, r3
 8002642:	d106      	bne.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002644:	4b06      	ldr	r3, [pc, #24]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002646:	68da      	ldr	r2, [r3, #12]
 8002648:	4b05      	ldr	r3, [pc, #20]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800264a:	2180      	movs	r1, #128	; 0x80
 800264c:	0449      	lsls	r1, r1, #17
 800264e:	430a      	orrs	r2, r1
 8002650:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002652:	2312      	movs	r3, #18
 8002654:	18fb      	adds	r3, r7, r3
 8002656:	781b      	ldrb	r3, [r3, #0]
}
 8002658:	0018      	movs	r0, r3
 800265a:	46bd      	mov	sp, r7
 800265c:	b006      	add	sp, #24
 800265e:	bd80      	pop	{r7, pc}
 8002660:	40021000 	.word	0x40021000
 8002664:	efffffff 	.word	0xefffffff
 8002668:	fffff3ff 	.word	0xfffff3ff
 800266c:	fffffcff 	.word	0xfffffcff
 8002670:	fff3ffff 	.word	0xfff3ffff
 8002674:	ffcfffff 	.word	0xffcfffff
 8002678:	ffffcfff 	.word	0xffffcfff
 800267c:	ffff3fff 	.word	0xffff3fff
 8002680:	ffbfffff 	.word	0xffbfffff
 8002684:	feffffff 	.word	0xfeffffff

08002688 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002688:	b5b0      	push	{r4, r5, r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002690:	230f      	movs	r3, #15
 8002692:	18fb      	adds	r3, r7, r3
 8002694:	2201      	movs	r2, #1
 8002696:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d100      	bne.n	80026a0 <HAL_RTC_Init+0x18>
 800269e:	e08c      	b.n	80027ba <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2229      	movs	r2, #41	; 0x29
 80026a4:	5c9b      	ldrb	r3, [r3, r2]
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d10b      	bne.n	80026c4 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2228      	movs	r2, #40	; 0x28
 80026b0:	2100      	movs	r1, #0
 80026b2:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2288      	movs	r2, #136	; 0x88
 80026b8:	0212      	lsls	r2, r2, #8
 80026ba:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	0018      	movs	r0, r3
 80026c0:	f7fe fb74 	bl	8000dac <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2229      	movs	r2, #41	; 0x29
 80026c8:	2102      	movs	r1, #2
 80026ca:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	2210      	movs	r2, #16
 80026d4:	4013      	ands	r3, r2
 80026d6:	2b10      	cmp	r3, #16
 80026d8:	d062      	beq.n	80027a0 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	22ca      	movs	r2, #202	; 0xca
 80026e0:	625a      	str	r2, [r3, #36]	; 0x24
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2253      	movs	r2, #83	; 0x53
 80026e8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80026ea:	250f      	movs	r5, #15
 80026ec:	197c      	adds	r4, r7, r5
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	0018      	movs	r0, r3
 80026f2:	f000 faf1 	bl	8002cd8 <RTC_EnterInitMode>
 80026f6:	0003      	movs	r3, r0
 80026f8:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 80026fa:	0028      	movs	r0, r5
 80026fc:	183b      	adds	r3, r7, r0
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d12c      	bne.n	800275e <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	699a      	ldr	r2, [r3, #24]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	492e      	ldr	r1, [pc, #184]	; (80027c8 <HAL_RTC_Init+0x140>)
 8002710:	400a      	ands	r2, r1
 8002712:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	6999      	ldr	r1, [r3, #24]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	689a      	ldr	r2, [r3, #8]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	431a      	orrs	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	69db      	ldr	r3, [r3, #28]
 8002728:	431a      	orrs	r2, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	430a      	orrs	r2, r1
 8002730:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	6912      	ldr	r2, [r2, #16]
 800273a:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	6919      	ldr	r1, [r3, #16]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	041a      	lsls	r2, r3, #16
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	430a      	orrs	r2, r1
 800274e:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8002750:	183c      	adds	r4, r7, r0
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	0018      	movs	r0, r3
 8002756:	f000 fb01 	bl	8002d5c <RTC_ExitInitMode>
 800275a:	0003      	movs	r3, r0
 800275c:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 800275e:	230f      	movs	r3, #15
 8002760:	18fb      	adds	r3, r7, r3
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d116      	bne.n	8002796 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	699a      	ldr	r2, [r3, #24]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	00d2      	lsls	r2, r2, #3
 8002774:	08d2      	lsrs	r2, r2, #3
 8002776:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	6999      	ldr	r1, [r3, #24]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6a1b      	ldr	r3, [r3, #32]
 8002786:	431a      	orrs	r2, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	431a      	orrs	r2, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	430a      	orrs	r2, r1
 8002794:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	22ff      	movs	r2, #255	; 0xff
 800279c:	625a      	str	r2, [r3, #36]	; 0x24
 800279e:	e003      	b.n	80027a8 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80027a0:	230f      	movs	r3, #15
 80027a2:	18fb      	adds	r3, r7, r3
 80027a4:	2200      	movs	r2, #0
 80027a6:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 80027a8:	230f      	movs	r3, #15
 80027aa:	18fb      	adds	r3, r7, r3
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d103      	bne.n	80027ba <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2229      	movs	r2, #41	; 0x29
 80027b6:	2101      	movs	r1, #1
 80027b8:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 80027ba:	230f      	movs	r3, #15
 80027bc:	18fb      	adds	r3, r7, r3
 80027be:	781b      	ldrb	r3, [r3, #0]
}
 80027c0:	0018      	movs	r0, r3
 80027c2:	46bd      	mov	sp, r7
 80027c4:	b004      	add	sp, #16
 80027c6:	bdb0      	pop	{r4, r5, r7, pc}
 80027c8:	fb8fffbf 	.word	0xfb8fffbf

080027cc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80027cc:	b5b0      	push	{r4, r5, r7, lr}
 80027ce:	b086      	sub	sp, #24
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2228      	movs	r2, #40	; 0x28
 80027dc:	5c9b      	ldrb	r3, [r3, r2]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d101      	bne.n	80027e6 <HAL_RTC_SetTime+0x1a>
 80027e2:	2302      	movs	r3, #2
 80027e4:	e092      	b.n	800290c <HAL_RTC_SetTime+0x140>
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2228      	movs	r2, #40	; 0x28
 80027ea:	2101      	movs	r1, #1
 80027ec:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2229      	movs	r2, #41	; 0x29
 80027f2:	2102      	movs	r1, #2
 80027f4:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	22ca      	movs	r2, #202	; 0xca
 80027fc:	625a      	str	r2, [r3, #36]	; 0x24
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2253      	movs	r2, #83	; 0x53
 8002804:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002806:	2513      	movs	r5, #19
 8002808:	197c      	adds	r4, r7, r5
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	0018      	movs	r0, r3
 800280e:	f000 fa63 	bl	8002cd8 <RTC_EnterInitMode>
 8002812:	0003      	movs	r3, r0
 8002814:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8002816:	197b      	adds	r3, r7, r5
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d162      	bne.n	80028e4 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d125      	bne.n	8002870 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	2240      	movs	r2, #64	; 0x40
 800282c:	4013      	ands	r3, r2
 800282e:	d102      	bne.n	8002836 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	2200      	movs	r2, #0
 8002834:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	0018      	movs	r0, r3
 800283c:	f000 fad2 	bl	8002de4 <RTC_ByteToBcd2>
 8002840:	0003      	movs	r3, r0
 8002842:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	785b      	ldrb	r3, [r3, #1]
 8002848:	0018      	movs	r0, r3
 800284a:	f000 facb 	bl	8002de4 <RTC_ByteToBcd2>
 800284e:	0003      	movs	r3, r0
 8002850:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002852:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	789b      	ldrb	r3, [r3, #2]
 8002858:	0018      	movs	r0, r3
 800285a:	f000 fac3 	bl	8002de4 <RTC_ByteToBcd2>
 800285e:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002860:	0022      	movs	r2, r4
 8002862:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	78db      	ldrb	r3, [r3, #3]
 8002868:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800286a:	4313      	orrs	r3, r2
 800286c:	617b      	str	r3, [r7, #20]
 800286e:	e017      	b.n	80028a0 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	2240      	movs	r2, #64	; 0x40
 8002878:	4013      	ands	r3, r2
 800287a:	d102      	bne.n	8002882 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	2200      	movs	r2, #0
 8002880:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	785b      	ldrb	r3, [r3, #1]
 800288c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800288e:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002890:	68ba      	ldr	r2, [r7, #8]
 8002892:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002894:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	78db      	ldrb	r3, [r3, #3]
 800289a:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800289c:	4313      	orrs	r3, r2
 800289e:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	697a      	ldr	r2, [r7, #20]
 80028a6:	491b      	ldr	r1, [pc, #108]	; (8002914 <HAL_RTC_SetTime+0x148>)
 80028a8:	400a      	ands	r2, r1
 80028aa:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	699a      	ldr	r2, [r3, #24]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4918      	ldr	r1, [pc, #96]	; (8002918 <HAL_RTC_SetTime+0x14c>)
 80028b8:	400a      	ands	r2, r1
 80028ba:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	6999      	ldr	r1, [r3, #24]
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	68da      	ldr	r2, [r3, #12]
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	431a      	orrs	r2, r3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	430a      	orrs	r2, r1
 80028d2:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80028d4:	2313      	movs	r3, #19
 80028d6:	18fc      	adds	r4, r7, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	0018      	movs	r0, r3
 80028dc:	f000 fa3e 	bl	8002d5c <RTC_ExitInitMode>
 80028e0:	0003      	movs	r3, r0
 80028e2:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	22ff      	movs	r2, #255	; 0xff
 80028ea:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 80028ec:	2313      	movs	r3, #19
 80028ee:	18fb      	adds	r3, r7, r3
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d103      	bne.n	80028fe <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2229      	movs	r2, #41	; 0x29
 80028fa:	2101      	movs	r1, #1
 80028fc:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2228      	movs	r2, #40	; 0x28
 8002902:	2100      	movs	r1, #0
 8002904:	5499      	strb	r1, [r3, r2]

  return status;
 8002906:	2313      	movs	r3, #19
 8002908:	18fb      	adds	r3, r7, r3
 800290a:	781b      	ldrb	r3, [r3, #0]
}
 800290c:	0018      	movs	r0, r3
 800290e:	46bd      	mov	sp, r7
 8002910:	b006      	add	sp, #24
 8002912:	bdb0      	pop	{r4, r5, r7, pc}
 8002914:	007f7f7f 	.word	0x007f7f7f
 8002918:	fffbffff 	.word	0xfffbffff

0800291c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800291c:	b5b0      	push	{r4, r5, r7, lr}
 800291e:	b086      	sub	sp, #24
 8002920:	af00      	add	r7, sp, #0
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	60b9      	str	r1, [r7, #8]
 8002926:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2228      	movs	r2, #40	; 0x28
 800292c:	5c9b      	ldrb	r3, [r3, r2]
 800292e:	2b01      	cmp	r3, #1
 8002930:	d101      	bne.n	8002936 <HAL_RTC_SetDate+0x1a>
 8002932:	2302      	movs	r3, #2
 8002934:	e07e      	b.n	8002a34 <HAL_RTC_SetDate+0x118>
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2228      	movs	r2, #40	; 0x28
 800293a:	2101      	movs	r1, #1
 800293c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2229      	movs	r2, #41	; 0x29
 8002942:	2102      	movs	r1, #2
 8002944:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d10e      	bne.n	800296a <HAL_RTC_SetDate+0x4e>
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	785b      	ldrb	r3, [r3, #1]
 8002950:	001a      	movs	r2, r3
 8002952:	2310      	movs	r3, #16
 8002954:	4013      	ands	r3, r2
 8002956:	d008      	beq.n	800296a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	785b      	ldrb	r3, [r3, #1]
 800295c:	2210      	movs	r2, #16
 800295e:	4393      	bics	r3, r2
 8002960:	b2db      	uxtb	r3, r3
 8002962:	330a      	adds	r3, #10
 8002964:	b2da      	uxtb	r2, r3
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d11c      	bne.n	80029aa <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	78db      	ldrb	r3, [r3, #3]
 8002974:	0018      	movs	r0, r3
 8002976:	f000 fa35 	bl	8002de4 <RTC_ByteToBcd2>
 800297a:	0003      	movs	r3, r0
 800297c:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	785b      	ldrb	r3, [r3, #1]
 8002982:	0018      	movs	r0, r3
 8002984:	f000 fa2e 	bl	8002de4 <RTC_ByteToBcd2>
 8002988:	0003      	movs	r3, r0
 800298a:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800298c:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	789b      	ldrb	r3, [r3, #2]
 8002992:	0018      	movs	r0, r3
 8002994:	f000 fa26 	bl	8002de4 <RTC_ByteToBcd2>
 8002998:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800299a:	0022      	movs	r2, r4
 800299c:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80029a4:	4313      	orrs	r3, r2
 80029a6:	617b      	str	r3, [r7, #20]
 80029a8:	e00e      	b.n	80029c8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	78db      	ldrb	r3, [r3, #3]
 80029ae:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	785b      	ldrb	r3, [r3, #1]
 80029b4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80029b6:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 80029b8:	68ba      	ldr	r2, [r7, #8]
 80029ba:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80029bc:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80029c4:	4313      	orrs	r3, r2
 80029c6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	22ca      	movs	r2, #202	; 0xca
 80029ce:	625a      	str	r2, [r3, #36]	; 0x24
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2253      	movs	r2, #83	; 0x53
 80029d6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80029d8:	2513      	movs	r5, #19
 80029da:	197c      	adds	r4, r7, r5
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	0018      	movs	r0, r3
 80029e0:	f000 f97a 	bl	8002cd8 <RTC_EnterInitMode>
 80029e4:	0003      	movs	r3, r0
 80029e6:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 80029e8:	0028      	movs	r0, r5
 80029ea:	183b      	adds	r3, r7, r0
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d10c      	bne.n	8002a0c <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	697a      	ldr	r2, [r7, #20]
 80029f8:	4910      	ldr	r1, [pc, #64]	; (8002a3c <HAL_RTC_SetDate+0x120>)
 80029fa:	400a      	ands	r2, r1
 80029fc:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80029fe:	183c      	adds	r4, r7, r0
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	0018      	movs	r0, r3
 8002a04:	f000 f9aa 	bl	8002d5c <RTC_ExitInitMode>
 8002a08:	0003      	movs	r3, r0
 8002a0a:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	22ff      	movs	r2, #255	; 0xff
 8002a12:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8002a14:	2313      	movs	r3, #19
 8002a16:	18fb      	adds	r3, r7, r3
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d103      	bne.n	8002a26 <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2229      	movs	r2, #41	; 0x29
 8002a22:	2101      	movs	r1, #1
 8002a24:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2228      	movs	r2, #40	; 0x28
 8002a2a:	2100      	movs	r1, #0
 8002a2c:	5499      	strb	r1, [r3, r2]

  return status;
 8002a2e:	2313      	movs	r3, #19
 8002a30:	18fb      	adds	r3, r7, r3
 8002a32:	781b      	ldrb	r3, [r3, #0]
}
 8002a34:	0018      	movs	r0, r3
 8002a36:	46bd      	mov	sp, r7
 8002a38:	b006      	add	sp, #24
 8002a3a:	bdb0      	pop	{r4, r5, r7, pc}
 8002a3c:	00ffff3f 	.word	0x00ffff3f

08002a40 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002a40:	b590      	push	{r4, r7, lr}
 8002a42:	b089      	sub	sp, #36	; 0x24
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2228      	movs	r2, #40	; 0x28
 8002a50:	5c9b      	ldrb	r3, [r3, r2]
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d101      	bne.n	8002a5a <HAL_RTC_SetAlarm+0x1a>
 8002a56:	2302      	movs	r3, #2
 8002a58:	e10c      	b.n	8002c74 <HAL_RTC_SetAlarm+0x234>
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2228      	movs	r2, #40	; 0x28
 8002a5e:	2101      	movs	r1, #1
 8002a60:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2229      	movs	r2, #41	; 0x29
 8002a66:	2102      	movs	r1, #2
 8002a68:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d136      	bne.n	8002ade <HAL_RTC_SetAlarm+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	2240      	movs	r2, #64	; 0x40
 8002a78:	4013      	ands	r3, r2
 8002a7a:	d102      	bne.n	8002a82 <HAL_RTC_SetAlarm+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	0018      	movs	r0, r3
 8002a88:	f000 f9ac 	bl	8002de4 <RTC_ByteToBcd2>
 8002a8c:	0003      	movs	r3, r0
 8002a8e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	785b      	ldrb	r3, [r3, #1]
 8002a94:	0018      	movs	r0, r3
 8002a96:	f000 f9a5 	bl	8002de4 <RTC_ByteToBcd2>
 8002a9a:	0003      	movs	r3, r0
 8002a9c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002a9e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	789b      	ldrb	r3, [r3, #2]
 8002aa4:	0018      	movs	r0, r3
 8002aa6:	f000 f99d 	bl	8002de4 <RTC_ByteToBcd2>
 8002aaa:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002aac:	0022      	movs	r2, r4
 8002aae:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	78db      	ldrb	r3, [r3, #3]
 8002ab4:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8002ab6:	431a      	orrs	r2, r3
 8002ab8:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	2220      	movs	r2, #32
 8002abe:	5c9b      	ldrb	r3, [r3, r2]
 8002ac0:	0018      	movs	r0, r3
 8002ac2:	f000 f98f 	bl	8002de4 <RTC_ByteToBcd2>
 8002ac6:	0003      	movs	r3, r0
 8002ac8:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002aca:	0022      	movs	r2, r4
 8002acc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8002ad2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	61fb      	str	r3, [r7, #28]
 8002adc:	e022      	b.n	8002b24 <HAL_RTC_SetAlarm+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	699b      	ldr	r3, [r3, #24]
 8002ae4:	2240      	movs	r2, #64	; 0x40
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	d102      	bne.n	8002af0 <HAL_RTC_SetAlarm+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	2200      	movs	r2, #0
 8002aee:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	785b      	ldrb	r3, [r3, #1]
 8002afa:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002afc:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8002afe:	68ba      	ldr	r2, [r7, #8]
 8002b00:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002b02:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	78db      	ldrb	r3, [r3, #3]
 8002b08:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8002b0a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	2120      	movs	r1, #32
 8002b10:	5c5b      	ldrb	r3, [r3, r1]
 8002b12:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002b14:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8002b1a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002b20:	4313      	orrs	r3, r2
 8002b22:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	685a      	ldr	r2, [r3, #4]
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	22ca      	movs	r2, #202	; 0xca
 8002b36:	625a      	str	r2, [r3, #36]	; 0x24
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2253      	movs	r2, #83	; 0x53
 8002b3e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b44:	2380      	movs	r3, #128	; 0x80
 8002b46:	005b      	lsls	r3, r3, #1
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d143      	bne.n	8002bd4 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	699a      	ldr	r2, [r3, #24]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4949      	ldr	r1, [pc, #292]	; (8002c7c <HAL_RTC_SetAlarm+0x23c>)
 8002b58:	400a      	ands	r2, r1
 8002b5a:	619a      	str	r2, [r3, #24]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	699a      	ldr	r2, [r3, #24]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4946      	ldr	r1, [pc, #280]	; (8002c80 <HAL_RTC_SetAlarm+0x240>)
 8002b68:	400a      	ands	r2, r1
 8002b6a:	619a      	str	r2, [r3, #24]

    tickstart = HAL_GetTick();
 8002b6c:	f7fe fb38 	bl	80011e0 <HAL_GetTick>
 8002b70:	0003      	movs	r3, r0
 8002b72:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002b74:	e016      	b.n	8002ba4 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002b76:	f7fe fb33 	bl	80011e0 <HAL_GetTick>
 8002b7a:	0002      	movs	r2, r0
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	1ad2      	subs	r2, r2, r3
 8002b80:	23fa      	movs	r3, #250	; 0xfa
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d90d      	bls.n	8002ba4 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	22ff      	movs	r2, #255	; 0xff
 8002b8e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2229      	movs	r2, #41	; 0x29
 8002b94:	2103      	movs	r1, #3
 8002b96:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2228      	movs	r2, #40	; 0x28
 8002b9c:	2100      	movs	r1, #0
 8002b9e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e067      	b.n	8002c74 <HAL_RTC_SetAlarm+0x234>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	2201      	movs	r2, #1
 8002bac:	4013      	ands	r3, r2
 8002bae:	d0e2      	beq.n	8002b76 <HAL_RTC_SetAlarm+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	69fa      	ldr	r2, [r7, #28]
 8002bb6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	699a      	ldr	r2, [r3, #24]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2180      	movs	r1, #128	; 0x80
 8002bcc:	0049      	lsls	r1, r1, #1
 8002bce:	430a      	orrs	r2, r1
 8002bd0:	619a      	str	r2, [r3, #24]
 8002bd2:	e042      	b.n	8002c5a <HAL_RTC_SetAlarm+0x21a>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	699a      	ldr	r2, [r3, #24]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4929      	ldr	r1, [pc, #164]	; (8002c84 <HAL_RTC_SetAlarm+0x244>)
 8002be0:	400a      	ands	r2, r1
 8002be2:	619a      	str	r2, [r3, #24]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	699a      	ldr	r2, [r3, #24]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4926      	ldr	r1, [pc, #152]	; (8002c88 <HAL_RTC_SetAlarm+0x248>)
 8002bf0:	400a      	ands	r2, r1
 8002bf2:	619a      	str	r2, [r3, #24]

    tickstart = HAL_GetTick();
 8002bf4:	f7fe faf4 	bl	80011e0 <HAL_GetTick>
 8002bf8:	0003      	movs	r3, r0
 8002bfa:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8002bfc:	e016      	b.n	8002c2c <HAL_RTC_SetAlarm+0x1ec>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002bfe:	f7fe faef 	bl	80011e0 <HAL_GetTick>
 8002c02:	0002      	movs	r2, r0
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	1ad2      	subs	r2, r2, r3
 8002c08:	23fa      	movs	r3, #250	; 0xfa
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d90d      	bls.n	8002c2c <HAL_RTC_SetAlarm+0x1ec>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	22ff      	movs	r2, #255	; 0xff
 8002c16:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2229      	movs	r2, #41	; 0x29
 8002c1c:	2103      	movs	r1, #3
 8002c1e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2228      	movs	r2, #40	; 0x28
 8002c24:	2100      	movs	r1, #0
 8002c26:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e023      	b.n	8002c74 <HAL_RTC_SetAlarm+0x234>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	2202      	movs	r2, #2
 8002c34:	4013      	ands	r3, r2
 8002c36:	d0e2      	beq.n	8002bfe <HAL_RTC_SetAlarm+0x1be>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	69fa      	ldr	r2, [r7, #28]
 8002c3e:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	699a      	ldr	r2, [r3, #24]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2180      	movs	r1, #128	; 0x80
 8002c54:	0089      	lsls	r1, r1, #2
 8002c56:	430a      	orrs	r2, r1
 8002c58:	619a      	str	r2, [r3, #24]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	22ff      	movs	r2, #255	; 0xff
 8002c60:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2229      	movs	r2, #41	; 0x29
 8002c66:	2101      	movs	r1, #1
 8002c68:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2228      	movs	r2, #40	; 0x28
 8002c6e:	2100      	movs	r1, #0
 8002c70:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c72:	2300      	movs	r3, #0
}
 8002c74:	0018      	movs	r0, r3
 8002c76:	46bd      	mov	sp, r7
 8002c78:	b009      	add	sp, #36	; 0x24
 8002c7a:	bd90      	pop	{r4, r7, pc}
 8002c7c:	fffffeff 	.word	0xfffffeff
 8002c80:	ffffefff 	.word	0xffffefff
 8002c84:	fffffdff 	.word	0xfffffdff
 8002c88:	ffffdfff 	.word	0xffffdfff

08002c8c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a0e      	ldr	r2, [pc, #56]	; (8002cd4 <HAL_RTC_WaitForSynchro+0x48>)
 8002c9a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8002c9c:	f7fe faa0 	bl	80011e0 <HAL_GetTick>
 8002ca0:	0003      	movs	r3, r0
 8002ca2:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8002ca4:	e00a      	b.n	8002cbc <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002ca6:	f7fe fa9b 	bl	80011e0 <HAL_GetTick>
 8002caa:	0002      	movs	r2, r0
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	1ad2      	subs	r2, r2, r3
 8002cb0:	23fa      	movs	r3, #250	; 0xfa
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d901      	bls.n	8002cbc <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e006      	b.n	8002cca <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	2220      	movs	r2, #32
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	d0ee      	beq.n	8002ca6 <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	0018      	movs	r0, r3
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	b004      	add	sp, #16
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	46c0      	nop			; (mov r8, r8)
 8002cd4:	0001005f 	.word	0x0001005f

08002cd8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8002ce0:	230f      	movs	r3, #15
 8002ce2:	18fb      	adds	r3, r7, r3
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	2240      	movs	r2, #64	; 0x40
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	d12c      	bne.n	8002d4e <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	68da      	ldr	r2, [r3, #12]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2180      	movs	r1, #128	; 0x80
 8002d00:	430a      	orrs	r2, r1
 8002d02:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002d04:	f7fe fa6c 	bl	80011e0 <HAL_GetTick>
 8002d08:	0003      	movs	r3, r0
 8002d0a:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002d0c:	e014      	b.n	8002d38 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8002d0e:	f7fe fa67 	bl	80011e0 <HAL_GetTick>
 8002d12:	0002      	movs	r2, r0
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	1ad2      	subs	r2, r2, r3
 8002d18:	200f      	movs	r0, #15
 8002d1a:	183b      	adds	r3, r7, r0
 8002d1c:	1839      	adds	r1, r7, r0
 8002d1e:	7809      	ldrb	r1, [r1, #0]
 8002d20:	7019      	strb	r1, [r3, #0]
 8002d22:	23fa      	movs	r3, #250	; 0xfa
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d906      	bls.n	8002d38 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8002d2a:	183b      	adds	r3, r7, r0
 8002d2c:	2203      	movs	r2, #3
 8002d2e:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2229      	movs	r2, #41	; 0x29
 8002d34:	2103      	movs	r1, #3
 8002d36:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	2240      	movs	r2, #64	; 0x40
 8002d40:	4013      	ands	r3, r2
 8002d42:	d104      	bne.n	8002d4e <RTC_EnterInitMode+0x76>
 8002d44:	230f      	movs	r3, #15
 8002d46:	18fb      	adds	r3, r7, r3
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	2b03      	cmp	r3, #3
 8002d4c:	d1df      	bne.n	8002d0e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002d4e:	230f      	movs	r3, #15
 8002d50:	18fb      	adds	r3, r7, r3
 8002d52:	781b      	ldrb	r3, [r3, #0]
}
 8002d54:	0018      	movs	r0, r3
 8002d56:	46bd      	mov	sp, r7
 8002d58:	b004      	add	sp, #16
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002d5c:	b590      	push	{r4, r7, lr}
 8002d5e:	b085      	sub	sp, #20
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d64:	240f      	movs	r4, #15
 8002d66:	193b      	adds	r3, r7, r4
 8002d68:	2200      	movs	r2, #0
 8002d6a:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8002d6c:	4b1c      	ldr	r3, [pc, #112]	; (8002de0 <RTC_ExitInitMode+0x84>)
 8002d6e:	68da      	ldr	r2, [r3, #12]
 8002d70:	4b1b      	ldr	r3, [pc, #108]	; (8002de0 <RTC_ExitInitMode+0x84>)
 8002d72:	2180      	movs	r1, #128	; 0x80
 8002d74:	438a      	bics	r2, r1
 8002d76:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8002d78:	4b19      	ldr	r3, [pc, #100]	; (8002de0 <RTC_ExitInitMode+0x84>)
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	2220      	movs	r2, #32
 8002d7e:	4013      	ands	r3, r2
 8002d80:	d10d      	bne.n	8002d9e <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	0018      	movs	r0, r3
 8002d86:	f7ff ff81 	bl	8002c8c <HAL_RTC_WaitForSynchro>
 8002d8a:	1e03      	subs	r3, r0, #0
 8002d8c:	d021      	beq.n	8002dd2 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2229      	movs	r2, #41	; 0x29
 8002d92:	2103      	movs	r1, #3
 8002d94:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8002d96:	193b      	adds	r3, r7, r4
 8002d98:	2203      	movs	r2, #3
 8002d9a:	701a      	strb	r2, [r3, #0]
 8002d9c:	e019      	b.n	8002dd2 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002d9e:	4b10      	ldr	r3, [pc, #64]	; (8002de0 <RTC_ExitInitMode+0x84>)
 8002da0:	699a      	ldr	r2, [r3, #24]
 8002da2:	4b0f      	ldr	r3, [pc, #60]	; (8002de0 <RTC_ExitInitMode+0x84>)
 8002da4:	2120      	movs	r1, #32
 8002da6:	438a      	bics	r2, r1
 8002da8:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	0018      	movs	r0, r3
 8002dae:	f7ff ff6d 	bl	8002c8c <HAL_RTC_WaitForSynchro>
 8002db2:	1e03      	subs	r3, r0, #0
 8002db4:	d007      	beq.n	8002dc6 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2229      	movs	r2, #41	; 0x29
 8002dba:	2103      	movs	r1, #3
 8002dbc:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8002dbe:	230f      	movs	r3, #15
 8002dc0:	18fb      	adds	r3, r7, r3
 8002dc2:	2203      	movs	r2, #3
 8002dc4:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002dc6:	4b06      	ldr	r3, [pc, #24]	; (8002de0 <RTC_ExitInitMode+0x84>)
 8002dc8:	699a      	ldr	r2, [r3, #24]
 8002dca:	4b05      	ldr	r3, [pc, #20]	; (8002de0 <RTC_ExitInitMode+0x84>)
 8002dcc:	2120      	movs	r1, #32
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	619a      	str	r2, [r3, #24]
  }

  return status;
 8002dd2:	230f      	movs	r3, #15
 8002dd4:	18fb      	adds	r3, r7, r3
 8002dd6:	781b      	ldrb	r3, [r3, #0]
}
 8002dd8:	0018      	movs	r0, r3
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	b005      	add	sp, #20
 8002dde:	bd90      	pop	{r4, r7, pc}
 8002de0:	40002800 	.word	0x40002800

08002de4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	0002      	movs	r2, r0
 8002dec:	1dfb      	adds	r3, r7, #7
 8002dee:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8002df0:	2300      	movs	r3, #0
 8002df2:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8002df4:	230b      	movs	r3, #11
 8002df6:	18fb      	adds	r3, r7, r3
 8002df8:	1dfa      	adds	r2, r7, #7
 8002dfa:	7812      	ldrb	r2, [r2, #0]
 8002dfc:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8002dfe:	e008      	b.n	8002e12 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	3301      	adds	r3, #1
 8002e04:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8002e06:	220b      	movs	r2, #11
 8002e08:	18bb      	adds	r3, r7, r2
 8002e0a:	18ba      	adds	r2, r7, r2
 8002e0c:	7812      	ldrb	r2, [r2, #0]
 8002e0e:	3a0a      	subs	r2, #10
 8002e10:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8002e12:	210b      	movs	r1, #11
 8002e14:	187b      	adds	r3, r7, r1
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	2b09      	cmp	r3, #9
 8002e1a:	d8f1      	bhi.n	8002e00 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	011b      	lsls	r3, r3, #4
 8002e22:	b2da      	uxtb	r2, r3
 8002e24:	187b      	adds	r3, r7, r1
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	b2db      	uxtb	r3, r3
}
 8002e2c:	0018      	movs	r0, r3
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	b004      	add	sp, #16
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e046      	b.n	8002ed4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2288      	movs	r2, #136	; 0x88
 8002e4a:	589b      	ldr	r3, [r3, r2]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d107      	bne.n	8002e60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2284      	movs	r2, #132	; 0x84
 8002e54:	2100      	movs	r1, #0
 8002e56:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	0018      	movs	r0, r3
 8002e5c:	f7fd ffe4 	bl	8000e28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2288      	movs	r2, #136	; 0x88
 8002e64:	2124      	movs	r1, #36	; 0x24
 8002e66:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2101      	movs	r1, #1
 8002e74:	438a      	bics	r2, r1
 8002e76:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d003      	beq.n	8002e88 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	0018      	movs	r0, r3
 8002e84:	f000 fd0c 	bl	80038a0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	0018      	movs	r0, r3
 8002e8c:	f000 f9b2 	bl	80031f4 <UART_SetConfig>
 8002e90:	0003      	movs	r3, r0
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d101      	bne.n	8002e9a <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e01c      	b.n	8002ed4 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	685a      	ldr	r2, [r3, #4]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	490d      	ldr	r1, [pc, #52]	; (8002edc <HAL_UART_Init+0xa8>)
 8002ea6:	400a      	ands	r2, r1
 8002ea8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	689a      	ldr	r2, [r3, #8]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	212a      	movs	r1, #42	; 0x2a
 8002eb6:	438a      	bics	r2, r1
 8002eb8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2101      	movs	r1, #1
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	0018      	movs	r0, r3
 8002ece:	f000 fd9b 	bl	8003a08 <UART_CheckIdleState>
 8002ed2:	0003      	movs	r3, r0
}
 8002ed4:	0018      	movs	r0, r3
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	b002      	add	sp, #8
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	ffffb7ff 	.word	0xffffb7ff

08002ee0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b08a      	sub	sp, #40	; 0x28
 8002ee4:	af02      	add	r7, sp, #8
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	60b9      	str	r1, [r7, #8]
 8002eea:	603b      	str	r3, [r7, #0]
 8002eec:	1dbb      	adds	r3, r7, #6
 8002eee:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2288      	movs	r2, #136	; 0x88
 8002ef4:	589b      	ldr	r3, [r3, r2]
 8002ef6:	2b20      	cmp	r3, #32
 8002ef8:	d000      	beq.n	8002efc <HAL_UART_Transmit+0x1c>
 8002efa:	e090      	b.n	800301e <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d003      	beq.n	8002f0a <HAL_UART_Transmit+0x2a>
 8002f02:	1dbb      	adds	r3, r7, #6
 8002f04:	881b      	ldrh	r3, [r3, #0]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d101      	bne.n	8002f0e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e088      	b.n	8003020 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	689a      	ldr	r2, [r3, #8]
 8002f12:	2380      	movs	r3, #128	; 0x80
 8002f14:	015b      	lsls	r3, r3, #5
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d109      	bne.n	8002f2e <HAL_UART_Transmit+0x4e>
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d105      	bne.n	8002f2e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	2201      	movs	r2, #1
 8002f26:	4013      	ands	r3, r2
 8002f28:	d001      	beq.n	8002f2e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e078      	b.n	8003020 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2290      	movs	r2, #144	; 0x90
 8002f32:	2100      	movs	r1, #0
 8002f34:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2288      	movs	r2, #136	; 0x88
 8002f3a:	2121      	movs	r1, #33	; 0x21
 8002f3c:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f3e:	f7fe f94f 	bl	80011e0 <HAL_GetTick>
 8002f42:	0003      	movs	r3, r0
 8002f44:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	1dba      	adds	r2, r7, #6
 8002f4a:	2154      	movs	r1, #84	; 0x54
 8002f4c:	8812      	ldrh	r2, [r2, #0]
 8002f4e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	1dba      	adds	r2, r7, #6
 8002f54:	2156      	movs	r1, #86	; 0x56
 8002f56:	8812      	ldrh	r2, [r2, #0]
 8002f58:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	689a      	ldr	r2, [r3, #8]
 8002f5e:	2380      	movs	r3, #128	; 0x80
 8002f60:	015b      	lsls	r3, r3, #5
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d108      	bne.n	8002f78 <HAL_UART_Transmit+0x98>
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	691b      	ldr	r3, [r3, #16]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d104      	bne.n	8002f78 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	61bb      	str	r3, [r7, #24]
 8002f76:	e003      	b.n	8002f80 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002f80:	e030      	b.n	8002fe4 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f82:	697a      	ldr	r2, [r7, #20]
 8002f84:	68f8      	ldr	r0, [r7, #12]
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	9300      	str	r3, [sp, #0]
 8002f8a:	0013      	movs	r3, r2
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	2180      	movs	r1, #128	; 0x80
 8002f90:	f000 fde4 	bl	8003b5c <UART_WaitOnFlagUntilTimeout>
 8002f94:	1e03      	subs	r3, r0, #0
 8002f96:	d005      	beq.n	8002fa4 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2288      	movs	r2, #136	; 0x88
 8002f9c:	2120      	movs	r1, #32
 8002f9e:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e03d      	b.n	8003020 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d10b      	bne.n	8002fc2 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	881b      	ldrh	r3, [r3, #0]
 8002fae:	001a      	movs	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	05d2      	lsls	r2, r2, #23
 8002fb6:	0dd2      	lsrs	r2, r2, #23
 8002fb8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	3302      	adds	r3, #2
 8002fbe:	61bb      	str	r3, [r7, #24]
 8002fc0:	e007      	b.n	8002fd2 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	781a      	ldrb	r2, [r3, #0]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	3301      	adds	r3, #1
 8002fd0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2256      	movs	r2, #86	; 0x56
 8002fd6:	5a9b      	ldrh	r3, [r3, r2]
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	b299      	uxth	r1, r3
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2256      	movs	r2, #86	; 0x56
 8002fe2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2256      	movs	r2, #86	; 0x56
 8002fe8:	5a9b      	ldrh	r3, [r3, r2]
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d1c8      	bne.n	8002f82 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ff0:	697a      	ldr	r2, [r7, #20]
 8002ff2:	68f8      	ldr	r0, [r7, #12]
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	9300      	str	r3, [sp, #0]
 8002ff8:	0013      	movs	r3, r2
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	2140      	movs	r1, #64	; 0x40
 8002ffe:	f000 fdad 	bl	8003b5c <UART_WaitOnFlagUntilTimeout>
 8003002:	1e03      	subs	r3, r0, #0
 8003004:	d005      	beq.n	8003012 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2288      	movs	r2, #136	; 0x88
 800300a:	2120      	movs	r1, #32
 800300c:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e006      	b.n	8003020 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2288      	movs	r2, #136	; 0x88
 8003016:	2120      	movs	r1, #32
 8003018:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800301a:	2300      	movs	r3, #0
 800301c:	e000      	b.n	8003020 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 800301e:	2302      	movs	r3, #2
  }
}
 8003020:	0018      	movs	r0, r3
 8003022:	46bd      	mov	sp, r7
 8003024:	b008      	add	sp, #32
 8003026:	bd80      	pop	{r7, pc}

08003028 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b08a      	sub	sp, #40	; 0x28
 800302c:	af02      	add	r7, sp, #8
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	603b      	str	r3, [r7, #0]
 8003034:	1dbb      	adds	r3, r7, #6
 8003036:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	228c      	movs	r2, #140	; 0x8c
 800303c:	589b      	ldr	r3, [r3, r2]
 800303e:	2b20      	cmp	r3, #32
 8003040:	d000      	beq.n	8003044 <HAL_UART_Receive+0x1c>
 8003042:	e0d0      	b.n	80031e6 <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d003      	beq.n	8003052 <HAL_UART_Receive+0x2a>
 800304a:	1dbb      	adds	r3, r7, #6
 800304c:	881b      	ldrh	r3, [r3, #0]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d101      	bne.n	8003056 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e0c8      	b.n	80031e8 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	689a      	ldr	r2, [r3, #8]
 800305a:	2380      	movs	r3, #128	; 0x80
 800305c:	015b      	lsls	r3, r3, #5
 800305e:	429a      	cmp	r2, r3
 8003060:	d109      	bne.n	8003076 <HAL_UART_Receive+0x4e>
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	691b      	ldr	r3, [r3, #16]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d105      	bne.n	8003076 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	2201      	movs	r2, #1
 800306e:	4013      	ands	r3, r2
 8003070:	d001      	beq.n	8003076 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e0b8      	b.n	80031e8 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2290      	movs	r2, #144	; 0x90
 800307a:	2100      	movs	r1, #0
 800307c:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	228c      	movs	r2, #140	; 0x8c
 8003082:	2122      	movs	r1, #34	; 0x22
 8003084:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2200      	movs	r2, #0
 800308a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800308c:	f7fe f8a8 	bl	80011e0 <HAL_GetTick>
 8003090:	0003      	movs	r3, r0
 8003092:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	1dba      	adds	r2, r7, #6
 8003098:	215c      	movs	r1, #92	; 0x5c
 800309a:	8812      	ldrh	r2, [r2, #0]
 800309c:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	1dba      	adds	r2, r7, #6
 80030a2:	215e      	movs	r1, #94	; 0x5e
 80030a4:	8812      	ldrh	r2, [r2, #0]
 80030a6:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	689a      	ldr	r2, [r3, #8]
 80030ac:	2380      	movs	r3, #128	; 0x80
 80030ae:	015b      	lsls	r3, r3, #5
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d10d      	bne.n	80030d0 <HAL_UART_Receive+0xa8>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	691b      	ldr	r3, [r3, #16]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d104      	bne.n	80030c6 <HAL_UART_Receive+0x9e>
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2260      	movs	r2, #96	; 0x60
 80030c0:	494b      	ldr	r1, [pc, #300]	; (80031f0 <HAL_UART_Receive+0x1c8>)
 80030c2:	5299      	strh	r1, [r3, r2]
 80030c4:	e02e      	b.n	8003124 <HAL_UART_Receive+0xfc>
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2260      	movs	r2, #96	; 0x60
 80030ca:	21ff      	movs	r1, #255	; 0xff
 80030cc:	5299      	strh	r1, [r3, r2]
 80030ce:	e029      	b.n	8003124 <HAL_UART_Receive+0xfc>
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d10d      	bne.n	80030f4 <HAL_UART_Receive+0xcc>
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	691b      	ldr	r3, [r3, #16]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d104      	bne.n	80030ea <HAL_UART_Receive+0xc2>
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2260      	movs	r2, #96	; 0x60
 80030e4:	21ff      	movs	r1, #255	; 0xff
 80030e6:	5299      	strh	r1, [r3, r2]
 80030e8:	e01c      	b.n	8003124 <HAL_UART_Receive+0xfc>
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2260      	movs	r2, #96	; 0x60
 80030ee:	217f      	movs	r1, #127	; 0x7f
 80030f0:	5299      	strh	r1, [r3, r2]
 80030f2:	e017      	b.n	8003124 <HAL_UART_Receive+0xfc>
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	689a      	ldr	r2, [r3, #8]
 80030f8:	2380      	movs	r3, #128	; 0x80
 80030fa:	055b      	lsls	r3, r3, #21
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d10d      	bne.n	800311c <HAL_UART_Receive+0xf4>
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	691b      	ldr	r3, [r3, #16]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d104      	bne.n	8003112 <HAL_UART_Receive+0xea>
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2260      	movs	r2, #96	; 0x60
 800310c:	217f      	movs	r1, #127	; 0x7f
 800310e:	5299      	strh	r1, [r3, r2]
 8003110:	e008      	b.n	8003124 <HAL_UART_Receive+0xfc>
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2260      	movs	r2, #96	; 0x60
 8003116:	213f      	movs	r1, #63	; 0x3f
 8003118:	5299      	strh	r1, [r3, r2]
 800311a:	e003      	b.n	8003124 <HAL_UART_Receive+0xfc>
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2260      	movs	r2, #96	; 0x60
 8003120:	2100      	movs	r1, #0
 8003122:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8003124:	2312      	movs	r3, #18
 8003126:	18fb      	adds	r3, r7, r3
 8003128:	68fa      	ldr	r2, [r7, #12]
 800312a:	2160      	movs	r1, #96	; 0x60
 800312c:	5a52      	ldrh	r2, [r2, r1]
 800312e:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	689a      	ldr	r2, [r3, #8]
 8003134:	2380      	movs	r3, #128	; 0x80
 8003136:	015b      	lsls	r3, r3, #5
 8003138:	429a      	cmp	r2, r3
 800313a:	d108      	bne.n	800314e <HAL_UART_Receive+0x126>
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	691b      	ldr	r3, [r3, #16]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d104      	bne.n	800314e <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8003144:	2300      	movs	r3, #0
 8003146:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	61bb      	str	r3, [r7, #24]
 800314c:	e003      	b.n	8003156 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003152:	2300      	movs	r3, #0
 8003154:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003156:	e03a      	b.n	80031ce <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003158:	697a      	ldr	r2, [r7, #20]
 800315a:	68f8      	ldr	r0, [r7, #12]
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	9300      	str	r3, [sp, #0]
 8003160:	0013      	movs	r3, r2
 8003162:	2200      	movs	r2, #0
 8003164:	2120      	movs	r1, #32
 8003166:	f000 fcf9 	bl	8003b5c <UART_WaitOnFlagUntilTimeout>
 800316a:	1e03      	subs	r3, r0, #0
 800316c:	d005      	beq.n	800317a <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	228c      	movs	r2, #140	; 0x8c
 8003172:	2120      	movs	r1, #32
 8003174:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e036      	b.n	80031e8 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d10e      	bne.n	800319e <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003186:	b29b      	uxth	r3, r3
 8003188:	2212      	movs	r2, #18
 800318a:	18ba      	adds	r2, r7, r2
 800318c:	8812      	ldrh	r2, [r2, #0]
 800318e:	4013      	ands	r3, r2
 8003190:	b29a      	uxth	r2, r3
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	3302      	adds	r3, #2
 800319a:	61bb      	str	r3, [r7, #24]
 800319c:	e00e      	b.n	80031bc <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	2212      	movs	r2, #18
 80031a8:	18ba      	adds	r2, r7, r2
 80031aa:	8812      	ldrh	r2, [r2, #0]
 80031ac:	b2d2      	uxtb	r2, r2
 80031ae:	4013      	ands	r3, r2
 80031b0:	b2da      	uxtb	r2, r3
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	3301      	adds	r3, #1
 80031ba:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	225e      	movs	r2, #94	; 0x5e
 80031c0:	5a9b      	ldrh	r3, [r3, r2]
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	3b01      	subs	r3, #1
 80031c6:	b299      	uxth	r1, r3
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	225e      	movs	r2, #94	; 0x5e
 80031cc:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	225e      	movs	r2, #94	; 0x5e
 80031d2:	5a9b      	ldrh	r3, [r3, r2]
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d1be      	bne.n	8003158 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	228c      	movs	r2, #140	; 0x8c
 80031de:	2120      	movs	r1, #32
 80031e0:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80031e2:	2300      	movs	r3, #0
 80031e4:	e000      	b.n	80031e8 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 80031e6:	2302      	movs	r3, #2
  }
}
 80031e8:	0018      	movs	r0, r3
 80031ea:	46bd      	mov	sp, r7
 80031ec:	b008      	add	sp, #32
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	000001ff 	.word	0x000001ff

080031f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031f4:	b5b0      	push	{r4, r5, r7, lr}
 80031f6:	b090      	sub	sp, #64	; 0x40
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80031fc:	231a      	movs	r3, #26
 80031fe:	2220      	movs	r2, #32
 8003200:	189b      	adds	r3, r3, r2
 8003202:	19db      	adds	r3, r3, r7
 8003204:	2200      	movs	r2, #0
 8003206:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320a:	689a      	ldr	r2, [r3, #8]
 800320c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320e:	691b      	ldr	r3, [r3, #16]
 8003210:	431a      	orrs	r2, r3
 8003212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003214:	695b      	ldr	r3, [r3, #20]
 8003216:	431a      	orrs	r2, r3
 8003218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321a:	69db      	ldr	r3, [r3, #28]
 800321c:	4313      	orrs	r3, r2
 800321e:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4ac1      	ldr	r2, [pc, #772]	; (800352c <UART_SetConfig+0x338>)
 8003228:	4013      	ands	r3, r2
 800322a:	0019      	movs	r1, r3
 800322c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003232:	430b      	orrs	r3, r1
 8003234:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	4abc      	ldr	r2, [pc, #752]	; (8003530 <UART_SetConfig+0x33c>)
 800323e:	4013      	ands	r3, r2
 8003240:	0018      	movs	r0, r3
 8003242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003244:	68d9      	ldr	r1, [r3, #12]
 8003246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	0003      	movs	r3, r0
 800324c:	430b      	orrs	r3, r1
 800324e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003252:	699b      	ldr	r3, [r3, #24]
 8003254:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4ab6      	ldr	r2, [pc, #728]	; (8003534 <UART_SetConfig+0x340>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d009      	beq.n	8003274 <UART_SetConfig+0x80>
 8003260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4ab4      	ldr	r2, [pc, #720]	; (8003538 <UART_SetConfig+0x344>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d004      	beq.n	8003274 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800326a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326c:	6a1b      	ldr	r3, [r3, #32]
 800326e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003270:	4313      	orrs	r3, r2
 8003272:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	4ab0      	ldr	r2, [pc, #704]	; (800353c <UART_SetConfig+0x348>)
 800327c:	4013      	ands	r3, r2
 800327e:	0019      	movs	r1, r3
 8003280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003286:	430b      	orrs	r3, r1
 8003288:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800328a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003290:	220f      	movs	r2, #15
 8003292:	4393      	bics	r3, r2
 8003294:	0018      	movs	r0, r3
 8003296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003298:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800329a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	0003      	movs	r3, r0
 80032a0:	430b      	orrs	r3, r1
 80032a2:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80032a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4aa5      	ldr	r2, [pc, #660]	; (8003540 <UART_SetConfig+0x34c>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d131      	bne.n	8003312 <UART_SetConfig+0x11e>
 80032ae:	4ba5      	ldr	r3, [pc, #660]	; (8003544 <UART_SetConfig+0x350>)
 80032b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032b2:	2203      	movs	r2, #3
 80032b4:	4013      	ands	r3, r2
 80032b6:	2b03      	cmp	r3, #3
 80032b8:	d01d      	beq.n	80032f6 <UART_SetConfig+0x102>
 80032ba:	d823      	bhi.n	8003304 <UART_SetConfig+0x110>
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d00c      	beq.n	80032da <UART_SetConfig+0xe6>
 80032c0:	d820      	bhi.n	8003304 <UART_SetConfig+0x110>
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d002      	beq.n	80032cc <UART_SetConfig+0xd8>
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d00e      	beq.n	80032e8 <UART_SetConfig+0xf4>
 80032ca:	e01b      	b.n	8003304 <UART_SetConfig+0x110>
 80032cc:	231b      	movs	r3, #27
 80032ce:	2220      	movs	r2, #32
 80032d0:	189b      	adds	r3, r3, r2
 80032d2:	19db      	adds	r3, r3, r7
 80032d4:	2200      	movs	r2, #0
 80032d6:	701a      	strb	r2, [r3, #0]
 80032d8:	e154      	b.n	8003584 <UART_SetConfig+0x390>
 80032da:	231b      	movs	r3, #27
 80032dc:	2220      	movs	r2, #32
 80032de:	189b      	adds	r3, r3, r2
 80032e0:	19db      	adds	r3, r3, r7
 80032e2:	2202      	movs	r2, #2
 80032e4:	701a      	strb	r2, [r3, #0]
 80032e6:	e14d      	b.n	8003584 <UART_SetConfig+0x390>
 80032e8:	231b      	movs	r3, #27
 80032ea:	2220      	movs	r2, #32
 80032ec:	189b      	adds	r3, r3, r2
 80032ee:	19db      	adds	r3, r3, r7
 80032f0:	2204      	movs	r2, #4
 80032f2:	701a      	strb	r2, [r3, #0]
 80032f4:	e146      	b.n	8003584 <UART_SetConfig+0x390>
 80032f6:	231b      	movs	r3, #27
 80032f8:	2220      	movs	r2, #32
 80032fa:	189b      	adds	r3, r3, r2
 80032fc:	19db      	adds	r3, r3, r7
 80032fe:	2208      	movs	r2, #8
 8003300:	701a      	strb	r2, [r3, #0]
 8003302:	e13f      	b.n	8003584 <UART_SetConfig+0x390>
 8003304:	231b      	movs	r3, #27
 8003306:	2220      	movs	r2, #32
 8003308:	189b      	adds	r3, r3, r2
 800330a:	19db      	adds	r3, r3, r7
 800330c:	2210      	movs	r2, #16
 800330e:	701a      	strb	r2, [r3, #0]
 8003310:	e138      	b.n	8003584 <UART_SetConfig+0x390>
 8003312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a8c      	ldr	r2, [pc, #560]	; (8003548 <UART_SetConfig+0x354>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d131      	bne.n	8003380 <UART_SetConfig+0x18c>
 800331c:	4b89      	ldr	r3, [pc, #548]	; (8003544 <UART_SetConfig+0x350>)
 800331e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003320:	220c      	movs	r2, #12
 8003322:	4013      	ands	r3, r2
 8003324:	2b0c      	cmp	r3, #12
 8003326:	d01d      	beq.n	8003364 <UART_SetConfig+0x170>
 8003328:	d823      	bhi.n	8003372 <UART_SetConfig+0x17e>
 800332a:	2b08      	cmp	r3, #8
 800332c:	d00c      	beq.n	8003348 <UART_SetConfig+0x154>
 800332e:	d820      	bhi.n	8003372 <UART_SetConfig+0x17e>
 8003330:	2b00      	cmp	r3, #0
 8003332:	d002      	beq.n	800333a <UART_SetConfig+0x146>
 8003334:	2b04      	cmp	r3, #4
 8003336:	d00e      	beq.n	8003356 <UART_SetConfig+0x162>
 8003338:	e01b      	b.n	8003372 <UART_SetConfig+0x17e>
 800333a:	231b      	movs	r3, #27
 800333c:	2220      	movs	r2, #32
 800333e:	189b      	adds	r3, r3, r2
 8003340:	19db      	adds	r3, r3, r7
 8003342:	2200      	movs	r2, #0
 8003344:	701a      	strb	r2, [r3, #0]
 8003346:	e11d      	b.n	8003584 <UART_SetConfig+0x390>
 8003348:	231b      	movs	r3, #27
 800334a:	2220      	movs	r2, #32
 800334c:	189b      	adds	r3, r3, r2
 800334e:	19db      	adds	r3, r3, r7
 8003350:	2202      	movs	r2, #2
 8003352:	701a      	strb	r2, [r3, #0]
 8003354:	e116      	b.n	8003584 <UART_SetConfig+0x390>
 8003356:	231b      	movs	r3, #27
 8003358:	2220      	movs	r2, #32
 800335a:	189b      	adds	r3, r3, r2
 800335c:	19db      	adds	r3, r3, r7
 800335e:	2204      	movs	r2, #4
 8003360:	701a      	strb	r2, [r3, #0]
 8003362:	e10f      	b.n	8003584 <UART_SetConfig+0x390>
 8003364:	231b      	movs	r3, #27
 8003366:	2220      	movs	r2, #32
 8003368:	189b      	adds	r3, r3, r2
 800336a:	19db      	adds	r3, r3, r7
 800336c:	2208      	movs	r2, #8
 800336e:	701a      	strb	r2, [r3, #0]
 8003370:	e108      	b.n	8003584 <UART_SetConfig+0x390>
 8003372:	231b      	movs	r3, #27
 8003374:	2220      	movs	r2, #32
 8003376:	189b      	adds	r3, r3, r2
 8003378:	19db      	adds	r3, r3, r7
 800337a:	2210      	movs	r2, #16
 800337c:	701a      	strb	r2, [r3, #0]
 800337e:	e101      	b.n	8003584 <UART_SetConfig+0x390>
 8003380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a71      	ldr	r2, [pc, #452]	; (800354c <UART_SetConfig+0x358>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d131      	bne.n	80033ee <UART_SetConfig+0x1fa>
 800338a:	4b6e      	ldr	r3, [pc, #440]	; (8003544 <UART_SetConfig+0x350>)
 800338c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800338e:	2230      	movs	r2, #48	; 0x30
 8003390:	4013      	ands	r3, r2
 8003392:	2b30      	cmp	r3, #48	; 0x30
 8003394:	d01d      	beq.n	80033d2 <UART_SetConfig+0x1de>
 8003396:	d823      	bhi.n	80033e0 <UART_SetConfig+0x1ec>
 8003398:	2b20      	cmp	r3, #32
 800339a:	d00c      	beq.n	80033b6 <UART_SetConfig+0x1c2>
 800339c:	d820      	bhi.n	80033e0 <UART_SetConfig+0x1ec>
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d002      	beq.n	80033a8 <UART_SetConfig+0x1b4>
 80033a2:	2b10      	cmp	r3, #16
 80033a4:	d00e      	beq.n	80033c4 <UART_SetConfig+0x1d0>
 80033a6:	e01b      	b.n	80033e0 <UART_SetConfig+0x1ec>
 80033a8:	231b      	movs	r3, #27
 80033aa:	2220      	movs	r2, #32
 80033ac:	189b      	adds	r3, r3, r2
 80033ae:	19db      	adds	r3, r3, r7
 80033b0:	2200      	movs	r2, #0
 80033b2:	701a      	strb	r2, [r3, #0]
 80033b4:	e0e6      	b.n	8003584 <UART_SetConfig+0x390>
 80033b6:	231b      	movs	r3, #27
 80033b8:	2220      	movs	r2, #32
 80033ba:	189b      	adds	r3, r3, r2
 80033bc:	19db      	adds	r3, r3, r7
 80033be:	2202      	movs	r2, #2
 80033c0:	701a      	strb	r2, [r3, #0]
 80033c2:	e0df      	b.n	8003584 <UART_SetConfig+0x390>
 80033c4:	231b      	movs	r3, #27
 80033c6:	2220      	movs	r2, #32
 80033c8:	189b      	adds	r3, r3, r2
 80033ca:	19db      	adds	r3, r3, r7
 80033cc:	2204      	movs	r2, #4
 80033ce:	701a      	strb	r2, [r3, #0]
 80033d0:	e0d8      	b.n	8003584 <UART_SetConfig+0x390>
 80033d2:	231b      	movs	r3, #27
 80033d4:	2220      	movs	r2, #32
 80033d6:	189b      	adds	r3, r3, r2
 80033d8:	19db      	adds	r3, r3, r7
 80033da:	2208      	movs	r2, #8
 80033dc:	701a      	strb	r2, [r3, #0]
 80033de:	e0d1      	b.n	8003584 <UART_SetConfig+0x390>
 80033e0:	231b      	movs	r3, #27
 80033e2:	2220      	movs	r2, #32
 80033e4:	189b      	adds	r3, r3, r2
 80033e6:	19db      	adds	r3, r3, r7
 80033e8:	2210      	movs	r2, #16
 80033ea:	701a      	strb	r2, [r3, #0]
 80033ec:	e0ca      	b.n	8003584 <UART_SetConfig+0x390>
 80033ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a57      	ldr	r2, [pc, #348]	; (8003550 <UART_SetConfig+0x35c>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d106      	bne.n	8003406 <UART_SetConfig+0x212>
 80033f8:	231b      	movs	r3, #27
 80033fa:	2220      	movs	r2, #32
 80033fc:	189b      	adds	r3, r3, r2
 80033fe:	19db      	adds	r3, r3, r7
 8003400:	2200      	movs	r2, #0
 8003402:	701a      	strb	r2, [r3, #0]
 8003404:	e0be      	b.n	8003584 <UART_SetConfig+0x390>
 8003406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a52      	ldr	r2, [pc, #328]	; (8003554 <UART_SetConfig+0x360>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d106      	bne.n	800341e <UART_SetConfig+0x22a>
 8003410:	231b      	movs	r3, #27
 8003412:	2220      	movs	r2, #32
 8003414:	189b      	adds	r3, r3, r2
 8003416:	19db      	adds	r3, r3, r7
 8003418:	2200      	movs	r2, #0
 800341a:	701a      	strb	r2, [r3, #0]
 800341c:	e0b2      	b.n	8003584 <UART_SetConfig+0x390>
 800341e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a4d      	ldr	r2, [pc, #308]	; (8003558 <UART_SetConfig+0x364>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d106      	bne.n	8003436 <UART_SetConfig+0x242>
 8003428:	231b      	movs	r3, #27
 800342a:	2220      	movs	r2, #32
 800342c:	189b      	adds	r3, r3, r2
 800342e:	19db      	adds	r3, r3, r7
 8003430:	2200      	movs	r2, #0
 8003432:	701a      	strb	r2, [r3, #0]
 8003434:	e0a6      	b.n	8003584 <UART_SetConfig+0x390>
 8003436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a3e      	ldr	r2, [pc, #248]	; (8003534 <UART_SetConfig+0x340>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d13e      	bne.n	80034be <UART_SetConfig+0x2ca>
 8003440:	4b40      	ldr	r3, [pc, #256]	; (8003544 <UART_SetConfig+0x350>)
 8003442:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003444:	23c0      	movs	r3, #192	; 0xc0
 8003446:	011b      	lsls	r3, r3, #4
 8003448:	4013      	ands	r3, r2
 800344a:	22c0      	movs	r2, #192	; 0xc0
 800344c:	0112      	lsls	r2, r2, #4
 800344e:	4293      	cmp	r3, r2
 8003450:	d027      	beq.n	80034a2 <UART_SetConfig+0x2ae>
 8003452:	22c0      	movs	r2, #192	; 0xc0
 8003454:	0112      	lsls	r2, r2, #4
 8003456:	4293      	cmp	r3, r2
 8003458:	d82a      	bhi.n	80034b0 <UART_SetConfig+0x2bc>
 800345a:	2280      	movs	r2, #128	; 0x80
 800345c:	0112      	lsls	r2, r2, #4
 800345e:	4293      	cmp	r3, r2
 8003460:	d011      	beq.n	8003486 <UART_SetConfig+0x292>
 8003462:	2280      	movs	r2, #128	; 0x80
 8003464:	0112      	lsls	r2, r2, #4
 8003466:	4293      	cmp	r3, r2
 8003468:	d822      	bhi.n	80034b0 <UART_SetConfig+0x2bc>
 800346a:	2b00      	cmp	r3, #0
 800346c:	d004      	beq.n	8003478 <UART_SetConfig+0x284>
 800346e:	2280      	movs	r2, #128	; 0x80
 8003470:	00d2      	lsls	r2, r2, #3
 8003472:	4293      	cmp	r3, r2
 8003474:	d00e      	beq.n	8003494 <UART_SetConfig+0x2a0>
 8003476:	e01b      	b.n	80034b0 <UART_SetConfig+0x2bc>
 8003478:	231b      	movs	r3, #27
 800347a:	2220      	movs	r2, #32
 800347c:	189b      	adds	r3, r3, r2
 800347e:	19db      	adds	r3, r3, r7
 8003480:	2200      	movs	r2, #0
 8003482:	701a      	strb	r2, [r3, #0]
 8003484:	e07e      	b.n	8003584 <UART_SetConfig+0x390>
 8003486:	231b      	movs	r3, #27
 8003488:	2220      	movs	r2, #32
 800348a:	189b      	adds	r3, r3, r2
 800348c:	19db      	adds	r3, r3, r7
 800348e:	2202      	movs	r2, #2
 8003490:	701a      	strb	r2, [r3, #0]
 8003492:	e077      	b.n	8003584 <UART_SetConfig+0x390>
 8003494:	231b      	movs	r3, #27
 8003496:	2220      	movs	r2, #32
 8003498:	189b      	adds	r3, r3, r2
 800349a:	19db      	adds	r3, r3, r7
 800349c:	2204      	movs	r2, #4
 800349e:	701a      	strb	r2, [r3, #0]
 80034a0:	e070      	b.n	8003584 <UART_SetConfig+0x390>
 80034a2:	231b      	movs	r3, #27
 80034a4:	2220      	movs	r2, #32
 80034a6:	189b      	adds	r3, r3, r2
 80034a8:	19db      	adds	r3, r3, r7
 80034aa:	2208      	movs	r2, #8
 80034ac:	701a      	strb	r2, [r3, #0]
 80034ae:	e069      	b.n	8003584 <UART_SetConfig+0x390>
 80034b0:	231b      	movs	r3, #27
 80034b2:	2220      	movs	r2, #32
 80034b4:	189b      	adds	r3, r3, r2
 80034b6:	19db      	adds	r3, r3, r7
 80034b8:	2210      	movs	r2, #16
 80034ba:	701a      	strb	r2, [r3, #0]
 80034bc:	e062      	b.n	8003584 <UART_SetConfig+0x390>
 80034be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a1d      	ldr	r2, [pc, #116]	; (8003538 <UART_SetConfig+0x344>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d157      	bne.n	8003578 <UART_SetConfig+0x384>
 80034c8:	4b1e      	ldr	r3, [pc, #120]	; (8003544 <UART_SetConfig+0x350>)
 80034ca:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80034cc:	23c0      	movs	r3, #192	; 0xc0
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	4013      	ands	r3, r2
 80034d2:	22c0      	movs	r2, #192	; 0xc0
 80034d4:	0092      	lsls	r2, r2, #2
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d040      	beq.n	800355c <UART_SetConfig+0x368>
 80034da:	22c0      	movs	r2, #192	; 0xc0
 80034dc:	0092      	lsls	r2, r2, #2
 80034de:	4293      	cmp	r3, r2
 80034e0:	d843      	bhi.n	800356a <UART_SetConfig+0x376>
 80034e2:	2280      	movs	r2, #128	; 0x80
 80034e4:	0092      	lsls	r2, r2, #2
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d011      	beq.n	800350e <UART_SetConfig+0x31a>
 80034ea:	2280      	movs	r2, #128	; 0x80
 80034ec:	0092      	lsls	r2, r2, #2
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d83b      	bhi.n	800356a <UART_SetConfig+0x376>
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d004      	beq.n	8003500 <UART_SetConfig+0x30c>
 80034f6:	2280      	movs	r2, #128	; 0x80
 80034f8:	0052      	lsls	r2, r2, #1
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d00e      	beq.n	800351c <UART_SetConfig+0x328>
 80034fe:	e034      	b.n	800356a <UART_SetConfig+0x376>
 8003500:	231b      	movs	r3, #27
 8003502:	2220      	movs	r2, #32
 8003504:	189b      	adds	r3, r3, r2
 8003506:	19db      	adds	r3, r3, r7
 8003508:	2200      	movs	r2, #0
 800350a:	701a      	strb	r2, [r3, #0]
 800350c:	e03a      	b.n	8003584 <UART_SetConfig+0x390>
 800350e:	231b      	movs	r3, #27
 8003510:	2220      	movs	r2, #32
 8003512:	189b      	adds	r3, r3, r2
 8003514:	19db      	adds	r3, r3, r7
 8003516:	2202      	movs	r2, #2
 8003518:	701a      	strb	r2, [r3, #0]
 800351a:	e033      	b.n	8003584 <UART_SetConfig+0x390>
 800351c:	231b      	movs	r3, #27
 800351e:	2220      	movs	r2, #32
 8003520:	189b      	adds	r3, r3, r2
 8003522:	19db      	adds	r3, r3, r7
 8003524:	2204      	movs	r2, #4
 8003526:	701a      	strb	r2, [r3, #0]
 8003528:	e02c      	b.n	8003584 <UART_SetConfig+0x390>
 800352a:	46c0      	nop			; (mov r8, r8)
 800352c:	cfff69f3 	.word	0xcfff69f3
 8003530:	ffffcfff 	.word	0xffffcfff
 8003534:	40008000 	.word	0x40008000
 8003538:	40008400 	.word	0x40008400
 800353c:	11fff4ff 	.word	0x11fff4ff
 8003540:	40013800 	.word	0x40013800
 8003544:	40021000 	.word	0x40021000
 8003548:	40004400 	.word	0x40004400
 800354c:	40004800 	.word	0x40004800
 8003550:	40004c00 	.word	0x40004c00
 8003554:	40005000 	.word	0x40005000
 8003558:	40013c00 	.word	0x40013c00
 800355c:	231b      	movs	r3, #27
 800355e:	2220      	movs	r2, #32
 8003560:	189b      	adds	r3, r3, r2
 8003562:	19db      	adds	r3, r3, r7
 8003564:	2208      	movs	r2, #8
 8003566:	701a      	strb	r2, [r3, #0]
 8003568:	e00c      	b.n	8003584 <UART_SetConfig+0x390>
 800356a:	231b      	movs	r3, #27
 800356c:	2220      	movs	r2, #32
 800356e:	189b      	adds	r3, r3, r2
 8003570:	19db      	adds	r3, r3, r7
 8003572:	2210      	movs	r2, #16
 8003574:	701a      	strb	r2, [r3, #0]
 8003576:	e005      	b.n	8003584 <UART_SetConfig+0x390>
 8003578:	231b      	movs	r3, #27
 800357a:	2220      	movs	r2, #32
 800357c:	189b      	adds	r3, r3, r2
 800357e:	19db      	adds	r3, r3, r7
 8003580:	2210      	movs	r2, #16
 8003582:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4ac1      	ldr	r2, [pc, #772]	; (8003890 <UART_SetConfig+0x69c>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d005      	beq.n	800359a <UART_SetConfig+0x3a6>
 800358e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4ac0      	ldr	r2, [pc, #768]	; (8003894 <UART_SetConfig+0x6a0>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d000      	beq.n	800359a <UART_SetConfig+0x3a6>
 8003598:	e093      	b.n	80036c2 <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800359a:	231b      	movs	r3, #27
 800359c:	2220      	movs	r2, #32
 800359e:	189b      	adds	r3, r3, r2
 80035a0:	19db      	adds	r3, r3, r7
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	2b08      	cmp	r3, #8
 80035a6:	d015      	beq.n	80035d4 <UART_SetConfig+0x3e0>
 80035a8:	dc18      	bgt.n	80035dc <UART_SetConfig+0x3e8>
 80035aa:	2b04      	cmp	r3, #4
 80035ac:	d00d      	beq.n	80035ca <UART_SetConfig+0x3d6>
 80035ae:	dc15      	bgt.n	80035dc <UART_SetConfig+0x3e8>
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d002      	beq.n	80035ba <UART_SetConfig+0x3c6>
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d005      	beq.n	80035c4 <UART_SetConfig+0x3d0>
 80035b8:	e010      	b.n	80035dc <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035ba:	f7fe fe13 	bl	80021e4 <HAL_RCC_GetPCLK1Freq>
 80035be:	0003      	movs	r3, r0
 80035c0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80035c2:	e014      	b.n	80035ee <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035c4:	4bb4      	ldr	r3, [pc, #720]	; (8003898 <UART_SetConfig+0x6a4>)
 80035c6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80035c8:	e011      	b.n	80035ee <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035ca:	f7fe fd7f 	bl	80020cc <HAL_RCC_GetSysClockFreq>
 80035ce:	0003      	movs	r3, r0
 80035d0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80035d2:	e00c      	b.n	80035ee <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035d4:	2380      	movs	r3, #128	; 0x80
 80035d6:	021b      	lsls	r3, r3, #8
 80035d8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80035da:	e008      	b.n	80035ee <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 80035dc:	2300      	movs	r3, #0
 80035de:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80035e0:	231a      	movs	r3, #26
 80035e2:	2220      	movs	r2, #32
 80035e4:	189b      	adds	r3, r3, r2
 80035e6:	19db      	adds	r3, r3, r7
 80035e8:	2201      	movs	r2, #1
 80035ea:	701a      	strb	r2, [r3, #0]
        break;
 80035ec:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80035ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d100      	bne.n	80035f6 <UART_SetConfig+0x402>
 80035f4:	e135      	b.n	8003862 <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80035f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035fa:	4ba8      	ldr	r3, [pc, #672]	; (800389c <UART_SetConfig+0x6a8>)
 80035fc:	0052      	lsls	r2, r2, #1
 80035fe:	5ad3      	ldrh	r3, [r2, r3]
 8003600:	0019      	movs	r1, r3
 8003602:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003604:	f7fc fd90 	bl	8000128 <__udivsi3>
 8003608:	0003      	movs	r3, r0
 800360a:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800360c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360e:	685a      	ldr	r2, [r3, #4]
 8003610:	0013      	movs	r3, r2
 8003612:	005b      	lsls	r3, r3, #1
 8003614:	189b      	adds	r3, r3, r2
 8003616:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003618:	429a      	cmp	r2, r3
 800361a:	d305      	bcc.n	8003628 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800361c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003622:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003624:	429a      	cmp	r2, r3
 8003626:	d906      	bls.n	8003636 <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8003628:	231a      	movs	r3, #26
 800362a:	2220      	movs	r2, #32
 800362c:	189b      	adds	r3, r3, r2
 800362e:	19db      	adds	r3, r3, r7
 8003630:	2201      	movs	r2, #1
 8003632:	701a      	strb	r2, [r3, #0]
 8003634:	e044      	b.n	80036c0 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003638:	61bb      	str	r3, [r7, #24]
 800363a:	2300      	movs	r3, #0
 800363c:	61fb      	str	r3, [r7, #28]
 800363e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003640:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003642:	4b96      	ldr	r3, [pc, #600]	; (800389c <UART_SetConfig+0x6a8>)
 8003644:	0052      	lsls	r2, r2, #1
 8003646:	5ad3      	ldrh	r3, [r2, r3]
 8003648:	613b      	str	r3, [r7, #16]
 800364a:	2300      	movs	r3, #0
 800364c:	617b      	str	r3, [r7, #20]
 800364e:	693a      	ldr	r2, [r7, #16]
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	69b8      	ldr	r0, [r7, #24]
 8003654:	69f9      	ldr	r1, [r7, #28]
 8003656:	f7fc fedd 	bl	8000414 <__aeabi_uldivmod>
 800365a:	0002      	movs	r2, r0
 800365c:	000b      	movs	r3, r1
 800365e:	0e11      	lsrs	r1, r2, #24
 8003660:	021d      	lsls	r5, r3, #8
 8003662:	430d      	orrs	r5, r1
 8003664:	0214      	lsls	r4, r2, #8
 8003666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	085b      	lsrs	r3, r3, #1
 800366c:	60bb      	str	r3, [r7, #8]
 800366e:	2300      	movs	r3, #0
 8003670:	60fb      	str	r3, [r7, #12]
 8003672:	68b8      	ldr	r0, [r7, #8]
 8003674:	68f9      	ldr	r1, [r7, #12]
 8003676:	1900      	adds	r0, r0, r4
 8003678:	4169      	adcs	r1, r5
 800367a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	603b      	str	r3, [r7, #0]
 8003680:	2300      	movs	r3, #0
 8003682:	607b      	str	r3, [r7, #4]
 8003684:	683a      	ldr	r2, [r7, #0]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f7fc fec4 	bl	8000414 <__aeabi_uldivmod>
 800368c:	0002      	movs	r2, r0
 800368e:	000b      	movs	r3, r1
 8003690:	0013      	movs	r3, r2
 8003692:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003694:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003696:	23c0      	movs	r3, #192	; 0xc0
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	429a      	cmp	r2, r3
 800369c:	d309      	bcc.n	80036b2 <UART_SetConfig+0x4be>
 800369e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036a0:	2380      	movs	r3, #128	; 0x80
 80036a2:	035b      	lsls	r3, r3, #13
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d204      	bcs.n	80036b2 <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 80036a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036ae:	60da      	str	r2, [r3, #12]
 80036b0:	e006      	b.n	80036c0 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 80036b2:	231a      	movs	r3, #26
 80036b4:	2220      	movs	r2, #32
 80036b6:	189b      	adds	r3, r3, r2
 80036b8:	19db      	adds	r3, r3, r7
 80036ba:	2201      	movs	r2, #1
 80036bc:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 80036be:	e0d0      	b.n	8003862 <UART_SetConfig+0x66e>
 80036c0:	e0cf      	b.n	8003862 <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c4:	69da      	ldr	r2, [r3, #28]
 80036c6:	2380      	movs	r3, #128	; 0x80
 80036c8:	021b      	lsls	r3, r3, #8
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d000      	beq.n	80036d0 <UART_SetConfig+0x4dc>
 80036ce:	e070      	b.n	80037b2 <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 80036d0:	231b      	movs	r3, #27
 80036d2:	2220      	movs	r2, #32
 80036d4:	189b      	adds	r3, r3, r2
 80036d6:	19db      	adds	r3, r3, r7
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	2b08      	cmp	r3, #8
 80036dc:	d015      	beq.n	800370a <UART_SetConfig+0x516>
 80036de:	dc18      	bgt.n	8003712 <UART_SetConfig+0x51e>
 80036e0:	2b04      	cmp	r3, #4
 80036e2:	d00d      	beq.n	8003700 <UART_SetConfig+0x50c>
 80036e4:	dc15      	bgt.n	8003712 <UART_SetConfig+0x51e>
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d002      	beq.n	80036f0 <UART_SetConfig+0x4fc>
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d005      	beq.n	80036fa <UART_SetConfig+0x506>
 80036ee:	e010      	b.n	8003712 <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036f0:	f7fe fd78 	bl	80021e4 <HAL_RCC_GetPCLK1Freq>
 80036f4:	0003      	movs	r3, r0
 80036f6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80036f8:	e014      	b.n	8003724 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036fa:	4b67      	ldr	r3, [pc, #412]	; (8003898 <UART_SetConfig+0x6a4>)
 80036fc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80036fe:	e011      	b.n	8003724 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003700:	f7fe fce4 	bl	80020cc <HAL_RCC_GetSysClockFreq>
 8003704:	0003      	movs	r3, r0
 8003706:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003708:	e00c      	b.n	8003724 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800370a:	2380      	movs	r3, #128	; 0x80
 800370c:	021b      	lsls	r3, r3, #8
 800370e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003710:	e008      	b.n	8003724 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 8003712:	2300      	movs	r3, #0
 8003714:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003716:	231a      	movs	r3, #26
 8003718:	2220      	movs	r2, #32
 800371a:	189b      	adds	r3, r3, r2
 800371c:	19db      	adds	r3, r3, r7
 800371e:	2201      	movs	r2, #1
 8003720:	701a      	strb	r2, [r3, #0]
        break;
 8003722:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003726:	2b00      	cmp	r3, #0
 8003728:	d100      	bne.n	800372c <UART_SetConfig+0x538>
 800372a:	e09a      	b.n	8003862 <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800372c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003730:	4b5a      	ldr	r3, [pc, #360]	; (800389c <UART_SetConfig+0x6a8>)
 8003732:	0052      	lsls	r2, r2, #1
 8003734:	5ad3      	ldrh	r3, [r2, r3]
 8003736:	0019      	movs	r1, r3
 8003738:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800373a:	f7fc fcf5 	bl	8000128 <__udivsi3>
 800373e:	0003      	movs	r3, r0
 8003740:	005a      	lsls	r2, r3, #1
 8003742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	085b      	lsrs	r3, r3, #1
 8003748:	18d2      	adds	r2, r2, r3
 800374a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	0019      	movs	r1, r3
 8003750:	0010      	movs	r0, r2
 8003752:	f7fc fce9 	bl	8000128 <__udivsi3>
 8003756:	0003      	movs	r3, r0
 8003758:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800375a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800375c:	2b0f      	cmp	r3, #15
 800375e:	d921      	bls.n	80037a4 <UART_SetConfig+0x5b0>
 8003760:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003762:	2380      	movs	r3, #128	; 0x80
 8003764:	025b      	lsls	r3, r3, #9
 8003766:	429a      	cmp	r2, r3
 8003768:	d21c      	bcs.n	80037a4 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800376a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800376c:	b29a      	uxth	r2, r3
 800376e:	200e      	movs	r0, #14
 8003770:	2420      	movs	r4, #32
 8003772:	1903      	adds	r3, r0, r4
 8003774:	19db      	adds	r3, r3, r7
 8003776:	210f      	movs	r1, #15
 8003778:	438a      	bics	r2, r1
 800377a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800377c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800377e:	085b      	lsrs	r3, r3, #1
 8003780:	b29b      	uxth	r3, r3
 8003782:	2207      	movs	r2, #7
 8003784:	4013      	ands	r3, r2
 8003786:	b299      	uxth	r1, r3
 8003788:	1903      	adds	r3, r0, r4
 800378a:	19db      	adds	r3, r3, r7
 800378c:	1902      	adds	r2, r0, r4
 800378e:	19d2      	adds	r2, r2, r7
 8003790:	8812      	ldrh	r2, [r2, #0]
 8003792:	430a      	orrs	r2, r1
 8003794:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	1902      	adds	r2, r0, r4
 800379c:	19d2      	adds	r2, r2, r7
 800379e:	8812      	ldrh	r2, [r2, #0]
 80037a0:	60da      	str	r2, [r3, #12]
 80037a2:	e05e      	b.n	8003862 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 80037a4:	231a      	movs	r3, #26
 80037a6:	2220      	movs	r2, #32
 80037a8:	189b      	adds	r3, r3, r2
 80037aa:	19db      	adds	r3, r3, r7
 80037ac:	2201      	movs	r2, #1
 80037ae:	701a      	strb	r2, [r3, #0]
 80037b0:	e057      	b.n	8003862 <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 80037b2:	231b      	movs	r3, #27
 80037b4:	2220      	movs	r2, #32
 80037b6:	189b      	adds	r3, r3, r2
 80037b8:	19db      	adds	r3, r3, r7
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	2b08      	cmp	r3, #8
 80037be:	d015      	beq.n	80037ec <UART_SetConfig+0x5f8>
 80037c0:	dc18      	bgt.n	80037f4 <UART_SetConfig+0x600>
 80037c2:	2b04      	cmp	r3, #4
 80037c4:	d00d      	beq.n	80037e2 <UART_SetConfig+0x5ee>
 80037c6:	dc15      	bgt.n	80037f4 <UART_SetConfig+0x600>
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d002      	beq.n	80037d2 <UART_SetConfig+0x5de>
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d005      	beq.n	80037dc <UART_SetConfig+0x5e8>
 80037d0:	e010      	b.n	80037f4 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037d2:	f7fe fd07 	bl	80021e4 <HAL_RCC_GetPCLK1Freq>
 80037d6:	0003      	movs	r3, r0
 80037d8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80037da:	e014      	b.n	8003806 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037dc:	4b2e      	ldr	r3, [pc, #184]	; (8003898 <UART_SetConfig+0x6a4>)
 80037de:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80037e0:	e011      	b.n	8003806 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037e2:	f7fe fc73 	bl	80020cc <HAL_RCC_GetSysClockFreq>
 80037e6:	0003      	movs	r3, r0
 80037e8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80037ea:	e00c      	b.n	8003806 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037ec:	2380      	movs	r3, #128	; 0x80
 80037ee:	021b      	lsls	r3, r3, #8
 80037f0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80037f2:	e008      	b.n	8003806 <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 80037f4:	2300      	movs	r3, #0
 80037f6:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80037f8:	231a      	movs	r3, #26
 80037fa:	2220      	movs	r2, #32
 80037fc:	189b      	adds	r3, r3, r2
 80037fe:	19db      	adds	r3, r3, r7
 8003800:	2201      	movs	r2, #1
 8003802:	701a      	strb	r2, [r3, #0]
        break;
 8003804:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003808:	2b00      	cmp	r3, #0
 800380a:	d02a      	beq.n	8003862 <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800380c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003810:	4b22      	ldr	r3, [pc, #136]	; (800389c <UART_SetConfig+0x6a8>)
 8003812:	0052      	lsls	r2, r2, #1
 8003814:	5ad3      	ldrh	r3, [r2, r3]
 8003816:	0019      	movs	r1, r3
 8003818:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800381a:	f7fc fc85 	bl	8000128 <__udivsi3>
 800381e:	0003      	movs	r3, r0
 8003820:	001a      	movs	r2, r3
 8003822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	085b      	lsrs	r3, r3, #1
 8003828:	18d2      	adds	r2, r2, r3
 800382a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	0019      	movs	r1, r3
 8003830:	0010      	movs	r0, r2
 8003832:	f7fc fc79 	bl	8000128 <__udivsi3>
 8003836:	0003      	movs	r3, r0
 8003838:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800383a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800383c:	2b0f      	cmp	r3, #15
 800383e:	d90a      	bls.n	8003856 <UART_SetConfig+0x662>
 8003840:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003842:	2380      	movs	r3, #128	; 0x80
 8003844:	025b      	lsls	r3, r3, #9
 8003846:	429a      	cmp	r2, r3
 8003848:	d205      	bcs.n	8003856 <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800384a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800384c:	b29a      	uxth	r2, r3
 800384e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	60da      	str	r2, [r3, #12]
 8003854:	e005      	b.n	8003862 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8003856:	231a      	movs	r3, #26
 8003858:	2220      	movs	r2, #32
 800385a:	189b      	adds	r3, r3, r2
 800385c:	19db      	adds	r3, r3, r7
 800385e:	2201      	movs	r2, #1
 8003860:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003864:	226a      	movs	r2, #106	; 0x6a
 8003866:	2101      	movs	r1, #1
 8003868:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800386a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386c:	2268      	movs	r2, #104	; 0x68
 800386e:	2101      	movs	r1, #1
 8003870:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003874:	2200      	movs	r2, #0
 8003876:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387a:	2200      	movs	r2, #0
 800387c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800387e:	231a      	movs	r3, #26
 8003880:	2220      	movs	r2, #32
 8003882:	189b      	adds	r3, r3, r2
 8003884:	19db      	adds	r3, r3, r7
 8003886:	781b      	ldrb	r3, [r3, #0]
}
 8003888:	0018      	movs	r0, r3
 800388a:	46bd      	mov	sp, r7
 800388c:	b010      	add	sp, #64	; 0x40
 800388e:	bdb0      	pop	{r4, r5, r7, pc}
 8003890:	40008000 	.word	0x40008000
 8003894:	40008400 	.word	0x40008400
 8003898:	00f42400 	.word	0x00f42400
 800389c:	080079e4 	.word	0x080079e4

080038a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ac:	2208      	movs	r2, #8
 80038ae:	4013      	ands	r3, r2
 80038b0:	d00b      	beq.n	80038ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	4a4a      	ldr	r2, [pc, #296]	; (80039e4 <UART_AdvFeatureConfig+0x144>)
 80038ba:	4013      	ands	r3, r2
 80038bc:	0019      	movs	r1, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	430a      	orrs	r2, r1
 80038c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ce:	2201      	movs	r2, #1
 80038d0:	4013      	ands	r3, r2
 80038d2:	d00b      	beq.n	80038ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	4a43      	ldr	r2, [pc, #268]	; (80039e8 <UART_AdvFeatureConfig+0x148>)
 80038dc:	4013      	ands	r3, r2
 80038de:	0019      	movs	r1, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	430a      	orrs	r2, r1
 80038ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f0:	2202      	movs	r2, #2
 80038f2:	4013      	ands	r3, r2
 80038f4:	d00b      	beq.n	800390e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	4a3b      	ldr	r2, [pc, #236]	; (80039ec <UART_AdvFeatureConfig+0x14c>)
 80038fe:	4013      	ands	r3, r2
 8003900:	0019      	movs	r1, r3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	430a      	orrs	r2, r1
 800390c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003912:	2204      	movs	r2, #4
 8003914:	4013      	ands	r3, r2
 8003916:	d00b      	beq.n	8003930 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	4a34      	ldr	r2, [pc, #208]	; (80039f0 <UART_AdvFeatureConfig+0x150>)
 8003920:	4013      	ands	r3, r2
 8003922:	0019      	movs	r1, r3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	430a      	orrs	r2, r1
 800392e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003934:	2210      	movs	r2, #16
 8003936:	4013      	ands	r3, r2
 8003938:	d00b      	beq.n	8003952 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	4a2c      	ldr	r2, [pc, #176]	; (80039f4 <UART_AdvFeatureConfig+0x154>)
 8003942:	4013      	ands	r3, r2
 8003944:	0019      	movs	r1, r3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	430a      	orrs	r2, r1
 8003950:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003956:	2220      	movs	r2, #32
 8003958:	4013      	ands	r3, r2
 800395a:	d00b      	beq.n	8003974 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	4a25      	ldr	r2, [pc, #148]	; (80039f8 <UART_AdvFeatureConfig+0x158>)
 8003964:	4013      	ands	r3, r2
 8003966:	0019      	movs	r1, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	430a      	orrs	r2, r1
 8003972:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003978:	2240      	movs	r2, #64	; 0x40
 800397a:	4013      	ands	r3, r2
 800397c:	d01d      	beq.n	80039ba <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	4a1d      	ldr	r2, [pc, #116]	; (80039fc <UART_AdvFeatureConfig+0x15c>)
 8003986:	4013      	ands	r3, r2
 8003988:	0019      	movs	r1, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	430a      	orrs	r2, r1
 8003994:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800399a:	2380      	movs	r3, #128	; 0x80
 800399c:	035b      	lsls	r3, r3, #13
 800399e:	429a      	cmp	r2, r3
 80039a0:	d10b      	bne.n	80039ba <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	4a15      	ldr	r2, [pc, #84]	; (8003a00 <UART_AdvFeatureConfig+0x160>)
 80039aa:	4013      	ands	r3, r2
 80039ac:	0019      	movs	r1, r3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	430a      	orrs	r2, r1
 80039b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039be:	2280      	movs	r2, #128	; 0x80
 80039c0:	4013      	ands	r3, r2
 80039c2:	d00b      	beq.n	80039dc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	4a0e      	ldr	r2, [pc, #56]	; (8003a04 <UART_AdvFeatureConfig+0x164>)
 80039cc:	4013      	ands	r3, r2
 80039ce:	0019      	movs	r1, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	430a      	orrs	r2, r1
 80039da:	605a      	str	r2, [r3, #4]
  }
}
 80039dc:	46c0      	nop			; (mov r8, r8)
 80039de:	46bd      	mov	sp, r7
 80039e0:	b002      	add	sp, #8
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	ffff7fff 	.word	0xffff7fff
 80039e8:	fffdffff 	.word	0xfffdffff
 80039ec:	fffeffff 	.word	0xfffeffff
 80039f0:	fffbffff 	.word	0xfffbffff
 80039f4:	ffffefff 	.word	0xffffefff
 80039f8:	ffffdfff 	.word	0xffffdfff
 80039fc:	ffefffff 	.word	0xffefffff
 8003a00:	ff9fffff 	.word	0xff9fffff
 8003a04:	fff7ffff 	.word	0xfff7ffff

08003a08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b092      	sub	sp, #72	; 0x48
 8003a0c:	af02      	add	r7, sp, #8
 8003a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2290      	movs	r2, #144	; 0x90
 8003a14:	2100      	movs	r1, #0
 8003a16:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a18:	f7fd fbe2 	bl	80011e0 <HAL_GetTick>
 8003a1c:	0003      	movs	r3, r0
 8003a1e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2208      	movs	r2, #8
 8003a28:	4013      	ands	r3, r2
 8003a2a:	2b08      	cmp	r3, #8
 8003a2c:	d12d      	bne.n	8003a8a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a30:	2280      	movs	r2, #128	; 0x80
 8003a32:	0391      	lsls	r1, r2, #14
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	4a47      	ldr	r2, [pc, #284]	; (8003b54 <UART_CheckIdleState+0x14c>)
 8003a38:	9200      	str	r2, [sp, #0]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f000 f88e 	bl	8003b5c <UART_WaitOnFlagUntilTimeout>
 8003a40:	1e03      	subs	r3, r0, #0
 8003a42:	d022      	beq.n	8003a8a <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a44:	f3ef 8310 	mrs	r3, PRIMASK
 8003a48:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003a4c:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a4e:	2301      	movs	r3, #1
 8003a50:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a54:	f383 8810 	msr	PRIMASK, r3
}
 8003a58:	46c0      	nop			; (mov r8, r8)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	2180      	movs	r1, #128	; 0x80
 8003a66:	438a      	bics	r2, r1
 8003a68:	601a      	str	r2, [r3, #0]
 8003a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a70:	f383 8810 	msr	PRIMASK, r3
}
 8003a74:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2288      	movs	r2, #136	; 0x88
 8003a7a:	2120      	movs	r1, #32
 8003a7c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2284      	movs	r2, #132	; 0x84
 8003a82:	2100      	movs	r1, #0
 8003a84:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e060      	b.n	8003b4c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2204      	movs	r2, #4
 8003a92:	4013      	ands	r3, r2
 8003a94:	2b04      	cmp	r3, #4
 8003a96:	d146      	bne.n	8003b26 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a9a:	2280      	movs	r2, #128	; 0x80
 8003a9c:	03d1      	lsls	r1, r2, #15
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	4a2c      	ldr	r2, [pc, #176]	; (8003b54 <UART_CheckIdleState+0x14c>)
 8003aa2:	9200      	str	r2, [sp, #0]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f000 f859 	bl	8003b5c <UART_WaitOnFlagUntilTimeout>
 8003aaa:	1e03      	subs	r3, r0, #0
 8003aac:	d03b      	beq.n	8003b26 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003aae:	f3ef 8310 	mrs	r3, PRIMASK
 8003ab2:	60fb      	str	r3, [r7, #12]
  return(result);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003ab6:	637b      	str	r3, [r7, #52]	; 0x34
 8003ab8:	2301      	movs	r3, #1
 8003aba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	f383 8810 	msr	PRIMASK, r3
}
 8003ac2:	46c0      	nop			; (mov r8, r8)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4922      	ldr	r1, [pc, #136]	; (8003b58 <UART_CheckIdleState+0x150>)
 8003ad0:	400a      	ands	r2, r1
 8003ad2:	601a      	str	r2, [r3, #0]
 8003ad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ad6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	f383 8810 	msr	PRIMASK, r3
}
 8003ade:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ae0:	f3ef 8310 	mrs	r3, PRIMASK
 8003ae4:	61bb      	str	r3, [r7, #24]
  return(result);
 8003ae6:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ae8:	633b      	str	r3, [r7, #48]	; 0x30
 8003aea:	2301      	movs	r3, #1
 8003aec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	f383 8810 	msr	PRIMASK, r3
}
 8003af4:	46c0      	nop			; (mov r8, r8)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	689a      	ldr	r2, [r3, #8]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2101      	movs	r1, #1
 8003b02:	438a      	bics	r2, r1
 8003b04:	609a      	str	r2, [r3, #8]
 8003b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b08:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b0a:	6a3b      	ldr	r3, [r7, #32]
 8003b0c:	f383 8810 	msr	PRIMASK, r3
}
 8003b10:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	228c      	movs	r2, #140	; 0x8c
 8003b16:	2120      	movs	r1, #32
 8003b18:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2284      	movs	r2, #132	; 0x84
 8003b1e:	2100      	movs	r1, #0
 8003b20:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e012      	b.n	8003b4c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2288      	movs	r2, #136	; 0x88
 8003b2a:	2120      	movs	r1, #32
 8003b2c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	228c      	movs	r2, #140	; 0x8c
 8003b32:	2120      	movs	r1, #32
 8003b34:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2284      	movs	r2, #132	; 0x84
 8003b46:	2100      	movs	r1, #0
 8003b48:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b4a:	2300      	movs	r3, #0
}
 8003b4c:	0018      	movs	r0, r3
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	b010      	add	sp, #64	; 0x40
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	01ffffff 	.word	0x01ffffff
 8003b58:	fffffedf 	.word	0xfffffedf

08003b5c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	60b9      	str	r1, [r7, #8]
 8003b66:	603b      	str	r3, [r7, #0]
 8003b68:	1dfb      	adds	r3, r7, #7
 8003b6a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b6c:	e051      	b.n	8003c12 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b6e:	69bb      	ldr	r3, [r7, #24]
 8003b70:	3301      	adds	r3, #1
 8003b72:	d04e      	beq.n	8003c12 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b74:	f7fd fb34 	bl	80011e0 <HAL_GetTick>
 8003b78:	0002      	movs	r2, r0
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	69ba      	ldr	r2, [r7, #24]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d302      	bcc.n	8003b8a <UART_WaitOnFlagUntilTimeout+0x2e>
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d101      	bne.n	8003b8e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e051      	b.n	8003c32 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2204      	movs	r2, #4
 8003b96:	4013      	ands	r3, r2
 8003b98:	d03b      	beq.n	8003c12 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	2b80      	cmp	r3, #128	; 0x80
 8003b9e:	d038      	beq.n	8003c12 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	2b40      	cmp	r3, #64	; 0x40
 8003ba4:	d035      	beq.n	8003c12 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	69db      	ldr	r3, [r3, #28]
 8003bac:	2208      	movs	r2, #8
 8003bae:	4013      	ands	r3, r2
 8003bb0:	2b08      	cmp	r3, #8
 8003bb2:	d111      	bne.n	8003bd8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	2208      	movs	r2, #8
 8003bba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	0018      	movs	r0, r3
 8003bc0:	f000 f83c 	bl	8003c3c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2290      	movs	r2, #144	; 0x90
 8003bc8:	2108      	movs	r1, #8
 8003bca:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2284      	movs	r2, #132	; 0x84
 8003bd0:	2100      	movs	r1, #0
 8003bd2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e02c      	b.n	8003c32 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	69da      	ldr	r2, [r3, #28]
 8003bde:	2380      	movs	r3, #128	; 0x80
 8003be0:	011b      	lsls	r3, r3, #4
 8003be2:	401a      	ands	r2, r3
 8003be4:	2380      	movs	r3, #128	; 0x80
 8003be6:	011b      	lsls	r3, r3, #4
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d112      	bne.n	8003c12 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2280      	movs	r2, #128	; 0x80
 8003bf2:	0112      	lsls	r2, r2, #4
 8003bf4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	0018      	movs	r0, r3
 8003bfa:	f000 f81f 	bl	8003c3c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2290      	movs	r2, #144	; 0x90
 8003c02:	2120      	movs	r1, #32
 8003c04:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2284      	movs	r2, #132	; 0x84
 8003c0a:	2100      	movs	r1, #0
 8003c0c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e00f      	b.n	8003c32 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	69db      	ldr	r3, [r3, #28]
 8003c18:	68ba      	ldr	r2, [r7, #8]
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	68ba      	ldr	r2, [r7, #8]
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	425a      	negs	r2, r3
 8003c22:	4153      	adcs	r3, r2
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	001a      	movs	r2, r3
 8003c28:	1dfb      	adds	r3, r7, #7
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d09e      	beq.n	8003b6e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c30:	2300      	movs	r3, #0
}
 8003c32:	0018      	movs	r0, r3
 8003c34:	46bd      	mov	sp, r7
 8003c36:	b004      	add	sp, #16
 8003c38:	bd80      	pop	{r7, pc}
	...

08003c3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b08e      	sub	sp, #56	; 0x38
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c44:	f3ef 8310 	mrs	r3, PRIMASK
 8003c48:	617b      	str	r3, [r7, #20]
  return(result);
 8003c4a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003c4c:	637b      	str	r3, [r7, #52]	; 0x34
 8003c4e:	2301      	movs	r3, #1
 8003c50:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	f383 8810 	msr	PRIMASK, r3
}
 8003c58:	46c0      	nop			; (mov r8, r8)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4926      	ldr	r1, [pc, #152]	; (8003d00 <UART_EndRxTransfer+0xc4>)
 8003c66:	400a      	ands	r2, r1
 8003c68:	601a      	str	r2, [r3, #0]
 8003c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c6c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	f383 8810 	msr	PRIMASK, r3
}
 8003c74:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c76:	f3ef 8310 	mrs	r3, PRIMASK
 8003c7a:	623b      	str	r3, [r7, #32]
  return(result);
 8003c7c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003c7e:	633b      	str	r3, [r7, #48]	; 0x30
 8003c80:	2301      	movs	r3, #1
 8003c82:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c86:	f383 8810 	msr	PRIMASK, r3
}
 8003c8a:	46c0      	nop			; (mov r8, r8)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	689a      	ldr	r2, [r3, #8]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	491b      	ldr	r1, [pc, #108]	; (8003d04 <UART_EndRxTransfer+0xc8>)
 8003c98:	400a      	ands	r2, r1
 8003c9a:	609a      	str	r2, [r3, #8]
 8003c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c9e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ca2:	f383 8810 	msr	PRIMASK, r3
}
 8003ca6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d118      	bne.n	8003ce2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cb0:	f3ef 8310 	mrs	r3, PRIMASK
 8003cb4:	60bb      	str	r3, [r7, #8]
  return(result);
 8003cb6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cba:	2301      	movs	r3, #1
 8003cbc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f383 8810 	msr	PRIMASK, r3
}
 8003cc4:	46c0      	nop			; (mov r8, r8)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2110      	movs	r1, #16
 8003cd2:	438a      	bics	r2, r1
 8003cd4:	601a      	str	r2, [r3, #0]
 8003cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cd8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	f383 8810 	msr	PRIMASK, r3
}
 8003ce0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	228c      	movs	r2, #140	; 0x8c
 8003ce6:	2120      	movs	r1, #32
 8003ce8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003cf6:	46c0      	nop			; (mov r8, r8)
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	b00e      	add	sp, #56	; 0x38
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	46c0      	nop			; (mov r8, r8)
 8003d00:	fffffedf 	.word	0xfffffedf
 8003d04:	effffffe 	.word	0xeffffffe

08003d08 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2284      	movs	r2, #132	; 0x84
 8003d14:	5c9b      	ldrb	r3, [r3, r2]
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d101      	bne.n	8003d1e <HAL_UARTEx_DisableFifoMode+0x16>
 8003d1a:	2302      	movs	r3, #2
 8003d1c:	e027      	b.n	8003d6e <HAL_UARTEx_DisableFifoMode+0x66>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2284      	movs	r2, #132	; 0x84
 8003d22:	2101      	movs	r1, #1
 8003d24:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2288      	movs	r2, #136	; 0x88
 8003d2a:	2124      	movs	r1, #36	; 0x24
 8003d2c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2101      	movs	r1, #1
 8003d42:	438a      	bics	r2, r1
 8003d44:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	4a0b      	ldr	r2, [pc, #44]	; (8003d78 <HAL_UARTEx_DisableFifoMode+0x70>)
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68fa      	ldr	r2, [r7, #12]
 8003d5a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2288      	movs	r2, #136	; 0x88
 8003d60:	2120      	movs	r1, #32
 8003d62:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2284      	movs	r2, #132	; 0x84
 8003d68:	2100      	movs	r1, #0
 8003d6a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	0018      	movs	r0, r3
 8003d70:	46bd      	mov	sp, r7
 8003d72:	b004      	add	sp, #16
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	46c0      	nop			; (mov r8, r8)
 8003d78:	dfffffff 	.word	0xdfffffff

08003d7c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2284      	movs	r2, #132	; 0x84
 8003d8a:	5c9b      	ldrb	r3, [r3, r2]
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d101      	bne.n	8003d94 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003d90:	2302      	movs	r3, #2
 8003d92:	e02e      	b.n	8003df2 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2284      	movs	r2, #132	; 0x84
 8003d98:	2101      	movs	r1, #1
 8003d9a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2288      	movs	r2, #136	; 0x88
 8003da0:	2124      	movs	r1, #36	; 0x24
 8003da2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	2101      	movs	r1, #1
 8003db8:	438a      	bics	r2, r1
 8003dba:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	00db      	lsls	r3, r3, #3
 8003dc4:	08d9      	lsrs	r1, r3, #3
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	683a      	ldr	r2, [r7, #0]
 8003dcc:	430a      	orrs	r2, r1
 8003dce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	0018      	movs	r0, r3
 8003dd4:	f000 f854 	bl	8003e80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68fa      	ldr	r2, [r7, #12]
 8003dde:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2288      	movs	r2, #136	; 0x88
 8003de4:	2120      	movs	r1, #32
 8003de6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2284      	movs	r2, #132	; 0x84
 8003dec:	2100      	movs	r1, #0
 8003dee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	0018      	movs	r0, r3
 8003df4:	46bd      	mov	sp, r7
 8003df6:	b004      	add	sp, #16
 8003df8:	bd80      	pop	{r7, pc}
	...

08003dfc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b084      	sub	sp, #16
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2284      	movs	r2, #132	; 0x84
 8003e0a:	5c9b      	ldrb	r3, [r3, r2]
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d101      	bne.n	8003e14 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003e10:	2302      	movs	r3, #2
 8003e12:	e02f      	b.n	8003e74 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2284      	movs	r2, #132	; 0x84
 8003e18:	2101      	movs	r1, #1
 8003e1a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2288      	movs	r2, #136	; 0x88
 8003e20:	2124      	movs	r1, #36	; 0x24
 8003e22:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	2101      	movs	r1, #1
 8003e38:	438a      	bics	r2, r1
 8003e3a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	4a0e      	ldr	r2, [pc, #56]	; (8003e7c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003e44:	4013      	ands	r3, r2
 8003e46:	0019      	movs	r1, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	683a      	ldr	r2, [r7, #0]
 8003e4e:	430a      	orrs	r2, r1
 8003e50:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	0018      	movs	r0, r3
 8003e56:	f000 f813 	bl	8003e80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	68fa      	ldr	r2, [r7, #12]
 8003e60:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2288      	movs	r2, #136	; 0x88
 8003e66:	2120      	movs	r1, #32
 8003e68:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2284      	movs	r2, #132	; 0x84
 8003e6e:	2100      	movs	r1, #0
 8003e70:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e72:	2300      	movs	r3, #0
}
 8003e74:	0018      	movs	r0, r3
 8003e76:	46bd      	mov	sp, r7
 8003e78:	b004      	add	sp, #16
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	f1ffffff 	.word	0xf1ffffff

08003e80 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003e80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e82:	b085      	sub	sp, #20
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d108      	bne.n	8003ea2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	226a      	movs	r2, #106	; 0x6a
 8003e94:	2101      	movs	r1, #1
 8003e96:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2268      	movs	r2, #104	; 0x68
 8003e9c:	2101      	movs	r1, #1
 8003e9e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003ea0:	e043      	b.n	8003f2a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003ea2:	260f      	movs	r6, #15
 8003ea4:	19bb      	adds	r3, r7, r6
 8003ea6:	2208      	movs	r2, #8
 8003ea8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003eaa:	200e      	movs	r0, #14
 8003eac:	183b      	adds	r3, r7, r0
 8003eae:	2208      	movs	r2, #8
 8003eb0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	0e5b      	lsrs	r3, r3, #25
 8003eba:	b2da      	uxtb	r2, r3
 8003ebc:	240d      	movs	r4, #13
 8003ebe:	193b      	adds	r3, r7, r4
 8003ec0:	2107      	movs	r1, #7
 8003ec2:	400a      	ands	r2, r1
 8003ec4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	0f5b      	lsrs	r3, r3, #29
 8003ece:	b2da      	uxtb	r2, r3
 8003ed0:	250c      	movs	r5, #12
 8003ed2:	197b      	adds	r3, r7, r5
 8003ed4:	2107      	movs	r1, #7
 8003ed6:	400a      	ands	r2, r1
 8003ed8:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003eda:	183b      	adds	r3, r7, r0
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	197a      	adds	r2, r7, r5
 8003ee0:	7812      	ldrb	r2, [r2, #0]
 8003ee2:	4914      	ldr	r1, [pc, #80]	; (8003f34 <UARTEx_SetNbDataToProcess+0xb4>)
 8003ee4:	5c8a      	ldrb	r2, [r1, r2]
 8003ee6:	435a      	muls	r2, r3
 8003ee8:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003eea:	197b      	adds	r3, r7, r5
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	4a12      	ldr	r2, [pc, #72]	; (8003f38 <UARTEx_SetNbDataToProcess+0xb8>)
 8003ef0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003ef2:	0019      	movs	r1, r3
 8003ef4:	f7fc f9a2 	bl	800023c <__divsi3>
 8003ef8:	0003      	movs	r3, r0
 8003efa:	b299      	uxth	r1, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	226a      	movs	r2, #106	; 0x6a
 8003f00:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003f02:	19bb      	adds	r3, r7, r6
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	193a      	adds	r2, r7, r4
 8003f08:	7812      	ldrb	r2, [r2, #0]
 8003f0a:	490a      	ldr	r1, [pc, #40]	; (8003f34 <UARTEx_SetNbDataToProcess+0xb4>)
 8003f0c:	5c8a      	ldrb	r2, [r1, r2]
 8003f0e:	435a      	muls	r2, r3
 8003f10:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003f12:	193b      	adds	r3, r7, r4
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	4a08      	ldr	r2, [pc, #32]	; (8003f38 <UARTEx_SetNbDataToProcess+0xb8>)
 8003f18:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003f1a:	0019      	movs	r1, r3
 8003f1c:	f7fc f98e 	bl	800023c <__divsi3>
 8003f20:	0003      	movs	r3, r0
 8003f22:	b299      	uxth	r1, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2268      	movs	r2, #104	; 0x68
 8003f28:	5299      	strh	r1, [r3, r2]
}
 8003f2a:	46c0      	nop			; (mov r8, r8)
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	b005      	add	sp, #20
 8003f30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f32:	46c0      	nop			; (mov r8, r8)
 8003f34:	080079fc 	.word	0x080079fc
 8003f38:	08007a04 	.word	0x08007a04

08003f3c <astronode_send_cfg_sr>:
        }
    }
}

void astronode_send_cfg_sr(void)
{
 8003f3c:	b5b0      	push	{r4, r5, r7, lr}
 8003f3e:	b0e4      	sub	sp, #400	; 0x190
 8003f40:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8003f42:	24c8      	movs	r4, #200	; 0xc8
 8003f44:	193b      	adds	r3, r7, r4
 8003f46:	0018      	movs	r0, r3
 8003f48:	23c6      	movs	r3, #198	; 0xc6
 8003f4a:	001a      	movs	r2, r3
 8003f4c:	2100      	movs	r1, #0
 8003f4e:	f001 fc15 	bl	800577c <memset>
    astronode_app_msg_t answer = {0};
 8003f52:	4b13      	ldr	r3, [pc, #76]	; (8003fa0 <astronode_send_cfg_sr+0x64>)
 8003f54:	25c8      	movs	r5, #200	; 0xc8
 8003f56:	006d      	lsls	r5, r5, #1
 8003f58:	195b      	adds	r3, r3, r5
 8003f5a:	19db      	adds	r3, r3, r7
 8003f5c:	0018      	movs	r0, r3
 8003f5e:	23c6      	movs	r3, #198	; 0xc6
 8003f60:	001a      	movs	r2, r3
 8003f62:	2100      	movs	r1, #0
 8003f64:	f001 fc0a 	bl	800577c <memset>

    request.op_code = ASTRONODE_OP_CODE_CFG_SR;
 8003f68:	193b      	adds	r3, r7, r4
 8003f6a:	2210      	movs	r2, #16
 8003f6c:	701a      	strb	r2, [r3, #0]

    astronode_transport_send_receive(&request, &answer);
 8003f6e:	003a      	movs	r2, r7
 8003f70:	193b      	adds	r3, r7, r4
 8003f72:	0011      	movs	r1, r2
 8003f74:	0018      	movs	r0, r3
 8003f76:	f001 f91d 	bl	80051b4 <astronode_transport_send_receive>

    if (answer.op_code == ASTRONODE_OP_CODE_CFG_SA)
 8003f7a:	4b09      	ldr	r3, [pc, #36]	; (8003fa0 <astronode_send_cfg_sr+0x64>)
 8003f7c:	195b      	adds	r3, r3, r5
 8003f7e:	19db      	adds	r3, r3, r7
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	2b90      	cmp	r3, #144	; 0x90
 8003f84:	d104      	bne.n	8003f90 <astronode_send_cfg_sr+0x54>
    {
        send_debug_logs("Astronode configuration successfully saved in NVM.");
 8003f86:	4b07      	ldr	r3, [pc, #28]	; (8003fa4 <astronode_send_cfg_sr+0x68>)
 8003f88:	0018      	movs	r0, r3
 8003f8a:	f7fc fe2f 	bl	8000bec <send_debug_logs>
    }
    else
    {
        send_debug_logs("Failed to save the Astronode configuration in NVM.");
    }
}
 8003f8e:	e003      	b.n	8003f98 <astronode_send_cfg_sr+0x5c>
        send_debug_logs("Failed to save the Astronode configuration in NVM.");
 8003f90:	4b05      	ldr	r3, [pc, #20]	; (8003fa8 <astronode_send_cfg_sr+0x6c>)
 8003f92:	0018      	movs	r0, r3
 8003f94:	f7fc fe2a 	bl	8000bec <send_debug_logs>
}
 8003f98:	46c0      	nop			; (mov r8, r8)
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	b064      	add	sp, #400	; 0x190
 8003f9e:	bdb0      	pop	{r4, r5, r7, pc}
 8003fa0:	fffffe70 	.word	0xfffffe70
 8003fa4:	08006570 	.word	0x08006570
 8003fa8:	080065a4 	.word	0x080065a4

08003fac <astronode_send_cfg_wr>:
                            bool deep_sleep_mode,
                            bool message_ack_event_pin_mask,
                            bool reset_notification_event_pin_mask,
							bool command_available_event_pin_mask,
							bool message_tx_event_pin_mask)
{
 8003fac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fae:	b0e7      	sub	sp, #412	; 0x19c
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	0005      	movs	r5, r0
 8003fb4:	000c      	movs	r4, r1
 8003fb6:	0010      	movs	r0, r2
 8003fb8:	0019      	movs	r1, r3
 8003fba:	4b4b      	ldr	r3, [pc, #300]	; (80040e8 <astronode_send_cfg_wr+0x13c>)
 8003fbc:	26cc      	movs	r6, #204	; 0xcc
 8003fbe:	0076      	lsls	r6, r6, #1
 8003fc0:	199b      	adds	r3, r3, r6
 8003fc2:	19db      	adds	r3, r3, r7
 8003fc4:	1c2a      	adds	r2, r5, #0
 8003fc6:	701a      	strb	r2, [r3, #0]
 8003fc8:	4b48      	ldr	r3, [pc, #288]	; (80040ec <astronode_send_cfg_wr+0x140>)
 8003fca:	0035      	movs	r5, r6
 8003fcc:	195b      	adds	r3, r3, r5
 8003fce:	19db      	adds	r3, r3, r7
 8003fd0:	1c22      	adds	r2, r4, #0
 8003fd2:	701a      	strb	r2, [r3, #0]
 8003fd4:	4b46      	ldr	r3, [pc, #280]	; (80040f0 <astronode_send_cfg_wr+0x144>)
 8003fd6:	002c      	movs	r4, r5
 8003fd8:	191b      	adds	r3, r3, r4
 8003fda:	19db      	adds	r3, r3, r7
 8003fdc:	1c02      	adds	r2, r0, #0
 8003fde:	701a      	strb	r2, [r3, #0]
 8003fe0:	4b44      	ldr	r3, [pc, #272]	; (80040f4 <astronode_send_cfg_wr+0x148>)
 8003fe2:	191b      	adds	r3, r3, r4
 8003fe4:	19db      	adds	r3, r3, r7
 8003fe6:	1c0a      	adds	r2, r1, #0
 8003fe8:	701a      	strb	r2, [r3, #0]
    astronode_app_msg_t request = {0};
 8003fea:	25d0      	movs	r5, #208	; 0xd0
 8003fec:	197b      	adds	r3, r7, r5
 8003fee:	0018      	movs	r0, r3
 8003ff0:	23c6      	movs	r3, #198	; 0xc6
 8003ff2:	001a      	movs	r2, r3
 8003ff4:	2100      	movs	r1, #0
 8003ff6:	f001 fbc1 	bl	800577c <memset>
    astronode_app_msg_t answer = {0};
 8003ffa:	4b3f      	ldr	r3, [pc, #252]	; (80040f8 <astronode_send_cfg_wr+0x14c>)
 8003ffc:	191b      	adds	r3, r3, r4
 8003ffe:	19db      	adds	r3, r3, r7
 8004000:	0018      	movs	r0, r3
 8004002:	23c6      	movs	r3, #198	; 0xc6
 8004004:	001a      	movs	r2, r3
 8004006:	2100      	movs	r1, #0
 8004008:	f001 fbb8 	bl	800577c <memset>

    request.op_code = ASTRONODE_OP_CODE_CFG_WR;
 800400c:	0029      	movs	r1, r5
 800400e:	187b      	adds	r3, r7, r1
 8004010:	2205      	movs	r2, #5
 8004012:	701a      	strb	r2, [r3, #0]

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
        | add_geolocation << ASTRONODE_BIT_OFFSET_ADD_GEO
 8004014:	4b34      	ldr	r3, [pc, #208]	; (80040e8 <astronode_send_cfg_wr+0x13c>)
 8004016:	191b      	adds	r3, r3, r4
 8004018:	19db      	adds	r3, r3, r7
 800401a:	2200      	movs	r2, #0
 800401c:	569a      	ldrsb	r2, [r3, r2]
 800401e:	4b33      	ldr	r3, [pc, #204]	; (80040ec <astronode_send_cfg_wr+0x140>)
 8004020:	191b      	adds	r3, r3, r4
 8004022:	19db      	adds	r3, r3, r7
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	005b      	lsls	r3, r3, #1
 8004028:	b25b      	sxtb	r3, r3
 800402a:	4313      	orrs	r3, r2
 800402c:	b25a      	sxtb	r2, r3
        | enable_ephemeris << ASTRONODE_BIT_OFFSET_ENABLE_EPH
 800402e:	4b30      	ldr	r3, [pc, #192]	; (80040f0 <astronode_send_cfg_wr+0x144>)
 8004030:	191b      	adds	r3, r3, r4
 8004032:	19db      	adds	r3, r3, r7
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	b25b      	sxtb	r3, r3
 800403a:	4313      	orrs	r3, r2
 800403c:	b25a      	sxtb	r2, r3
        | deep_sleep_mode << ASTRONODE_BIT_OFFSET_DEEP_SLEEP_MODE;
 800403e:	4b2d      	ldr	r3, [pc, #180]	; (80040f4 <astronode_send_cfg_wr+0x148>)
 8004040:	191b      	adds	r3, r3, r4
 8004042:	19db      	adds	r3, r3, r7
 8004044:	781b      	ldrb	r3, [r3, #0]
 8004046:	00db      	lsls	r3, r3, #3
 8004048:	b25b      	sxtb	r3, r3
 800404a:	4313      	orrs	r3, r2
 800404c:	b25b      	sxtb	r3, r3
 800404e:	b2da      	uxtb	r2, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
 8004050:	187b      	adds	r3, r7, r1
 8004052:	705a      	strb	r2, [r3, #1]

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
        | reset_notification_event_pin_mask << ASTRONODE_BIT_OFFSET_RST_NTF_EVT_PIN_MASK
 8004054:	23d4      	movs	r3, #212	; 0xd4
 8004056:	005b      	lsls	r3, r3, #1
 8004058:	2508      	movs	r5, #8
 800405a:	195b      	adds	r3, r3, r5
 800405c:	19db      	adds	r3, r3, r7
 800405e:	2200      	movs	r2, #0
 8004060:	569a      	ldrsb	r2, [r3, r2]
 8004062:	23d6      	movs	r3, #214	; 0xd6
 8004064:	005b      	lsls	r3, r3, #1
 8004066:	195b      	adds	r3, r3, r5
 8004068:	19db      	adds	r3, r3, r7
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	005b      	lsls	r3, r3, #1
 800406e:	b25b      	sxtb	r3, r3
 8004070:	4313      	orrs	r3, r2
 8004072:	b25a      	sxtb	r2, r3
        | command_available_event_pin_mask << ASTRONODE_BIT_OFFSET_CMD_AVA_EVT_PIN_MASK
 8004074:	23d8      	movs	r3, #216	; 0xd8
 8004076:	005b      	lsls	r3, r3, #1
 8004078:	195b      	adds	r3, r3, r5
 800407a:	19db      	adds	r3, r3, r7
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	b25b      	sxtb	r3, r3
 8004082:	4313      	orrs	r3, r2
 8004084:	b25a      	sxtb	r2, r3
        | message_tx_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_TXP_EVT_PIN_MASK;
 8004086:	23da      	movs	r3, #218	; 0xda
 8004088:	005b      	lsls	r3, r3, #1
 800408a:	195b      	adds	r3, r3, r5
 800408c:	19db      	adds	r3, r3, r7
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	00db      	lsls	r3, r3, #3
 8004092:	b25b      	sxtb	r3, r3
 8004094:	4313      	orrs	r3, r2
 8004096:	b25b      	sxtb	r3, r3
 8004098:	b2da      	uxtb	r2, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
 800409a:	187b      	adds	r3, r7, r1
 800409c:	70da      	strb	r2, [r3, #3]

    request.payload_len = 3;
 800409e:	0008      	movs	r0, r1
 80040a0:	187b      	adds	r3, r7, r1
 80040a2:	22c4      	movs	r2, #196	; 0xc4
 80040a4:	2103      	movs	r1, #3
 80040a6:	5299      	strh	r1, [r3, r2]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80040a8:	002b      	movs	r3, r5
 80040aa:	18fa      	adds	r2, r7, r3
 80040ac:	183b      	adds	r3, r7, r0
 80040ae:	0011      	movs	r1, r2
 80040b0:	0018      	movs	r0, r3
 80040b2:	f001 f87f 	bl	80051b4 <astronode_transport_send_receive>
 80040b6:	0003      	movs	r3, r0
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d10f      	bne.n	80040dc <astronode_send_cfg_wr+0x130>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CFG_WA)
 80040bc:	4b0e      	ldr	r3, [pc, #56]	; (80040f8 <astronode_send_cfg_wr+0x14c>)
 80040be:	191b      	adds	r3, r3, r4
 80040c0:	19db      	adds	r3, r3, r7
 80040c2:	781b      	ldrb	r3, [r3, #0]
 80040c4:	2b85      	cmp	r3, #133	; 0x85
 80040c6:	d105      	bne.n	80040d4 <astronode_send_cfg_wr+0x128>
        {
            send_debug_logs("Astronode configuration successfully set.");
 80040c8:	4b0c      	ldr	r3, [pc, #48]	; (80040fc <astronode_send_cfg_wr+0x150>)
 80040ca:	0018      	movs	r0, r3
 80040cc:	f7fc fd8e 	bl	8000bec <send_debug_logs>
            return true ;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e004      	b.n	80040de <astronode_send_cfg_wr+0x132>
        }
        else
        {
            send_debug_logs("Failed to set the Astronode configuration.");
 80040d4:	4b0a      	ldr	r3, [pc, #40]	; (8004100 <astronode_send_cfg_wr+0x154>)
 80040d6:	0018      	movs	r0, r3
 80040d8:	f7fc fd88 	bl	8000bec <send_debug_logs>
        }
    }
    return false ;
 80040dc:	2300      	movs	r3, #0
}
 80040de:	0018      	movs	r0, r3
 80040e0:	46bd      	mov	sp, r7
 80040e2:	b067      	add	sp, #412	; 0x19c
 80040e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040e6:	46c0      	nop			; (mov r8, r8)
 80040e8:	fffffe6f 	.word	0xfffffe6f
 80040ec:	fffffe6e 	.word	0xfffffe6e
 80040f0:	fffffe6d 	.word	0xfffffe6d
 80040f4:	fffffe6c 	.word	0xfffffe6c
 80040f8:	fffffe70 	.word	0xfffffe70
 80040fc:	080065d8 	.word	0x080065d8
 8004100:	08006604 	.word	0x08006604

08004104 <astronode_send_mgi_rr>:
        send_debug_logs("Failed to save the Astronode context in NVM.");
    }
}

void astronode_send_mgi_rr(void)
{
 8004104:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004106:	b0ed      	sub	sp, #436	; 0x1b4
 8004108:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 800410a:	21c8      	movs	r1, #200	; 0xc8
 800410c:	2318      	movs	r3, #24
 800410e:	18cb      	adds	r3, r1, r3
 8004110:	19db      	adds	r3, r3, r7
 8004112:	0018      	movs	r0, r3
 8004114:	23c6      	movs	r3, #198	; 0xc6
 8004116:	001a      	movs	r2, r3
 8004118:	2100      	movs	r1, #0
 800411a:	f001 fb2f 	bl	800577c <memset>
    astronode_app_msg_t answer = {0};
 800411e:	4b4a      	ldr	r3, [pc, #296]	; (8004248 <astronode_send_mgi_rr+0x144>)
 8004120:	26cc      	movs	r6, #204	; 0xcc
 8004122:	0076      	lsls	r6, r6, #1
 8004124:	199b      	adds	r3, r3, r6
 8004126:	2218      	movs	r2, #24
 8004128:	4694      	mov	ip, r2
 800412a:	44bc      	add	ip, r7
 800412c:	4463      	add	r3, ip
 800412e:	0018      	movs	r0, r3
 8004130:	23c6      	movs	r3, #198	; 0xc6
 8004132:	001a      	movs	r2, r3
 8004134:	2100      	movs	r1, #0
 8004136:	f001 fb21 	bl	800577c <memset>

    request.op_code = ASTRONODE_OP_CODE_MGI_RR;
 800413a:	21c8      	movs	r1, #200	; 0xc8
 800413c:	2318      	movs	r3, #24
 800413e:	18cb      	adds	r3, r1, r3
 8004140:	19db      	adds	r3, r3, r7
 8004142:	2219      	movs	r2, #25
 8004144:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8004146:	2318      	movs	r3, #24
 8004148:	18fa      	adds	r2, r7, r3
 800414a:	2318      	movs	r3, #24
 800414c:	18cb      	adds	r3, r1, r3
 800414e:	19db      	adds	r3, r3, r7
 8004150:	0011      	movs	r1, r2
 8004152:	0018      	movs	r0, r3
 8004154:	f001 f82e 	bl	80051b4 <astronode_transport_send_receive>
 8004158:	0003      	movs	r3, r0
 800415a:	2b01      	cmp	r3, #1
 800415c:	d16f      	bne.n	800423e <astronode_send_mgi_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MGI_RA)
 800415e:	4b3a      	ldr	r3, [pc, #232]	; (8004248 <astronode_send_mgi_rr+0x144>)
 8004160:	0032      	movs	r2, r6
 8004162:	189b      	adds	r3, r3, r2
 8004164:	2118      	movs	r1, #24
 8004166:	468c      	mov	ip, r1
 8004168:	44bc      	add	ip, r7
 800416a:	4463      	add	r3, ip
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	2b99      	cmp	r3, #153	; 0x99
 8004170:	d161      	bne.n	8004236 <astronode_send_mgi_rr+0x132>
        {
 8004172:	466b      	mov	r3, sp
 8004174:	001e      	movs	r6, r3
            char guid[answer.payload_len];
 8004176:	4b34      	ldr	r3, [pc, #208]	; (8004248 <astronode_send_mgi_rr+0x144>)
 8004178:	189b      	adds	r3, r3, r2
 800417a:	2218      	movs	r2, #24
 800417c:	4694      	mov	ip, r2
 800417e:	44bc      	add	ip, r7
 8004180:	4463      	add	r3, ip
 8004182:	22c4      	movs	r2, #196	; 0xc4
 8004184:	5a9b      	ldrh	r3, [r3, r2]
 8004186:	001a      	movs	r2, r3
 8004188:	3a01      	subs	r2, #1
 800418a:	21ca      	movs	r1, #202	; 0xca
 800418c:	0049      	lsls	r1, r1, #1
 800418e:	2018      	movs	r0, #24
 8004190:	1809      	adds	r1, r1, r0
 8004192:	19c9      	adds	r1, r1, r7
 8004194:	600a      	str	r2, [r1, #0]
 8004196:	001c      	movs	r4, r3
 8004198:	2200      	movs	r2, #0
 800419a:	0015      	movs	r5, r2
 800419c:	0020      	movs	r0, r4
 800419e:	0029      	movs	r1, r5
 80041a0:	0004      	movs	r4, r0
 80041a2:	0f62      	lsrs	r2, r4, #29
 80041a4:	000c      	movs	r4, r1
 80041a6:	00e4      	lsls	r4, r4, #3
 80041a8:	617c      	str	r4, [r7, #20]
 80041aa:	697c      	ldr	r4, [r7, #20]
 80041ac:	4314      	orrs	r4, r2
 80041ae:	617c      	str	r4, [r7, #20]
 80041b0:	0001      	movs	r1, r0
 80041b2:	00c9      	lsls	r1, r1, #3
 80041b4:	6139      	str	r1, [r7, #16]
 80041b6:	603b      	str	r3, [r7, #0]
 80041b8:	2200      	movs	r2, #0
 80041ba:	607a      	str	r2, [r7, #4]
 80041bc:	6838      	ldr	r0, [r7, #0]
 80041be:	6879      	ldr	r1, [r7, #4]
 80041c0:	0004      	movs	r4, r0
 80041c2:	0f62      	lsrs	r2, r4, #29
 80041c4:	000c      	movs	r4, r1
 80041c6:	00e4      	lsls	r4, r4, #3
 80041c8:	60fc      	str	r4, [r7, #12]
 80041ca:	68fc      	ldr	r4, [r7, #12]
 80041cc:	4314      	orrs	r4, r2
 80041ce:	60fc      	str	r4, [r7, #12]
 80041d0:	0001      	movs	r1, r0
 80041d2:	00ca      	lsls	r2, r1, #3
 80041d4:	60ba      	str	r2, [r7, #8]
 80041d6:	3307      	adds	r3, #7
 80041d8:	08db      	lsrs	r3, r3, #3
 80041da:	00db      	lsls	r3, r3, #3
 80041dc:	4669      	mov	r1, sp
 80041de:	1acb      	subs	r3, r1, r3
 80041e0:	469d      	mov	sp, r3
 80041e2:	466b      	mov	r3, sp
 80041e4:	3300      	adds	r3, #0
 80041e6:	24c8      	movs	r4, #200	; 0xc8
 80041e8:	0064      	lsls	r4, r4, #1
 80041ea:	2218      	movs	r2, #24
 80041ec:	18a2      	adds	r2, r4, r2
 80041ee:	19d1      	adds	r1, r2, r7
 80041f0:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module GUID is:");
 80041f2:	4b16      	ldr	r3, [pc, #88]	; (800424c <astronode_send_mgi_rr+0x148>)
 80041f4:	0018      	movs	r0, r3
 80041f6:	f7fc fcf9 	bl	8000bec <send_debug_logs>
            snprintf(guid, answer.payload_len, "%s", answer.p_payload);
 80041fa:	4b13      	ldr	r3, [pc, #76]	; (8004248 <astronode_send_mgi_rr+0x144>)
 80041fc:	22cc      	movs	r2, #204	; 0xcc
 80041fe:	0052      	lsls	r2, r2, #1
 8004200:	189b      	adds	r3, r3, r2
 8004202:	2218      	movs	r2, #24
 8004204:	4694      	mov	ip, r2
 8004206:	44bc      	add	ip, r7
 8004208:	4463      	add	r3, ip
 800420a:	22c4      	movs	r2, #196	; 0xc4
 800420c:	5a9b      	ldrh	r3, [r3, r2]
 800420e:	0019      	movs	r1, r3
 8004210:	2318      	movs	r3, #24
 8004212:	18fb      	adds	r3, r7, r3
 8004214:	3301      	adds	r3, #1
 8004216:	4a0e      	ldr	r2, [pc, #56]	; (8004250 <astronode_send_mgi_rr+0x14c>)
 8004218:	2018      	movs	r0, #24
 800421a:	1820      	adds	r0, r4, r0
 800421c:	19c0      	adds	r0, r0, r7
 800421e:	6800      	ldr	r0, [r0, #0]
 8004220:	f001 fa58 	bl	80056d4 <sniprintf>
            send_debug_logs(guid);
 8004224:	2318      	movs	r3, #24
 8004226:	18e3      	adds	r3, r4, r3
 8004228:	19db      	adds	r3, r3, r7
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	0018      	movs	r0, r3
 800422e:	f7fc fcdd 	bl	8000bec <send_debug_logs>
 8004232:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module GUID.");
        }
    }
}
 8004234:	e003      	b.n	800423e <astronode_send_mgi_rr+0x13a>
            send_debug_logs("Failed to read module GUID.");
 8004236:	4b07      	ldr	r3, [pc, #28]	; (8004254 <astronode_send_mgi_rr+0x150>)
 8004238:	0018      	movs	r0, r3
 800423a:	f7fc fcd7 	bl	8000bec <send_debug_logs>
}
 800423e:	46c0      	nop			; (mov r8, r8)
 8004240:	46bd      	mov	sp, r7
 8004242:	b06d      	add	sp, #436	; 0x1b4
 8004244:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004246:	46c0      	nop			; (mov r8, r8)
 8004248:	fffffe68 	.word	0xfffffe68
 800424c:	08006690 	.word	0x08006690
 8004250:	080066a0 	.word	0x080066a0
 8004254:	080066a4 	.word	0x080066a4

08004258 <astronode_send_msn_rr>:

void astronode_send_msn_rr(void)
{
 8004258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800425a:	b0ed      	sub	sp, #436	; 0x1b4
 800425c:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 800425e:	21c8      	movs	r1, #200	; 0xc8
 8004260:	2318      	movs	r3, #24
 8004262:	18cb      	adds	r3, r1, r3
 8004264:	19db      	adds	r3, r3, r7
 8004266:	0018      	movs	r0, r3
 8004268:	23c6      	movs	r3, #198	; 0xc6
 800426a:	001a      	movs	r2, r3
 800426c:	2100      	movs	r1, #0
 800426e:	f001 fa85 	bl	800577c <memset>
    astronode_app_msg_t answer = {0};
 8004272:	4b4a      	ldr	r3, [pc, #296]	; (800439c <astronode_send_msn_rr+0x144>)
 8004274:	26cc      	movs	r6, #204	; 0xcc
 8004276:	0076      	lsls	r6, r6, #1
 8004278:	199b      	adds	r3, r3, r6
 800427a:	2218      	movs	r2, #24
 800427c:	4694      	mov	ip, r2
 800427e:	44bc      	add	ip, r7
 8004280:	4463      	add	r3, ip
 8004282:	0018      	movs	r0, r3
 8004284:	23c6      	movs	r3, #198	; 0xc6
 8004286:	001a      	movs	r2, r3
 8004288:	2100      	movs	r1, #0
 800428a:	f001 fa77 	bl	800577c <memset>

    request.op_code = ASTRONODE_OP_CODE_MSN_RR;
 800428e:	21c8      	movs	r1, #200	; 0xc8
 8004290:	2318      	movs	r3, #24
 8004292:	18cb      	adds	r3, r1, r3
 8004294:	19db      	adds	r3, r3, r7
 8004296:	221a      	movs	r2, #26
 8004298:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800429a:	2318      	movs	r3, #24
 800429c:	18fa      	adds	r2, r7, r3
 800429e:	2318      	movs	r3, #24
 80042a0:	18cb      	adds	r3, r1, r3
 80042a2:	19db      	adds	r3, r3, r7
 80042a4:	0011      	movs	r1, r2
 80042a6:	0018      	movs	r0, r3
 80042a8:	f000 ff84 	bl	80051b4 <astronode_transport_send_receive>
 80042ac:	0003      	movs	r3, r0
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d16f      	bne.n	8004392 <astronode_send_msn_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MSN_RA)
 80042b2:	4b3a      	ldr	r3, [pc, #232]	; (800439c <astronode_send_msn_rr+0x144>)
 80042b4:	0032      	movs	r2, r6
 80042b6:	189b      	adds	r3, r3, r2
 80042b8:	2118      	movs	r1, #24
 80042ba:	468c      	mov	ip, r1
 80042bc:	44bc      	add	ip, r7
 80042be:	4463      	add	r3, ip
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	2b9a      	cmp	r3, #154	; 0x9a
 80042c4:	d161      	bne.n	800438a <astronode_send_msn_rr+0x132>
        {
 80042c6:	466b      	mov	r3, sp
 80042c8:	001e      	movs	r6, r3
            char serial_number[answer.payload_len];
 80042ca:	4b34      	ldr	r3, [pc, #208]	; (800439c <astronode_send_msn_rr+0x144>)
 80042cc:	189b      	adds	r3, r3, r2
 80042ce:	2218      	movs	r2, #24
 80042d0:	4694      	mov	ip, r2
 80042d2:	44bc      	add	ip, r7
 80042d4:	4463      	add	r3, ip
 80042d6:	22c4      	movs	r2, #196	; 0xc4
 80042d8:	5a9b      	ldrh	r3, [r3, r2]
 80042da:	001a      	movs	r2, r3
 80042dc:	3a01      	subs	r2, #1
 80042de:	21ca      	movs	r1, #202	; 0xca
 80042e0:	0049      	lsls	r1, r1, #1
 80042e2:	2018      	movs	r0, #24
 80042e4:	1809      	adds	r1, r1, r0
 80042e6:	19c9      	adds	r1, r1, r7
 80042e8:	600a      	str	r2, [r1, #0]
 80042ea:	001c      	movs	r4, r3
 80042ec:	2200      	movs	r2, #0
 80042ee:	0015      	movs	r5, r2
 80042f0:	0020      	movs	r0, r4
 80042f2:	0029      	movs	r1, r5
 80042f4:	0004      	movs	r4, r0
 80042f6:	0f62      	lsrs	r2, r4, #29
 80042f8:	000c      	movs	r4, r1
 80042fa:	00e4      	lsls	r4, r4, #3
 80042fc:	617c      	str	r4, [r7, #20]
 80042fe:	697c      	ldr	r4, [r7, #20]
 8004300:	4314      	orrs	r4, r2
 8004302:	617c      	str	r4, [r7, #20]
 8004304:	0001      	movs	r1, r0
 8004306:	00c9      	lsls	r1, r1, #3
 8004308:	6139      	str	r1, [r7, #16]
 800430a:	603b      	str	r3, [r7, #0]
 800430c:	2200      	movs	r2, #0
 800430e:	607a      	str	r2, [r7, #4]
 8004310:	6838      	ldr	r0, [r7, #0]
 8004312:	6879      	ldr	r1, [r7, #4]
 8004314:	0004      	movs	r4, r0
 8004316:	0f62      	lsrs	r2, r4, #29
 8004318:	000c      	movs	r4, r1
 800431a:	00e4      	lsls	r4, r4, #3
 800431c:	60fc      	str	r4, [r7, #12]
 800431e:	68fc      	ldr	r4, [r7, #12]
 8004320:	4314      	orrs	r4, r2
 8004322:	60fc      	str	r4, [r7, #12]
 8004324:	0001      	movs	r1, r0
 8004326:	00ca      	lsls	r2, r1, #3
 8004328:	60ba      	str	r2, [r7, #8]
 800432a:	3307      	adds	r3, #7
 800432c:	08db      	lsrs	r3, r3, #3
 800432e:	00db      	lsls	r3, r3, #3
 8004330:	4669      	mov	r1, sp
 8004332:	1acb      	subs	r3, r1, r3
 8004334:	469d      	mov	sp, r3
 8004336:	466b      	mov	r3, sp
 8004338:	3300      	adds	r3, #0
 800433a:	24c8      	movs	r4, #200	; 0xc8
 800433c:	0064      	lsls	r4, r4, #1
 800433e:	2218      	movs	r2, #24
 8004340:	18a2      	adds	r2, r4, r2
 8004342:	19d1      	adds	r1, r2, r7
 8004344:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module's Serial Number is:");
 8004346:	4b16      	ldr	r3, [pc, #88]	; (80043a0 <astronode_send_msn_rr+0x148>)
 8004348:	0018      	movs	r0, r3
 800434a:	f7fc fc4f 	bl	8000bec <send_debug_logs>
            snprintf(serial_number, answer.payload_len, "%s", answer.p_payload);
 800434e:	4b13      	ldr	r3, [pc, #76]	; (800439c <astronode_send_msn_rr+0x144>)
 8004350:	22cc      	movs	r2, #204	; 0xcc
 8004352:	0052      	lsls	r2, r2, #1
 8004354:	189b      	adds	r3, r3, r2
 8004356:	2218      	movs	r2, #24
 8004358:	4694      	mov	ip, r2
 800435a:	44bc      	add	ip, r7
 800435c:	4463      	add	r3, ip
 800435e:	22c4      	movs	r2, #196	; 0xc4
 8004360:	5a9b      	ldrh	r3, [r3, r2]
 8004362:	0019      	movs	r1, r3
 8004364:	2318      	movs	r3, #24
 8004366:	18fb      	adds	r3, r7, r3
 8004368:	3301      	adds	r3, #1
 800436a:	4a0e      	ldr	r2, [pc, #56]	; (80043a4 <astronode_send_msn_rr+0x14c>)
 800436c:	2018      	movs	r0, #24
 800436e:	1820      	adds	r0, r4, r0
 8004370:	19c0      	adds	r0, r0, r7
 8004372:	6800      	ldr	r0, [r0, #0]
 8004374:	f001 f9ae 	bl	80056d4 <sniprintf>
            send_debug_logs(serial_number);
 8004378:	2318      	movs	r3, #24
 800437a:	18e3      	adds	r3, r4, r3
 800437c:	19db      	adds	r3, r3, r7
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	0018      	movs	r0, r3
 8004382:	f7fc fc33 	bl	8000bec <send_debug_logs>
 8004386:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module Serial Number.");
        }
    }
}
 8004388:	e003      	b.n	8004392 <astronode_send_msn_rr+0x13a>
            send_debug_logs("Failed to read module Serial Number.");
 800438a:	4b07      	ldr	r3, [pc, #28]	; (80043a8 <astronode_send_msn_rr+0x150>)
 800438c:	0018      	movs	r0, r3
 800438e:	f7fc fc2d 	bl	8000bec <send_debug_logs>
}
 8004392:	46c0      	nop			; (mov r8, r8)
 8004394:	46bd      	mov	sp, r7
 8004396:	b06d      	add	sp, #436	; 0x1b4
 8004398:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800439a:	46c0      	nop			; (mov r8, r8)
 800439c:	fffffe68 	.word	0xfffffe68
 80043a0:	080066c0 	.word	0x080066c0
 80043a4:	080066a0 	.word	0x080066a0
 80043a8:	080066dc 	.word	0x080066dc

080043ac <astronode_send_evt_rr>:
    }
    return 0xFFFFFFFF ; // Longest possible time
}

void astronode_send_evt_rr(void)
{
 80043ac:	b5b0      	push	{r4, r5, r7, lr}
 80043ae:	b0e4      	sub	sp, #400	; 0x190
 80043b0:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80043b2:	24c8      	movs	r4, #200	; 0xc8
 80043b4:	193b      	adds	r3, r7, r4
 80043b6:	0018      	movs	r0, r3
 80043b8:	23c6      	movs	r3, #198	; 0xc6
 80043ba:	001a      	movs	r2, r3
 80043bc:	2100      	movs	r1, #0
 80043be:	f001 f9dd 	bl	800577c <memset>
    astronode_app_msg_t answer = {0};
 80043c2:	4b31      	ldr	r3, [pc, #196]	; (8004488 <astronode_send_evt_rr+0xdc>)
 80043c4:	25c8      	movs	r5, #200	; 0xc8
 80043c6:	006d      	lsls	r5, r5, #1
 80043c8:	195b      	adds	r3, r3, r5
 80043ca:	19db      	adds	r3, r3, r7
 80043cc:	0018      	movs	r0, r3
 80043ce:	23c6      	movs	r3, #198	; 0xc6
 80043d0:	001a      	movs	r2, r3
 80043d2:	2100      	movs	r1, #0
 80043d4:	f001 f9d2 	bl	800577c <memset>

    request.op_code = ASTRONODE_OP_CODE_EVT_RR;
 80043d8:	193b      	adds	r3, r7, r4
 80043da:	2265      	movs	r2, #101	; 0x65
 80043dc:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80043de:	003a      	movs	r2, r7
 80043e0:	193b      	adds	r3, r7, r4
 80043e2:	0011      	movs	r1, r2
 80043e4:	0018      	movs	r0, r3
 80043e6:	f000 fee5 	bl	80051b4 <astronode_transport_send_receive>
 80043ea:	0003      	movs	r3, r0
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d147      	bne.n	8004480 <astronode_send_evt_rr+0xd4>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_EVT_RA)
 80043f0:	4b25      	ldr	r3, [pc, #148]	; (8004488 <astronode_send_evt_rr+0xdc>)
 80043f2:	195b      	adds	r3, r3, r5
 80043f4:	19db      	adds	r3, r3, r7
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	2be5      	cmp	r3, #229	; 0xe5
 80043fa:	d141      	bne.n	8004480 <astronode_send_evt_rr+0xd4>
        {
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_ACK))
 80043fc:	4b22      	ldr	r3, [pc, #136]	; (8004488 <astronode_send_evt_rr+0xdc>)
 80043fe:	195b      	adds	r3, r3, r5
 8004400:	19db      	adds	r3, r3, r7
 8004402:	785b      	ldrb	r3, [r3, #1]
 8004404:	001a      	movs	r2, r3
 8004406:	2301      	movs	r3, #1
 8004408:	4013      	ands	r3, r2
 800440a:	d006      	beq.n	800441a <astronode_send_evt_rr+0x6e>
            {
                g_is_sak_available = true;
 800440c:	4b1f      	ldr	r3, [pc, #124]	; (800448c <astronode_send_evt_rr+0xe0>)
 800440e:	2201      	movs	r2, #1
 8004410:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Message acknowledgment available.");
 8004412:	4b1f      	ldr	r3, [pc, #124]	; (8004490 <astronode_send_evt_rr+0xe4>)
 8004414:	0018      	movs	r0, r3
 8004416:	f7fc fbe9 	bl	8000bec <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_RST))
 800441a:	4b1b      	ldr	r3, [pc, #108]	; (8004488 <astronode_send_evt_rr+0xdc>)
 800441c:	22c8      	movs	r2, #200	; 0xc8
 800441e:	0052      	lsls	r2, r2, #1
 8004420:	189b      	adds	r3, r3, r2
 8004422:	19db      	adds	r3, r3, r7
 8004424:	785b      	ldrb	r3, [r3, #1]
 8004426:	001a      	movs	r2, r3
 8004428:	2302      	movs	r3, #2
 800442a:	4013      	ands	r3, r2
 800442c:	d006      	beq.n	800443c <astronode_send_evt_rr+0x90>
            {
                g_is_astronode_reset = true;
 800442e:	4b19      	ldr	r3, [pc, #100]	; (8004494 <astronode_send_evt_rr+0xe8>)
 8004430:	2201      	movs	r2, #1
 8004432:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Astronode has reset.");
 8004434:	4b18      	ldr	r3, [pc, #96]	; (8004498 <astronode_send_evt_rr+0xec>)
 8004436:	0018      	movs	r0, r3
 8004438:	f7fc fbd8 	bl	8000bec <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_CMD))
 800443c:	4b12      	ldr	r3, [pc, #72]	; (8004488 <astronode_send_evt_rr+0xdc>)
 800443e:	22c8      	movs	r2, #200	; 0xc8
 8004440:	0052      	lsls	r2, r2, #1
 8004442:	189b      	adds	r3, r3, r2
 8004444:	19db      	adds	r3, r3, r7
 8004446:	785b      	ldrb	r3, [r3, #1]
 8004448:	001a      	movs	r2, r3
 800444a:	2304      	movs	r3, #4
 800444c:	4013      	ands	r3, r2
 800444e:	d006      	beq.n	800445e <astronode_send_evt_rr+0xb2>
            {
                g_is_command_available = true;
 8004450:	4b12      	ldr	r3, [pc, #72]	; (800449c <astronode_send_evt_rr+0xf0>)
 8004452:	2201      	movs	r2, #1
 8004454:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Command available.");
 8004456:	4b12      	ldr	r3, [pc, #72]	; (80044a0 <astronode_send_evt_rr+0xf4>)
 8004458:	0018      	movs	r0, r3
 800445a:	f7fc fbc7 	bl	8000bec <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFEST_MSG_TX))
 800445e:	4b0a      	ldr	r3, [pc, #40]	; (8004488 <astronode_send_evt_rr+0xdc>)
 8004460:	22c8      	movs	r2, #200	; 0xc8
 8004462:	0052      	lsls	r2, r2, #1
 8004464:	189b      	adds	r3, r3, r2
 8004466:	19db      	adds	r3, r3, r7
 8004468:	785b      	ldrb	r3, [r3, #1]
 800446a:	001a      	movs	r2, r3
 800446c:	2308      	movs	r3, #8
 800446e:	4013      	ands	r3, r2
 8004470:	d006      	beq.n	8004480 <astronode_send_evt_rr+0xd4>
            {
                g_is_tx_msg_pending = true;
 8004472:	4b0c      	ldr	r3, [pc, #48]	; (80044a4 <astronode_send_evt_rr+0xf8>)
 8004474:	2201      	movs	r2, #1
 8004476:	701a      	strb	r2, [r3, #0]
                send_debug_logs("TX message pending.");
 8004478:	4b0b      	ldr	r3, [pc, #44]	; (80044a8 <astronode_send_evt_rr+0xfc>)
 800447a:	0018      	movs	r0, r3
 800447c:	f7fc fbb6 	bl	8000bec <send_debug_logs>
            }

        }
    }
}
 8004480:	46c0      	nop			; (mov r8, r8)
 8004482:	46bd      	mov	sp, r7
 8004484:	b064      	add	sp, #400	; 0x190
 8004486:	bdb0      	pop	{r4, r5, r7, pc}
 8004488:	fffffe70 	.word	0xfffffe70
 800448c:	2000036c 	.word	0x2000036c
 8004490:	08006784 	.word	0x08006784
 8004494:	2000036d 	.word	0x2000036d
 8004498:	080067a8 	.word	0x080067a8
 800449c:	2000036e 	.word	0x2000036e
 80044a0:	080067c0 	.word	0x080067c0
 80044a4:	2000036f 	.word	0x2000036f
 80044a8:	080067d4 	.word	0x080067d4

080044ac <astronode_send_pld_fr>:
    }
    return false ;
}

void astronode_send_pld_fr(void)
{
 80044ac:	b5b0      	push	{r4, r5, r7, lr}
 80044ae:	b0e4      	sub	sp, #400	; 0x190
 80044b0:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80044b2:	24c8      	movs	r4, #200	; 0xc8
 80044b4:	193b      	adds	r3, r7, r4
 80044b6:	0018      	movs	r0, r3
 80044b8:	23c6      	movs	r3, #198	; 0xc6
 80044ba:	001a      	movs	r2, r3
 80044bc:	2100      	movs	r1, #0
 80044be:	f001 f95d 	bl	800577c <memset>
    astronode_app_msg_t answer = {0};
 80044c2:	4b15      	ldr	r3, [pc, #84]	; (8004518 <astronode_send_pld_fr+0x6c>)
 80044c4:	25c8      	movs	r5, #200	; 0xc8
 80044c6:	006d      	lsls	r5, r5, #1
 80044c8:	195b      	adds	r3, r3, r5
 80044ca:	19db      	adds	r3, r3, r7
 80044cc:	0018      	movs	r0, r3
 80044ce:	23c6      	movs	r3, #198	; 0xc6
 80044d0:	001a      	movs	r2, r3
 80044d2:	2100      	movs	r1, #0
 80044d4:	f001 f952 	bl	800577c <memset>

    request.op_code = ASTRONODE_OP_CODE_PLD_FR;
 80044d8:	193b      	adds	r3, r7, r4
 80044da:	2227      	movs	r2, #39	; 0x27
 80044dc:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80044de:	003a      	movs	r2, r7
 80044e0:	193b      	adds	r3, r7, r4
 80044e2:	0011      	movs	r1, r2
 80044e4:	0018      	movs	r0, r3
 80044e6:	f000 fe65 	bl	80051b4 <astronode_transport_send_receive>
 80044ea:	0003      	movs	r3, r0
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d10e      	bne.n	800450e <astronode_send_pld_fr+0x62>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_PLD_FA)
 80044f0:	4b09      	ldr	r3, [pc, #36]	; (8004518 <astronode_send_pld_fr+0x6c>)
 80044f2:	195b      	adds	r3, r3, r5
 80044f4:	19db      	adds	r3, r3, r7
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	2ba7      	cmp	r3, #167	; 0xa7
 80044fa:	d104      	bne.n	8004506 <astronode_send_pld_fr+0x5a>
        {
            send_debug_logs("astronode_application: payload queue has been cleared.");
 80044fc:	4b07      	ldr	r3, [pc, #28]	; (800451c <astronode_send_pld_fr+0x70>)
 80044fe:	0018      	movs	r0, r3
 8004500:	f7fc fb74 	bl	8000bec <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: Failed to clear the payload queue.");
        }
    }
}
 8004504:	e003      	b.n	800450e <astronode_send_pld_fr+0x62>
            send_debug_logs("astronode_application: Failed to clear the payload queue.");
 8004506:	4b06      	ldr	r3, [pc, #24]	; (8004520 <astronode_send_pld_fr+0x74>)
 8004508:	0018      	movs	r0, r3
 800450a:	f7fc fb6f 	bl	8000bec <send_debug_logs>
}
 800450e:	46c0      	nop			; (mov r8, r8)
 8004510:	46bd      	mov	sp, r7
 8004512:	b064      	add	sp, #400	; 0x190
 8004514:	bdb0      	pop	{r4, r5, r7, pc}
 8004516:	46c0      	nop			; (mov r8, r8)
 8004518:	fffffe70 	.word	0xfffffe70
 800451c:	08006904 	.word	0x08006904
 8004520:	0800693c 	.word	0x0800693c

08004524 <astronode_send_res_cr>:

void astronode_send_res_cr(void)
{
 8004524:	b5b0      	push	{r4, r5, r7, lr}
 8004526:	b0e4      	sub	sp, #400	; 0x190
 8004528:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 800452a:	24c8      	movs	r4, #200	; 0xc8
 800452c:	193b      	adds	r3, r7, r4
 800452e:	0018      	movs	r0, r3
 8004530:	23c6      	movs	r3, #198	; 0xc6
 8004532:	001a      	movs	r2, r3
 8004534:	2100      	movs	r1, #0
 8004536:	f001 f921 	bl	800577c <memset>
    astronode_app_msg_t answer = {0};
 800453a:	4b16      	ldr	r3, [pc, #88]	; (8004594 <astronode_send_res_cr+0x70>)
 800453c:	25c8      	movs	r5, #200	; 0xc8
 800453e:	006d      	lsls	r5, r5, #1
 8004540:	195b      	adds	r3, r3, r5
 8004542:	19db      	adds	r3, r3, r7
 8004544:	0018      	movs	r0, r3
 8004546:	23c6      	movs	r3, #198	; 0xc6
 8004548:	001a      	movs	r2, r3
 800454a:	2100      	movs	r1, #0
 800454c:	f001 f916 	bl	800577c <memset>

    request.op_code = ASTRONODE_OP_CODE_RES_CR;
 8004550:	193b      	adds	r3, r7, r4
 8004552:	2255      	movs	r2, #85	; 0x55
 8004554:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8004556:	003a      	movs	r2, r7
 8004558:	193b      	adds	r3, r7, r4
 800455a:	0011      	movs	r1, r2
 800455c:	0018      	movs	r0, r3
 800455e:	f000 fe29 	bl	80051b4 <astronode_transport_send_receive>
 8004562:	0003      	movs	r3, r0
 8004564:	2b01      	cmp	r3, #1
 8004566:	d111      	bne.n	800458c <astronode_send_res_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_RES_CA)
 8004568:	4b0a      	ldr	r3, [pc, #40]	; (8004594 <astronode_send_res_cr+0x70>)
 800456a:	195b      	adds	r3, r3, r5
 800456c:	19db      	adds	r3, r3, r7
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	2bd5      	cmp	r3, #213	; 0xd5
 8004572:	d107      	bne.n	8004584 <astronode_send_res_cr+0x60>
        {
            g_is_astronode_reset = false;
 8004574:	4b08      	ldr	r3, [pc, #32]	; (8004598 <astronode_send_res_cr+0x74>)
 8004576:	2200      	movs	r2, #0
 8004578:	701a      	strb	r2, [r3, #0]
            send_debug_logs("astronode_application: The reset has been cleared.");
 800457a:	4b08      	ldr	r3, [pc, #32]	; (800459c <astronode_send_res_cr+0x78>)
 800457c:	0018      	movs	r0, r3
 800457e:	f7fc fb35 	bl	8000bec <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: No reset to clear.");
        }
    }
}
 8004582:	e003      	b.n	800458c <astronode_send_res_cr+0x68>
            send_debug_logs("astronode_application: No reset to clear.");
 8004584:	4b06      	ldr	r3, [pc, #24]	; (80045a0 <astronode_send_res_cr+0x7c>)
 8004586:	0018      	movs	r0, r3
 8004588:	f7fc fb30 	bl	8000bec <send_debug_logs>
}
 800458c:	46c0      	nop			; (mov r8, r8)
 800458e:	46bd      	mov	sp, r7
 8004590:	b064      	add	sp, #400	; 0x190
 8004592:	bdb0      	pop	{r4, r5, r7, pc}
 8004594:	fffffe70 	.word	0xfffffe70
 8004598:	2000036d 	.word	0x2000036d
 800459c:	08006978 	.word	0x08006978
 80045a0:	080069ac 	.word	0x080069ac

080045a4 <astronode_send_rtc_rr>:

uint32_t astronode_send_rtc_rr ( void )
{
 80045a4:	b5b0      	push	{r4, r5, r7, lr}
 80045a6:	b0fa      	sub	sp, #488	; 0x1e8
 80045a8:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0} ;
 80045aa:	258e      	movs	r5, #142	; 0x8e
 80045ac:	006d      	lsls	r5, r5, #1
 80045ae:	197b      	adds	r3, r7, r5
 80045b0:	0018      	movs	r0, r3
 80045b2:	23c6      	movs	r3, #198	; 0xc6
 80045b4:	001a      	movs	r2, r3
 80045b6:	2100      	movs	r1, #0
 80045b8:	f001 f8e0 	bl	800577c <memset>
    astronode_app_msg_t answer = {0} ;
 80045bc:	4b28      	ldr	r3, [pc, #160]	; (8004660 <astronode_send_rtc_rr+0xbc>)
 80045be:	24f4      	movs	r4, #244	; 0xf4
 80045c0:	0064      	lsls	r4, r4, #1
 80045c2:	191b      	adds	r3, r3, r4
 80045c4:	19db      	adds	r3, r3, r7
 80045c6:	0018      	movs	r0, r3
 80045c8:	23c6      	movs	r3, #198	; 0xc6
 80045ca:	001a      	movs	r2, r3
 80045cc:	2100      	movs	r1, #0
 80045ce:	f001 f8d5 	bl	800577c <memset>

    request.op_code = ASTRONODE_OP_CODE_RTC_RR ;
 80045d2:	197b      	adds	r3, r7, r5
 80045d4:	2217      	movs	r2, #23
 80045d6:	701a      	strb	r2, [r3, #0]

    if ( astronode_transport_send_receive ( &request , &answer ) == RS_SUCCESS )
 80045d8:	2354      	movs	r3, #84	; 0x54
 80045da:	18fa      	adds	r2, r7, r3
 80045dc:	197b      	adds	r3, r7, r5
 80045de:	0011      	movs	r1, r2
 80045e0:	0018      	movs	r0, r3
 80045e2:	f000 fde7 	bl	80051b4 <astronode_transport_send_receive>
 80045e6:	0003      	movs	r3, r0
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d133      	bne.n	8004654 <astronode_send_rtc_rr+0xb0>
    {
        if ( answer.op_code == ASTRONODE_OP_CODE_RTC_RA )
 80045ec:	4b1c      	ldr	r3, [pc, #112]	; (8004660 <astronode_send_rtc_rr+0xbc>)
 80045ee:	0021      	movs	r1, r4
 80045f0:	185b      	adds	r3, r3, r1
 80045f2:	19db      	adds	r3, r3, r7
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	2b97      	cmp	r3, #151	; 0x97
 80045f8:	d128      	bne.n	800464c <astronode_send_rtc_rr+0xa8>
        {
            uint32_t rtc_time = answer.p_payload[0]
 80045fa:	4b19      	ldr	r3, [pc, #100]	; (8004660 <astronode_send_rtc_rr+0xbc>)
 80045fc:	185b      	adds	r3, r3, r1
 80045fe:	19db      	adds	r3, r3, r7
 8004600:	785b      	ldrb	r3, [r3, #1]
 8004602:	001a      	movs	r2, r3
                                        + ( answer.p_payload[1] << 8 )
 8004604:	4b16      	ldr	r3, [pc, #88]	; (8004660 <astronode_send_rtc_rr+0xbc>)
 8004606:	185b      	adds	r3, r3, r1
 8004608:	19db      	adds	r3, r3, r7
 800460a:	789b      	ldrb	r3, [r3, #2]
 800460c:	021b      	lsls	r3, r3, #8
 800460e:	18d2      	adds	r2, r2, r3
                                        + ( answer.p_payload[2] << 16 )
 8004610:	4b13      	ldr	r3, [pc, #76]	; (8004660 <astronode_send_rtc_rr+0xbc>)
 8004612:	185b      	adds	r3, r3, r1
 8004614:	19db      	adds	r3, r3, r7
 8004616:	78db      	ldrb	r3, [r3, #3]
 8004618:	041b      	lsls	r3, r3, #16
 800461a:	18d2      	adds	r2, r2, r3
                                        + ( answer.p_payload[3] << 24 ) ;
 800461c:	4b10      	ldr	r3, [pc, #64]	; (8004660 <astronode_send_rtc_rr+0xbc>)
 800461e:	185b      	adds	r3, r3, r1
 8004620:	19db      	adds	r3, r3, r7
 8004622:	791b      	ldrb	r3, [r3, #4]
 8004624:	061b      	lsls	r3, r3, #24
 8004626:	18d3      	adds	r3, r2, r3
            uint32_t rtc_time = answer.p_payload[0]
 8004628:	24f2      	movs	r4, #242	; 0xf2
 800462a:	0064      	lsls	r4, r4, #1
 800462c:	193a      	adds	r2, r7, r4
 800462e:	6013      	str	r3, [r2, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH] ;
            sprintf ( str , "RTC time since Astrocast Epoch (2018-01-01 00:00:00 UTC): %lds." , rtc_time ) ;
 8004630:	193b      	adds	r3, r7, r4
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	490b      	ldr	r1, [pc, #44]	; (8004664 <astronode_send_rtc_rr+0xc0>)
 8004636:	1d3b      	adds	r3, r7, #4
 8004638:	0018      	movs	r0, r3
 800463a:	f001 f87f 	bl	800573c <siprintf>
            send_debug_logs ( str ) ;
 800463e:	1d3b      	adds	r3, r7, #4
 8004640:	0018      	movs	r0, r3
 8004642:	f7fc fad3 	bl	8000bec <send_debug_logs>
            return rtc_time ;
 8004646:	193b      	adds	r3, r7, r4
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	e004      	b.n	8004656 <astronode_send_rtc_rr+0xb2>
        }
        else
        {
            send_debug_logs ( "Failed to read rtc time." ) ;
 800464c:	4b06      	ldr	r3, [pc, #24]	; (8004668 <astronode_send_rtc_rr+0xc4>)
 800464e:	0018      	movs	r0, r3
 8004650:	f7fc facc 	bl	8000bec <send_debug_logs>
        }
    }
    return 0 ;
 8004654:	2300      	movs	r3, #0
}
 8004656:	0018      	movs	r0, r3
 8004658:	46bd      	mov	sp, r7
 800465a:	b07a      	add	sp, #488	; 0x1e8
 800465c:	bdb0      	pop	{r4, r5, r7, pc}
 800465e:	46c0      	nop			; (mov r8, r8)
 8004660:	fffffe6c 	.word	0xfffffe6c
 8004664:	080069d8 	.word	0x080069d8
 8004668:	08006a18 	.word	0x08006a18

0800466c <astronode_send_sak_rr>:

void astronode_send_sak_rr(void)
{
 800466c:	b5b0      	push	{r4, r5, r7, lr}
 800466e:	b0f8      	sub	sp, #480	; 0x1e0
 8004670:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8004672:	258c      	movs	r5, #140	; 0x8c
 8004674:	006d      	lsls	r5, r5, #1
 8004676:	197b      	adds	r3, r7, r5
 8004678:	0018      	movs	r0, r3
 800467a:	23c6      	movs	r3, #198	; 0xc6
 800467c:	001a      	movs	r2, r3
 800467e:	2100      	movs	r1, #0
 8004680:	f001 f87c 	bl	800577c <memset>
    astronode_app_msg_t answer = {0};
 8004684:	4b21      	ldr	r3, [pc, #132]	; (800470c <astronode_send_sak_rr+0xa0>)
 8004686:	24f0      	movs	r4, #240	; 0xf0
 8004688:	0064      	lsls	r4, r4, #1
 800468a:	191b      	adds	r3, r3, r4
 800468c:	19db      	adds	r3, r3, r7
 800468e:	0018      	movs	r0, r3
 8004690:	23c6      	movs	r3, #198	; 0xc6
 8004692:	001a      	movs	r2, r3
 8004694:	2100      	movs	r1, #0
 8004696:	f001 f871 	bl	800577c <memset>

    request.op_code = ASTRONODE_OP_CODE_SAK_RR;
 800469a:	197b      	adds	r3, r7, r5
 800469c:	2245      	movs	r2, #69	; 0x45
 800469e:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80046a0:	2350      	movs	r3, #80	; 0x50
 80046a2:	18fa      	adds	r2, r7, r3
 80046a4:	197b      	adds	r3, r7, r5
 80046a6:	0011      	movs	r1, r2
 80046a8:	0018      	movs	r0, r3
 80046aa:	f000 fd83 	bl	80051b4 <astronode_transport_send_receive>
 80046ae:	0003      	movs	r3, r0
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d126      	bne.n	8004702 <astronode_send_sak_rr+0x96>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_SAK_RA)
 80046b4:	4b15      	ldr	r3, [pc, #84]	; (800470c <astronode_send_sak_rr+0xa0>)
 80046b6:	191b      	adds	r3, r3, r4
 80046b8:	19db      	adds	r3, r3, r7
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	2bc5      	cmp	r3, #197	; 0xc5
 80046be:	d11c      	bne.n	80046fa <astronode_send_sak_rr+0x8e>
        {
            uint16_t payload_id = answer.p_payload[0] + (answer.p_payload[1] << 8);
 80046c0:	4b12      	ldr	r3, [pc, #72]	; (800470c <astronode_send_sak_rr+0xa0>)
 80046c2:	191b      	adds	r3, r3, r4
 80046c4:	19db      	adds	r3, r3, r7
 80046c6:	785b      	ldrb	r3, [r3, #1]
 80046c8:	b299      	uxth	r1, r3
 80046ca:	4b10      	ldr	r3, [pc, #64]	; (800470c <astronode_send_sak_rr+0xa0>)
 80046cc:	191b      	adds	r3, r3, r4
 80046ce:	19db      	adds	r3, r3, r7
 80046d0:	789b      	ldrb	r3, [r3, #2]
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	021b      	lsls	r3, r3, #8
 80046d6:	b29a      	uxth	r2, r3
 80046d8:	20ef      	movs	r0, #239	; 0xef
 80046da:	0040      	lsls	r0, r0, #1
 80046dc:	183b      	adds	r3, r7, r0
 80046de:	188a      	adds	r2, r1, r2
 80046e0:	801a      	strh	r2, [r3, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "Acknowledgment for payload %d is available.", payload_id);
 80046e2:	183b      	adds	r3, r7, r0
 80046e4:	881a      	ldrh	r2, [r3, #0]
 80046e6:	490a      	ldr	r1, [pc, #40]	; (8004710 <astronode_send_sak_rr+0xa4>)
 80046e8:	003b      	movs	r3, r7
 80046ea:	0018      	movs	r0, r3
 80046ec:	f001 f826 	bl	800573c <siprintf>
            send_debug_logs(str);
 80046f0:	003b      	movs	r3, r7
 80046f2:	0018      	movs	r0, r3
 80046f4:	f7fc fa7a 	bl	8000bec <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: No acknowledgment available.");
        }
    }
}
 80046f8:	e003      	b.n	8004702 <astronode_send_sak_rr+0x96>
            send_debug_logs("astronode_application: No acknowledgment available.");
 80046fa:	4b06      	ldr	r3, [pc, #24]	; (8004714 <astronode_send_sak_rr+0xa8>)
 80046fc:	0018      	movs	r0, r3
 80046fe:	f7fc fa75 	bl	8000bec <send_debug_logs>
}
 8004702:	46c0      	nop			; (mov r8, r8)
 8004704:	46bd      	mov	sp, r7
 8004706:	b078      	add	sp, #480	; 0x1e0
 8004708:	bdb0      	pop	{r4, r5, r7, pc}
 800470a:	46c0      	nop			; (mov r8, r8)
 800470c:	fffffe70 	.word	0xfffffe70
 8004710:	08006a34 	.word	0x08006a34
 8004714:	08006a60 	.word	0x08006a60

08004718 <astronode_send_sak_cr>:

void astronode_send_sak_cr(void)
{
 8004718:	b5b0      	push	{r4, r5, r7, lr}
 800471a:	b0e4      	sub	sp, #400	; 0x190
 800471c:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 800471e:	24c8      	movs	r4, #200	; 0xc8
 8004720:	193b      	adds	r3, r7, r4
 8004722:	0018      	movs	r0, r3
 8004724:	23c6      	movs	r3, #198	; 0xc6
 8004726:	001a      	movs	r2, r3
 8004728:	2100      	movs	r1, #0
 800472a:	f001 f827 	bl	800577c <memset>
    astronode_app_msg_t answer = {0};
 800472e:	4b16      	ldr	r3, [pc, #88]	; (8004788 <astronode_send_sak_cr+0x70>)
 8004730:	25c8      	movs	r5, #200	; 0xc8
 8004732:	006d      	lsls	r5, r5, #1
 8004734:	195b      	adds	r3, r3, r5
 8004736:	19db      	adds	r3, r3, r7
 8004738:	0018      	movs	r0, r3
 800473a:	23c6      	movs	r3, #198	; 0xc6
 800473c:	001a      	movs	r2, r3
 800473e:	2100      	movs	r1, #0
 8004740:	f001 f81c 	bl	800577c <memset>

    request.op_code = ASTRONODE_OP_CODE_SAK_CR;
 8004744:	193b      	adds	r3, r7, r4
 8004746:	2246      	movs	r2, #70	; 0x46
 8004748:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800474a:	003a      	movs	r2, r7
 800474c:	193b      	adds	r3, r7, r4
 800474e:	0011      	movs	r1, r2
 8004750:	0018      	movs	r0, r3
 8004752:	f000 fd2f 	bl	80051b4 <astronode_transport_send_receive>
 8004756:	0003      	movs	r3, r0
 8004758:	2b01      	cmp	r3, #1
 800475a:	d111      	bne.n	8004780 <astronode_send_sak_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_SAK_CA)
 800475c:	4b0a      	ldr	r3, [pc, #40]	; (8004788 <astronode_send_sak_cr+0x70>)
 800475e:	195b      	adds	r3, r3, r5
 8004760:	19db      	adds	r3, r3, r7
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	2bc6      	cmp	r3, #198	; 0xc6
 8004766:	d107      	bne.n	8004778 <astronode_send_sak_cr+0x60>
        {
            g_is_sak_available = false;
 8004768:	4b08      	ldr	r3, [pc, #32]	; (800478c <astronode_send_sak_cr+0x74>)
 800476a:	2200      	movs	r2, #0
 800476c:	701a      	strb	r2, [r3, #0]
            send_debug_logs("The acknowledgment has been cleared.");
 800476e:	4b08      	ldr	r3, [pc, #32]	; (8004790 <astronode_send_sak_cr+0x78>)
 8004770:	0018      	movs	r0, r3
 8004772:	f7fc fa3b 	bl	8000bec <send_debug_logs>
        else
        {
            send_debug_logs("No acknowledgment available.");
        }
    }
}
 8004776:	e003      	b.n	8004780 <astronode_send_sak_cr+0x68>
            send_debug_logs("No acknowledgment available.");
 8004778:	4b06      	ldr	r3, [pc, #24]	; (8004794 <astronode_send_sak_cr+0x7c>)
 800477a:	0018      	movs	r0, r3
 800477c:	f7fc fa36 	bl	8000bec <send_debug_logs>
}
 8004780:	46c0      	nop			; (mov r8, r8)
 8004782:	46bd      	mov	sp, r7
 8004784:	b064      	add	sp, #400	; 0x190
 8004786:	bdb0      	pop	{r4, r5, r7, pc}
 8004788:	fffffe70 	.word	0xfffffe70
 800478c:	2000036c 	.word	0x2000036c
 8004790:	08006a94 	.word	0x08006a94
 8004794:	08006abc 	.word	0x08006abc

08004798 <astronode_send_mpn_rr>:
        }
    }
}

void astronode_send_mpn_rr(void)
{
 8004798:	b5f0      	push	{r4, r5, r6, r7, lr}
 800479a:	b0ed      	sub	sp, #436	; 0x1b4
 800479c:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 800479e:	21c8      	movs	r1, #200	; 0xc8
 80047a0:	2318      	movs	r3, #24
 80047a2:	18cb      	adds	r3, r1, r3
 80047a4:	19db      	adds	r3, r3, r7
 80047a6:	0018      	movs	r0, r3
 80047a8:	23c6      	movs	r3, #198	; 0xc6
 80047aa:	001a      	movs	r2, r3
 80047ac:	2100      	movs	r1, #0
 80047ae:	f000 ffe5 	bl	800577c <memset>
    astronode_app_msg_t answer = {0};
 80047b2:	4b4a      	ldr	r3, [pc, #296]	; (80048dc <astronode_send_mpn_rr+0x144>)
 80047b4:	26cc      	movs	r6, #204	; 0xcc
 80047b6:	0076      	lsls	r6, r6, #1
 80047b8:	199b      	adds	r3, r3, r6
 80047ba:	2218      	movs	r2, #24
 80047bc:	4694      	mov	ip, r2
 80047be:	44bc      	add	ip, r7
 80047c0:	4463      	add	r3, ip
 80047c2:	0018      	movs	r0, r3
 80047c4:	23c6      	movs	r3, #198	; 0xc6
 80047c6:	001a      	movs	r2, r3
 80047c8:	2100      	movs	r1, #0
 80047ca:	f000 ffd7 	bl	800577c <memset>

    request.op_code = ASTRONODE_OP_CODE_MPN_RR;
 80047ce:	21c8      	movs	r1, #200	; 0xc8
 80047d0:	2318      	movs	r3, #24
 80047d2:	18cb      	adds	r3, r1, r3
 80047d4:	19db      	adds	r3, r3, r7
 80047d6:	221b      	movs	r2, #27
 80047d8:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80047da:	2318      	movs	r3, #24
 80047dc:	18fa      	adds	r2, r7, r3
 80047de:	2318      	movs	r3, #24
 80047e0:	18cb      	adds	r3, r1, r3
 80047e2:	19db      	adds	r3, r3, r7
 80047e4:	0011      	movs	r1, r2
 80047e6:	0018      	movs	r0, r3
 80047e8:	f000 fce4 	bl	80051b4 <astronode_transport_send_receive>
 80047ec:	0003      	movs	r3, r0
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d16f      	bne.n	80048d2 <astronode_send_mpn_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MPN_RA)
 80047f2:	4b3a      	ldr	r3, [pc, #232]	; (80048dc <astronode_send_mpn_rr+0x144>)
 80047f4:	0032      	movs	r2, r6
 80047f6:	189b      	adds	r3, r3, r2
 80047f8:	2118      	movs	r1, #24
 80047fa:	468c      	mov	ip, r1
 80047fc:	44bc      	add	ip, r7
 80047fe:	4463      	add	r3, ip
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	2b9b      	cmp	r3, #155	; 0x9b
 8004804:	d161      	bne.n	80048ca <astronode_send_mpn_rr+0x132>
        {
 8004806:	466b      	mov	r3, sp
 8004808:	001e      	movs	r6, r3
            char product_number[answer.payload_len];
 800480a:	4b34      	ldr	r3, [pc, #208]	; (80048dc <astronode_send_mpn_rr+0x144>)
 800480c:	189b      	adds	r3, r3, r2
 800480e:	2218      	movs	r2, #24
 8004810:	4694      	mov	ip, r2
 8004812:	44bc      	add	ip, r7
 8004814:	4463      	add	r3, ip
 8004816:	22c4      	movs	r2, #196	; 0xc4
 8004818:	5a9b      	ldrh	r3, [r3, r2]
 800481a:	001a      	movs	r2, r3
 800481c:	3a01      	subs	r2, #1
 800481e:	21ca      	movs	r1, #202	; 0xca
 8004820:	0049      	lsls	r1, r1, #1
 8004822:	2018      	movs	r0, #24
 8004824:	1809      	adds	r1, r1, r0
 8004826:	19c9      	adds	r1, r1, r7
 8004828:	600a      	str	r2, [r1, #0]
 800482a:	001c      	movs	r4, r3
 800482c:	2200      	movs	r2, #0
 800482e:	0015      	movs	r5, r2
 8004830:	0020      	movs	r0, r4
 8004832:	0029      	movs	r1, r5
 8004834:	0004      	movs	r4, r0
 8004836:	0f62      	lsrs	r2, r4, #29
 8004838:	000c      	movs	r4, r1
 800483a:	00e4      	lsls	r4, r4, #3
 800483c:	617c      	str	r4, [r7, #20]
 800483e:	697c      	ldr	r4, [r7, #20]
 8004840:	4314      	orrs	r4, r2
 8004842:	617c      	str	r4, [r7, #20]
 8004844:	0001      	movs	r1, r0
 8004846:	00c9      	lsls	r1, r1, #3
 8004848:	6139      	str	r1, [r7, #16]
 800484a:	603b      	str	r3, [r7, #0]
 800484c:	2200      	movs	r2, #0
 800484e:	607a      	str	r2, [r7, #4]
 8004850:	6838      	ldr	r0, [r7, #0]
 8004852:	6879      	ldr	r1, [r7, #4]
 8004854:	0004      	movs	r4, r0
 8004856:	0f62      	lsrs	r2, r4, #29
 8004858:	000c      	movs	r4, r1
 800485a:	00e4      	lsls	r4, r4, #3
 800485c:	60fc      	str	r4, [r7, #12]
 800485e:	68fc      	ldr	r4, [r7, #12]
 8004860:	4314      	orrs	r4, r2
 8004862:	60fc      	str	r4, [r7, #12]
 8004864:	0001      	movs	r1, r0
 8004866:	00ca      	lsls	r2, r1, #3
 8004868:	60ba      	str	r2, [r7, #8]
 800486a:	3307      	adds	r3, #7
 800486c:	08db      	lsrs	r3, r3, #3
 800486e:	00db      	lsls	r3, r3, #3
 8004870:	4669      	mov	r1, sp
 8004872:	1acb      	subs	r3, r1, r3
 8004874:	469d      	mov	sp, r3
 8004876:	466b      	mov	r3, sp
 8004878:	3300      	adds	r3, #0
 800487a:	24c8      	movs	r4, #200	; 0xc8
 800487c:	0064      	lsls	r4, r4, #1
 800487e:	2218      	movs	r2, #24
 8004880:	18a2      	adds	r2, r4, r2
 8004882:	19d1      	adds	r1, r2, r7
 8004884:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module's product number is:");
 8004886:	4b16      	ldr	r3, [pc, #88]	; (80048e0 <astronode_send_mpn_rr+0x148>)
 8004888:	0018      	movs	r0, r3
 800488a:	f7fc f9af 	bl	8000bec <send_debug_logs>
            snprintf(product_number, answer.payload_len, "%s", answer.p_payload);
 800488e:	4b13      	ldr	r3, [pc, #76]	; (80048dc <astronode_send_mpn_rr+0x144>)
 8004890:	22cc      	movs	r2, #204	; 0xcc
 8004892:	0052      	lsls	r2, r2, #1
 8004894:	189b      	adds	r3, r3, r2
 8004896:	2218      	movs	r2, #24
 8004898:	4694      	mov	ip, r2
 800489a:	44bc      	add	ip, r7
 800489c:	4463      	add	r3, ip
 800489e:	22c4      	movs	r2, #196	; 0xc4
 80048a0:	5a9b      	ldrh	r3, [r3, r2]
 80048a2:	0019      	movs	r1, r3
 80048a4:	2318      	movs	r3, #24
 80048a6:	18fb      	adds	r3, r7, r3
 80048a8:	3301      	adds	r3, #1
 80048aa:	4a0e      	ldr	r2, [pc, #56]	; (80048e4 <astronode_send_mpn_rr+0x14c>)
 80048ac:	2018      	movs	r0, #24
 80048ae:	1820      	adds	r0, r4, r0
 80048b0:	19c0      	adds	r0, r0, r7
 80048b2:	6800      	ldr	r0, [r0, #0]
 80048b4:	f000 ff0e 	bl	80056d4 <sniprintf>
            send_debug_logs(product_number);
 80048b8:	2318      	movs	r3, #24
 80048ba:	18e3      	adds	r3, r4, r3
 80048bc:	19db      	adds	r3, r3, r7
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	0018      	movs	r0, r3
 80048c2:	f7fc f993 	bl	8000bec <send_debug_logs>
 80048c6:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module Serial Number.");
        }
    }
}
 80048c8:	e003      	b.n	80048d2 <astronode_send_mpn_rr+0x13a>
            send_debug_logs("Failed to read module Serial Number.");
 80048ca:	4b07      	ldr	r3, [pc, #28]	; (80048e8 <astronode_send_mpn_rr+0x150>)
 80048cc:	0018      	movs	r0, r3
 80048ce:	f7fc f98d 	bl	8000bec <send_debug_logs>
}
 80048d2:	46c0      	nop			; (mov r8, r8)
 80048d4:	46bd      	mov	sp, r7
 80048d6:	b06d      	add	sp, #436	; 0x1b4
 80048d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048da:	46c0      	nop			; (mov r8, r8)
 80048dc:	fffffe68 	.word	0xfffffe68
 80048e0:	08006b84 	.word	0x08006b84
 80048e4:	080066a0 	.word	0x080066a0
 80048e8:	080066dc 	.word	0x080066dc

080048ec <astronode_send_cmd_cr>:
        }
    }
}

void astronode_send_cmd_cr(void)
{
 80048ec:	b5b0      	push	{r4, r5, r7, lr}
 80048ee:	b0e4      	sub	sp, #400	; 0x190
 80048f0:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80048f2:	24c8      	movs	r4, #200	; 0xc8
 80048f4:	193b      	adds	r3, r7, r4
 80048f6:	0018      	movs	r0, r3
 80048f8:	23c6      	movs	r3, #198	; 0xc6
 80048fa:	001a      	movs	r2, r3
 80048fc:	2100      	movs	r1, #0
 80048fe:	f000 ff3d 	bl	800577c <memset>
    astronode_app_msg_t answer = {0};
 8004902:	4b16      	ldr	r3, [pc, #88]	; (800495c <astronode_send_cmd_cr+0x70>)
 8004904:	25c8      	movs	r5, #200	; 0xc8
 8004906:	006d      	lsls	r5, r5, #1
 8004908:	195b      	adds	r3, r3, r5
 800490a:	19db      	adds	r3, r3, r7
 800490c:	0018      	movs	r0, r3
 800490e:	23c6      	movs	r3, #198	; 0xc6
 8004910:	001a      	movs	r2, r3
 8004912:	2100      	movs	r1, #0
 8004914:	f000 ff32 	bl	800577c <memset>

    request.op_code = ASTRONODE_OP_CODE_CMD_CR;
 8004918:	193b      	adds	r3, r7, r4
 800491a:	2248      	movs	r2, #72	; 0x48
 800491c:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800491e:	003a      	movs	r2, r7
 8004920:	193b      	adds	r3, r7, r4
 8004922:	0011      	movs	r1, r2
 8004924:	0018      	movs	r0, r3
 8004926:	f000 fc45 	bl	80051b4 <astronode_transport_send_receive>
 800492a:	0003      	movs	r3, r0
 800492c:	2b01      	cmp	r3, #1
 800492e:	d111      	bne.n	8004954 <astronode_send_cmd_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CMD_CA)
 8004930:	4b0a      	ldr	r3, [pc, #40]	; (800495c <astronode_send_cmd_cr+0x70>)
 8004932:	195b      	adds	r3, r3, r5
 8004934:	19db      	adds	r3, r3, r7
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	2bc8      	cmp	r3, #200	; 0xc8
 800493a:	d107      	bne.n	800494c <astronode_send_cmd_cr+0x60>
        {
            g_is_command_available = false;
 800493c:	4b08      	ldr	r3, [pc, #32]	; (8004960 <astronode_send_cmd_cr+0x74>)
 800493e:	2200      	movs	r2, #0
 8004940:	701a      	strb	r2, [r3, #0]
            send_debug_logs("The command ack has been cleared.");
 8004942:	4b08      	ldr	r3, [pc, #32]	; (8004964 <astronode_send_cmd_cr+0x78>)
 8004944:	0018      	movs	r0, r3
 8004946:	f7fc f951 	bl	8000bec <send_debug_logs>
        else
        {
            send_debug_logs("No command to clear.");
        }
    }
}
 800494a:	e003      	b.n	8004954 <astronode_send_cmd_cr+0x68>
            send_debug_logs("No command to clear.");
 800494c:	4b06      	ldr	r3, [pc, #24]	; (8004968 <astronode_send_cmd_cr+0x7c>)
 800494e:	0018      	movs	r0, r3
 8004950:	f7fc f94c 	bl	8000bec <send_debug_logs>
}
 8004954:	46c0      	nop			; (mov r8, r8)
 8004956:	46bd      	mov	sp, r7
 8004958:	b064      	add	sp, #400	; 0x190
 800495a:	bdb0      	pop	{r4, r5, r7, pc}
 800495c:	fffffe70 	.word	0xfffffe70
 8004960:	2000036e 	.word	0x2000036e
 8004964:	08006fd4 	.word	0x08006fd4
 8004968:	08006ff8 	.word	0x08006ff8

0800496c <astronode_send_cmd_rr>:

bool astronode_send_cmd_rr ( char* my_astro_rcv_cmd )
{
 800496c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800496e:	4cc6      	ldr	r4, [pc, #792]	; (8004c88 <astronode_send_cmd_rr+0x31c>)
 8004970:	44a5      	add	sp, r4
 8004972:	af00      	add	r7, sp, #0
 8004974:	61f8      	str	r0, [r7, #28]
    astronode_app_msg_t request = {0};
 8004976:	2190      	movs	r1, #144	; 0x90
 8004978:	0049      	lsls	r1, r1, #1
 800497a:	2318      	movs	r3, #24
 800497c:	18cb      	adds	r3, r1, r3
 800497e:	19db      	adds	r3, r3, r7
 8004980:	0018      	movs	r0, r3
 8004982:	23c6      	movs	r3, #198	; 0xc6
 8004984:	001a      	movs	r2, r3
 8004986:	2100      	movs	r1, #0
 8004988:	f000 fef8 	bl	800577c <memset>
    astronode_app_msg_t answer = {0};
 800498c:	4bbf      	ldr	r3, [pc, #764]	; (8004c8c <astronode_send_cmd_rr+0x320>)
 800498e:	26fc      	movs	r6, #252	; 0xfc
 8004990:	0076      	lsls	r6, r6, #1
 8004992:	199b      	adds	r3, r3, r6
 8004994:	2218      	movs	r2, #24
 8004996:	4694      	mov	ip, r2
 8004998:	44bc      	add	ip, r7
 800499a:	4463      	add	r3, ip
 800499c:	0018      	movs	r0, r3
 800499e:	23c6      	movs	r3, #198	; 0xc6
 80049a0:	001a      	movs	r2, r3
 80049a2:	2100      	movs	r1, #0
 80049a4:	f000 feea 	bl	800577c <memset>
    bool result = false ;
 80049a8:	23f8      	movs	r3, #248	; 0xf8
 80049aa:	33ff      	adds	r3, #255	; 0xff
 80049ac:	2218      	movs	r2, #24
 80049ae:	189b      	adds	r3, r3, r2
 80049b0:	19db      	adds	r3, r3, r7
 80049b2:	2200      	movs	r2, #0
 80049b4:	701a      	strb	r2, [r3, #0]

    request.op_code = ASTRONODE_OP_CODE_CMD_RR;
 80049b6:	2190      	movs	r1, #144	; 0x90
 80049b8:	0049      	lsls	r1, r1, #1
 80049ba:	2318      	movs	r3, #24
 80049bc:	18cb      	adds	r3, r1, r3
 80049be:	19db      	adds	r3, r3, r7
 80049c0:	2247      	movs	r2, #71	; 0x47
 80049c2:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80049c4:	2258      	movs	r2, #88	; 0x58
 80049c6:	2318      	movs	r3, #24
 80049c8:	18d3      	adds	r3, r2, r3
 80049ca:	19da      	adds	r2, r3, r7
 80049cc:	2318      	movs	r3, #24
 80049ce:	18cb      	adds	r3, r1, r3
 80049d0:	19db      	adds	r3, r3, r7
 80049d2:	0011      	movs	r1, r2
 80049d4:	0018      	movs	r0, r3
 80049d6:	f000 fbed 	bl	80051b4 <astronode_transport_send_receive>
 80049da:	0003      	movs	r3, r0
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d000      	beq.n	80049e2 <astronode_send_cmd_rr+0x76>
 80049e0:	e146      	b.n	8004c70 <astronode_send_cmd_rr+0x304>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CMD_RA)
 80049e2:	4baa      	ldr	r3, [pc, #680]	; (8004c8c <astronode_send_cmd_rr+0x320>)
 80049e4:	199a      	adds	r2, r3, r6
 80049e6:	2318      	movs	r3, #24
 80049e8:	18fb      	adds	r3, r7, r3
 80049ea:	18d3      	adds	r3, r2, r3
 80049ec:	781b      	ldrb	r3, [r3, #0]
 80049ee:	2bc7      	cmp	r3, #199	; 0xc7
 80049f0:	d000      	beq.n	80049f4 <astronode_send_cmd_rr+0x88>
 80049f2:	e139      	b.n	8004c68 <astronode_send_cmd_rr+0x2fc>
        {
 80049f4:	466b      	mov	r3, sp
 80049f6:	001e      	movs	r6, r3
            send_debug_logs("Received downlink command");
 80049f8:	4ba5      	ldr	r3, [pc, #660]	; (8004c90 <astronode_send_cmd_rr+0x324>)
 80049fa:	0018      	movs	r0, r3
 80049fc:	f7fc f8f6 	bl	8000bec <send_debug_logs>
            uint32_t rtc_time = answer.p_payload[0]
 8004a00:	4ba2      	ldr	r3, [pc, #648]	; (8004c8c <astronode_send_cmd_rr+0x320>)
 8004a02:	21fc      	movs	r1, #252	; 0xfc
 8004a04:	0049      	lsls	r1, r1, #1
 8004a06:	185a      	adds	r2, r3, r1
 8004a08:	2318      	movs	r3, #24
 8004a0a:	18fb      	adds	r3, r7, r3
 8004a0c:	18d3      	adds	r3, r2, r3
 8004a0e:	785b      	ldrb	r3, [r3, #1]
 8004a10:	001a      	movs	r2, r3
                                + (answer.p_payload[1] << 8)
 8004a12:	4b9e      	ldr	r3, [pc, #632]	; (8004c8c <astronode_send_cmd_rr+0x320>)
 8004a14:	1858      	adds	r0, r3, r1
 8004a16:	2318      	movs	r3, #24
 8004a18:	18fb      	adds	r3, r7, r3
 8004a1a:	18c3      	adds	r3, r0, r3
 8004a1c:	789b      	ldrb	r3, [r3, #2]
 8004a1e:	021b      	lsls	r3, r3, #8
 8004a20:	18d2      	adds	r2, r2, r3
                                + (answer.p_payload[2] << 16)
 8004a22:	4b9a      	ldr	r3, [pc, #616]	; (8004c8c <astronode_send_cmd_rr+0x320>)
 8004a24:	1858      	adds	r0, r3, r1
 8004a26:	2318      	movs	r3, #24
 8004a28:	18fb      	adds	r3, r7, r3
 8004a2a:	18c3      	adds	r3, r0, r3
 8004a2c:	78db      	ldrb	r3, [r3, #3]
 8004a2e:	041b      	lsls	r3, r3, #16
 8004a30:	18d2      	adds	r2, r2, r3
                                + (answer.p_payload[3] << 24);
 8004a32:	4b96      	ldr	r3, [pc, #600]	; (8004c8c <astronode_send_cmd_rr+0x320>)
 8004a34:	1858      	adds	r0, r3, r1
 8004a36:	2318      	movs	r3, #24
 8004a38:	18fb      	adds	r3, r7, r3
 8004a3a:	18c3      	adds	r3, r0, r3
 8004a3c:	791b      	ldrb	r3, [r3, #4]
 8004a3e:	061b      	lsls	r3, r3, #24
 8004a40:	18d3      	adds	r3, r2, r3
            uint32_t rtc_time = answer.p_payload[0]
 8004a42:	22f8      	movs	r2, #248	; 0xf8
 8004a44:	0052      	lsls	r2, r2, #1
 8004a46:	2118      	movs	r1, #24
 8004a48:	1851      	adds	r1, r2, r1
 8004a4a:	19c8      	adds	r0, r1, r7
 8004a4c:	6003      	str	r3, [r0, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "Command created date, Ref is astrocast Epoch (2018-01-01 00:00:00 UTC): %lds.", rtc_time);
 8004a4e:	2318      	movs	r3, #24
 8004a50:	18d3      	adds	r3, r2, r3
 8004a52:	19da      	adds	r2, r3, r7
 8004a54:	6812      	ldr	r2, [r2, #0]
 8004a56:	498f      	ldr	r1, [pc, #572]	; (8004c94 <astronode_send_cmd_rr+0x328>)
 8004a58:	2008      	movs	r0, #8
 8004a5a:	2318      	movs	r3, #24
 8004a5c:	18c3      	adds	r3, r0, r3
 8004a5e:	19db      	adds	r3, r3, r7
 8004a60:	0018      	movs	r0, r3
 8004a62:	f000 fe6b 	bl	800573c <siprintf>
            send_debug_logs(str);
 8004a66:	2008      	movs	r0, #8
 8004a68:	2318      	movs	r3, #24
 8004a6a:	18c3      	adds	r3, r0, r3
 8004a6c:	19db      	adds	r3, r3, r7
 8004a6e:	0018      	movs	r0, r3
 8004a70:	f7fc f8bc 	bl	8000bec <send_debug_logs>

            if (((answer.payload_len - 4) != 40) && ((answer.payload_len - 4) != 8))
 8004a74:	4b85      	ldr	r3, [pc, #532]	; (8004c8c <astronode_send_cmd_rr+0x320>)
 8004a76:	21fc      	movs	r1, #252	; 0xfc
 8004a78:	0049      	lsls	r1, r1, #1
 8004a7a:	185a      	adds	r2, r3, r1
 8004a7c:	2318      	movs	r3, #24
 8004a7e:	18fb      	adds	r3, r7, r3
 8004a80:	18d3      	adds	r3, r2, r3
 8004a82:	22c4      	movs	r2, #196	; 0xc4
 8004a84:	5a9b      	ldrh	r3, [r3, r2]
 8004a86:	2b2c      	cmp	r3, #44	; 0x2c
 8004a88:	d013      	beq.n	8004ab2 <astronode_send_cmd_rr+0x146>
 8004a8a:	4b80      	ldr	r3, [pc, #512]	; (8004c8c <astronode_send_cmd_rr+0x320>)
 8004a8c:	185a      	adds	r2, r3, r1
 8004a8e:	2318      	movs	r3, #24
 8004a90:	18fb      	adds	r3, r7, r3
 8004a92:	18d3      	adds	r3, r2, r3
 8004a94:	22c4      	movs	r2, #196	; 0xc4
 8004a96:	5a9b      	ldrh	r3, [r3, r2]
 8004a98:	2b0c      	cmp	r3, #12
 8004a9a:	d00a      	beq.n	8004ab2 <astronode_send_cmd_rr+0x146>
            {
                send_debug_logs("Command size error");
 8004a9c:	4b7e      	ldr	r3, [pc, #504]	; (8004c98 <astronode_send_cmd_rr+0x32c>)
 8004a9e:	0018      	movs	r0, r3
 8004aa0:	f7fc f8a4 	bl	8000bec <send_debug_logs>
                return result ;
 8004aa4:	23f8      	movs	r3, #248	; 0xf8
 8004aa6:	33ff      	adds	r3, #255	; 0xff
 8004aa8:	2218      	movs	r2, #24
 8004aaa:	189b      	adds	r3, r3, r2
 8004aac:	19db      	adds	r3, r3, r7
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	e0d8      	b.n	8004c64 <astronode_send_cmd_rr+0x2f8>
            }

            char command_content[answer.payload_len];
 8004ab2:	4b76      	ldr	r3, [pc, #472]	; (8004c8c <astronode_send_cmd_rr+0x320>)
 8004ab4:	22fc      	movs	r2, #252	; 0xfc
 8004ab6:	0052      	lsls	r2, r2, #1
 8004ab8:	189b      	adds	r3, r3, r2
 8004aba:	2218      	movs	r2, #24
 8004abc:	4694      	mov	ip, r2
 8004abe:	44bc      	add	ip, r7
 8004ac0:	4463      	add	r3, ip
 8004ac2:	22c4      	movs	r2, #196	; 0xc4
 8004ac4:	5a9b      	ldrh	r3, [r3, r2]
 8004ac6:	001a      	movs	r2, r3
 8004ac8:	3a01      	subs	r2, #1
 8004aca:	21f6      	movs	r1, #246	; 0xf6
 8004acc:	0049      	lsls	r1, r1, #1
 8004ace:	2018      	movs	r0, #24
 8004ad0:	1809      	adds	r1, r1, r0
 8004ad2:	19c9      	adds	r1, r1, r7
 8004ad4:	600a      	str	r2, [r1, #0]
 8004ad6:	001c      	movs	r4, r3
 8004ad8:	2200      	movs	r2, #0
 8004ada:	0015      	movs	r5, r2
 8004adc:	0020      	movs	r0, r4
 8004ade:	0029      	movs	r1, r5
 8004ae0:	0004      	movs	r4, r0
 8004ae2:	0f62      	lsrs	r2, r4, #29
 8004ae4:	000c      	movs	r4, r1
 8004ae6:	00e4      	lsls	r4, r4, #3
 8004ae8:	617c      	str	r4, [r7, #20]
 8004aea:	697c      	ldr	r4, [r7, #20]
 8004aec:	4314      	orrs	r4, r2
 8004aee:	617c      	str	r4, [r7, #20]
 8004af0:	0001      	movs	r1, r0
 8004af2:	00c9      	lsls	r1, r1, #3
 8004af4:	6139      	str	r1, [r7, #16]
 8004af6:	603b      	str	r3, [r7, #0]
 8004af8:	2200      	movs	r2, #0
 8004afa:	607a      	str	r2, [r7, #4]
 8004afc:	6838      	ldr	r0, [r7, #0]
 8004afe:	6879      	ldr	r1, [r7, #4]
 8004b00:	0004      	movs	r4, r0
 8004b02:	0f62      	lsrs	r2, r4, #29
 8004b04:	000c      	movs	r4, r1
 8004b06:	00e4      	lsls	r4, r4, #3
 8004b08:	60fc      	str	r4, [r7, #12]
 8004b0a:	68fc      	ldr	r4, [r7, #12]
 8004b0c:	4314      	orrs	r4, r2
 8004b0e:	60fc      	str	r4, [r7, #12]
 8004b10:	0001      	movs	r1, r0
 8004b12:	00ca      	lsls	r2, r1, #3
 8004b14:	60ba      	str	r2, [r7, #8]
 8004b16:	3307      	adds	r3, #7
 8004b18:	08db      	lsrs	r3, r3, #3
 8004b1a:	00db      	lsls	r3, r3, #3
 8004b1c:	4669      	mov	r1, sp
 8004b1e:	1acb      	subs	r3, r1, r3
 8004b20:	469d      	mov	sp, r3
 8004b22:	466b      	mov	r3, sp
 8004b24:	3300      	adds	r3, #0
 8004b26:	20f4      	movs	r0, #244	; 0xf4
 8004b28:	0040      	lsls	r0, r0, #1
 8004b2a:	2218      	movs	r2, #24
 8004b2c:	1882      	adds	r2, r0, r2
 8004b2e:	19d1      	adds	r1, r2, r7
 8004b30:	600b      	str	r3, [r1, #0]
            uint16_t command_content_size = snprintf(command_content, (answer.payload_len - 4) + 1, "%s", &answer.p_payload[4]);
 8004b32:	4b56      	ldr	r3, [pc, #344]	; (8004c8c <astronode_send_cmd_rr+0x320>)
 8004b34:	22fc      	movs	r2, #252	; 0xfc
 8004b36:	0052      	lsls	r2, r2, #1
 8004b38:	189b      	adds	r3, r3, r2
 8004b3a:	2218      	movs	r2, #24
 8004b3c:	4694      	mov	ip, r2
 8004b3e:	44bc      	add	ip, r7
 8004b40:	4463      	add	r3, ip
 8004b42:	22c4      	movs	r2, #196	; 0xc4
 8004b44:	5a9b      	ldrh	r3, [r3, r2]
 8004b46:	3b03      	subs	r3, #3
 8004b48:	0019      	movs	r1, r3
 8004b4a:	2358      	movs	r3, #88	; 0x58
 8004b4c:	2218      	movs	r2, #24
 8004b4e:	189b      	adds	r3, r3, r2
 8004b50:	19db      	adds	r3, r3, r7
 8004b52:	3305      	adds	r3, #5
 8004b54:	4a51      	ldr	r2, [pc, #324]	; (8004c9c <astronode_send_cmd_rr+0x330>)
 8004b56:	2418      	movs	r4, #24
 8004b58:	1900      	adds	r0, r0, r4
 8004b5a:	19c0      	adds	r0, r0, r7
 8004b5c:	6800      	ldr	r0, [r0, #0]
 8004b5e:	f000 fdb9 	bl	80056d4 <sniprintf>
 8004b62:	0002      	movs	r2, r0
 8004b64:	23f3      	movs	r3, #243	; 0xf3
 8004b66:	005b      	lsls	r3, r3, #1
 8004b68:	2118      	movs	r1, #24
 8004b6a:	185b      	adds	r3, r3, r1
 8004b6c:	19db      	adds	r3, r3, r7
 8004b6e:	801a      	strh	r2, [r3, #0]
            for (uint8_t index = 0; index < command_content_size; index++)
 8004b70:	23fb      	movs	r3, #251	; 0xfb
 8004b72:	005b      	lsls	r3, r3, #1
 8004b74:	2218      	movs	r2, #24
 8004b76:	189b      	adds	r3, r3, r2
 8004b78:	19db      	adds	r3, r3, r7
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	701a      	strb	r2, [r3, #0]
 8004b7e:	e037      	b.n	8004bf0 <astronode_send_cmd_rr+0x284>
            {
            	if (isprint((unsigned char)command_content[index]) == 0)
 8004b80:	23fb      	movs	r3, #251	; 0xfb
 8004b82:	005b      	lsls	r3, r3, #1
 8004b84:	2218      	movs	r2, #24
 8004b86:	189b      	adds	r3, r3, r2
 8004b88:	19db      	adds	r3, r3, r7
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	22f4      	movs	r2, #244	; 0xf4
 8004b8e:	0052      	lsls	r2, r2, #1
 8004b90:	2118      	movs	r1, #24
 8004b92:	1852      	adds	r2, r2, r1
 8004b94:	19d2      	adds	r2, r2, r7
 8004b96:	6812      	ldr	r2, [r2, #0]
 8004b98:	5cd3      	ldrb	r3, [r2, r3]
 8004b9a:	1c5a      	adds	r2, r3, #1
 8004b9c:	4b40      	ldr	r3, [pc, #256]	; (8004ca0 <astronode_send_cmd_rr+0x334>)
 8004b9e:	18d3      	adds	r3, r2, r3
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	001a      	movs	r2, r3
 8004ba4:	2397      	movs	r3, #151	; 0x97
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	d105      	bne.n	8004bb6 <astronode_send_cmd_rr+0x24a>
                {
                    send_debug_logs("Command contains non printable characters");
 8004baa:	4b3e      	ldr	r3, [pc, #248]	; (8004ca4 <astronode_send_cmd_rr+0x338>)
 8004bac:	0018      	movs	r0, r3
 8004bae:	f7fc f81d 	bl	8000bec <send_debug_logs>
                    return false;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	e056      	b.n	8004c64 <astronode_send_cmd_rr+0x2f8>
                }
            	my_astro_rcv_cmd[index] = command_content[index] ;
 8004bb6:	20fb      	movs	r0, #251	; 0xfb
 8004bb8:	0040      	lsls	r0, r0, #1
 8004bba:	2318      	movs	r3, #24
 8004bbc:	18c3      	adds	r3, r0, r3
 8004bbe:	19db      	adds	r3, r3, r7
 8004bc0:	781a      	ldrb	r2, [r3, #0]
 8004bc2:	2318      	movs	r3, #24
 8004bc4:	18c3      	adds	r3, r0, r3
 8004bc6:	19db      	adds	r3, r3, r7
 8004bc8:	781b      	ldrb	r3, [r3, #0]
 8004bca:	69f9      	ldr	r1, [r7, #28]
 8004bcc:	18cb      	adds	r3, r1, r3
 8004bce:	21f4      	movs	r1, #244	; 0xf4
 8004bd0:	0049      	lsls	r1, r1, #1
 8004bd2:	2418      	movs	r4, #24
 8004bd4:	1909      	adds	r1, r1, r4
 8004bd6:	19c9      	adds	r1, r1, r7
 8004bd8:	6809      	ldr	r1, [r1, #0]
 8004bda:	5c8a      	ldrb	r2, [r1, r2]
 8004bdc:	701a      	strb	r2, [r3, #0]
            for (uint8_t index = 0; index < command_content_size; index++)
 8004bde:	2318      	movs	r3, #24
 8004be0:	18c3      	adds	r3, r0, r3
 8004be2:	19db      	adds	r3, r3, r7
 8004be4:	781a      	ldrb	r2, [r3, #0]
 8004be6:	2318      	movs	r3, #24
 8004be8:	18c3      	adds	r3, r0, r3
 8004bea:	19db      	adds	r3, r3, r7
 8004bec:	3201      	adds	r2, #1
 8004bee:	701a      	strb	r2, [r3, #0]
 8004bf0:	23fb      	movs	r3, #251	; 0xfb
 8004bf2:	005b      	lsls	r3, r3, #1
 8004bf4:	2218      	movs	r2, #24
 8004bf6:	189b      	adds	r3, r3, r2
 8004bf8:	19db      	adds	r3, r3, r7
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	21f3      	movs	r1, #243	; 0xf3
 8004c00:	0049      	lsls	r1, r1, #1
 8004c02:	2218      	movs	r2, #24
 8004c04:	188a      	adds	r2, r1, r2
 8004c06:	19d2      	adds	r2, r2, r7
 8004c08:	8812      	ldrh	r2, [r2, #0]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d8b8      	bhi.n	8004b80 <astronode_send_cmd_rr+0x214>
            }
            result = true ;
 8004c0e:	23f8      	movs	r3, #248	; 0xf8
 8004c10:	33ff      	adds	r3, #255	; 0xff
 8004c12:	2218      	movs	r2, #24
 8004c14:	189b      	adds	r3, r3, r2
 8004c16:	19db      	adds	r3, r3, r7
 8004c18:	2201      	movs	r2, #1
 8004c1a:	701a      	strb	r2, [r3, #0]
            my_astro_rcv_cmd[command_content_size] = 0 ;
 8004c1c:	2318      	movs	r3, #24
 8004c1e:	18cb      	adds	r3, r1, r3
 8004c20:	19db      	adds	r3, r3, r7
 8004c22:	881b      	ldrh	r3, [r3, #0]
 8004c24:	69fa      	ldr	r2, [r7, #28]
 8004c26:	18d3      	adds	r3, r2, r3
 8004c28:	2200      	movs	r2, #0
 8004c2a:	701a      	strb	r2, [r3, #0]
            send_debug_logs("Command content is: ");
 8004c2c:	4b1e      	ldr	r3, [pc, #120]	; (8004ca8 <astronode_send_cmd_rr+0x33c>)
 8004c2e:	0018      	movs	r0, r3
 8004c30:	f7fb ffdc 	bl	8000bec <send_debug_logs>
            sprintf(command_content, "%s ", &answer.p_payload[4]);
 8004c34:	2358      	movs	r3, #88	; 0x58
 8004c36:	2218      	movs	r2, #24
 8004c38:	189b      	adds	r3, r3, r2
 8004c3a:	19db      	adds	r3, r3, r7
 8004c3c:	1d5a      	adds	r2, r3, #5
 8004c3e:	491b      	ldr	r1, [pc, #108]	; (8004cac <astronode_send_cmd_rr+0x340>)
 8004c40:	24f4      	movs	r4, #244	; 0xf4
 8004c42:	0064      	lsls	r4, r4, #1
 8004c44:	2318      	movs	r3, #24
 8004c46:	18e3      	adds	r3, r4, r3
 8004c48:	19db      	adds	r3, r3, r7
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	0018      	movs	r0, r3
 8004c4e:	f000 fd75 	bl	800573c <siprintf>
            send_debug_logs(command_content);
 8004c52:	2318      	movs	r3, #24
 8004c54:	18e3      	adds	r3, r4, r3
 8004c56:	19db      	adds	r3, r3, r7
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	0018      	movs	r0, r3
 8004c5c:	f7fb ffc6 	bl	8000bec <send_debug_logs>
 8004c60:	46b5      	mov	sp, r6
 8004c62:	e005      	b.n	8004c70 <astronode_send_cmd_rr+0x304>
                return result ;
 8004c64:	46b5      	mov	sp, r6
 8004c66:	e009      	b.n	8004c7c <astronode_send_cmd_rr+0x310>
        }
        else
        {
            send_debug_logs("No command available.");
 8004c68:	4b11      	ldr	r3, [pc, #68]	; (8004cb0 <astronode_send_cmd_rr+0x344>)
 8004c6a:	0018      	movs	r0, r3
 8004c6c:	f7fb ffbe 	bl	8000bec <send_debug_logs>
        }
    }
    return result ;
 8004c70:	23f8      	movs	r3, #248	; 0xf8
 8004c72:	33ff      	adds	r3, #255	; 0xff
 8004c74:	2218      	movs	r2, #24
 8004c76:	189b      	adds	r3, r3, r2
 8004c78:	19db      	adds	r3, r3, r7
 8004c7a:	781b      	ldrb	r3, [r3, #0]
}
 8004c7c:	0018      	movs	r0, r3
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	2385      	movs	r3, #133	; 0x85
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	449d      	add	sp, r3
 8004c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c88:	fffffdec 	.word	0xfffffdec
 8004c8c:	fffffe60 	.word	0xfffffe60
 8004c90:	08007010 	.word	0x08007010
 8004c94:	0800702c 	.word	0x0800702c
 8004c98:	0800707c 	.word	0x0800707c
 8004c9c:	080066a0 	.word	0x080066a0
 8004ca0:	08007a1c 	.word	0x08007a1c
 8004ca4:	08007090 	.word	0x08007090
 8004ca8:	080070bc 	.word	0x080070bc
 8004cac:	080070d4 	.word	0x080070d4
 8004cb0:	080070d8 	.word	0x080070d8

08004cb4 <is_sak_available>:
        }
    }
}

bool is_sak_available()
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	af00      	add	r7, sp, #0
    return g_is_sak_available;
 8004cb8:	4b02      	ldr	r3, [pc, #8]	; (8004cc4 <is_sak_available+0x10>)
 8004cba:	781b      	ldrb	r3, [r3, #0]
}
 8004cbc:	0018      	movs	r0, r3
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	46c0      	nop			; (mov r8, r8)
 8004cc4:	2000036c 	.word	0x2000036c

08004cc8 <is_astronode_reset>:

bool is_astronode_reset()
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	af00      	add	r7, sp, #0
    return g_is_astronode_reset;
 8004ccc:	4b02      	ldr	r3, [pc, #8]	; (8004cd8 <is_astronode_reset+0x10>)
 8004cce:	781b      	ldrb	r3, [r3, #0]
}
 8004cd0:	0018      	movs	r0, r3
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	46c0      	nop			; (mov r8, r8)
 8004cd8:	2000036d 	.word	0x2000036d

08004cdc <is_command_available>:

bool is_command_available()
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	af00      	add	r7, sp, #0
    return g_is_command_available;
 8004ce0:	4b02      	ldr	r3, [pc, #8]	; (8004cec <is_command_available+0x10>)
 8004ce2:	781b      	ldrb	r3, [r3, #0]
}
 8004ce4:	0018      	movs	r0, r3
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	46c0      	nop			; (mov r8, r8)
 8004cec:	2000036e 	.word	0x2000036e

08004cf0 <ascii_to_value>:

//------------------------------------------------------------------------------
// Function definitions
//------------------------------------------------------------------------------
static bool ascii_to_value(const uint8_t ascii, uint8_t *p_value)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b082      	sub	sp, #8
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	0002      	movs	r2, r0
 8004cf8:	6039      	str	r1, [r7, #0]
 8004cfa:	1dfb      	adds	r3, r7, #7
 8004cfc:	701a      	strb	r2, [r3, #0]
    if (ascii >= '0' && ascii <= '9')
 8004cfe:	1dfb      	adds	r3, r7, #7
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	2b2f      	cmp	r3, #47	; 0x2f
 8004d04:	d90b      	bls.n	8004d1e <ascii_to_value+0x2e>
 8004d06:	1dfb      	adds	r3, r7, #7
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	2b39      	cmp	r3, #57	; 0x39
 8004d0c:	d807      	bhi.n	8004d1e <ascii_to_value+0x2e>
    {
        *p_value = ascii - '0';
 8004d0e:	1dfb      	adds	r3, r7, #7
 8004d10:	781b      	ldrb	r3, [r3, #0]
 8004d12:	3b30      	subs	r3, #48	; 0x30
 8004d14:	b2da      	uxtb	r2, r3
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	701a      	strb	r2, [r3, #0]
        return true;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e010      	b.n	8004d40 <ascii_to_value+0x50>
    }
    else if (ascii >= 'A' && ascii <= 'F')
 8004d1e:	1dfb      	adds	r3, r7, #7
 8004d20:	781b      	ldrb	r3, [r3, #0]
 8004d22:	2b40      	cmp	r3, #64	; 0x40
 8004d24:	d90b      	bls.n	8004d3e <ascii_to_value+0x4e>
 8004d26:	1dfb      	adds	r3, r7, #7
 8004d28:	781b      	ldrb	r3, [r3, #0]
 8004d2a:	2b46      	cmp	r3, #70	; 0x46
 8004d2c:	d807      	bhi.n	8004d3e <ascii_to_value+0x4e>
    {
        *p_value = ascii - 'A' + 10;
 8004d2e:	1dfb      	adds	r3, r7, #7
 8004d30:	781b      	ldrb	r3, [r3, #0]
 8004d32:	3b37      	subs	r3, #55	; 0x37
 8004d34:	b2da      	uxtb	r2, r3
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	701a      	strb	r2, [r3, #0]
        return true;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e000      	b.n	8004d40 <ascii_to_value+0x50>
    }
    else
    {
        return false;
 8004d3e:	2300      	movs	r3, #0
    }
}
 8004d40:	0018      	movs	r0, r3
 8004d42:	46bd      	mov	sp, r7
 8004d44:	b002      	add	sp, #8
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <astronode_create_request_transport>:

static uint16_t astronode_create_request_transport(astronode_app_msg_t *p_source_message, uint8_t *p_destination_buffer)
{
 8004d48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d4a:	b085      	sub	sp, #20
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
    uint16_t index = 0;
 8004d52:	250e      	movs	r5, #14
 8004d54:	197b      	adds	r3, r7, r5
 8004d56:	2200      	movs	r2, #0
 8004d58:	801a      	strh	r2, [r3, #0]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_STX;
 8004d5a:	197b      	adds	r3, r7, r5
 8004d5c:	881b      	ldrh	r3, [r3, #0]
 8004d5e:	197a      	adds	r2, r7, r5
 8004d60:	1c59      	adds	r1, r3, #1
 8004d62:	8011      	strh	r1, [r2, #0]
 8004d64:	001a      	movs	r2, r3
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	189b      	adds	r3, r3, r2
 8004d6a:	2202      	movs	r2, #2
 8004d6c:	701a      	strb	r2, [r3, #0]

    uint16_t crc = calculate_crc((const uint8_t *)&p_source_message->op_code, 1, 0xFFFF);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	260a      	movs	r6, #10
 8004d72:	19bc      	adds	r4, r7, r6
 8004d74:	4a44      	ldr	r2, [pc, #272]	; (8004e88 <astronode_create_request_transport+0x140>)
 8004d76:	2101      	movs	r1, #1
 8004d78:	0018      	movs	r0, r3
 8004d7a:	f000 fa7d 	bl	8005278 <calculate_crc>
 8004d7e:	0003      	movs	r3, r0
 8004d80:	8023      	strh	r3, [r4, #0]
    crc = calculate_crc((const uint8_t *)&p_source_message->p_payload, p_source_message->payload_len, crc);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	1c58      	adds	r0, r3, #1
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	22c4      	movs	r2, #196	; 0xc4
 8004d8a:	5a99      	ldrh	r1, [r3, r2]
 8004d8c:	19bc      	adds	r4, r7, r6
 8004d8e:	19bb      	adds	r3, r7, r6
 8004d90:	881b      	ldrh	r3, [r3, #0]
 8004d92:	001a      	movs	r2, r3
 8004d94:	f000 fa70 	bl	8005278 <calculate_crc>
 8004d98:	0003      	movs	r3, r0
 8004d9a:	8023      	strh	r3, [r4, #0]
    crc = ((crc << 8) & 0xff00) | ((crc >> 8) & 0x00ff);
 8004d9c:	19bb      	adds	r3, r7, r6
 8004d9e:	881b      	ldrh	r3, [r3, #0]
 8004da0:	021b      	lsls	r3, r3, #8
 8004da2:	b21a      	sxth	r2, r3
 8004da4:	0031      	movs	r1, r6
 8004da6:	19bb      	adds	r3, r7, r6
 8004da8:	881b      	ldrh	r3, [r3, #0]
 8004daa:	0a1b      	lsrs	r3, r3, #8
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	b21b      	sxth	r3, r3
 8004db0:	4313      	orrs	r3, r2
 8004db2:	b21a      	sxth	r2, r3
 8004db4:	187b      	adds	r3, r7, r1
 8004db6:	801a      	strh	r2, [r3, #0]

    uint8_to_ascii_buffer(p_source_message->op_code, &p_destination_buffer[index]);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	7818      	ldrb	r0, [r3, #0]
 8004dbc:	197b      	adds	r3, r7, r5
 8004dbe:	881b      	ldrh	r3, [r3, #0]
 8004dc0:	683a      	ldr	r2, [r7, #0]
 8004dc2:	18d3      	adds	r3, r2, r3
 8004dc4:	0019      	movs	r1, r3
 8004dc6:	f000 fbeb 	bl	80055a0 <uint8_to_ascii_buffer>
    index += 2;
 8004dca:	197b      	adds	r3, r7, r5
 8004dcc:	197a      	adds	r2, r7, r5
 8004dce:	8812      	ldrh	r2, [r2, #0]
 8004dd0:	3202      	adds	r2, #2
 8004dd2:	801a      	strh	r2, [r3, #0]

    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 8004dd4:	230c      	movs	r3, #12
 8004dd6:	18fb      	adds	r3, r7, r3
 8004dd8:	2200      	movs	r2, #0
 8004dda:	801a      	strh	r2, [r3, #0]
 8004ddc:	e017      	b.n	8004e0e <astronode_create_request_transport+0xc6>
    {
        uint8_to_ascii_buffer(p_source_message->p_payload[i], &p_destination_buffer[index]);
 8004dde:	240c      	movs	r4, #12
 8004de0:	193b      	adds	r3, r7, r4
 8004de2:	881b      	ldrh	r3, [r3, #0]
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	18d3      	adds	r3, r2, r3
 8004de8:	7858      	ldrb	r0, [r3, #1]
 8004dea:	250e      	movs	r5, #14
 8004dec:	197b      	adds	r3, r7, r5
 8004dee:	881b      	ldrh	r3, [r3, #0]
 8004df0:	683a      	ldr	r2, [r7, #0]
 8004df2:	18d3      	adds	r3, r2, r3
 8004df4:	0019      	movs	r1, r3
 8004df6:	f000 fbd3 	bl	80055a0 <uint8_to_ascii_buffer>
        index += 2;
 8004dfa:	197b      	adds	r3, r7, r5
 8004dfc:	197a      	adds	r2, r7, r5
 8004dfe:	8812      	ldrh	r2, [r2, #0]
 8004e00:	3202      	adds	r2, #2
 8004e02:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 8004e04:	193b      	adds	r3, r7, r4
 8004e06:	881a      	ldrh	r2, [r3, #0]
 8004e08:	193b      	adds	r3, r7, r4
 8004e0a:	3201      	adds	r2, #1
 8004e0c:	801a      	strh	r2, [r3, #0]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	22c4      	movs	r2, #196	; 0xc4
 8004e12:	5a9b      	ldrh	r3, [r3, r2]
 8004e14:	220c      	movs	r2, #12
 8004e16:	18ba      	adds	r2, r7, r2
 8004e18:	8812      	ldrh	r2, [r2, #0]
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d3df      	bcc.n	8004dde <astronode_create_request_transport+0x96>
    }

    uint8_to_ascii_buffer(crc >> 8, &p_destination_buffer[index]);
 8004e1e:	250a      	movs	r5, #10
 8004e20:	197b      	adds	r3, r7, r5
 8004e22:	881b      	ldrh	r3, [r3, #0]
 8004e24:	0a1b      	lsrs	r3, r3, #8
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	b2d8      	uxtb	r0, r3
 8004e2a:	240e      	movs	r4, #14
 8004e2c:	193b      	adds	r3, r7, r4
 8004e2e:	881b      	ldrh	r3, [r3, #0]
 8004e30:	683a      	ldr	r2, [r7, #0]
 8004e32:	18d3      	adds	r3, r2, r3
 8004e34:	0019      	movs	r1, r3
 8004e36:	f000 fbb3 	bl	80055a0 <uint8_to_ascii_buffer>
    index += 2;
 8004e3a:	0021      	movs	r1, r4
 8004e3c:	187b      	adds	r3, r7, r1
 8004e3e:	187a      	adds	r2, r7, r1
 8004e40:	8812      	ldrh	r2, [r2, #0]
 8004e42:	3202      	adds	r2, #2
 8004e44:	801a      	strh	r2, [r3, #0]
    uint8_to_ascii_buffer(crc & 0xFF, &p_destination_buffer[index]);
 8004e46:	197b      	adds	r3, r7, r5
 8004e48:	881b      	ldrh	r3, [r3, #0]
 8004e4a:	b2d8      	uxtb	r0, r3
 8004e4c:	000c      	movs	r4, r1
 8004e4e:	187b      	adds	r3, r7, r1
 8004e50:	881b      	ldrh	r3, [r3, #0]
 8004e52:	683a      	ldr	r2, [r7, #0]
 8004e54:	18d3      	adds	r3, r2, r3
 8004e56:	0019      	movs	r1, r3
 8004e58:	f000 fba2 	bl	80055a0 <uint8_to_ascii_buffer>
    index += 2;
 8004e5c:	0020      	movs	r0, r4
 8004e5e:	183b      	adds	r3, r7, r0
 8004e60:	183a      	adds	r2, r7, r0
 8004e62:	8812      	ldrh	r2, [r2, #0]
 8004e64:	3202      	adds	r2, #2
 8004e66:	801a      	strh	r2, [r3, #0]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_ETX;
 8004e68:	183b      	adds	r3, r7, r0
 8004e6a:	881b      	ldrh	r3, [r3, #0]
 8004e6c:	183a      	adds	r2, r7, r0
 8004e6e:	1c59      	adds	r1, r3, #1
 8004e70:	8011      	strh	r1, [r2, #0]
 8004e72:	001a      	movs	r2, r3
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	189b      	adds	r3, r3, r2
 8004e78:	2203      	movs	r2, #3
 8004e7a:	701a      	strb	r2, [r3, #0]

    return index;
 8004e7c:	183b      	adds	r3, r7, r0
 8004e7e:	881b      	ldrh	r3, [r3, #0]
}
 8004e80:	0018      	movs	r0, r3
 8004e82:	46bd      	mov	sp, r7
 8004e84:	b005      	add	sp, #20
 8004e86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e88:	0000ffff 	.word	0x0000ffff

08004e8c <astronode_decode_answer_transport>:

static return_status_t astronode_decode_answer_transport(uint8_t *p_source_buffer, uint16_t length_buffer, astronode_app_msg_t *p_destination_message)
{
 8004e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e8e:	b089      	sub	sp, #36	; 0x24
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	60f8      	str	r0, [r7, #12]
 8004e94:	607a      	str	r2, [r7, #4]
 8004e96:	230a      	movs	r3, #10
 8004e98:	18fb      	adds	r3, r7, r3
 8004e9a:	1c0a      	adds	r2, r1, #0
 8004e9c:	801a      	strh	r2, [r3, #0]
    if (p_source_buffer[0] != ASTRONODE_TRANSPORT_STX)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	781b      	ldrb	r3, [r3, #0]
 8004ea2:	2b02      	cmp	r3, #2
 8004ea4:	d005      	beq.n	8004eb2 <astronode_decode_answer_transport+0x26>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not start with STX character.");
 8004ea6:	4bbd      	ldr	r3, [pc, #756]	; (800519c <astronode_decode_answer_transport+0x310>)
 8004ea8:	0018      	movs	r0, r3
 8004eaa:	f7fb fe9f 	bl	8000bec <send_debug_logs>
        return RS_FAILURE;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	e170      	b.n	8005194 <astronode_decode_answer_transport+0x308>
    }

    if (length_buffer % 2 == 1 || length_buffer < 8) // 8: STX, ETX, 2 x opcode, 4 x CRC
 8004eb2:	210a      	movs	r1, #10
 8004eb4:	187b      	adds	r3, r7, r1
 8004eb6:	881b      	ldrh	r3, [r3, #0]
 8004eb8:	2201      	movs	r2, #1
 8004eba:	4013      	ands	r3, r2
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d103      	bne.n	8004eca <astronode_decode_answer_transport+0x3e>
 8004ec2:	187b      	adds	r3, r7, r1
 8004ec4:	881b      	ldrh	r3, [r3, #0]
 8004ec6:	2b07      	cmp	r3, #7
 8004ec8:	d805      	bhi.n	8004ed6 <astronode_decode_answer_transport+0x4a>
    {
        send_debug_logs("ERROR : Message received from the Astronode is missing at least one character.");
 8004eca:	4bb5      	ldr	r3, [pc, #724]	; (80051a0 <astronode_decode_answer_transport+0x314>)
 8004ecc:	0018      	movs	r0, r3
 8004ece:	f7fb fe8d 	bl	8000bec <send_debug_logs>
        return RS_FAILURE;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	e15e      	b.n	8005194 <astronode_decode_answer_transport+0x308>
    }

    p_destination_message->payload_len = (length_buffer - 8) / 2;
 8004ed6:	230a      	movs	r3, #10
 8004ed8:	18fb      	adds	r3, r7, r3
 8004eda:	881b      	ldrh	r3, [r3, #0]
 8004edc:	3b08      	subs	r3, #8
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	da00      	bge.n	8004ee4 <astronode_decode_answer_transport+0x58>
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	105b      	asrs	r3, r3, #1
 8004ee6:	b299      	uxth	r1, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	22c4      	movs	r2, #196	; 0xc4
 8004eec:	5299      	strh	r1, [r3, r2]

    if (p_source_buffer[length_buffer - 1] != ASTRONODE_TRANSPORT_ETX)
 8004eee:	230a      	movs	r3, #10
 8004ef0:	18fb      	adds	r3, r7, r3
 8004ef2:	881b      	ldrh	r3, [r3, #0]
 8004ef4:	3b01      	subs	r3, #1
 8004ef6:	68fa      	ldr	r2, [r7, #12]
 8004ef8:	18d3      	adds	r3, r2, r3
 8004efa:	781b      	ldrb	r3, [r3, #0]
 8004efc:	2b03      	cmp	r3, #3
 8004efe:	d005      	beq.n	8004f0c <astronode_decode_answer_transport+0x80>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not end with ETX character.");
 8004f00:	4ba8      	ldr	r3, [pc, #672]	; (80051a4 <astronode_decode_answer_transport+0x318>)
 8004f02:	0018      	movs	r0, r3
 8004f04:	f7fb fe72 	bl	8000bec <send_debug_logs>
        return RS_FAILURE;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	e143      	b.n	8005194 <astronode_decode_answer_transport+0x308>
    }

    uint8_t nibble_high = 0;
 8004f0c:	2117      	movs	r1, #23
 8004f0e:	187b      	adds	r3, r7, r1
 8004f10:	2200      	movs	r2, #0
 8004f12:	701a      	strb	r2, [r3, #0]
    uint8_t nibble_low = 0;
 8004f14:	2416      	movs	r4, #22
 8004f16:	193b      	adds	r3, r7, r4
 8004f18:	2200      	movs	r2, #0
 8004f1a:	701a      	strb	r2, [r3, #0]

    // Op code
    if (ascii_to_value(p_source_buffer[1], &nibble_high) == false
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	3301      	adds	r3, #1
 8004f20:	781b      	ldrb	r3, [r3, #0]
 8004f22:	187a      	adds	r2, r7, r1
 8004f24:	0011      	movs	r1, r2
 8004f26:	0018      	movs	r0, r3
 8004f28:	f7ff fee2 	bl	8004cf0 <ascii_to_value>
 8004f2c:	0003      	movs	r3, r0
 8004f2e:	001a      	movs	r2, r3
 8004f30:	2301      	movs	r3, #1
 8004f32:	4053      	eors	r3, r2
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d10e      	bne.n	8004f58 <astronode_decode_answer_transport+0xcc>
        || ascii_to_value(p_source_buffer[2], &nibble_low) == false)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	3302      	adds	r3, #2
 8004f3e:	781b      	ldrb	r3, [r3, #0]
 8004f40:	193a      	adds	r2, r7, r4
 8004f42:	0011      	movs	r1, r2
 8004f44:	0018      	movs	r0, r3
 8004f46:	f7ff fed3 	bl	8004cf0 <ascii_to_value>
 8004f4a:	0003      	movs	r3, r0
 8004f4c:	001a      	movs	r2, r3
 8004f4e:	2301      	movs	r3, #1
 8004f50:	4053      	eors	r3, r2
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d005      	beq.n	8004f64 <astronode_decode_answer_transport+0xd8>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8004f58:	4b93      	ldr	r3, [pc, #588]	; (80051a8 <astronode_decode_answer_transport+0x31c>)
 8004f5a:	0018      	movs	r0, r3
 8004f5c:	f7fb fe46 	bl	8000bec <send_debug_logs>
        return RS_FAILURE;
 8004f60:	2300      	movs	r3, #0
 8004f62:	e117      	b.n	8005194 <astronode_decode_answer_transport+0x308>
    }

    p_destination_message->op_code = (nibble_high << 4) + nibble_low;
 8004f64:	2317      	movs	r3, #23
 8004f66:	18fb      	adds	r3, r7, r3
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	011b      	lsls	r3, r3, #4
 8004f6c:	b2da      	uxtb	r2, r3
 8004f6e:	2316      	movs	r3, #22
 8004f70:	18fb      	adds	r3, r7, r3
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	18d3      	adds	r3, r2, r3
 8004f76:	b2da      	uxtb	r2, r3
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	701a      	strb	r2, [r3, #0]

    // Payload
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 8004f7c:	231e      	movs	r3, #30
 8004f7e:	18fb      	adds	r3, r7, r3
 8004f80:	2203      	movs	r2, #3
 8004f82:	801a      	strh	r2, [r3, #0]
 8004f84:	231c      	movs	r3, #28
 8004f86:	18fb      	adds	r3, r7, r3
 8004f88:	2200      	movs	r2, #0
 8004f8a:	801a      	strh	r2, [r3, #0]
 8004f8c:	e045      	b.n	800501a <astronode_decode_answer_transport+0x18e>
    {
        if (ascii_to_value(p_source_buffer[i], &nibble_high) == false
 8004f8e:	241e      	movs	r4, #30
 8004f90:	193b      	adds	r3, r7, r4
 8004f92:	881b      	ldrh	r3, [r3, #0]
 8004f94:	68fa      	ldr	r2, [r7, #12]
 8004f96:	18d3      	adds	r3, r2, r3
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	2217      	movs	r2, #23
 8004f9c:	18ba      	adds	r2, r7, r2
 8004f9e:	0011      	movs	r1, r2
 8004fa0:	0018      	movs	r0, r3
 8004fa2:	f7ff fea5 	bl	8004cf0 <ascii_to_value>
 8004fa6:	0003      	movs	r3, r0
 8004fa8:	001a      	movs	r2, r3
 8004faa:	2301      	movs	r3, #1
 8004fac:	4053      	eors	r3, r2
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d112      	bne.n	8004fda <astronode_decode_answer_transport+0x14e>
            || ascii_to_value(p_source_buffer[i + 1], &nibble_low) == false)
 8004fb4:	193b      	adds	r3, r7, r4
 8004fb6:	881b      	ldrh	r3, [r3, #0]
 8004fb8:	3301      	adds	r3, #1
 8004fba:	68fa      	ldr	r2, [r7, #12]
 8004fbc:	18d3      	adds	r3, r2, r3
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	2216      	movs	r2, #22
 8004fc2:	18ba      	adds	r2, r7, r2
 8004fc4:	0011      	movs	r1, r2
 8004fc6:	0018      	movs	r0, r3
 8004fc8:	f7ff fe92 	bl	8004cf0 <ascii_to_value>
 8004fcc:	0003      	movs	r3, r0
 8004fce:	001a      	movs	r2, r3
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	4053      	eors	r3, r2
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d005      	beq.n	8004fe6 <astronode_decode_answer_transport+0x15a>
        {
            send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8004fda:	4b73      	ldr	r3, [pc, #460]	; (80051a8 <astronode_decode_answer_transport+0x31c>)
 8004fdc:	0018      	movs	r0, r3
 8004fde:	f7fb fe05 	bl	8000bec <send_debug_logs>
            return RS_FAILURE;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	e0d6      	b.n	8005194 <astronode_decode_answer_transport+0x308>
        }

        p_destination_message->p_payload[j++] = (nibble_high << 4) + nibble_low;
 8004fe6:	2317      	movs	r3, #23
 8004fe8:	18fb      	adds	r3, r7, r3
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	011b      	lsls	r3, r3, #4
 8004fee:	b2d9      	uxtb	r1, r3
 8004ff0:	2316      	movs	r3, #22
 8004ff2:	18fb      	adds	r3, r7, r3
 8004ff4:	781a      	ldrb	r2, [r3, #0]
 8004ff6:	201c      	movs	r0, #28
 8004ff8:	183b      	adds	r3, r7, r0
 8004ffa:	881b      	ldrh	r3, [r3, #0]
 8004ffc:	1838      	adds	r0, r7, r0
 8004ffe:	1c5c      	adds	r4, r3, #1
 8005000:	8004      	strh	r4, [r0, #0]
 8005002:	0018      	movs	r0, r3
 8005004:	188b      	adds	r3, r1, r2
 8005006:	b2da      	uxtb	r2, r3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	181b      	adds	r3, r3, r0
 800500c:	705a      	strb	r2, [r3, #1]
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 800500e:	221e      	movs	r2, #30
 8005010:	18bb      	adds	r3, r7, r2
 8005012:	18ba      	adds	r2, r7, r2
 8005014:	8812      	ldrh	r2, [r2, #0]
 8005016:	3202      	adds	r2, #2
 8005018:	801a      	strh	r2, [r3, #0]
 800501a:	231e      	movs	r3, #30
 800501c:	18fb      	adds	r3, r7, r3
 800501e:	881a      	ldrh	r2, [r3, #0]
 8005020:	260a      	movs	r6, #10
 8005022:	19bb      	adds	r3, r7, r6
 8005024:	881b      	ldrh	r3, [r3, #0]
 8005026:	3b05      	subs	r3, #5
 8005028:	429a      	cmp	r2, r3
 800502a:	dbb0      	blt.n	8004f8e <astronode_decode_answer_transport+0x102>
    }

    // CRC
    uint16_t crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->op_code, 1, 0xFFFF);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	251a      	movs	r5, #26
 8005030:	197c      	adds	r4, r7, r5
 8005032:	4a5e      	ldr	r2, [pc, #376]	; (80051ac <astronode_decode_answer_transport+0x320>)
 8005034:	2101      	movs	r1, #1
 8005036:	0018      	movs	r0, r3
 8005038:	f000 f91e 	bl	8005278 <calculate_crc>
 800503c:	0003      	movs	r3, r0
 800503e:	8023      	strh	r3, [r4, #0]
    crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->p_payload, p_destination_message->payload_len, crc_calculated);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	1c58      	adds	r0, r3, #1
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	22c4      	movs	r2, #196	; 0xc4
 8005048:	5a99      	ldrh	r1, [r3, r2]
 800504a:	197c      	adds	r4, r7, r5
 800504c:	197b      	adds	r3, r7, r5
 800504e:	881b      	ldrh	r3, [r3, #0]
 8005050:	001a      	movs	r2, r3
 8005052:	f000 f911 	bl	8005278 <calculate_crc>
 8005056:	0003      	movs	r3, r0
 8005058:	8023      	strh	r3, [r4, #0]
    crc_calculated = ((crc_calculated << 8) & 0xff00) | ((crc_calculated >> 8) & 0x00ff);
 800505a:	197b      	adds	r3, r7, r5
 800505c:	881b      	ldrh	r3, [r3, #0]
 800505e:	021b      	lsls	r3, r3, #8
 8005060:	b21a      	sxth	r2, r3
 8005062:	0029      	movs	r1, r5
 8005064:	197b      	adds	r3, r7, r5
 8005066:	881b      	ldrh	r3, [r3, #0]
 8005068:	0a1b      	lsrs	r3, r3, #8
 800506a:	b29b      	uxth	r3, r3
 800506c:	b21b      	sxth	r3, r3
 800506e:	4313      	orrs	r3, r2
 8005070:	b21a      	sxth	r2, r3
 8005072:	187b      	adds	r3, r7, r1
 8005074:	801a      	strh	r2, [r3, #0]


    if (ascii_to_value(p_source_buffer[length_buffer - 5], &nibble_high) == false
 8005076:	19bb      	adds	r3, r7, r6
 8005078:	881b      	ldrh	r3, [r3, #0]
 800507a:	3b05      	subs	r3, #5
 800507c:	68fa      	ldr	r2, [r7, #12]
 800507e:	18d3      	adds	r3, r2, r3
 8005080:	781b      	ldrb	r3, [r3, #0]
 8005082:	2217      	movs	r2, #23
 8005084:	18ba      	adds	r2, r7, r2
 8005086:	0011      	movs	r1, r2
 8005088:	0018      	movs	r0, r3
 800508a:	f7ff fe31 	bl	8004cf0 <ascii_to_value>
 800508e:	0003      	movs	r3, r0
 8005090:	001a      	movs	r2, r3
 8005092:	2301      	movs	r3, #1
 8005094:	4053      	eors	r3, r2
 8005096:	b2db      	uxtb	r3, r3
 8005098:	2b00      	cmp	r3, #0
 800509a:	d112      	bne.n	80050c2 <astronode_decode_answer_transport+0x236>
        || ascii_to_value(p_source_buffer[length_buffer - 4], &nibble_low) == false)
 800509c:	19bb      	adds	r3, r7, r6
 800509e:	881b      	ldrh	r3, [r3, #0]
 80050a0:	3b04      	subs	r3, #4
 80050a2:	68fa      	ldr	r2, [r7, #12]
 80050a4:	18d3      	adds	r3, r2, r3
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	2216      	movs	r2, #22
 80050aa:	18ba      	adds	r2, r7, r2
 80050ac:	0011      	movs	r1, r2
 80050ae:	0018      	movs	r0, r3
 80050b0:	f7ff fe1e 	bl	8004cf0 <ascii_to_value>
 80050b4:	0003      	movs	r3, r0
 80050b6:	001a      	movs	r2, r3
 80050b8:	2301      	movs	r3, #1
 80050ba:	4053      	eors	r3, r2
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d005      	beq.n	80050ce <astronode_decode_answer_transport+0x242>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 80050c2:	4b39      	ldr	r3, [pc, #228]	; (80051a8 <astronode_decode_answer_transport+0x31c>)
 80050c4:	0018      	movs	r0, r3
 80050c6:	f7fb fd91 	bl	8000bec <send_debug_logs>
        return RS_FAILURE;
 80050ca:	2300      	movs	r3, #0
 80050cc:	e062      	b.n	8005194 <astronode_decode_answer_transport+0x308>
    }

    uint16_t crc_received = (nibble_high << 12) + (nibble_low << 8);
 80050ce:	2017      	movs	r0, #23
 80050d0:	183b      	adds	r3, r7, r0
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	031b      	lsls	r3, r3, #12
 80050d8:	b299      	uxth	r1, r3
 80050da:	2416      	movs	r4, #22
 80050dc:	193b      	adds	r3, r7, r4
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	021b      	lsls	r3, r3, #8
 80050e4:	b29a      	uxth	r2, r3
 80050e6:	2318      	movs	r3, #24
 80050e8:	18fb      	adds	r3, r7, r3
 80050ea:	188a      	adds	r2, r1, r2
 80050ec:	801a      	strh	r2, [r3, #0]

    if (ascii_to_value(p_source_buffer[length_buffer - 3], &nibble_high) == false
 80050ee:	250a      	movs	r5, #10
 80050f0:	197b      	adds	r3, r7, r5
 80050f2:	881b      	ldrh	r3, [r3, #0]
 80050f4:	3b03      	subs	r3, #3
 80050f6:	68fa      	ldr	r2, [r7, #12]
 80050f8:	18d3      	adds	r3, r2, r3
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	183a      	adds	r2, r7, r0
 80050fe:	0011      	movs	r1, r2
 8005100:	0018      	movs	r0, r3
 8005102:	f7ff fdf5 	bl	8004cf0 <ascii_to_value>
 8005106:	0003      	movs	r3, r0
 8005108:	001a      	movs	r2, r3
 800510a:	2301      	movs	r3, #1
 800510c:	4053      	eors	r3, r2
 800510e:	b2db      	uxtb	r3, r3
 8005110:	2b00      	cmp	r3, #0
 8005112:	d111      	bne.n	8005138 <astronode_decode_answer_transport+0x2ac>
        || ascii_to_value(p_source_buffer[length_buffer - 2], &nibble_low) == false)
 8005114:	197b      	adds	r3, r7, r5
 8005116:	881b      	ldrh	r3, [r3, #0]
 8005118:	3b02      	subs	r3, #2
 800511a:	68fa      	ldr	r2, [r7, #12]
 800511c:	18d3      	adds	r3, r2, r3
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	193a      	adds	r2, r7, r4
 8005122:	0011      	movs	r1, r2
 8005124:	0018      	movs	r0, r3
 8005126:	f7ff fde3 	bl	8004cf0 <ascii_to_value>
 800512a:	0003      	movs	r3, r0
 800512c:	001a      	movs	r2, r3
 800512e:	2301      	movs	r3, #1
 8005130:	4053      	eors	r3, r2
 8005132:	b2db      	uxtb	r3, r3
 8005134:	2b00      	cmp	r3, #0
 8005136:	d005      	beq.n	8005144 <astronode_decode_answer_transport+0x2b8>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8005138:	4b1b      	ldr	r3, [pc, #108]	; (80051a8 <astronode_decode_answer_transport+0x31c>)
 800513a:	0018      	movs	r0, r3
 800513c:	f7fb fd56 	bl	8000bec <send_debug_logs>
        return RS_FAILURE;
 8005140:	2300      	movs	r3, #0
 8005142:	e027      	b.n	8005194 <astronode_decode_answer_transport+0x308>
    }

    crc_received += (nibble_high << 4) + nibble_low;
 8005144:	2317      	movs	r3, #23
 8005146:	18fb      	adds	r3, r7, r3
 8005148:	781b      	ldrb	r3, [r3, #0]
 800514a:	b29b      	uxth	r3, r3
 800514c:	011b      	lsls	r3, r3, #4
 800514e:	b29a      	uxth	r2, r3
 8005150:	2316      	movs	r3, #22
 8005152:	18fb      	adds	r3, r7, r3
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	b29b      	uxth	r3, r3
 8005158:	18d3      	adds	r3, r2, r3
 800515a:	b299      	uxth	r1, r3
 800515c:	2018      	movs	r0, #24
 800515e:	183b      	adds	r3, r7, r0
 8005160:	183a      	adds	r2, r7, r0
 8005162:	8812      	ldrh	r2, [r2, #0]
 8005164:	188a      	adds	r2, r1, r2
 8005166:	801a      	strh	r2, [r3, #0]

    if (crc_received != crc_calculated)
 8005168:	183a      	adds	r2, r7, r0
 800516a:	231a      	movs	r3, #26
 800516c:	18fb      	adds	r3, r7, r3
 800516e:	8812      	ldrh	r2, [r2, #0]
 8005170:	881b      	ldrh	r3, [r3, #0]
 8005172:	429a      	cmp	r2, r3
 8005174:	d005      	beq.n	8005182 <astronode_decode_answer_transport+0x2f6>
    {
        send_debug_logs("ERROR : CRC sent by the Astronode does not match the expected CRC");
 8005176:	4b0e      	ldr	r3, [pc, #56]	; (80051b0 <astronode_decode_answer_transport+0x324>)
 8005178:	0018      	movs	r0, r3
 800517a:	f7fb fd37 	bl	8000bec <send_debug_logs>
        return RS_FAILURE;
 800517e:	2300      	movs	r3, #0
 8005180:	e008      	b.n	8005194 <astronode_decode_answer_transport+0x308>
    }

    if (p_destination_message->op_code == ASTRONODE_OP_CODE_ERROR)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	781b      	ldrb	r3, [r3, #0]
 8005186:	2bff      	cmp	r3, #255	; 0xff
 8005188:	d103      	bne.n	8005192 <astronode_decode_answer_transport+0x306>
    {
        check_for_error(p_destination_message);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	0018      	movs	r0, r3
 800518e:	f000 f8c3 	bl	8005318 <check_for_error>
    }

    return RS_SUCCESS;
 8005192:	2301      	movs	r3, #1
}
 8005194:	0018      	movs	r0, r3
 8005196:	46bd      	mov	sp, r7
 8005198:	b009      	add	sp, #36	; 0x24
 800519a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800519c:	08007168 	.word	0x08007168
 80051a0:	080071b8 	.word	0x080071b8
 80051a4:	08007208 	.word	0x08007208
 80051a8:	08007258 	.word	0x08007258
 80051ac:	0000ffff 	.word	0x0000ffff
 80051b0:	080072a4 	.word	0x080072a4

080051b4 <astronode_transport_send_receive>:

return_status_t astronode_transport_send_receive(astronode_app_msg_t *p_request, astronode_app_msg_t *p_answer)
{
 80051b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051b6:	4c2b      	ldr	r4, [pc, #172]	; (8005264 <astronode_transport_send_receive+0xb0>)
 80051b8:	44a5      	add	sp, r4
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
 80051be:	6039      	str	r1, [r7, #0]
    uint8_t request_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 80051c0:	4b29      	ldr	r3, [pc, #164]	; (8005268 <astronode_transport_send_receive+0xb4>)
 80051c2:	25ca      	movs	r5, #202	; 0xca
 80051c4:	00ad      	lsls	r5, r5, #2
 80051c6:	195b      	adds	r3, r3, r5
 80051c8:	19db      	adds	r3, r3, r7
 80051ca:	2200      	movs	r2, #0
 80051cc:	601a      	str	r2, [r3, #0]
 80051ce:	3304      	adds	r3, #4
 80051d0:	22c4      	movs	r2, #196	; 0xc4
 80051d2:	0052      	lsls	r2, r2, #1
 80051d4:	2100      	movs	r1, #0
 80051d6:	0018      	movs	r0, r3
 80051d8:	f000 fad0 	bl	800577c <memset>
    uint8_t answer_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 80051dc:	4b23      	ldr	r3, [pc, #140]	; (800526c <astronode_transport_send_receive+0xb8>)
 80051de:	195b      	adds	r3, r3, r5
 80051e0:	19db      	adds	r3, r3, r7
 80051e2:	2200      	movs	r2, #0
 80051e4:	601a      	str	r2, [r3, #0]
 80051e6:	3304      	adds	r3, #4
 80051e8:	22c4      	movs	r2, #196	; 0xc4
 80051ea:	0052      	lsls	r2, r2, #1
 80051ec:	2100      	movs	r1, #0
 80051ee:	0018      	movs	r0, r3
 80051f0:	f000 fac4 	bl	800577c <memset>
    uint16_t answer_length =  0;
 80051f4:	4b1e      	ldr	r3, [pc, #120]	; (8005270 <astronode_transport_send_receive+0xbc>)
 80051f6:	195b      	adds	r3, r3, r5
 80051f8:	19db      	adds	r3, r3, r7
 80051fa:	2200      	movs	r2, #0
 80051fc:	801a      	strh	r2, [r3, #0]

    uint16_t request_length = astronode_create_request_transport(p_request, request_transport);
 80051fe:	4e1d      	ldr	r6, [pc, #116]	; (8005274 <astronode_transport_send_receive+0xc0>)
 8005200:	19bc      	adds	r4, r7, r6
 8005202:	23cc      	movs	r3, #204	; 0xcc
 8005204:	005b      	lsls	r3, r3, #1
 8005206:	18fa      	adds	r2, r7, r3
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	0011      	movs	r1, r2
 800520c:	0018      	movs	r0, r3
 800520e:	f7ff fd9b 	bl	8004d48 <astronode_create_request_transport>
 8005212:	0003      	movs	r3, r0
 8005214:	8023      	strh	r3, [r4, #0]

    send_astronode_request(request_transport, request_length);
 8005216:	19bb      	adds	r3, r7, r6
 8005218:	881a      	ldrh	r2, [r3, #0]
 800521a:	23cc      	movs	r3, #204	; 0xcc
 800521c:	005b      	lsls	r3, r3, #1
 800521e:	18fb      	adds	r3, r7, r3
 8005220:	0011      	movs	r1, r2
 8005222:	0018      	movs	r0, r3
 8005224:	f7fb fd12 	bl	8000c4c <send_astronode_request>
    if(receive_astronode_answer(answer_transport, &answer_length) == RS_SUCCESS)
 8005228:	230a      	movs	r3, #10
 800522a:	18fa      	adds	r2, r7, r3
 800522c:	240c      	movs	r4, #12
 800522e:	193b      	adds	r3, r7, r4
 8005230:	0011      	movs	r1, r2
 8005232:	0018      	movs	r0, r3
 8005234:	f000 f92c 	bl	8005490 <receive_astronode_answer>
 8005238:	0003      	movs	r3, r0
 800523a:	2b01      	cmp	r3, #1
 800523c:	d10a      	bne.n	8005254 <astronode_transport_send_receive+0xa0>
    {
        return astronode_decode_answer_transport(answer_transport, answer_length, p_answer);
 800523e:	4b0c      	ldr	r3, [pc, #48]	; (8005270 <astronode_transport_send_receive+0xbc>)
 8005240:	195b      	adds	r3, r3, r5
 8005242:	19db      	adds	r3, r3, r7
 8005244:	8819      	ldrh	r1, [r3, #0]
 8005246:	683a      	ldr	r2, [r7, #0]
 8005248:	193b      	adds	r3, r7, r4
 800524a:	0018      	movs	r0, r3
 800524c:	f7ff fe1e 	bl	8004e8c <astronode_decode_answer_transport>
 8005250:	0003      	movs	r3, r0
 8005252:	e000      	b.n	8005256 <astronode_transport_send_receive+0xa2>
    }
    else
    {
        return RS_FAILURE;
 8005254:	2300      	movs	r3, #0
    }
}
 8005256:	0018      	movs	r0, r3
 8005258:	46bd      	mov	sp, r7
 800525a:	23cb      	movs	r3, #203	; 0xcb
 800525c:	009b      	lsls	r3, r3, #2
 800525e:	449d      	add	sp, r3
 8005260:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005262:	46c0      	nop			; (mov r8, r8)
 8005264:	fffffcd4 	.word	0xfffffcd4
 8005268:	fffffe70 	.word	0xfffffe70
 800526c:	fffffce4 	.word	0xfffffce4
 8005270:	fffffce2 	.word	0xfffffce2
 8005274:	00000326 	.word	0x00000326

08005278 <calculate_crc>:

static uint16_t calculate_crc(const uint8_t *p_data, uint16_t data_len, uint16_t init_value)
{
 8005278:	b590      	push	{r4, r7, lr}
 800527a:	b085      	sub	sp, #20
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	0008      	movs	r0, r1
 8005282:	0011      	movs	r1, r2
 8005284:	1cbb      	adds	r3, r7, #2
 8005286:	1c02      	adds	r2, r0, #0
 8005288:	801a      	strh	r2, [r3, #0]
 800528a:	003b      	movs	r3, r7
 800528c:	1c0a      	adds	r2, r1, #0
 800528e:	801a      	strh	r2, [r3, #0]
    uint16_t crc = init_value;
 8005290:	230e      	movs	r3, #14
 8005292:	18fb      	adds	r3, r7, r3
 8005294:	003a      	movs	r2, r7
 8005296:	8812      	ldrh	r2, [r2, #0]
 8005298:	801a      	strh	r2, [r3, #0]

    while (data_len--)
 800529a:	e02e      	b.n	80052fa <calculate_crc+0x82>
    {
        uint16_t x = crc >> 8 ^ *p_data++;
 800529c:	240e      	movs	r4, #14
 800529e:	193b      	adds	r3, r7, r4
 80052a0:	881b      	ldrh	r3, [r3, #0]
 80052a2:	0a1b      	lsrs	r3, r3, #8
 80052a4:	b299      	uxth	r1, r3
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	1c5a      	adds	r2, r3, #1
 80052aa:	607a      	str	r2, [r7, #4]
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	b29a      	uxth	r2, r3
 80052b0:	200c      	movs	r0, #12
 80052b2:	183b      	adds	r3, r7, r0
 80052b4:	404a      	eors	r2, r1
 80052b6:	801a      	strh	r2, [r3, #0]
        x ^= x >> 4;
 80052b8:	183b      	adds	r3, r7, r0
 80052ba:	881b      	ldrh	r3, [r3, #0]
 80052bc:	091b      	lsrs	r3, r3, #4
 80052be:	b299      	uxth	r1, r3
 80052c0:	183b      	adds	r3, r7, r0
 80052c2:	183a      	adds	r2, r7, r0
 80052c4:	8812      	ldrh	r2, [r2, #0]
 80052c6:	404a      	eors	r2, r1
 80052c8:	801a      	strh	r2, [r3, #0]
        crc = (crc << 8) ^ (x << 12) ^ (x << 5) ^ (x);
 80052ca:	0021      	movs	r1, r4
 80052cc:	187b      	adds	r3, r7, r1
 80052ce:	881b      	ldrh	r3, [r3, #0]
 80052d0:	021b      	lsls	r3, r3, #8
 80052d2:	b21a      	sxth	r2, r3
 80052d4:	183b      	adds	r3, r7, r0
 80052d6:	881b      	ldrh	r3, [r3, #0]
 80052d8:	031b      	lsls	r3, r3, #12
 80052da:	b21b      	sxth	r3, r3
 80052dc:	4053      	eors	r3, r2
 80052de:	b21a      	sxth	r2, r3
 80052e0:	183b      	adds	r3, r7, r0
 80052e2:	881b      	ldrh	r3, [r3, #0]
 80052e4:	015b      	lsls	r3, r3, #5
 80052e6:	b21b      	sxth	r3, r3
 80052e8:	4053      	eors	r3, r2
 80052ea:	b21a      	sxth	r2, r3
 80052ec:	183b      	adds	r3, r7, r0
 80052ee:	2000      	movs	r0, #0
 80052f0:	5e1b      	ldrsh	r3, [r3, r0]
 80052f2:	4053      	eors	r3, r2
 80052f4:	b21a      	sxth	r2, r3
 80052f6:	187b      	adds	r3, r7, r1
 80052f8:	801a      	strh	r2, [r3, #0]
    while (data_len--)
 80052fa:	1cbb      	adds	r3, r7, #2
 80052fc:	881b      	ldrh	r3, [r3, #0]
 80052fe:	1cba      	adds	r2, r7, #2
 8005300:	1e59      	subs	r1, r3, #1
 8005302:	8011      	strh	r1, [r2, #0]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d1c9      	bne.n	800529c <calculate_crc+0x24>
    }
    return crc;
 8005308:	230e      	movs	r3, #14
 800530a:	18fb      	adds	r3, r7, r3
 800530c:	881b      	ldrh	r3, [r3, #0]
}
 800530e:	0018      	movs	r0, r3
 8005310:	46bd      	mov	sp, r7
 8005312:	b005      	add	sp, #20
 8005314:	bd90      	pop	{r4, r7, pc}
	...

08005318 <check_for_error>:

static void check_for_error(astronode_app_msg_t *p_answer)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b084      	sub	sp, #16
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
    uint16_t error_code = p_answer->p_payload[0] + (p_answer->p_payload[1] << 8);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	785b      	ldrb	r3, [r3, #1]
 8005324:	b299      	uxth	r1, r3
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	789b      	ldrb	r3, [r3, #2]
 800532a:	b29b      	uxth	r3, r3
 800532c:	021b      	lsls	r3, r3, #8
 800532e:	b29a      	uxth	r2, r3
 8005330:	200e      	movs	r0, #14
 8005332:	183b      	adds	r3, r7, r0
 8005334:	188a      	adds	r2, r1, r2
 8005336:	801a      	strh	r2, [r3, #0]

    switch (error_code)
 8005338:	183b      	adds	r3, r7, r0
 800533a:	881b      	ldrh	r3, [r3, #0]
 800533c:	4a40      	ldr	r2, [pc, #256]	; (8005440 <check_for_error+0x128>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d100      	bne.n	8005344 <check_for_error+0x2c>
 8005342:	e06f      	b.n	8005424 <check_for_error+0x10c>
 8005344:	4a3e      	ldr	r2, [pc, #248]	; (8005440 <check_for_error+0x128>)
 8005346:	4293      	cmp	r3, r2
 8005348:	dd00      	ble.n	800534c <check_for_error+0x34>
 800534a:	e070      	b.n	800542e <check_for_error+0x116>
 800534c:	4a3d      	ldr	r2, [pc, #244]	; (8005444 <check_for_error+0x12c>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d100      	bne.n	8005354 <check_for_error+0x3c>
 8005352:	e062      	b.n	800541a <check_for_error+0x102>
 8005354:	4a3b      	ldr	r2, [pc, #236]	; (8005444 <check_for_error+0x12c>)
 8005356:	4293      	cmp	r3, r2
 8005358:	dd00      	ble.n	800535c <check_for_error+0x44>
 800535a:	e068      	b.n	800542e <check_for_error+0x116>
 800535c:	4a3a      	ldr	r2, [pc, #232]	; (8005448 <check_for_error+0x130>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d056      	beq.n	8005410 <check_for_error+0xf8>
 8005362:	4a39      	ldr	r2, [pc, #228]	; (8005448 <check_for_error+0x130>)
 8005364:	4293      	cmp	r3, r2
 8005366:	dd00      	ble.n	800536a <check_for_error+0x52>
 8005368:	e061      	b.n	800542e <check_for_error+0x116>
 800536a:	4a38      	ldr	r2, [pc, #224]	; (800544c <check_for_error+0x134>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d04a      	beq.n	8005406 <check_for_error+0xee>
 8005370:	4a36      	ldr	r2, [pc, #216]	; (800544c <check_for_error+0x134>)
 8005372:	4293      	cmp	r3, r2
 8005374:	dc5b      	bgt.n	800542e <check_for_error+0x116>
 8005376:	4a36      	ldr	r2, [pc, #216]	; (8005450 <check_for_error+0x138>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d03f      	beq.n	80053fc <check_for_error+0xe4>
 800537c:	4a34      	ldr	r2, [pc, #208]	; (8005450 <check_for_error+0x138>)
 800537e:	4293      	cmp	r3, r2
 8005380:	dc55      	bgt.n	800542e <check_for_error+0x116>
 8005382:	4a34      	ldr	r2, [pc, #208]	; (8005454 <check_for_error+0x13c>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d034      	beq.n	80053f2 <check_for_error+0xda>
 8005388:	4a32      	ldr	r2, [pc, #200]	; (8005454 <check_for_error+0x13c>)
 800538a:	4293      	cmp	r3, r2
 800538c:	dc4f      	bgt.n	800542e <check_for_error+0x116>
 800538e:	4a32      	ldr	r2, [pc, #200]	; (8005458 <check_for_error+0x140>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d029      	beq.n	80053e8 <check_for_error+0xd0>
 8005394:	4a30      	ldr	r2, [pc, #192]	; (8005458 <check_for_error+0x140>)
 8005396:	4293      	cmp	r3, r2
 8005398:	dc49      	bgt.n	800542e <check_for_error+0x116>
 800539a:	4a30      	ldr	r2, [pc, #192]	; (800545c <check_for_error+0x144>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d01e      	beq.n	80053de <check_for_error+0xc6>
 80053a0:	4a2e      	ldr	r2, [pc, #184]	; (800545c <check_for_error+0x144>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	dc43      	bgt.n	800542e <check_for_error+0x116>
 80053a6:	2222      	movs	r2, #34	; 0x22
 80053a8:	32ff      	adds	r2, #255	; 0xff
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d012      	beq.n	80053d4 <check_for_error+0xbc>
 80053ae:	2291      	movs	r2, #145	; 0x91
 80053b0:	0052      	lsls	r2, r2, #1
 80053b2:	4293      	cmp	r3, r2
 80053b4:	da3b      	bge.n	800542e <check_for_error+0x116>
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d002      	beq.n	80053c0 <check_for_error+0xa8>
 80053ba:	2b11      	cmp	r3, #17
 80053bc:	d005      	beq.n	80053ca <check_for_error+0xb2>
 80053be:	e036      	b.n	800542e <check_for_error+0x116>
    {
        case ASTRONODE_ERR_CODE_CRC_NOT_VALID:
            send_debug_logs("[ERROR] CRC_NOT_VALID : Discrepancy between provided CRC and expected CRC.");
 80053c0:	4b27      	ldr	r3, [pc, #156]	; (8005460 <check_for_error+0x148>)
 80053c2:	0018      	movs	r0, r3
 80053c4:	f7fb fc12 	bl	8000bec <send_debug_logs>
            break;
 80053c8:	e036      	b.n	8005438 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_LENGTH_NOT_VALID:
            send_debug_logs("[ERROR] LENGTH_NOT_VALID : Message exceeds the maximum length allowed by the given operation code.");
 80053ca:	4b26      	ldr	r3, [pc, #152]	; (8005464 <check_for_error+0x14c>)
 80053cc:	0018      	movs	r0, r3
 80053ce:	f7fb fc0d 	bl	8000bec <send_debug_logs>
            break;
 80053d2:	e031      	b.n	8005438 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_OPCODE_NOT_VALID:
            send_debug_logs("[ERROR] OPCODE_NOT_VALID : Invalid operation code used.");
 80053d4:	4b24      	ldr	r3, [pc, #144]	; (8005468 <check_for_error+0x150>)
 80053d6:	0018      	movs	r0, r3
 80053d8:	f7fb fc08 	bl	8000bec <send_debug_logs>
            break;
 80053dc:	e02c      	b.n	8005438 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_FORMAT_NOT_VALID:
            send_debug_logs("[ERROR] FORMAT_NOT_VALID : At least one of the fields (SSID, password, token) is not composed of exclusively printable standard ASCII characters (0x20 to 0x7E).");
 80053de:	4b23      	ldr	r3, [pc, #140]	; (800546c <check_for_error+0x154>)
 80053e0:	0018      	movs	r0, r3
 80053e2:	f7fb fc03 	bl	8000bec <send_debug_logs>
            break;
 80053e6:	e027      	b.n	8005438 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_FLASH_WRITING_FAILED:
            send_debug_logs("[ERROR] FLASH_WRITING_FAILED : Failed to write the Wi-Fi settings (SSID, password, token) to the flash.");
 80053e8:	4b21      	ldr	r3, [pc, #132]	; (8005470 <check_for_error+0x158>)
 80053ea:	0018      	movs	r0, r3
 80053ec:	f7fb fbfe 	bl	8000bec <send_debug_logs>
            break;
 80053f0:	e022      	b.n	8005438 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_BUFFER_FULL:
            send_debug_logs("[ERROR] BUFFER_FULL : Failed to queue the payload because the sending queue is already full.");
 80053f2:	4b20      	ldr	r3, [pc, #128]	; (8005474 <check_for_error+0x15c>)
 80053f4:	0018      	movs	r0, r3
 80053f6:	f7fb fbf9 	bl	8000bec <send_debug_logs>
            break;
 80053fa:	e01d      	b.n	8005438 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_DUPLICATE_ID:
            send_debug_logs("[ERROR] DUPLICATE_ID : Failed to queue the payload because the Payload ID provided by the asset is already in use in the Astronode queue.");
 80053fc:	4b1e      	ldr	r3, [pc, #120]	; (8005478 <check_for_error+0x160>)
 80053fe:	0018      	movs	r0, r3
 8005400:	f7fb fbf4 	bl	8000bec <send_debug_logs>
            break;
 8005404:	e018      	b.n	8005438 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_BUFFER_EMPTY:
            send_debug_logs("[ERROR] BUFFER_EMPTY : Failed to dequeue a payload from the buffer because the buffer is empty.");
 8005406:	4b1d      	ldr	r3, [pc, #116]	; (800547c <check_for_error+0x164>)
 8005408:	0018      	movs	r0, r3
 800540a:	f7fb fbef 	bl	8000bec <send_debug_logs>
            break;
 800540e:	e013      	b.n	8005438 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_INVALID_POS:
            send_debug_logs("[ERROR] INVALID_POS : Failed to update the geolocation information. Latitude and longitude fields must in the range [-90,90] degrees and [-180,180] degrees, respectively.");
 8005410:	4b1b      	ldr	r3, [pc, #108]	; (8005480 <check_for_error+0x168>)
 8005412:	0018      	movs	r0, r3
 8005414:	f7fb fbea 	bl	8000bec <send_debug_logs>
            break;
 8005418:	e00e      	b.n	8005438 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_NO_ACK:
            send_debug_logs("[ERROR] NO_ACK : No satellite acknowledgement available for any payload.");
 800541a:	4b1a      	ldr	r3, [pc, #104]	; (8005484 <check_for_error+0x16c>)
 800541c:	0018      	movs	r0, r3
 800541e:	f7fb fbe5 	bl	8000bec <send_debug_logs>
            break;
 8005422:	e009      	b.n	8005438 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_NO_CLEAR:
            send_debug_logs("[ERROR] NO_CLEAR : No payload ack to clear, or it was already cleared.");
 8005424:	4b18      	ldr	r3, [pc, #96]	; (8005488 <check_for_error+0x170>)
 8005426:	0018      	movs	r0, r3
 8005428:	f7fb fbe0 	bl	8000bec <send_debug_logs>
            break;
 800542c:	e004      	b.n	8005438 <check_for_error+0x120>

        default:
            send_debug_logs("[ERROR] error_code is not defined.");
 800542e:	4b17      	ldr	r3, [pc, #92]	; (800548c <check_for_error+0x174>)
 8005430:	0018      	movs	r0, r3
 8005432:	f7fb fbdb 	bl	8000bec <send_debug_logs>
            break;
 8005436:	46c0      	nop			; (mov r8, r8)
    }
}
 8005438:	46c0      	nop			; (mov r8, r8)
 800543a:	46bd      	mov	sp, r7
 800543c:	b004      	add	sp, #16
 800543e:	bd80      	pop	{r7, pc}
 8005440:	00004601 	.word	0x00004601
 8005444:	00004501 	.word	0x00004501
 8005448:	00003501 	.word	0x00003501
 800544c:	00002601 	.word	0x00002601
 8005450:	00002511 	.word	0x00002511
 8005454:	00002501 	.word	0x00002501
 8005458:	00000611 	.word	0x00000611
 800545c:	00000601 	.word	0x00000601
 8005460:	080072e8 	.word	0x080072e8
 8005464:	08007334 	.word	0x08007334
 8005468:	08007398 	.word	0x08007398
 800546c:	080073d0 	.word	0x080073d0
 8005470:	08007474 	.word	0x08007474
 8005474:	080074dc 	.word	0x080074dc
 8005478:	0800753c 	.word	0x0800753c
 800547c:	080075c8 	.word	0x080075c8
 8005480:	08007628 	.word	0x08007628
 8005484:	080076d4 	.word	0x080076d4
 8005488:	08007720 	.word	0x08007720
 800548c:	08007768 	.word	0x08007768

08005490 <receive_astronode_answer>:

static return_status_t receive_astronode_answer(uint8_t *p_rx_buffer, uint16_t *p_buffer_length)
{
 8005490:	b5b0      	push	{r4, r5, r7, lr}
 8005492:	b086      	sub	sp, #24
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6039      	str	r1, [r7, #0]
    uint8_t rx_char = 0;
 800549a:	230f      	movs	r3, #15
 800549c:	18fb      	adds	r3, r7, r3
 800549e:	2200      	movs	r2, #0
 80054a0:	701a      	strb	r2, [r3, #0]
    uint16_t length = 0;
 80054a2:	2316      	movs	r3, #22
 80054a4:	18fb      	adds	r3, r7, r3
 80054a6:	2200      	movs	r2, #0
 80054a8:	801a      	strh	r2, [r3, #0]
    uint32_t timeout_answer_received = get_systick();
 80054aa:	f7fb fbed 	bl	8000c88 <get_systick>
 80054ae:	0003      	movs	r3, r0
 80054b0:	613b      	str	r3, [r7, #16]
    bool is_answer_received = false;
 80054b2:	2315      	movs	r3, #21
 80054b4:	18fb      	adds	r3, r7, r3
 80054b6:	2200      	movs	r2, #0
 80054b8:	701a      	strb	r2, [r3, #0]

    while (is_answer_received == false)
 80054ba:	e054      	b.n	8005566 <receive_astronode_answer+0xd6>
    {
        if (is_systick_timeout_over(timeout_answer_received, ASTRONODE_ANSWER_TIMEOUT_MS))
 80054bc:	4a34      	ldr	r2, [pc, #208]	; (8005590 <receive_astronode_answer+0x100>)
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	0011      	movs	r1, r2
 80054c2:	0018      	movs	r0, r3
 80054c4:	f7fb fbe8 	bl	8000c98 <is_systick_timeout_over>
 80054c8:	1e03      	subs	r3, r0, #0
 80054ca:	d005      	beq.n	80054d8 <receive_astronode_answer+0x48>
        {
            send_debug_logs("ERROR : Received answer timeout..");
 80054cc:	4b31      	ldr	r3, [pc, #196]	; (8005594 <receive_astronode_answer+0x104>)
 80054ce:	0018      	movs	r0, r3
 80054d0:	f7fb fb8c 	bl	8000bec <send_debug_logs>
            return RS_FAILURE;
 80054d4:	2300      	movs	r3, #0
 80054d6:	e057      	b.n	8005588 <receive_astronode_answer+0xf8>
        }
        if (is_astronode_character_received(&rx_char))
 80054d8:	250f      	movs	r5, #15
 80054da:	197b      	adds	r3, r7, r5
 80054dc:	0018      	movs	r0, r3
 80054de:	f7fb fbf1 	bl	8000cc4 <is_astronode_character_received>
 80054e2:	0003      	movs	r3, r0
 80054e4:	0019      	movs	r1, r3
 80054e6:	2016      	movs	r0, #22
 80054e8:	183b      	adds	r3, r7, r0
 80054ea:	183a      	adds	r2, r7, r0
 80054ec:	8812      	ldrh	r2, [r2, #0]
 80054ee:	801a      	strh	r2, [r3, #0]
 80054f0:	2415      	movs	r4, #21
 80054f2:	193b      	adds	r3, r7, r4
 80054f4:	193a      	adds	r2, r7, r4
 80054f6:	7812      	ldrb	r2, [r2, #0]
 80054f8:	701a      	strb	r2, [r3, #0]
 80054fa:	2900      	cmp	r1, #0
 80054fc:	d033      	beq.n	8005566 <receive_astronode_answer+0xd6>
        {
            if (rx_char == ASTRONODE_TRANSPORT_STX)
 80054fe:	197b      	adds	r3, r7, r5
 8005500:	781b      	ldrb	r3, [r3, #0]
 8005502:	2b02      	cmp	r3, #2
 8005504:	d105      	bne.n	8005512 <receive_astronode_answer+0x82>
            {
                is_answer_received = false;
 8005506:	193b      	adds	r3, r7, r4
 8005508:	2200      	movs	r2, #0
 800550a:	701a      	strb	r2, [r3, #0]
                length = 0;
 800550c:	183b      	adds	r3, r7, r0
 800550e:	2200      	movs	r2, #0
 8005510:	801a      	strh	r2, [r3, #0]
            }

            p_rx_buffer[length] = rx_char;
 8005512:	2116      	movs	r1, #22
 8005514:	187b      	adds	r3, r7, r1
 8005516:	881b      	ldrh	r3, [r3, #0]
 8005518:	687a      	ldr	r2, [r7, #4]
 800551a:	18d3      	adds	r3, r2, r3
 800551c:	220f      	movs	r2, #15
 800551e:	18ba      	adds	r2, r7, r2
 8005520:	7812      	ldrb	r2, [r2, #0]
 8005522:	701a      	strb	r2, [r3, #0]
            length++;
 8005524:	187b      	adds	r3, r7, r1
 8005526:	881a      	ldrh	r2, [r3, #0]
 8005528:	187b      	adds	r3, r7, r1
 800552a:	3201      	adds	r2, #1
 800552c:	801a      	strh	r2, [r3, #0]

            if (length > ASTRONODE_MAX_LENGTH_RESPONSE)
 800552e:	187b      	adds	r3, r7, r1
 8005530:	881b      	ldrh	r3, [r3, #0]
 8005532:	2bb2      	cmp	r3, #178	; 0xb2
 8005534:	d905      	bls.n	8005542 <receive_astronode_answer+0xb2>
            {
                send_debug_logs("ERROR : Message received from the Astronode exceed maximum length allowed.");
 8005536:	4b18      	ldr	r3, [pc, #96]	; (8005598 <receive_astronode_answer+0x108>)
 8005538:	0018      	movs	r0, r3
 800553a:	f7fb fb57 	bl	8000bec <send_debug_logs>
                return RS_FAILURE;
 800553e:	2300      	movs	r3, #0
 8005540:	e022      	b.n	8005588 <receive_astronode_answer+0xf8>
            }

            if (rx_char == ASTRONODE_TRANSPORT_ETX)
 8005542:	230f      	movs	r3, #15
 8005544:	18fb      	adds	r3, r7, r3
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	2b03      	cmp	r3, #3
 800554a:	d10c      	bne.n	8005566 <receive_astronode_answer+0xd6>
            {
                if (length > 1)
 800554c:	2216      	movs	r2, #22
 800554e:	18bb      	adds	r3, r7, r2
 8005550:	881b      	ldrh	r3, [r3, #0]
 8005552:	2b01      	cmp	r3, #1
 8005554:	d907      	bls.n	8005566 <receive_astronode_answer+0xd6>
                {
                    *p_buffer_length = length;
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	18ba      	adds	r2, r7, r2
 800555a:	8812      	ldrh	r2, [r2, #0]
 800555c:	801a      	strh	r2, [r3, #0]
                    is_answer_received = true;
 800555e:	2315      	movs	r3, #21
 8005560:	18fb      	adds	r3, r7, r3
 8005562:	2201      	movs	r2, #1
 8005564:	701a      	strb	r2, [r3, #0]
    while (is_answer_received == false)
 8005566:	2315      	movs	r3, #21
 8005568:	18fb      	adds	r3, r7, r3
 800556a:	781b      	ldrb	r3, [r3, #0]
 800556c:	2201      	movs	r2, #1
 800556e:	4053      	eors	r3, r2
 8005570:	b2db      	uxtb	r3, r3
 8005572:	2b00      	cmp	r3, #0
 8005574:	d1a2      	bne.n	80054bc <receive_astronode_answer+0x2c>
                }
            }
        }
    }
    send_debug_logs("Message received from the Astronode <-- ");
 8005576:	4b09      	ldr	r3, [pc, #36]	; (800559c <receive_astronode_answer+0x10c>)
 8005578:	0018      	movs	r0, r3
 800557a:	f7fb fb37 	bl	8000bec <send_debug_logs>
    send_debug_logs((char *) p_rx_buffer);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	0018      	movs	r0, r3
 8005582:	f7fb fb33 	bl	8000bec <send_debug_logs>

    return RS_SUCCESS;
 8005586:	2301      	movs	r3, #1
}
 8005588:	0018      	movs	r0, r3
 800558a:	46bd      	mov	sp, r7
 800558c:	b006      	add	sp, #24
 800558e:	bdb0      	pop	{r4, r5, r7, pc}
 8005590:	000005dc 	.word	0x000005dc
 8005594:	0800778c 	.word	0x0800778c
 8005598:	080077b0 	.word	0x080077b0
 800559c:	080077fc 	.word	0x080077fc

080055a0 <uint8_to_ascii_buffer>:

static void uint8_to_ascii_buffer(const uint8_t value, uint8_t *p_target_buffer)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b082      	sub	sp, #8
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	0002      	movs	r2, r0
 80055a8:	6039      	str	r1, [r7, #0]
 80055aa:	1dfb      	adds	r3, r7, #7
 80055ac:	701a      	strb	r2, [r3, #0]
    p_target_buffer[0] = g_ascii_lookup[value >> 4];
 80055ae:	1dfb      	adds	r3, r7, #7
 80055b0:	781b      	ldrb	r3, [r3, #0]
 80055b2:	091b      	lsrs	r3, r3, #4
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	001a      	movs	r2, r3
 80055b8:	4b08      	ldr	r3, [pc, #32]	; (80055dc <uint8_to_ascii_buffer+0x3c>)
 80055ba:	5c9a      	ldrb	r2, [r3, r2]
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	701a      	strb	r2, [r3, #0]
    p_target_buffer[1] = g_ascii_lookup[value & 0x0F];
 80055c0:	1dfb      	adds	r3, r7, #7
 80055c2:	781b      	ldrb	r3, [r3, #0]
 80055c4:	220f      	movs	r2, #15
 80055c6:	401a      	ands	r2, r3
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	3301      	adds	r3, #1
 80055cc:	4903      	ldr	r1, [pc, #12]	; (80055dc <uint8_to_ascii_buffer+0x3c>)
 80055ce:	5c8a      	ldrb	r2, [r1, r2]
 80055d0:	701a      	strb	r2, [r3, #0]
}
 80055d2:	46c0      	nop			; (mov r8, r8)
 80055d4:	46bd      	mov	sp, r7
 80055d6:	b002      	add	sp, #8
 80055d8:	bd80      	pop	{r7, pc}
 80055da:	46c0      	nop			; (mov r8, r8)
 80055dc:	08007a0c 	.word	0x08007a0c

080055e0 <my_astro_init>:
char 		my_astro_rcv_cmd[40] = {0} ;
bool		astro_rcv_cmd_flag = false ;


bool my_astro_init ()
{
 80055e0:	b590      	push	{r4, r7, lr}
 80055e2:	b087      	sub	sp, #28
 80055e4:	af04      	add	r7, sp, #16
	bool cfg_wr = false ;
 80055e6:	1dfb      	adds	r3, r7, #7
 80055e8:	2200      	movs	r2, #0
 80055ea:	701a      	strb	r2, [r3, #0]

	while ( !cfg_wr )
 80055ec:	e012      	b.n	8005614 <my_astro_init+0x34>
	{
		astro_reset () ;
 80055ee:	f7fb fad1 	bl	8000b94 <astro_reset>
		// Deep Sleep Mode (false) NOT used
		// Satellite Ack Event Pin Mask (true): EVT pin shows EVT register Payload Ack bit state
		// Reset Notification Event Pin Mask (true):  EVT pin shows EVT register Reset Event Notification bit state
		// Command Available Event Pin Mask (true): EVT pin shows EVT register Command Available bit state
		// Message Transmission (Tx) Pending Event Pin Mask (false):  EVT pin does not show EVT register Msg Tx Pending bit state
		cfg_wr = astronode_send_cfg_wr ( true , true , true , false , true , true , true , false  ) ;
 80055f2:	1dfc      	adds	r4, r7, #7
 80055f4:	2300      	movs	r3, #0
 80055f6:	9303      	str	r3, [sp, #12]
 80055f8:	2301      	movs	r3, #1
 80055fa:	9302      	str	r3, [sp, #8]
 80055fc:	2301      	movs	r3, #1
 80055fe:	9301      	str	r3, [sp, #4]
 8005600:	2301      	movs	r3, #1
 8005602:	9300      	str	r3, [sp, #0]
 8005604:	2300      	movs	r3, #0
 8005606:	2201      	movs	r2, #1
 8005608:	2101      	movs	r1, #1
 800560a:	2001      	movs	r0, #1
 800560c:	f7fe fcce 	bl	8003fac <astronode_send_cfg_wr>
 8005610:	0003      	movs	r3, r0
 8005612:	7023      	strb	r3, [r4, #0]
	while ( !cfg_wr )
 8005614:	1dfb      	adds	r3, r7, #7
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	2201      	movs	r2, #1
 800561a:	4053      	eors	r3, r2
 800561c:	b2db      	uxtb	r3, r3
 800561e:	2b00      	cmp	r3, #0
 8005620:	d1e5      	bne.n	80055ee <my_astro_init+0xe>
	}

	if ( cfg_wr )
 8005622:	1dfb      	adds	r3, r7, #7
 8005624:	781b      	ldrb	r3, [r3, #0]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d00d      	beq.n	8005646 <my_astro_init+0x66>
	{
		astronode_send_rtc_rr () ;
 800562a:	f7fe ffbb 	bl	80045a4 <astronode_send_rtc_rr>
		astronode_send_cfg_sr () ;
 800562e:	f7fe fc85 	bl	8003f3c <astronode_send_cfg_sr>
		astronode_send_mpn_rr () ;
 8005632:	f7ff f8b1 	bl	8004798 <astronode_send_mpn_rr>
		astronode_send_msn_rr () ;
 8005636:	f7fe fe0f 	bl	8004258 <astronode_send_msn_rr>
		astronode_send_mgi_rr () ;
 800563a:	f7fe fd63 	bl	8004104 <astronode_send_mgi_rr>
		astronode_send_pld_fr () ;
 800563e:	f7fe ff35 	bl	80044ac <astronode_send_pld_fr>
		return true ;
 8005642:	2301      	movs	r3, #1
 8005644:	e000      	b.n	8005648 <my_astro_init+0x68>
	}
	else
		return false ;
 8005646:	2300      	movs	r3, #0
}
 8005648:	0018      	movs	r0, r3
 800564a:	46bd      	mov	sp, r7
 800564c:	b003      	add	sp, #12
 800564e:	bd90      	pop	{r4, r7, pc}

08005650 <my_astro_handle_evt>:
		send_debug_logs ( "my_astronode.c,my_astro_add_payload_2_queue,Payload exceeded ASTRONODE_APP_PAYLOAD_MAX_LEN_BYTES value." ) ;
	}
	return false ;
}
bool my_astro_handle_evt ( void )
{
 8005650:	b580      	push	{r7, lr}
 8005652:	af00      	add	r7, sp, #0
	send_debug_logs ( "my_astronode.c,my_astro_handle_evt,evt pin is high." ) ;
 8005654:	4b19      	ldr	r3, [pc, #100]	; (80056bc <my_astro_handle_evt+0x6c>)
 8005656:	0018      	movs	r0, r3
 8005658:	f7fb fac8 	bl	8000bec <send_debug_logs>
	astronode_send_evt_rr () ;
 800565c:	f7fe fea6 	bl	80043ac <astronode_send_evt_rr>
	if (is_sak_available () )
 8005660:	f7ff fb28 	bl	8004cb4 <is_sak_available>
 8005664:	1e03      	subs	r3, r0, #0
 8005666:	d007      	beq.n	8005678 <my_astro_handle_evt+0x28>
	{
	  astronode_send_sak_rr () ;
 8005668:	f7ff f800 	bl	800466c <astronode_send_sak_rr>
	  astronode_send_sak_cr () ;
 800566c:	f7ff f854 	bl	8004718 <astronode_send_sak_cr>
	  send_debug_logs ( "my_astronode.c,my_astro_handle_evt,message has been acknowledged." ) ;
 8005670:	4b13      	ldr	r3, [pc, #76]	; (80056c0 <my_astro_handle_evt+0x70>)
 8005672:	0018      	movs	r0, r3
 8005674:	f7fb faba 	bl	8000bec <send_debug_logs>
	  //astronode_send_per_rr () ;
	}
	if ( is_astronode_reset () )
 8005678:	f7ff fb26 	bl	8004cc8 <is_astronode_reset>
 800567c:	1e03      	subs	r3, r0, #0
 800567e:	d005      	beq.n	800568c <my_astro_handle_evt+0x3c>
	{
	  send_debug_logs ( "my_astronode.c,my_astro_handle_evt,terminal has been reset." ) ;
 8005680:	4b10      	ldr	r3, [pc, #64]	; (80056c4 <my_astro_handle_evt+0x74>)
 8005682:	0018      	movs	r0, r3
 8005684:	f7fb fab2 	bl	8000bec <send_debug_logs>
	  astronode_send_res_cr () ;
 8005688:	f7fe ff4c 	bl	8004524 <astronode_send_res_cr>
	}
	if ( is_command_available () )
 800568c:	f7ff fb26 	bl	8004cdc <is_command_available>
 8005690:	1e03      	subs	r3, r0, #0
 8005692:	d00e      	beq.n	80056b2 <my_astro_handle_evt+0x62>
	{
	  send_debug_logs ( "my_astronode.c,my_astro_handle_evt,unicast command is available" ) ;
 8005694:	4b0c      	ldr	r3, [pc, #48]	; (80056c8 <my_astro_handle_evt+0x78>)
 8005696:	0018      	movs	r0, r3
 8005698:	f7fb faa8 	bl	8000bec <send_debug_logs>
	  if ( astronode_send_cmd_rr ( my_astro_rcv_cmd ) )
 800569c:	4b0b      	ldr	r3, [pc, #44]	; (80056cc <my_astro_handle_evt+0x7c>)
 800569e:	0018      	movs	r0, r3
 80056a0:	f7ff f964 	bl	800496c <astronode_send_cmd_rr>
 80056a4:	1e03      	subs	r3, r0, #0
 80056a6:	d002      	beq.n	80056ae <my_astro_handle_evt+0x5e>
	  {
		  astro_rcv_cmd_flag = true ;
 80056a8:	4b09      	ldr	r3, [pc, #36]	; (80056d0 <my_astro_handle_evt+0x80>)
 80056aa:	2201      	movs	r2, #1
 80056ac:	701a      	strb	r2, [r3, #0]
	  }
	  astronode_send_cmd_cr () ;
 80056ae:	f7ff f91d 	bl	80048ec <astronode_send_cmd_cr>
	}
	return true ;
 80056b2:	2301      	movs	r3, #1
}
 80056b4:	0018      	movs	r0, r3
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}
 80056ba:	46c0      	nop			; (mov r8, r8)
 80056bc:	08007890 	.word	0x08007890
 80056c0:	080078c4 	.word	0x080078c4
 80056c4:	08007908 	.word	0x08007908
 80056c8:	08007944 	.word	0x08007944
 80056cc:	20000370 	.word	0x20000370
 80056d0:	20000398 	.word	0x20000398

080056d4 <sniprintf>:
 80056d4:	b40c      	push	{r2, r3}
 80056d6:	b530      	push	{r4, r5, lr}
 80056d8:	4b17      	ldr	r3, [pc, #92]	; (8005738 <sniprintf+0x64>)
 80056da:	000c      	movs	r4, r1
 80056dc:	681d      	ldr	r5, [r3, #0]
 80056de:	b09d      	sub	sp, #116	; 0x74
 80056e0:	2900      	cmp	r1, #0
 80056e2:	da08      	bge.n	80056f6 <sniprintf+0x22>
 80056e4:	238b      	movs	r3, #139	; 0x8b
 80056e6:	2001      	movs	r0, #1
 80056e8:	602b      	str	r3, [r5, #0]
 80056ea:	4240      	negs	r0, r0
 80056ec:	b01d      	add	sp, #116	; 0x74
 80056ee:	bc30      	pop	{r4, r5}
 80056f0:	bc08      	pop	{r3}
 80056f2:	b002      	add	sp, #8
 80056f4:	4718      	bx	r3
 80056f6:	2382      	movs	r3, #130	; 0x82
 80056f8:	466a      	mov	r2, sp
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	8293      	strh	r3, [r2, #20]
 80056fe:	2300      	movs	r3, #0
 8005700:	9002      	str	r0, [sp, #8]
 8005702:	9006      	str	r0, [sp, #24]
 8005704:	4299      	cmp	r1, r3
 8005706:	d000      	beq.n	800570a <sniprintf+0x36>
 8005708:	1e4b      	subs	r3, r1, #1
 800570a:	9304      	str	r3, [sp, #16]
 800570c:	9307      	str	r3, [sp, #28]
 800570e:	2301      	movs	r3, #1
 8005710:	466a      	mov	r2, sp
 8005712:	425b      	negs	r3, r3
 8005714:	82d3      	strh	r3, [r2, #22]
 8005716:	0028      	movs	r0, r5
 8005718:	ab21      	add	r3, sp, #132	; 0x84
 800571a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800571c:	a902      	add	r1, sp, #8
 800571e:	9301      	str	r3, [sp, #4]
 8005720:	f000 f9ca 	bl	8005ab8 <_svfiprintf_r>
 8005724:	1c43      	adds	r3, r0, #1
 8005726:	da01      	bge.n	800572c <sniprintf+0x58>
 8005728:	238b      	movs	r3, #139	; 0x8b
 800572a:	602b      	str	r3, [r5, #0]
 800572c:	2c00      	cmp	r4, #0
 800572e:	d0dd      	beq.n	80056ec <sniprintf+0x18>
 8005730:	2200      	movs	r2, #0
 8005732:	9b02      	ldr	r3, [sp, #8]
 8005734:	701a      	strb	r2, [r3, #0]
 8005736:	e7d9      	b.n	80056ec <sniprintf+0x18>
 8005738:	20000060 	.word	0x20000060

0800573c <siprintf>:
 800573c:	b40e      	push	{r1, r2, r3}
 800573e:	b500      	push	{lr}
 8005740:	490b      	ldr	r1, [pc, #44]	; (8005770 <siprintf+0x34>)
 8005742:	b09c      	sub	sp, #112	; 0x70
 8005744:	ab1d      	add	r3, sp, #116	; 0x74
 8005746:	9002      	str	r0, [sp, #8]
 8005748:	9006      	str	r0, [sp, #24]
 800574a:	9107      	str	r1, [sp, #28]
 800574c:	9104      	str	r1, [sp, #16]
 800574e:	4809      	ldr	r0, [pc, #36]	; (8005774 <siprintf+0x38>)
 8005750:	4909      	ldr	r1, [pc, #36]	; (8005778 <siprintf+0x3c>)
 8005752:	cb04      	ldmia	r3!, {r2}
 8005754:	9105      	str	r1, [sp, #20]
 8005756:	6800      	ldr	r0, [r0, #0]
 8005758:	a902      	add	r1, sp, #8
 800575a:	9301      	str	r3, [sp, #4]
 800575c:	f000 f9ac 	bl	8005ab8 <_svfiprintf_r>
 8005760:	2200      	movs	r2, #0
 8005762:	9b02      	ldr	r3, [sp, #8]
 8005764:	701a      	strb	r2, [r3, #0]
 8005766:	b01c      	add	sp, #112	; 0x70
 8005768:	bc08      	pop	{r3}
 800576a:	b003      	add	sp, #12
 800576c:	4718      	bx	r3
 800576e:	46c0      	nop			; (mov r8, r8)
 8005770:	7fffffff 	.word	0x7fffffff
 8005774:	20000060 	.word	0x20000060
 8005778:	ffff0208 	.word	0xffff0208

0800577c <memset>:
 800577c:	0003      	movs	r3, r0
 800577e:	1882      	adds	r2, r0, r2
 8005780:	4293      	cmp	r3, r2
 8005782:	d100      	bne.n	8005786 <memset+0xa>
 8005784:	4770      	bx	lr
 8005786:	7019      	strb	r1, [r3, #0]
 8005788:	3301      	adds	r3, #1
 800578a:	e7f9      	b.n	8005780 <memset+0x4>

0800578c <__errno>:
 800578c:	4b01      	ldr	r3, [pc, #4]	; (8005794 <__errno+0x8>)
 800578e:	6818      	ldr	r0, [r3, #0]
 8005790:	4770      	bx	lr
 8005792:	46c0      	nop			; (mov r8, r8)
 8005794:	20000060 	.word	0x20000060

08005798 <__libc_init_array>:
 8005798:	b570      	push	{r4, r5, r6, lr}
 800579a:	2600      	movs	r6, #0
 800579c:	4c0c      	ldr	r4, [pc, #48]	; (80057d0 <__libc_init_array+0x38>)
 800579e:	4d0d      	ldr	r5, [pc, #52]	; (80057d4 <__libc_init_array+0x3c>)
 80057a0:	1b64      	subs	r4, r4, r5
 80057a2:	10a4      	asrs	r4, r4, #2
 80057a4:	42a6      	cmp	r6, r4
 80057a6:	d109      	bne.n	80057bc <__libc_init_array+0x24>
 80057a8:	2600      	movs	r6, #0
 80057aa:	f000 fc6d 	bl	8006088 <_init>
 80057ae:	4c0a      	ldr	r4, [pc, #40]	; (80057d8 <__libc_init_array+0x40>)
 80057b0:	4d0a      	ldr	r5, [pc, #40]	; (80057dc <__libc_init_array+0x44>)
 80057b2:	1b64      	subs	r4, r4, r5
 80057b4:	10a4      	asrs	r4, r4, #2
 80057b6:	42a6      	cmp	r6, r4
 80057b8:	d105      	bne.n	80057c6 <__libc_init_array+0x2e>
 80057ba:	bd70      	pop	{r4, r5, r6, pc}
 80057bc:	00b3      	lsls	r3, r6, #2
 80057be:	58eb      	ldr	r3, [r5, r3]
 80057c0:	4798      	blx	r3
 80057c2:	3601      	adds	r6, #1
 80057c4:	e7ee      	b.n	80057a4 <__libc_init_array+0xc>
 80057c6:	00b3      	lsls	r3, r6, #2
 80057c8:	58eb      	ldr	r3, [r5, r3]
 80057ca:	4798      	blx	r3
 80057cc:	3601      	adds	r6, #1
 80057ce:	e7f2      	b.n	80057b6 <__libc_init_array+0x1e>
 80057d0:	08007b58 	.word	0x08007b58
 80057d4:	08007b58 	.word	0x08007b58
 80057d8:	08007b5c 	.word	0x08007b5c
 80057dc:	08007b58 	.word	0x08007b58

080057e0 <__retarget_lock_acquire_recursive>:
 80057e0:	4770      	bx	lr

080057e2 <__retarget_lock_release_recursive>:
 80057e2:	4770      	bx	lr

080057e4 <memcpy>:
 80057e4:	2300      	movs	r3, #0
 80057e6:	b510      	push	{r4, lr}
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d100      	bne.n	80057ee <memcpy+0xa>
 80057ec:	bd10      	pop	{r4, pc}
 80057ee:	5ccc      	ldrb	r4, [r1, r3]
 80057f0:	54c4      	strb	r4, [r0, r3]
 80057f2:	3301      	adds	r3, #1
 80057f4:	e7f8      	b.n	80057e8 <memcpy+0x4>
	...

080057f8 <_free_r>:
 80057f8:	b570      	push	{r4, r5, r6, lr}
 80057fa:	0005      	movs	r5, r0
 80057fc:	2900      	cmp	r1, #0
 80057fe:	d010      	beq.n	8005822 <_free_r+0x2a>
 8005800:	1f0c      	subs	r4, r1, #4
 8005802:	6823      	ldr	r3, [r4, #0]
 8005804:	2b00      	cmp	r3, #0
 8005806:	da00      	bge.n	800580a <_free_r+0x12>
 8005808:	18e4      	adds	r4, r4, r3
 800580a:	0028      	movs	r0, r5
 800580c:	f000 f8e2 	bl	80059d4 <__malloc_lock>
 8005810:	4a1d      	ldr	r2, [pc, #116]	; (8005888 <_free_r+0x90>)
 8005812:	6813      	ldr	r3, [r2, #0]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d105      	bne.n	8005824 <_free_r+0x2c>
 8005818:	6063      	str	r3, [r4, #4]
 800581a:	6014      	str	r4, [r2, #0]
 800581c:	0028      	movs	r0, r5
 800581e:	f000 f8e1 	bl	80059e4 <__malloc_unlock>
 8005822:	bd70      	pop	{r4, r5, r6, pc}
 8005824:	42a3      	cmp	r3, r4
 8005826:	d908      	bls.n	800583a <_free_r+0x42>
 8005828:	6820      	ldr	r0, [r4, #0]
 800582a:	1821      	adds	r1, r4, r0
 800582c:	428b      	cmp	r3, r1
 800582e:	d1f3      	bne.n	8005818 <_free_r+0x20>
 8005830:	6819      	ldr	r1, [r3, #0]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	1809      	adds	r1, r1, r0
 8005836:	6021      	str	r1, [r4, #0]
 8005838:	e7ee      	b.n	8005818 <_free_r+0x20>
 800583a:	001a      	movs	r2, r3
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d001      	beq.n	8005846 <_free_r+0x4e>
 8005842:	42a3      	cmp	r3, r4
 8005844:	d9f9      	bls.n	800583a <_free_r+0x42>
 8005846:	6811      	ldr	r1, [r2, #0]
 8005848:	1850      	adds	r0, r2, r1
 800584a:	42a0      	cmp	r0, r4
 800584c:	d10b      	bne.n	8005866 <_free_r+0x6e>
 800584e:	6820      	ldr	r0, [r4, #0]
 8005850:	1809      	adds	r1, r1, r0
 8005852:	1850      	adds	r0, r2, r1
 8005854:	6011      	str	r1, [r2, #0]
 8005856:	4283      	cmp	r3, r0
 8005858:	d1e0      	bne.n	800581c <_free_r+0x24>
 800585a:	6818      	ldr	r0, [r3, #0]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	1841      	adds	r1, r0, r1
 8005860:	6011      	str	r1, [r2, #0]
 8005862:	6053      	str	r3, [r2, #4]
 8005864:	e7da      	b.n	800581c <_free_r+0x24>
 8005866:	42a0      	cmp	r0, r4
 8005868:	d902      	bls.n	8005870 <_free_r+0x78>
 800586a:	230c      	movs	r3, #12
 800586c:	602b      	str	r3, [r5, #0]
 800586e:	e7d5      	b.n	800581c <_free_r+0x24>
 8005870:	6820      	ldr	r0, [r4, #0]
 8005872:	1821      	adds	r1, r4, r0
 8005874:	428b      	cmp	r3, r1
 8005876:	d103      	bne.n	8005880 <_free_r+0x88>
 8005878:	6819      	ldr	r1, [r3, #0]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	1809      	adds	r1, r1, r0
 800587e:	6021      	str	r1, [r4, #0]
 8005880:	6063      	str	r3, [r4, #4]
 8005882:	6054      	str	r4, [r2, #4]
 8005884:	e7ca      	b.n	800581c <_free_r+0x24>
 8005886:	46c0      	nop			; (mov r8, r8)
 8005888:	200004dc 	.word	0x200004dc

0800588c <sbrk_aligned>:
 800588c:	b570      	push	{r4, r5, r6, lr}
 800588e:	4e0f      	ldr	r6, [pc, #60]	; (80058cc <sbrk_aligned+0x40>)
 8005890:	000d      	movs	r5, r1
 8005892:	6831      	ldr	r1, [r6, #0]
 8005894:	0004      	movs	r4, r0
 8005896:	2900      	cmp	r1, #0
 8005898:	d102      	bne.n	80058a0 <sbrk_aligned+0x14>
 800589a:	f000 fba1 	bl	8005fe0 <_sbrk_r>
 800589e:	6030      	str	r0, [r6, #0]
 80058a0:	0029      	movs	r1, r5
 80058a2:	0020      	movs	r0, r4
 80058a4:	f000 fb9c 	bl	8005fe0 <_sbrk_r>
 80058a8:	1c43      	adds	r3, r0, #1
 80058aa:	d00a      	beq.n	80058c2 <sbrk_aligned+0x36>
 80058ac:	2303      	movs	r3, #3
 80058ae:	1cc5      	adds	r5, r0, #3
 80058b0:	439d      	bics	r5, r3
 80058b2:	42a8      	cmp	r0, r5
 80058b4:	d007      	beq.n	80058c6 <sbrk_aligned+0x3a>
 80058b6:	1a29      	subs	r1, r5, r0
 80058b8:	0020      	movs	r0, r4
 80058ba:	f000 fb91 	bl	8005fe0 <_sbrk_r>
 80058be:	3001      	adds	r0, #1
 80058c0:	d101      	bne.n	80058c6 <sbrk_aligned+0x3a>
 80058c2:	2501      	movs	r5, #1
 80058c4:	426d      	negs	r5, r5
 80058c6:	0028      	movs	r0, r5
 80058c8:	bd70      	pop	{r4, r5, r6, pc}
 80058ca:	46c0      	nop			; (mov r8, r8)
 80058cc:	200004e0 	.word	0x200004e0

080058d0 <_malloc_r>:
 80058d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80058d2:	2203      	movs	r2, #3
 80058d4:	1ccb      	adds	r3, r1, #3
 80058d6:	4393      	bics	r3, r2
 80058d8:	3308      	adds	r3, #8
 80058da:	0006      	movs	r6, r0
 80058dc:	001f      	movs	r7, r3
 80058de:	2b0c      	cmp	r3, #12
 80058e0:	d238      	bcs.n	8005954 <_malloc_r+0x84>
 80058e2:	270c      	movs	r7, #12
 80058e4:	42b9      	cmp	r1, r7
 80058e6:	d837      	bhi.n	8005958 <_malloc_r+0x88>
 80058e8:	0030      	movs	r0, r6
 80058ea:	f000 f873 	bl	80059d4 <__malloc_lock>
 80058ee:	4b38      	ldr	r3, [pc, #224]	; (80059d0 <_malloc_r+0x100>)
 80058f0:	9300      	str	r3, [sp, #0]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	001c      	movs	r4, r3
 80058f6:	2c00      	cmp	r4, #0
 80058f8:	d133      	bne.n	8005962 <_malloc_r+0x92>
 80058fa:	0039      	movs	r1, r7
 80058fc:	0030      	movs	r0, r6
 80058fe:	f7ff ffc5 	bl	800588c <sbrk_aligned>
 8005902:	0004      	movs	r4, r0
 8005904:	1c43      	adds	r3, r0, #1
 8005906:	d15e      	bne.n	80059c6 <_malloc_r+0xf6>
 8005908:	9b00      	ldr	r3, [sp, #0]
 800590a:	681c      	ldr	r4, [r3, #0]
 800590c:	0025      	movs	r5, r4
 800590e:	2d00      	cmp	r5, #0
 8005910:	d14e      	bne.n	80059b0 <_malloc_r+0xe0>
 8005912:	2c00      	cmp	r4, #0
 8005914:	d051      	beq.n	80059ba <_malloc_r+0xea>
 8005916:	6823      	ldr	r3, [r4, #0]
 8005918:	0029      	movs	r1, r5
 800591a:	18e3      	adds	r3, r4, r3
 800591c:	0030      	movs	r0, r6
 800591e:	9301      	str	r3, [sp, #4]
 8005920:	f000 fb5e 	bl	8005fe0 <_sbrk_r>
 8005924:	9b01      	ldr	r3, [sp, #4]
 8005926:	4283      	cmp	r3, r0
 8005928:	d147      	bne.n	80059ba <_malloc_r+0xea>
 800592a:	6823      	ldr	r3, [r4, #0]
 800592c:	0030      	movs	r0, r6
 800592e:	1aff      	subs	r7, r7, r3
 8005930:	0039      	movs	r1, r7
 8005932:	f7ff ffab 	bl	800588c <sbrk_aligned>
 8005936:	3001      	adds	r0, #1
 8005938:	d03f      	beq.n	80059ba <_malloc_r+0xea>
 800593a:	6823      	ldr	r3, [r4, #0]
 800593c:	19db      	adds	r3, r3, r7
 800593e:	6023      	str	r3, [r4, #0]
 8005940:	9b00      	ldr	r3, [sp, #0]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d040      	beq.n	80059ca <_malloc_r+0xfa>
 8005948:	685a      	ldr	r2, [r3, #4]
 800594a:	42a2      	cmp	r2, r4
 800594c:	d133      	bne.n	80059b6 <_malloc_r+0xe6>
 800594e:	2200      	movs	r2, #0
 8005950:	605a      	str	r2, [r3, #4]
 8005952:	e014      	b.n	800597e <_malloc_r+0xae>
 8005954:	2b00      	cmp	r3, #0
 8005956:	dac5      	bge.n	80058e4 <_malloc_r+0x14>
 8005958:	230c      	movs	r3, #12
 800595a:	2500      	movs	r5, #0
 800595c:	6033      	str	r3, [r6, #0]
 800595e:	0028      	movs	r0, r5
 8005960:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005962:	6821      	ldr	r1, [r4, #0]
 8005964:	1bc9      	subs	r1, r1, r7
 8005966:	d420      	bmi.n	80059aa <_malloc_r+0xda>
 8005968:	290b      	cmp	r1, #11
 800596a:	d918      	bls.n	800599e <_malloc_r+0xce>
 800596c:	19e2      	adds	r2, r4, r7
 800596e:	6027      	str	r7, [r4, #0]
 8005970:	42a3      	cmp	r3, r4
 8005972:	d112      	bne.n	800599a <_malloc_r+0xca>
 8005974:	9b00      	ldr	r3, [sp, #0]
 8005976:	601a      	str	r2, [r3, #0]
 8005978:	6863      	ldr	r3, [r4, #4]
 800597a:	6011      	str	r1, [r2, #0]
 800597c:	6053      	str	r3, [r2, #4]
 800597e:	0030      	movs	r0, r6
 8005980:	0025      	movs	r5, r4
 8005982:	f000 f82f 	bl	80059e4 <__malloc_unlock>
 8005986:	2207      	movs	r2, #7
 8005988:	350b      	adds	r5, #11
 800598a:	1d23      	adds	r3, r4, #4
 800598c:	4395      	bics	r5, r2
 800598e:	1aea      	subs	r2, r5, r3
 8005990:	429d      	cmp	r5, r3
 8005992:	d0e4      	beq.n	800595e <_malloc_r+0x8e>
 8005994:	1b5b      	subs	r3, r3, r5
 8005996:	50a3      	str	r3, [r4, r2]
 8005998:	e7e1      	b.n	800595e <_malloc_r+0x8e>
 800599a:	605a      	str	r2, [r3, #4]
 800599c:	e7ec      	b.n	8005978 <_malloc_r+0xa8>
 800599e:	6862      	ldr	r2, [r4, #4]
 80059a0:	42a3      	cmp	r3, r4
 80059a2:	d1d5      	bne.n	8005950 <_malloc_r+0x80>
 80059a4:	9b00      	ldr	r3, [sp, #0]
 80059a6:	601a      	str	r2, [r3, #0]
 80059a8:	e7e9      	b.n	800597e <_malloc_r+0xae>
 80059aa:	0023      	movs	r3, r4
 80059ac:	6864      	ldr	r4, [r4, #4]
 80059ae:	e7a2      	b.n	80058f6 <_malloc_r+0x26>
 80059b0:	002c      	movs	r4, r5
 80059b2:	686d      	ldr	r5, [r5, #4]
 80059b4:	e7ab      	b.n	800590e <_malloc_r+0x3e>
 80059b6:	0013      	movs	r3, r2
 80059b8:	e7c4      	b.n	8005944 <_malloc_r+0x74>
 80059ba:	230c      	movs	r3, #12
 80059bc:	0030      	movs	r0, r6
 80059be:	6033      	str	r3, [r6, #0]
 80059c0:	f000 f810 	bl	80059e4 <__malloc_unlock>
 80059c4:	e7cb      	b.n	800595e <_malloc_r+0x8e>
 80059c6:	6027      	str	r7, [r4, #0]
 80059c8:	e7d9      	b.n	800597e <_malloc_r+0xae>
 80059ca:	605b      	str	r3, [r3, #4]
 80059cc:	deff      	udf	#255	; 0xff
 80059ce:	46c0      	nop			; (mov r8, r8)
 80059d0:	200004dc 	.word	0x200004dc

080059d4 <__malloc_lock>:
 80059d4:	b510      	push	{r4, lr}
 80059d6:	4802      	ldr	r0, [pc, #8]	; (80059e0 <__malloc_lock+0xc>)
 80059d8:	f7ff ff02 	bl	80057e0 <__retarget_lock_acquire_recursive>
 80059dc:	bd10      	pop	{r4, pc}
 80059de:	46c0      	nop			; (mov r8, r8)
 80059e0:	200004d8 	.word	0x200004d8

080059e4 <__malloc_unlock>:
 80059e4:	b510      	push	{r4, lr}
 80059e6:	4802      	ldr	r0, [pc, #8]	; (80059f0 <__malloc_unlock+0xc>)
 80059e8:	f7ff fefb 	bl	80057e2 <__retarget_lock_release_recursive>
 80059ec:	bd10      	pop	{r4, pc}
 80059ee:	46c0      	nop			; (mov r8, r8)
 80059f0:	200004d8 	.word	0x200004d8

080059f4 <__ssputs_r>:
 80059f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059f6:	b085      	sub	sp, #20
 80059f8:	9301      	str	r3, [sp, #4]
 80059fa:	9203      	str	r2, [sp, #12]
 80059fc:	688e      	ldr	r6, [r1, #8]
 80059fe:	9a01      	ldr	r2, [sp, #4]
 8005a00:	0007      	movs	r7, r0
 8005a02:	000c      	movs	r4, r1
 8005a04:	680b      	ldr	r3, [r1, #0]
 8005a06:	4296      	cmp	r6, r2
 8005a08:	d831      	bhi.n	8005a6e <__ssputs_r+0x7a>
 8005a0a:	898a      	ldrh	r2, [r1, #12]
 8005a0c:	2190      	movs	r1, #144	; 0x90
 8005a0e:	00c9      	lsls	r1, r1, #3
 8005a10:	420a      	tst	r2, r1
 8005a12:	d029      	beq.n	8005a68 <__ssputs_r+0x74>
 8005a14:	2003      	movs	r0, #3
 8005a16:	6921      	ldr	r1, [r4, #16]
 8005a18:	1a5b      	subs	r3, r3, r1
 8005a1a:	9302      	str	r3, [sp, #8]
 8005a1c:	6963      	ldr	r3, [r4, #20]
 8005a1e:	4343      	muls	r3, r0
 8005a20:	0fdd      	lsrs	r5, r3, #31
 8005a22:	18ed      	adds	r5, r5, r3
 8005a24:	9b01      	ldr	r3, [sp, #4]
 8005a26:	9802      	ldr	r0, [sp, #8]
 8005a28:	3301      	adds	r3, #1
 8005a2a:	181b      	adds	r3, r3, r0
 8005a2c:	106d      	asrs	r5, r5, #1
 8005a2e:	42ab      	cmp	r3, r5
 8005a30:	d900      	bls.n	8005a34 <__ssputs_r+0x40>
 8005a32:	001d      	movs	r5, r3
 8005a34:	0552      	lsls	r2, r2, #21
 8005a36:	d529      	bpl.n	8005a8c <__ssputs_r+0x98>
 8005a38:	0029      	movs	r1, r5
 8005a3a:	0038      	movs	r0, r7
 8005a3c:	f7ff ff48 	bl	80058d0 <_malloc_r>
 8005a40:	1e06      	subs	r6, r0, #0
 8005a42:	d02d      	beq.n	8005aa0 <__ssputs_r+0xac>
 8005a44:	9a02      	ldr	r2, [sp, #8]
 8005a46:	6921      	ldr	r1, [r4, #16]
 8005a48:	f7ff fecc 	bl	80057e4 <memcpy>
 8005a4c:	89a2      	ldrh	r2, [r4, #12]
 8005a4e:	4b19      	ldr	r3, [pc, #100]	; (8005ab4 <__ssputs_r+0xc0>)
 8005a50:	401a      	ands	r2, r3
 8005a52:	2380      	movs	r3, #128	; 0x80
 8005a54:	4313      	orrs	r3, r2
 8005a56:	81a3      	strh	r3, [r4, #12]
 8005a58:	9b02      	ldr	r3, [sp, #8]
 8005a5a:	6126      	str	r6, [r4, #16]
 8005a5c:	18f6      	adds	r6, r6, r3
 8005a5e:	6026      	str	r6, [r4, #0]
 8005a60:	6165      	str	r5, [r4, #20]
 8005a62:	9e01      	ldr	r6, [sp, #4]
 8005a64:	1aed      	subs	r5, r5, r3
 8005a66:	60a5      	str	r5, [r4, #8]
 8005a68:	9b01      	ldr	r3, [sp, #4]
 8005a6a:	429e      	cmp	r6, r3
 8005a6c:	d900      	bls.n	8005a70 <__ssputs_r+0x7c>
 8005a6e:	9e01      	ldr	r6, [sp, #4]
 8005a70:	0032      	movs	r2, r6
 8005a72:	9903      	ldr	r1, [sp, #12]
 8005a74:	6820      	ldr	r0, [r4, #0]
 8005a76:	f000 fa9f 	bl	8005fb8 <memmove>
 8005a7a:	2000      	movs	r0, #0
 8005a7c:	68a3      	ldr	r3, [r4, #8]
 8005a7e:	1b9b      	subs	r3, r3, r6
 8005a80:	60a3      	str	r3, [r4, #8]
 8005a82:	6823      	ldr	r3, [r4, #0]
 8005a84:	199b      	adds	r3, r3, r6
 8005a86:	6023      	str	r3, [r4, #0]
 8005a88:	b005      	add	sp, #20
 8005a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a8c:	002a      	movs	r2, r5
 8005a8e:	0038      	movs	r0, r7
 8005a90:	f000 fac3 	bl	800601a <_realloc_r>
 8005a94:	1e06      	subs	r6, r0, #0
 8005a96:	d1df      	bne.n	8005a58 <__ssputs_r+0x64>
 8005a98:	0038      	movs	r0, r7
 8005a9a:	6921      	ldr	r1, [r4, #16]
 8005a9c:	f7ff feac 	bl	80057f8 <_free_r>
 8005aa0:	230c      	movs	r3, #12
 8005aa2:	2001      	movs	r0, #1
 8005aa4:	603b      	str	r3, [r7, #0]
 8005aa6:	89a2      	ldrh	r2, [r4, #12]
 8005aa8:	3334      	adds	r3, #52	; 0x34
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	81a3      	strh	r3, [r4, #12]
 8005aae:	4240      	negs	r0, r0
 8005ab0:	e7ea      	b.n	8005a88 <__ssputs_r+0x94>
 8005ab2:	46c0      	nop			; (mov r8, r8)
 8005ab4:	fffffb7f 	.word	0xfffffb7f

08005ab8 <_svfiprintf_r>:
 8005ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005aba:	b0a1      	sub	sp, #132	; 0x84
 8005abc:	9003      	str	r0, [sp, #12]
 8005abe:	001d      	movs	r5, r3
 8005ac0:	898b      	ldrh	r3, [r1, #12]
 8005ac2:	000f      	movs	r7, r1
 8005ac4:	0016      	movs	r6, r2
 8005ac6:	061b      	lsls	r3, r3, #24
 8005ac8:	d511      	bpl.n	8005aee <_svfiprintf_r+0x36>
 8005aca:	690b      	ldr	r3, [r1, #16]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d10e      	bne.n	8005aee <_svfiprintf_r+0x36>
 8005ad0:	2140      	movs	r1, #64	; 0x40
 8005ad2:	f7ff fefd 	bl	80058d0 <_malloc_r>
 8005ad6:	6038      	str	r0, [r7, #0]
 8005ad8:	6138      	str	r0, [r7, #16]
 8005ada:	2800      	cmp	r0, #0
 8005adc:	d105      	bne.n	8005aea <_svfiprintf_r+0x32>
 8005ade:	230c      	movs	r3, #12
 8005ae0:	9a03      	ldr	r2, [sp, #12]
 8005ae2:	3801      	subs	r0, #1
 8005ae4:	6013      	str	r3, [r2, #0]
 8005ae6:	b021      	add	sp, #132	; 0x84
 8005ae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005aea:	2340      	movs	r3, #64	; 0x40
 8005aec:	617b      	str	r3, [r7, #20]
 8005aee:	2300      	movs	r3, #0
 8005af0:	ac08      	add	r4, sp, #32
 8005af2:	6163      	str	r3, [r4, #20]
 8005af4:	3320      	adds	r3, #32
 8005af6:	7663      	strb	r3, [r4, #25]
 8005af8:	3310      	adds	r3, #16
 8005afa:	76a3      	strb	r3, [r4, #26]
 8005afc:	9507      	str	r5, [sp, #28]
 8005afe:	0035      	movs	r5, r6
 8005b00:	782b      	ldrb	r3, [r5, #0]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d001      	beq.n	8005b0a <_svfiprintf_r+0x52>
 8005b06:	2b25      	cmp	r3, #37	; 0x25
 8005b08:	d148      	bne.n	8005b9c <_svfiprintf_r+0xe4>
 8005b0a:	1bab      	subs	r3, r5, r6
 8005b0c:	9305      	str	r3, [sp, #20]
 8005b0e:	42b5      	cmp	r5, r6
 8005b10:	d00b      	beq.n	8005b2a <_svfiprintf_r+0x72>
 8005b12:	0032      	movs	r2, r6
 8005b14:	0039      	movs	r1, r7
 8005b16:	9803      	ldr	r0, [sp, #12]
 8005b18:	f7ff ff6c 	bl	80059f4 <__ssputs_r>
 8005b1c:	3001      	adds	r0, #1
 8005b1e:	d100      	bne.n	8005b22 <_svfiprintf_r+0x6a>
 8005b20:	e0af      	b.n	8005c82 <_svfiprintf_r+0x1ca>
 8005b22:	6963      	ldr	r3, [r4, #20]
 8005b24:	9a05      	ldr	r2, [sp, #20]
 8005b26:	189b      	adds	r3, r3, r2
 8005b28:	6163      	str	r3, [r4, #20]
 8005b2a:	782b      	ldrb	r3, [r5, #0]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d100      	bne.n	8005b32 <_svfiprintf_r+0x7a>
 8005b30:	e0a7      	b.n	8005c82 <_svfiprintf_r+0x1ca>
 8005b32:	2201      	movs	r2, #1
 8005b34:	2300      	movs	r3, #0
 8005b36:	4252      	negs	r2, r2
 8005b38:	6062      	str	r2, [r4, #4]
 8005b3a:	a904      	add	r1, sp, #16
 8005b3c:	3254      	adds	r2, #84	; 0x54
 8005b3e:	1852      	adds	r2, r2, r1
 8005b40:	1c6e      	adds	r6, r5, #1
 8005b42:	6023      	str	r3, [r4, #0]
 8005b44:	60e3      	str	r3, [r4, #12]
 8005b46:	60a3      	str	r3, [r4, #8]
 8005b48:	7013      	strb	r3, [r2, #0]
 8005b4a:	65a3      	str	r3, [r4, #88]	; 0x58
 8005b4c:	4b55      	ldr	r3, [pc, #340]	; (8005ca4 <_svfiprintf_r+0x1ec>)
 8005b4e:	2205      	movs	r2, #5
 8005b50:	0018      	movs	r0, r3
 8005b52:	7831      	ldrb	r1, [r6, #0]
 8005b54:	9305      	str	r3, [sp, #20]
 8005b56:	f000 fa55 	bl	8006004 <memchr>
 8005b5a:	1c75      	adds	r5, r6, #1
 8005b5c:	2800      	cmp	r0, #0
 8005b5e:	d11f      	bne.n	8005ba0 <_svfiprintf_r+0xe8>
 8005b60:	6822      	ldr	r2, [r4, #0]
 8005b62:	06d3      	lsls	r3, r2, #27
 8005b64:	d504      	bpl.n	8005b70 <_svfiprintf_r+0xb8>
 8005b66:	2353      	movs	r3, #83	; 0x53
 8005b68:	a904      	add	r1, sp, #16
 8005b6a:	185b      	adds	r3, r3, r1
 8005b6c:	2120      	movs	r1, #32
 8005b6e:	7019      	strb	r1, [r3, #0]
 8005b70:	0713      	lsls	r3, r2, #28
 8005b72:	d504      	bpl.n	8005b7e <_svfiprintf_r+0xc6>
 8005b74:	2353      	movs	r3, #83	; 0x53
 8005b76:	a904      	add	r1, sp, #16
 8005b78:	185b      	adds	r3, r3, r1
 8005b7a:	212b      	movs	r1, #43	; 0x2b
 8005b7c:	7019      	strb	r1, [r3, #0]
 8005b7e:	7833      	ldrb	r3, [r6, #0]
 8005b80:	2b2a      	cmp	r3, #42	; 0x2a
 8005b82:	d016      	beq.n	8005bb2 <_svfiprintf_r+0xfa>
 8005b84:	0035      	movs	r5, r6
 8005b86:	2100      	movs	r1, #0
 8005b88:	200a      	movs	r0, #10
 8005b8a:	68e3      	ldr	r3, [r4, #12]
 8005b8c:	782a      	ldrb	r2, [r5, #0]
 8005b8e:	1c6e      	adds	r6, r5, #1
 8005b90:	3a30      	subs	r2, #48	; 0x30
 8005b92:	2a09      	cmp	r2, #9
 8005b94:	d94e      	bls.n	8005c34 <_svfiprintf_r+0x17c>
 8005b96:	2900      	cmp	r1, #0
 8005b98:	d111      	bne.n	8005bbe <_svfiprintf_r+0x106>
 8005b9a:	e017      	b.n	8005bcc <_svfiprintf_r+0x114>
 8005b9c:	3501      	adds	r5, #1
 8005b9e:	e7af      	b.n	8005b00 <_svfiprintf_r+0x48>
 8005ba0:	9b05      	ldr	r3, [sp, #20]
 8005ba2:	6822      	ldr	r2, [r4, #0]
 8005ba4:	1ac0      	subs	r0, r0, r3
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	4083      	lsls	r3, r0
 8005baa:	4313      	orrs	r3, r2
 8005bac:	002e      	movs	r6, r5
 8005bae:	6023      	str	r3, [r4, #0]
 8005bb0:	e7cc      	b.n	8005b4c <_svfiprintf_r+0x94>
 8005bb2:	9b07      	ldr	r3, [sp, #28]
 8005bb4:	1d19      	adds	r1, r3, #4
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	9107      	str	r1, [sp, #28]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	db01      	blt.n	8005bc2 <_svfiprintf_r+0x10a>
 8005bbe:	930b      	str	r3, [sp, #44]	; 0x2c
 8005bc0:	e004      	b.n	8005bcc <_svfiprintf_r+0x114>
 8005bc2:	425b      	negs	r3, r3
 8005bc4:	60e3      	str	r3, [r4, #12]
 8005bc6:	2302      	movs	r3, #2
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	6023      	str	r3, [r4, #0]
 8005bcc:	782b      	ldrb	r3, [r5, #0]
 8005bce:	2b2e      	cmp	r3, #46	; 0x2e
 8005bd0:	d10a      	bne.n	8005be8 <_svfiprintf_r+0x130>
 8005bd2:	786b      	ldrb	r3, [r5, #1]
 8005bd4:	2b2a      	cmp	r3, #42	; 0x2a
 8005bd6:	d135      	bne.n	8005c44 <_svfiprintf_r+0x18c>
 8005bd8:	9b07      	ldr	r3, [sp, #28]
 8005bda:	3502      	adds	r5, #2
 8005bdc:	1d1a      	adds	r2, r3, #4
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	9207      	str	r2, [sp, #28]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	db2b      	blt.n	8005c3e <_svfiprintf_r+0x186>
 8005be6:	9309      	str	r3, [sp, #36]	; 0x24
 8005be8:	4e2f      	ldr	r6, [pc, #188]	; (8005ca8 <_svfiprintf_r+0x1f0>)
 8005bea:	2203      	movs	r2, #3
 8005bec:	0030      	movs	r0, r6
 8005bee:	7829      	ldrb	r1, [r5, #0]
 8005bf0:	f000 fa08 	bl	8006004 <memchr>
 8005bf4:	2800      	cmp	r0, #0
 8005bf6:	d006      	beq.n	8005c06 <_svfiprintf_r+0x14e>
 8005bf8:	2340      	movs	r3, #64	; 0x40
 8005bfa:	1b80      	subs	r0, r0, r6
 8005bfc:	4083      	lsls	r3, r0
 8005bfe:	6822      	ldr	r2, [r4, #0]
 8005c00:	3501      	adds	r5, #1
 8005c02:	4313      	orrs	r3, r2
 8005c04:	6023      	str	r3, [r4, #0]
 8005c06:	7829      	ldrb	r1, [r5, #0]
 8005c08:	2206      	movs	r2, #6
 8005c0a:	4828      	ldr	r0, [pc, #160]	; (8005cac <_svfiprintf_r+0x1f4>)
 8005c0c:	1c6e      	adds	r6, r5, #1
 8005c0e:	7621      	strb	r1, [r4, #24]
 8005c10:	f000 f9f8 	bl	8006004 <memchr>
 8005c14:	2800      	cmp	r0, #0
 8005c16:	d03c      	beq.n	8005c92 <_svfiprintf_r+0x1da>
 8005c18:	4b25      	ldr	r3, [pc, #148]	; (8005cb0 <_svfiprintf_r+0x1f8>)
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d125      	bne.n	8005c6a <_svfiprintf_r+0x1b2>
 8005c1e:	2207      	movs	r2, #7
 8005c20:	9b07      	ldr	r3, [sp, #28]
 8005c22:	3307      	adds	r3, #7
 8005c24:	4393      	bics	r3, r2
 8005c26:	3308      	adds	r3, #8
 8005c28:	9307      	str	r3, [sp, #28]
 8005c2a:	6963      	ldr	r3, [r4, #20]
 8005c2c:	9a04      	ldr	r2, [sp, #16]
 8005c2e:	189b      	adds	r3, r3, r2
 8005c30:	6163      	str	r3, [r4, #20]
 8005c32:	e764      	b.n	8005afe <_svfiprintf_r+0x46>
 8005c34:	4343      	muls	r3, r0
 8005c36:	0035      	movs	r5, r6
 8005c38:	2101      	movs	r1, #1
 8005c3a:	189b      	adds	r3, r3, r2
 8005c3c:	e7a6      	b.n	8005b8c <_svfiprintf_r+0xd4>
 8005c3e:	2301      	movs	r3, #1
 8005c40:	425b      	negs	r3, r3
 8005c42:	e7d0      	b.n	8005be6 <_svfiprintf_r+0x12e>
 8005c44:	2300      	movs	r3, #0
 8005c46:	200a      	movs	r0, #10
 8005c48:	001a      	movs	r2, r3
 8005c4a:	3501      	adds	r5, #1
 8005c4c:	6063      	str	r3, [r4, #4]
 8005c4e:	7829      	ldrb	r1, [r5, #0]
 8005c50:	1c6e      	adds	r6, r5, #1
 8005c52:	3930      	subs	r1, #48	; 0x30
 8005c54:	2909      	cmp	r1, #9
 8005c56:	d903      	bls.n	8005c60 <_svfiprintf_r+0x1a8>
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d0c5      	beq.n	8005be8 <_svfiprintf_r+0x130>
 8005c5c:	9209      	str	r2, [sp, #36]	; 0x24
 8005c5e:	e7c3      	b.n	8005be8 <_svfiprintf_r+0x130>
 8005c60:	4342      	muls	r2, r0
 8005c62:	0035      	movs	r5, r6
 8005c64:	2301      	movs	r3, #1
 8005c66:	1852      	adds	r2, r2, r1
 8005c68:	e7f1      	b.n	8005c4e <_svfiprintf_r+0x196>
 8005c6a:	aa07      	add	r2, sp, #28
 8005c6c:	9200      	str	r2, [sp, #0]
 8005c6e:	0021      	movs	r1, r4
 8005c70:	003a      	movs	r2, r7
 8005c72:	4b10      	ldr	r3, [pc, #64]	; (8005cb4 <_svfiprintf_r+0x1fc>)
 8005c74:	9803      	ldr	r0, [sp, #12]
 8005c76:	e000      	b.n	8005c7a <_svfiprintf_r+0x1c2>
 8005c78:	bf00      	nop
 8005c7a:	9004      	str	r0, [sp, #16]
 8005c7c:	9b04      	ldr	r3, [sp, #16]
 8005c7e:	3301      	adds	r3, #1
 8005c80:	d1d3      	bne.n	8005c2a <_svfiprintf_r+0x172>
 8005c82:	89bb      	ldrh	r3, [r7, #12]
 8005c84:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005c86:	065b      	lsls	r3, r3, #25
 8005c88:	d400      	bmi.n	8005c8c <_svfiprintf_r+0x1d4>
 8005c8a:	e72c      	b.n	8005ae6 <_svfiprintf_r+0x2e>
 8005c8c:	2001      	movs	r0, #1
 8005c8e:	4240      	negs	r0, r0
 8005c90:	e729      	b.n	8005ae6 <_svfiprintf_r+0x2e>
 8005c92:	aa07      	add	r2, sp, #28
 8005c94:	9200      	str	r2, [sp, #0]
 8005c96:	0021      	movs	r1, r4
 8005c98:	003a      	movs	r2, r7
 8005c9a:	4b06      	ldr	r3, [pc, #24]	; (8005cb4 <_svfiprintf_r+0x1fc>)
 8005c9c:	9803      	ldr	r0, [sp, #12]
 8005c9e:	f000 f87b 	bl	8005d98 <_printf_i>
 8005ca2:	e7ea      	b.n	8005c7a <_svfiprintf_r+0x1c2>
 8005ca4:	08007b1d 	.word	0x08007b1d
 8005ca8:	08007b23 	.word	0x08007b23
 8005cac:	08007b27 	.word	0x08007b27
 8005cb0:	00000000 	.word	0x00000000
 8005cb4:	080059f5 	.word	0x080059f5

08005cb8 <_printf_common>:
 8005cb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005cba:	0016      	movs	r6, r2
 8005cbc:	9301      	str	r3, [sp, #4]
 8005cbe:	688a      	ldr	r2, [r1, #8]
 8005cc0:	690b      	ldr	r3, [r1, #16]
 8005cc2:	000c      	movs	r4, r1
 8005cc4:	9000      	str	r0, [sp, #0]
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	da00      	bge.n	8005ccc <_printf_common+0x14>
 8005cca:	0013      	movs	r3, r2
 8005ccc:	0022      	movs	r2, r4
 8005cce:	6033      	str	r3, [r6, #0]
 8005cd0:	3243      	adds	r2, #67	; 0x43
 8005cd2:	7812      	ldrb	r2, [r2, #0]
 8005cd4:	2a00      	cmp	r2, #0
 8005cd6:	d001      	beq.n	8005cdc <_printf_common+0x24>
 8005cd8:	3301      	adds	r3, #1
 8005cda:	6033      	str	r3, [r6, #0]
 8005cdc:	6823      	ldr	r3, [r4, #0]
 8005cde:	069b      	lsls	r3, r3, #26
 8005ce0:	d502      	bpl.n	8005ce8 <_printf_common+0x30>
 8005ce2:	6833      	ldr	r3, [r6, #0]
 8005ce4:	3302      	adds	r3, #2
 8005ce6:	6033      	str	r3, [r6, #0]
 8005ce8:	6822      	ldr	r2, [r4, #0]
 8005cea:	2306      	movs	r3, #6
 8005cec:	0015      	movs	r5, r2
 8005cee:	401d      	ands	r5, r3
 8005cf0:	421a      	tst	r2, r3
 8005cf2:	d027      	beq.n	8005d44 <_printf_common+0x8c>
 8005cf4:	0023      	movs	r3, r4
 8005cf6:	3343      	adds	r3, #67	; 0x43
 8005cf8:	781b      	ldrb	r3, [r3, #0]
 8005cfa:	1e5a      	subs	r2, r3, #1
 8005cfc:	4193      	sbcs	r3, r2
 8005cfe:	6822      	ldr	r2, [r4, #0]
 8005d00:	0692      	lsls	r2, r2, #26
 8005d02:	d430      	bmi.n	8005d66 <_printf_common+0xae>
 8005d04:	0022      	movs	r2, r4
 8005d06:	9901      	ldr	r1, [sp, #4]
 8005d08:	9800      	ldr	r0, [sp, #0]
 8005d0a:	9d08      	ldr	r5, [sp, #32]
 8005d0c:	3243      	adds	r2, #67	; 0x43
 8005d0e:	47a8      	blx	r5
 8005d10:	3001      	adds	r0, #1
 8005d12:	d025      	beq.n	8005d60 <_printf_common+0xa8>
 8005d14:	2206      	movs	r2, #6
 8005d16:	6823      	ldr	r3, [r4, #0]
 8005d18:	2500      	movs	r5, #0
 8005d1a:	4013      	ands	r3, r2
 8005d1c:	2b04      	cmp	r3, #4
 8005d1e:	d105      	bne.n	8005d2c <_printf_common+0x74>
 8005d20:	6833      	ldr	r3, [r6, #0]
 8005d22:	68e5      	ldr	r5, [r4, #12]
 8005d24:	1aed      	subs	r5, r5, r3
 8005d26:	43eb      	mvns	r3, r5
 8005d28:	17db      	asrs	r3, r3, #31
 8005d2a:	401d      	ands	r5, r3
 8005d2c:	68a3      	ldr	r3, [r4, #8]
 8005d2e:	6922      	ldr	r2, [r4, #16]
 8005d30:	4293      	cmp	r3, r2
 8005d32:	dd01      	ble.n	8005d38 <_printf_common+0x80>
 8005d34:	1a9b      	subs	r3, r3, r2
 8005d36:	18ed      	adds	r5, r5, r3
 8005d38:	2600      	movs	r6, #0
 8005d3a:	42b5      	cmp	r5, r6
 8005d3c:	d120      	bne.n	8005d80 <_printf_common+0xc8>
 8005d3e:	2000      	movs	r0, #0
 8005d40:	e010      	b.n	8005d64 <_printf_common+0xac>
 8005d42:	3501      	adds	r5, #1
 8005d44:	68e3      	ldr	r3, [r4, #12]
 8005d46:	6832      	ldr	r2, [r6, #0]
 8005d48:	1a9b      	subs	r3, r3, r2
 8005d4a:	42ab      	cmp	r3, r5
 8005d4c:	ddd2      	ble.n	8005cf4 <_printf_common+0x3c>
 8005d4e:	0022      	movs	r2, r4
 8005d50:	2301      	movs	r3, #1
 8005d52:	9901      	ldr	r1, [sp, #4]
 8005d54:	9800      	ldr	r0, [sp, #0]
 8005d56:	9f08      	ldr	r7, [sp, #32]
 8005d58:	3219      	adds	r2, #25
 8005d5a:	47b8      	blx	r7
 8005d5c:	3001      	adds	r0, #1
 8005d5e:	d1f0      	bne.n	8005d42 <_printf_common+0x8a>
 8005d60:	2001      	movs	r0, #1
 8005d62:	4240      	negs	r0, r0
 8005d64:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005d66:	2030      	movs	r0, #48	; 0x30
 8005d68:	18e1      	adds	r1, r4, r3
 8005d6a:	3143      	adds	r1, #67	; 0x43
 8005d6c:	7008      	strb	r0, [r1, #0]
 8005d6e:	0021      	movs	r1, r4
 8005d70:	1c5a      	adds	r2, r3, #1
 8005d72:	3145      	adds	r1, #69	; 0x45
 8005d74:	7809      	ldrb	r1, [r1, #0]
 8005d76:	18a2      	adds	r2, r4, r2
 8005d78:	3243      	adds	r2, #67	; 0x43
 8005d7a:	3302      	adds	r3, #2
 8005d7c:	7011      	strb	r1, [r2, #0]
 8005d7e:	e7c1      	b.n	8005d04 <_printf_common+0x4c>
 8005d80:	0022      	movs	r2, r4
 8005d82:	2301      	movs	r3, #1
 8005d84:	9901      	ldr	r1, [sp, #4]
 8005d86:	9800      	ldr	r0, [sp, #0]
 8005d88:	9f08      	ldr	r7, [sp, #32]
 8005d8a:	321a      	adds	r2, #26
 8005d8c:	47b8      	blx	r7
 8005d8e:	3001      	adds	r0, #1
 8005d90:	d0e6      	beq.n	8005d60 <_printf_common+0xa8>
 8005d92:	3601      	adds	r6, #1
 8005d94:	e7d1      	b.n	8005d3a <_printf_common+0x82>
	...

08005d98 <_printf_i>:
 8005d98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d9a:	b08b      	sub	sp, #44	; 0x2c
 8005d9c:	9206      	str	r2, [sp, #24]
 8005d9e:	000a      	movs	r2, r1
 8005da0:	3243      	adds	r2, #67	; 0x43
 8005da2:	9307      	str	r3, [sp, #28]
 8005da4:	9005      	str	r0, [sp, #20]
 8005da6:	9204      	str	r2, [sp, #16]
 8005da8:	7e0a      	ldrb	r2, [r1, #24]
 8005daa:	000c      	movs	r4, r1
 8005dac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005dae:	2a78      	cmp	r2, #120	; 0x78
 8005db0:	d809      	bhi.n	8005dc6 <_printf_i+0x2e>
 8005db2:	2a62      	cmp	r2, #98	; 0x62
 8005db4:	d80b      	bhi.n	8005dce <_printf_i+0x36>
 8005db6:	2a00      	cmp	r2, #0
 8005db8:	d100      	bne.n	8005dbc <_printf_i+0x24>
 8005dba:	e0be      	b.n	8005f3a <_printf_i+0x1a2>
 8005dbc:	497c      	ldr	r1, [pc, #496]	; (8005fb0 <_printf_i+0x218>)
 8005dbe:	9103      	str	r1, [sp, #12]
 8005dc0:	2a58      	cmp	r2, #88	; 0x58
 8005dc2:	d100      	bne.n	8005dc6 <_printf_i+0x2e>
 8005dc4:	e093      	b.n	8005eee <_printf_i+0x156>
 8005dc6:	0026      	movs	r6, r4
 8005dc8:	3642      	adds	r6, #66	; 0x42
 8005dca:	7032      	strb	r2, [r6, #0]
 8005dcc:	e022      	b.n	8005e14 <_printf_i+0x7c>
 8005dce:	0010      	movs	r0, r2
 8005dd0:	3863      	subs	r0, #99	; 0x63
 8005dd2:	2815      	cmp	r0, #21
 8005dd4:	d8f7      	bhi.n	8005dc6 <_printf_i+0x2e>
 8005dd6:	f7fa f99d 	bl	8000114 <__gnu_thumb1_case_shi>
 8005dda:	0016      	.short	0x0016
 8005ddc:	fff6001f 	.word	0xfff6001f
 8005de0:	fff6fff6 	.word	0xfff6fff6
 8005de4:	001ffff6 	.word	0x001ffff6
 8005de8:	fff6fff6 	.word	0xfff6fff6
 8005dec:	fff6fff6 	.word	0xfff6fff6
 8005df0:	003600a3 	.word	0x003600a3
 8005df4:	fff60083 	.word	0xfff60083
 8005df8:	00b4fff6 	.word	0x00b4fff6
 8005dfc:	0036fff6 	.word	0x0036fff6
 8005e00:	fff6fff6 	.word	0xfff6fff6
 8005e04:	0087      	.short	0x0087
 8005e06:	0026      	movs	r6, r4
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	3642      	adds	r6, #66	; 0x42
 8005e0c:	1d11      	adds	r1, r2, #4
 8005e0e:	6019      	str	r1, [r3, #0]
 8005e10:	6813      	ldr	r3, [r2, #0]
 8005e12:	7033      	strb	r3, [r6, #0]
 8005e14:	2301      	movs	r3, #1
 8005e16:	e0a2      	b.n	8005f5e <_printf_i+0x1c6>
 8005e18:	6818      	ldr	r0, [r3, #0]
 8005e1a:	6809      	ldr	r1, [r1, #0]
 8005e1c:	1d02      	adds	r2, r0, #4
 8005e1e:	060d      	lsls	r5, r1, #24
 8005e20:	d50b      	bpl.n	8005e3a <_printf_i+0xa2>
 8005e22:	6805      	ldr	r5, [r0, #0]
 8005e24:	601a      	str	r2, [r3, #0]
 8005e26:	2d00      	cmp	r5, #0
 8005e28:	da03      	bge.n	8005e32 <_printf_i+0x9a>
 8005e2a:	232d      	movs	r3, #45	; 0x2d
 8005e2c:	9a04      	ldr	r2, [sp, #16]
 8005e2e:	426d      	negs	r5, r5
 8005e30:	7013      	strb	r3, [r2, #0]
 8005e32:	4b5f      	ldr	r3, [pc, #380]	; (8005fb0 <_printf_i+0x218>)
 8005e34:	270a      	movs	r7, #10
 8005e36:	9303      	str	r3, [sp, #12]
 8005e38:	e01b      	b.n	8005e72 <_printf_i+0xda>
 8005e3a:	6805      	ldr	r5, [r0, #0]
 8005e3c:	601a      	str	r2, [r3, #0]
 8005e3e:	0649      	lsls	r1, r1, #25
 8005e40:	d5f1      	bpl.n	8005e26 <_printf_i+0x8e>
 8005e42:	b22d      	sxth	r5, r5
 8005e44:	e7ef      	b.n	8005e26 <_printf_i+0x8e>
 8005e46:	680d      	ldr	r5, [r1, #0]
 8005e48:	6819      	ldr	r1, [r3, #0]
 8005e4a:	1d08      	adds	r0, r1, #4
 8005e4c:	6018      	str	r0, [r3, #0]
 8005e4e:	062e      	lsls	r6, r5, #24
 8005e50:	d501      	bpl.n	8005e56 <_printf_i+0xbe>
 8005e52:	680d      	ldr	r5, [r1, #0]
 8005e54:	e003      	b.n	8005e5e <_printf_i+0xc6>
 8005e56:	066d      	lsls	r5, r5, #25
 8005e58:	d5fb      	bpl.n	8005e52 <_printf_i+0xba>
 8005e5a:	680d      	ldr	r5, [r1, #0]
 8005e5c:	b2ad      	uxth	r5, r5
 8005e5e:	4b54      	ldr	r3, [pc, #336]	; (8005fb0 <_printf_i+0x218>)
 8005e60:	2708      	movs	r7, #8
 8005e62:	9303      	str	r3, [sp, #12]
 8005e64:	2a6f      	cmp	r2, #111	; 0x6f
 8005e66:	d000      	beq.n	8005e6a <_printf_i+0xd2>
 8005e68:	3702      	adds	r7, #2
 8005e6a:	0023      	movs	r3, r4
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	3343      	adds	r3, #67	; 0x43
 8005e70:	701a      	strb	r2, [r3, #0]
 8005e72:	6863      	ldr	r3, [r4, #4]
 8005e74:	60a3      	str	r3, [r4, #8]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	db03      	blt.n	8005e82 <_printf_i+0xea>
 8005e7a:	2104      	movs	r1, #4
 8005e7c:	6822      	ldr	r2, [r4, #0]
 8005e7e:	438a      	bics	r2, r1
 8005e80:	6022      	str	r2, [r4, #0]
 8005e82:	2d00      	cmp	r5, #0
 8005e84:	d102      	bne.n	8005e8c <_printf_i+0xf4>
 8005e86:	9e04      	ldr	r6, [sp, #16]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d00c      	beq.n	8005ea6 <_printf_i+0x10e>
 8005e8c:	9e04      	ldr	r6, [sp, #16]
 8005e8e:	0028      	movs	r0, r5
 8005e90:	0039      	movs	r1, r7
 8005e92:	f7fa f9cf 	bl	8000234 <__aeabi_uidivmod>
 8005e96:	9b03      	ldr	r3, [sp, #12]
 8005e98:	3e01      	subs	r6, #1
 8005e9a:	5c5b      	ldrb	r3, [r3, r1]
 8005e9c:	7033      	strb	r3, [r6, #0]
 8005e9e:	002b      	movs	r3, r5
 8005ea0:	0005      	movs	r5, r0
 8005ea2:	429f      	cmp	r7, r3
 8005ea4:	d9f3      	bls.n	8005e8e <_printf_i+0xf6>
 8005ea6:	2f08      	cmp	r7, #8
 8005ea8:	d109      	bne.n	8005ebe <_printf_i+0x126>
 8005eaa:	6823      	ldr	r3, [r4, #0]
 8005eac:	07db      	lsls	r3, r3, #31
 8005eae:	d506      	bpl.n	8005ebe <_printf_i+0x126>
 8005eb0:	6862      	ldr	r2, [r4, #4]
 8005eb2:	6923      	ldr	r3, [r4, #16]
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	dc02      	bgt.n	8005ebe <_printf_i+0x126>
 8005eb8:	2330      	movs	r3, #48	; 0x30
 8005eba:	3e01      	subs	r6, #1
 8005ebc:	7033      	strb	r3, [r6, #0]
 8005ebe:	9b04      	ldr	r3, [sp, #16]
 8005ec0:	1b9b      	subs	r3, r3, r6
 8005ec2:	6123      	str	r3, [r4, #16]
 8005ec4:	9b07      	ldr	r3, [sp, #28]
 8005ec6:	0021      	movs	r1, r4
 8005ec8:	9300      	str	r3, [sp, #0]
 8005eca:	9805      	ldr	r0, [sp, #20]
 8005ecc:	9b06      	ldr	r3, [sp, #24]
 8005ece:	aa09      	add	r2, sp, #36	; 0x24
 8005ed0:	f7ff fef2 	bl	8005cb8 <_printf_common>
 8005ed4:	3001      	adds	r0, #1
 8005ed6:	d147      	bne.n	8005f68 <_printf_i+0x1d0>
 8005ed8:	2001      	movs	r0, #1
 8005eda:	4240      	negs	r0, r0
 8005edc:	b00b      	add	sp, #44	; 0x2c
 8005ede:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ee0:	2220      	movs	r2, #32
 8005ee2:	6809      	ldr	r1, [r1, #0]
 8005ee4:	430a      	orrs	r2, r1
 8005ee6:	6022      	str	r2, [r4, #0]
 8005ee8:	2278      	movs	r2, #120	; 0x78
 8005eea:	4932      	ldr	r1, [pc, #200]	; (8005fb4 <_printf_i+0x21c>)
 8005eec:	9103      	str	r1, [sp, #12]
 8005eee:	0021      	movs	r1, r4
 8005ef0:	3145      	adds	r1, #69	; 0x45
 8005ef2:	700a      	strb	r2, [r1, #0]
 8005ef4:	6819      	ldr	r1, [r3, #0]
 8005ef6:	6822      	ldr	r2, [r4, #0]
 8005ef8:	c920      	ldmia	r1!, {r5}
 8005efa:	0610      	lsls	r0, r2, #24
 8005efc:	d402      	bmi.n	8005f04 <_printf_i+0x16c>
 8005efe:	0650      	lsls	r0, r2, #25
 8005f00:	d500      	bpl.n	8005f04 <_printf_i+0x16c>
 8005f02:	b2ad      	uxth	r5, r5
 8005f04:	6019      	str	r1, [r3, #0]
 8005f06:	07d3      	lsls	r3, r2, #31
 8005f08:	d502      	bpl.n	8005f10 <_printf_i+0x178>
 8005f0a:	2320      	movs	r3, #32
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	6023      	str	r3, [r4, #0]
 8005f10:	2710      	movs	r7, #16
 8005f12:	2d00      	cmp	r5, #0
 8005f14:	d1a9      	bne.n	8005e6a <_printf_i+0xd2>
 8005f16:	2220      	movs	r2, #32
 8005f18:	6823      	ldr	r3, [r4, #0]
 8005f1a:	4393      	bics	r3, r2
 8005f1c:	6023      	str	r3, [r4, #0]
 8005f1e:	e7a4      	b.n	8005e6a <_printf_i+0xd2>
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	680d      	ldr	r5, [r1, #0]
 8005f24:	1d10      	adds	r0, r2, #4
 8005f26:	6949      	ldr	r1, [r1, #20]
 8005f28:	6018      	str	r0, [r3, #0]
 8005f2a:	6813      	ldr	r3, [r2, #0]
 8005f2c:	062e      	lsls	r6, r5, #24
 8005f2e:	d501      	bpl.n	8005f34 <_printf_i+0x19c>
 8005f30:	6019      	str	r1, [r3, #0]
 8005f32:	e002      	b.n	8005f3a <_printf_i+0x1a2>
 8005f34:	066d      	lsls	r5, r5, #25
 8005f36:	d5fb      	bpl.n	8005f30 <_printf_i+0x198>
 8005f38:	8019      	strh	r1, [r3, #0]
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	9e04      	ldr	r6, [sp, #16]
 8005f3e:	6123      	str	r3, [r4, #16]
 8005f40:	e7c0      	b.n	8005ec4 <_printf_i+0x12c>
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	1d11      	adds	r1, r2, #4
 8005f46:	6019      	str	r1, [r3, #0]
 8005f48:	6816      	ldr	r6, [r2, #0]
 8005f4a:	2100      	movs	r1, #0
 8005f4c:	0030      	movs	r0, r6
 8005f4e:	6862      	ldr	r2, [r4, #4]
 8005f50:	f000 f858 	bl	8006004 <memchr>
 8005f54:	2800      	cmp	r0, #0
 8005f56:	d001      	beq.n	8005f5c <_printf_i+0x1c4>
 8005f58:	1b80      	subs	r0, r0, r6
 8005f5a:	6060      	str	r0, [r4, #4]
 8005f5c:	6863      	ldr	r3, [r4, #4]
 8005f5e:	6123      	str	r3, [r4, #16]
 8005f60:	2300      	movs	r3, #0
 8005f62:	9a04      	ldr	r2, [sp, #16]
 8005f64:	7013      	strb	r3, [r2, #0]
 8005f66:	e7ad      	b.n	8005ec4 <_printf_i+0x12c>
 8005f68:	0032      	movs	r2, r6
 8005f6a:	6923      	ldr	r3, [r4, #16]
 8005f6c:	9906      	ldr	r1, [sp, #24]
 8005f6e:	9805      	ldr	r0, [sp, #20]
 8005f70:	9d07      	ldr	r5, [sp, #28]
 8005f72:	47a8      	blx	r5
 8005f74:	3001      	adds	r0, #1
 8005f76:	d0af      	beq.n	8005ed8 <_printf_i+0x140>
 8005f78:	6823      	ldr	r3, [r4, #0]
 8005f7a:	079b      	lsls	r3, r3, #30
 8005f7c:	d415      	bmi.n	8005faa <_printf_i+0x212>
 8005f7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f80:	68e0      	ldr	r0, [r4, #12]
 8005f82:	4298      	cmp	r0, r3
 8005f84:	daaa      	bge.n	8005edc <_printf_i+0x144>
 8005f86:	0018      	movs	r0, r3
 8005f88:	e7a8      	b.n	8005edc <_printf_i+0x144>
 8005f8a:	0022      	movs	r2, r4
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	9906      	ldr	r1, [sp, #24]
 8005f90:	9805      	ldr	r0, [sp, #20]
 8005f92:	9e07      	ldr	r6, [sp, #28]
 8005f94:	3219      	adds	r2, #25
 8005f96:	47b0      	blx	r6
 8005f98:	3001      	adds	r0, #1
 8005f9a:	d09d      	beq.n	8005ed8 <_printf_i+0x140>
 8005f9c:	3501      	adds	r5, #1
 8005f9e:	68e3      	ldr	r3, [r4, #12]
 8005fa0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005fa2:	1a9b      	subs	r3, r3, r2
 8005fa4:	42ab      	cmp	r3, r5
 8005fa6:	dcf0      	bgt.n	8005f8a <_printf_i+0x1f2>
 8005fa8:	e7e9      	b.n	8005f7e <_printf_i+0x1e6>
 8005faa:	2500      	movs	r5, #0
 8005fac:	e7f7      	b.n	8005f9e <_printf_i+0x206>
 8005fae:	46c0      	nop			; (mov r8, r8)
 8005fb0:	08007b2e 	.word	0x08007b2e
 8005fb4:	08007b3f 	.word	0x08007b3f

08005fb8 <memmove>:
 8005fb8:	b510      	push	{r4, lr}
 8005fba:	4288      	cmp	r0, r1
 8005fbc:	d902      	bls.n	8005fc4 <memmove+0xc>
 8005fbe:	188b      	adds	r3, r1, r2
 8005fc0:	4298      	cmp	r0, r3
 8005fc2:	d303      	bcc.n	8005fcc <memmove+0x14>
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	e007      	b.n	8005fd8 <memmove+0x20>
 8005fc8:	5c8b      	ldrb	r3, [r1, r2]
 8005fca:	5483      	strb	r3, [r0, r2]
 8005fcc:	3a01      	subs	r2, #1
 8005fce:	d2fb      	bcs.n	8005fc8 <memmove+0x10>
 8005fd0:	bd10      	pop	{r4, pc}
 8005fd2:	5ccc      	ldrb	r4, [r1, r3]
 8005fd4:	54c4      	strb	r4, [r0, r3]
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	d1fa      	bne.n	8005fd2 <memmove+0x1a>
 8005fdc:	e7f8      	b.n	8005fd0 <memmove+0x18>
	...

08005fe0 <_sbrk_r>:
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	b570      	push	{r4, r5, r6, lr}
 8005fe4:	4d06      	ldr	r5, [pc, #24]	; (8006000 <_sbrk_r+0x20>)
 8005fe6:	0004      	movs	r4, r0
 8005fe8:	0008      	movs	r0, r1
 8005fea:	602b      	str	r3, [r5, #0]
 8005fec:	f7fb f816 	bl	800101c <_sbrk>
 8005ff0:	1c43      	adds	r3, r0, #1
 8005ff2:	d103      	bne.n	8005ffc <_sbrk_r+0x1c>
 8005ff4:	682b      	ldr	r3, [r5, #0]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d000      	beq.n	8005ffc <_sbrk_r+0x1c>
 8005ffa:	6023      	str	r3, [r4, #0]
 8005ffc:	bd70      	pop	{r4, r5, r6, pc}
 8005ffe:	46c0      	nop			; (mov r8, r8)
 8006000:	200004d4 	.word	0x200004d4

08006004 <memchr>:
 8006004:	b2c9      	uxtb	r1, r1
 8006006:	1882      	adds	r2, r0, r2
 8006008:	4290      	cmp	r0, r2
 800600a:	d101      	bne.n	8006010 <memchr+0xc>
 800600c:	2000      	movs	r0, #0
 800600e:	4770      	bx	lr
 8006010:	7803      	ldrb	r3, [r0, #0]
 8006012:	428b      	cmp	r3, r1
 8006014:	d0fb      	beq.n	800600e <memchr+0xa>
 8006016:	3001      	adds	r0, #1
 8006018:	e7f6      	b.n	8006008 <memchr+0x4>

0800601a <_realloc_r>:
 800601a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800601c:	0007      	movs	r7, r0
 800601e:	000e      	movs	r6, r1
 8006020:	0014      	movs	r4, r2
 8006022:	2900      	cmp	r1, #0
 8006024:	d105      	bne.n	8006032 <_realloc_r+0x18>
 8006026:	0011      	movs	r1, r2
 8006028:	f7ff fc52 	bl	80058d0 <_malloc_r>
 800602c:	0005      	movs	r5, r0
 800602e:	0028      	movs	r0, r5
 8006030:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006032:	2a00      	cmp	r2, #0
 8006034:	d103      	bne.n	800603e <_realloc_r+0x24>
 8006036:	f7ff fbdf 	bl	80057f8 <_free_r>
 800603a:	0025      	movs	r5, r4
 800603c:	e7f7      	b.n	800602e <_realloc_r+0x14>
 800603e:	f000 f81b 	bl	8006078 <_malloc_usable_size_r>
 8006042:	9001      	str	r0, [sp, #4]
 8006044:	4284      	cmp	r4, r0
 8006046:	d803      	bhi.n	8006050 <_realloc_r+0x36>
 8006048:	0035      	movs	r5, r6
 800604a:	0843      	lsrs	r3, r0, #1
 800604c:	42a3      	cmp	r3, r4
 800604e:	d3ee      	bcc.n	800602e <_realloc_r+0x14>
 8006050:	0021      	movs	r1, r4
 8006052:	0038      	movs	r0, r7
 8006054:	f7ff fc3c 	bl	80058d0 <_malloc_r>
 8006058:	1e05      	subs	r5, r0, #0
 800605a:	d0e8      	beq.n	800602e <_realloc_r+0x14>
 800605c:	9b01      	ldr	r3, [sp, #4]
 800605e:	0022      	movs	r2, r4
 8006060:	429c      	cmp	r4, r3
 8006062:	d900      	bls.n	8006066 <_realloc_r+0x4c>
 8006064:	001a      	movs	r2, r3
 8006066:	0031      	movs	r1, r6
 8006068:	0028      	movs	r0, r5
 800606a:	f7ff fbbb 	bl	80057e4 <memcpy>
 800606e:	0031      	movs	r1, r6
 8006070:	0038      	movs	r0, r7
 8006072:	f7ff fbc1 	bl	80057f8 <_free_r>
 8006076:	e7da      	b.n	800602e <_realloc_r+0x14>

08006078 <_malloc_usable_size_r>:
 8006078:	1f0b      	subs	r3, r1, #4
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	1f18      	subs	r0, r3, #4
 800607e:	2b00      	cmp	r3, #0
 8006080:	da01      	bge.n	8006086 <_malloc_usable_size_r+0xe>
 8006082:	580b      	ldr	r3, [r1, r0]
 8006084:	18c0      	adds	r0, r0, r3
 8006086:	4770      	bx	lr

08006088 <_init>:
 8006088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800608a:	46c0      	nop			; (mov r8, r8)
 800608c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800608e:	bc08      	pop	{r3}
 8006090:	469e      	mov	lr, r3
 8006092:	4770      	bx	lr

08006094 <_fini>:
 8006094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006096:	46c0      	nop			; (mov r8, r8)
 8006098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800609a:	bc08      	pop	{r3}
 800609c:	469e      	mov	lr, r3
 800609e:	4770      	bx	lr
